# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VolumeArgs', 'Volume']

@pulumi.input_type
class VolumeArgs:
    def __init__(__self__, *,
                 subregion_name: pulumi.Input[_builtins.str],
                 iops: Optional[pulumi.Input[_builtins.int]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]]] = None,
                 termination_snapshot_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['VolumeTimeoutsArgs']] = None,
                 volume_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Volume resource.
        :param pulumi.Input[_builtins.str] subregion_name: The Subregion in which you want to create the volume.
        :param pulumi.Input[_builtins.int] iops: The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        :param pulumi.Input[_builtins.int] size: The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshot_id` unspecified).
        :param pulumi.Input[_builtins.str] snapshot_id: The ID of the snapshot from which you want to create the volume.
        :param pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[_builtins.str] termination_snapshot_name: Whether you want to create a snapshot before the volume deletion.
        :param pulumi.Input[_builtins.str] volume_type: The type of volume you want to create (`io1` \\| `gp2` \\| `standard`). If not specified, a `standard` volume is created.<br />
               For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
        """
        pulumi.set(__self__, "subregion_name", subregion_name)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if termination_snapshot_name is not None:
            pulumi.set(__self__, "termination_snapshot_name", termination_snapshot_name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> pulumi.Input[_builtins.str]:
        """
        The Subregion in which you want to create the volume.
        """
        return pulumi.get(self, "subregion_name")

    @subregion_name.setter
    def subregion_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subregion_name", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshot_id` unspecified).
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the snapshot from which you want to create the volume.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="terminationSnapshotName")
    def termination_snapshot_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether you want to create a snapshot before the volume deletion.
        """
        return pulumi.get(self, "termination_snapshot_name")

    @termination_snapshot_name.setter
    def termination_snapshot_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "termination_snapshot_name", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['VolumeTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['VolumeTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of volume you want to create (`io1` \\| `gp2` \\| `standard`). If not specified, a `standard` volume is created.<br />
        For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
        """
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_type", value)


@pulumi.input_type
class _VolumeState:
    def __init__(__self__, *,
                 creation_date: Optional[pulumi.Input[_builtins.str]] = None,
                 iops: Optional[pulumi.Input[_builtins.int]] = None,
                 linked_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeLinkedVolumeArgs']]]] = None,
                 request_id: Optional[pulumi.Input[_builtins.str]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 subregion_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]]] = None,
                 termination_snapshot_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['VolumeTimeoutsArgs']] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Volume resources.
        :param pulumi.Input[_builtins.str] creation_date: The date and time (UTC) at which the volume was created.
        :param pulumi.Input[_builtins.int] iops: The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        :param pulumi.Input[Sequence[pulumi.Input['VolumeLinkedVolumeArgs']]] linked_volumes: Information about your volume attachment.
        :param pulumi.Input[_builtins.int] size: The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshot_id` unspecified).
        :param pulumi.Input[_builtins.str] snapshot_id: The ID of the snapshot from which you want to create the volume.
        :param pulumi.Input[_builtins.str] state: The state of the volume (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).
        :param pulumi.Input[_builtins.str] subregion_name: The Subregion in which you want to create the volume.
        :param pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[_builtins.str] termination_snapshot_name: Whether you want to create a snapshot before the volume deletion.
        :param pulumi.Input[_builtins.str] volume_id: The ID of the volume.
        :param pulumi.Input[_builtins.str] volume_type: The type of volume you want to create (`io1` \\| `gp2` \\| `standard`). If not specified, a `standard` volume is created.<br />
               For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
        """
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if linked_volumes is not None:
            pulumi.set(__self__, "linked_volumes", linked_volumes)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subregion_name is not None:
            pulumi.set(__self__, "subregion_name", subregion_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if termination_snapshot_name is not None:
            pulumi.set(__self__, "termination_snapshot_name", termination_snapshot_name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time (UTC) at which the volume was created.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creation_date", value)

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "iops", value)

    @_builtins.property
    @pulumi.getter(name="linkedVolumes")
    def linked_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VolumeLinkedVolumeArgs']]]]:
        """
        Information about your volume attachment.
        """
        return pulumi.get(self, "linked_volumes")

    @linked_volumes.setter
    def linked_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeLinkedVolumeArgs']]]]):
        pulumi.set(self, "linked_volumes", value)

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_id", value)

    @_builtins.property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshot_id` unspecified).
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "size", value)

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the snapshot from which you want to create the volume.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The state of the volume (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Subregion in which you want to create the volume.
        """
        return pulumi.get(self, "subregion_name")

    @subregion_name.setter
    def subregion_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subregion_name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VolumeTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="terminationSnapshotName")
    def termination_snapshot_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Whether you want to create a snapshot before the volume deletion.
        """
        return pulumi.get(self, "termination_snapshot_name")

    @termination_snapshot_name.setter
    def termination_snapshot_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "termination_snapshot_name", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['VolumeTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['VolumeTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the volume.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of volume you want to create (`io1` \\| `gp2` \\| `standard`). If not specified, a `standard` volume is created.<br />
        For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
        """
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_type", value)


@pulumi.type_token("outscale:index/volume:Volume")
class Volume(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 iops: Optional[pulumi.Input[_builtins.int]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subregion_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumeTagArgs', 'VolumeTagArgsDict']]]]] = None,
                 termination_snapshot_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['VolumeTimeoutsArgs', 'VolumeTimeoutsArgsDict']]] = None,
                 volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a volume.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Volumes.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-volume).

        ## Example Usage

        ### Creating an io1 volume

        ```python
        import pulumi
        import pulumi_outscale as outscale

        volume01 = outscale.Volume("volume01",
            subregion_name=f"{region}a",
            size=10,
            iops=100,
            volume_type="io1")
        ```

        ### Creating a snapshot before volume deletion

        ```python
        import pulumi
        import pulumi_outscale as outscale

        volume01 = outscale.Volume("volume01",
            termination_snapshot_name="deleting_volume_snap",
            subregion_name=f"{region}a",
            size=40)
        ```

        ## Import

        A volume can be imported using its ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/volume:Volume ImportedVolume vol-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.int] iops: The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        :param pulumi.Input[_builtins.int] size: The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshot_id` unspecified).
        :param pulumi.Input[_builtins.str] snapshot_id: The ID of the snapshot from which you want to create the volume.
        :param pulumi.Input[_builtins.str] subregion_name: The Subregion in which you want to create the volume.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VolumeTagArgs', 'VolumeTagArgsDict']]]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[_builtins.str] termination_snapshot_name: Whether you want to create a snapshot before the volume deletion.
        :param pulumi.Input[_builtins.str] volume_type: The type of volume you want to create (`io1` \\| `gp2` \\| `standard`). If not specified, a `standard` volume is created.<br />
               For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VolumeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a volume.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Volumes.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-volume).

        ## Example Usage

        ### Creating an io1 volume

        ```python
        import pulumi
        import pulumi_outscale as outscale

        volume01 = outscale.Volume("volume01",
            subregion_name=f"{region}a",
            size=10,
            iops=100,
            volume_type="io1")
        ```

        ### Creating a snapshot before volume deletion

        ```python
        import pulumi
        import pulumi_outscale as outscale

        volume01 = outscale.Volume("volume01",
            termination_snapshot_name="deleting_volume_snap",
            subregion_name=f"{region}a",
            size=40)
        ```

        ## Import

        A volume can be imported using its ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/volume:Volume ImportedVolume vol-12345678
        ```

        :param str resource_name: The name of the resource.
        :param VolumeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VolumeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 iops: Optional[pulumi.Input[_builtins.int]] = None,
                 size: Optional[pulumi.Input[_builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subregion_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumeTagArgs', 'VolumeTagArgsDict']]]]] = None,
                 termination_snapshot_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['VolumeTimeoutsArgs', 'VolumeTimeoutsArgsDict']]] = None,
                 volume_type: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VolumeArgs.__new__(VolumeArgs)

            __props__.__dict__["iops"] = iops
            __props__.__dict__["size"] = size
            __props__.__dict__["snapshot_id"] = snapshot_id
            if subregion_name is None and not opts.urn:
                raise TypeError("Missing required property 'subregion_name'")
            __props__.__dict__["subregion_name"] = subregion_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["termination_snapshot_name"] = termination_snapshot_name
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["volume_type"] = volume_type
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["linked_volumes"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["volume_id"] = None
        super(Volume, __self__).__init__(
            'outscale:index/volume:Volume',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creation_date: Optional[pulumi.Input[_builtins.str]] = None,
            iops: Optional[pulumi.Input[_builtins.int]] = None,
            linked_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumeLinkedVolumeArgs', 'VolumeLinkedVolumeArgsDict']]]]] = None,
            request_id: Optional[pulumi.Input[_builtins.str]] = None,
            size: Optional[pulumi.Input[_builtins.int]] = None,
            snapshot_id: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            subregion_name: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VolumeTagArgs', 'VolumeTagArgsDict']]]]] = None,
            termination_snapshot_name: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['VolumeTimeoutsArgs', 'VolumeTimeoutsArgsDict']]] = None,
            volume_id: Optional[pulumi.Input[_builtins.str]] = None,
            volume_type: Optional[pulumi.Input[_builtins.str]] = None) -> 'Volume':
        """
        Get an existing Volume resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] creation_date: The date and time (UTC) at which the volume was created.
        :param pulumi.Input[_builtins.int] iops: The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VolumeLinkedVolumeArgs', 'VolumeLinkedVolumeArgsDict']]]] linked_volumes: Information about your volume attachment.
        :param pulumi.Input[_builtins.int] size: The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshot_id` unspecified).
        :param pulumi.Input[_builtins.str] snapshot_id: The ID of the snapshot from which you want to create the volume.
        :param pulumi.Input[_builtins.str] state: The state of the volume (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).
        :param pulumi.Input[_builtins.str] subregion_name: The Subregion in which you want to create the volume.
        :param pulumi.Input[Sequence[pulumi.Input[Union['VolumeTagArgs', 'VolumeTagArgsDict']]]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[_builtins.str] termination_snapshot_name: Whether you want to create a snapshot before the volume deletion.
        :param pulumi.Input[_builtins.str] volume_id: The ID of the volume.
        :param pulumi.Input[_builtins.str] volume_type: The type of volume you want to create (`io1` \\| `gp2` \\| `standard`). If not specified, a `standard` volume is created.<br />
               For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VolumeState.__new__(_VolumeState)

        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["iops"] = iops
        __props__.__dict__["linked_volumes"] = linked_volumes
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["size"] = size
        __props__.__dict__["snapshot_id"] = snapshot_id
        __props__.__dict__["state"] = state
        __props__.__dict__["subregion_name"] = subregion_name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["termination_snapshot_name"] = termination_snapshot_name
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["volume_id"] = volume_id
        __props__.__dict__["volume_type"] = volume_type
        return Volume(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time (UTC) at which the volume was created.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> pulumi.Output[_builtins.int]:
        """
        The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="linkedVolumes")
    def linked_volumes(self) -> pulumi.Output[Sequence['outputs.VolumeLinkedVolume']]:
        """
        Information about your volume attachment.
        """
        return pulumi.get(self, "linked_volumes")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter
    def size(self) -> pulumi.Output[_builtins.int]:
        """
        The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshot_id` unspecified).
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the snapshot from which you want to create the volume.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The state of the volume (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> pulumi.Output[_builtins.str]:
        """
        The Subregion in which you want to create the volume.
        """
        return pulumi.get(self, "subregion_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.VolumeTag']]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="terminationSnapshotName")
    def termination_snapshot_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Whether you want to create a snapshot before the volume deletion.
        """
        return pulumi.get(self, "termination_snapshot_name")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.VolumeTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the volume.
        """
        return pulumi.get(self, "volume_id")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of volume you want to create (`io1` \\| `gp2` \\| `standard`). If not specified, a `standard` volume is created.<br />
        For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
        """
        return pulumi.get(self, "volume_type")

