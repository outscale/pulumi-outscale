# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ApiAccessRuleArgs', 'ApiAccessRule']

@pulumi.input_type
class ApiAccessRuleArgs:
    def __init__(__self__, *,
                 ca_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ApiAccessRule resource.
        """
        if ca_ids is not None:
            pulumi.set(__self__, "ca_ids", ca_ids)
        if cns is not None:
            pulumi.set(__self__, "cns", cns)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)

    @property
    @pulumi.getter(name="caIds")
    def ca_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ca_ids")

    @ca_ids.setter
    def ca_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ca_ids", value)

    @property
    @pulumi.getter
    def cns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cns")

    @cns.setter
    def cns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cns", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_ranges", value)


@pulumi.input_type
class _ApiAccessRuleState:
    def __init__(__self__, *,
                 api_access_rule_id: Optional[pulumi.Input[str]] = None,
                 ca_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 request_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApiAccessRule resources.
        """
        if api_access_rule_id is not None:
            pulumi.set(__self__, "api_access_rule_id", api_access_rule_id)
        if ca_ids is not None:
            pulumi.set(__self__, "ca_ids", ca_ids)
        if cns is not None:
            pulumi.set(__self__, "cns", cns)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)

    @property
    @pulumi.getter(name="apiAccessRuleId")
    def api_access_rule_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_access_rule_id")

    @api_access_rule_id.setter
    def api_access_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_access_rule_id", value)

    @property
    @pulumi.getter(name="caIds")
    def ca_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ca_ids")

    @ca_ids.setter
    def ca_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ca_ids", value)

    @property
    @pulumi.getter
    def cns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cns")

    @cns.setter
    def cns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cns", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)


class ApiAccessRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a ApiAccessRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ApiAccessRuleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ApiAccessRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ApiAccessRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApiAccessRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApiAccessRuleArgs.__new__(ApiAccessRuleArgs)

            __props__.__dict__["ca_ids"] = ca_ids
            __props__.__dict__["cns"] = cns
            __props__.__dict__["description"] = description
            __props__.__dict__["ip_ranges"] = ip_ranges
            __props__.__dict__["api_access_rule_id"] = None
            __props__.__dict__["request_id"] = None
        super(ApiAccessRule, __self__).__init__(
            'outscale:index/apiAccessRule:ApiAccessRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_access_rule_id: Optional[pulumi.Input[str]] = None,
            ca_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            cns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            request_id: Optional[pulumi.Input[str]] = None) -> 'ApiAccessRule':
        """
        Get an existing ApiAccessRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApiAccessRuleState.__new__(_ApiAccessRuleState)

        __props__.__dict__["api_access_rule_id"] = api_access_rule_id
        __props__.__dict__["ca_ids"] = ca_ids
        __props__.__dict__["cns"] = cns
        __props__.__dict__["description"] = description
        __props__.__dict__["ip_ranges"] = ip_ranges
        __props__.__dict__["request_id"] = request_id
        return ApiAccessRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiAccessRuleId")
    def api_access_rule_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "api_access_rule_id")

    @property
    @pulumi.getter(name="caIds")
    def ca_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "ca_ids")

    @property
    @pulumi.getter
    def cns(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "cns")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

