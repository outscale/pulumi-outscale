# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['CaArgs', 'Ca']

@pulumi.input_type
class CaArgs:
    def __init__(__self__, *,
                 ca_pem: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Ca resource.
        """
        if ca_pem is not None:
            pulumi.set(__self__, "ca_pem", ca_pem)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="caPem")
    def ca_pem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_pem")

    @ca_pem.setter
    def ca_pem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_pem", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _CaState:
    def __init__(__self__, *,
                 ca_fingerprint: Optional[pulumi.Input[str]] = None,
                 ca_id: Optional[pulumi.Input[str]] = None,
                 ca_pem: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Ca resources.
        """
        if ca_fingerprint is not None:
            pulumi.set(__self__, "ca_fingerprint", ca_fingerprint)
        if ca_id is not None:
            pulumi.set(__self__, "ca_id", ca_id)
        if ca_pem is not None:
            pulumi.set(__self__, "ca_pem", ca_pem)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)

    @property
    @pulumi.getter(name="caFingerprint")
    def ca_fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_fingerprint")

    @ca_fingerprint.setter
    def ca_fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_fingerprint", value)

    @property
    @pulumi.getter(name="caId")
    def ca_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_id")

    @ca_id.setter
    def ca_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_id", value)

    @property
    @pulumi.getter(name="caPem")
    def ca_pem(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_pem")

    @ca_pem.setter
    def ca_pem(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_pem", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)


class Ca(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_pem: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Ca resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CaArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Ca resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_pem: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CaArgs.__new__(CaArgs)

            __props__.__dict__["ca_pem"] = ca_pem
            __props__.__dict__["description"] = description
            __props__.__dict__["ca_fingerprint"] = None
            __props__.__dict__["ca_id"] = None
            __props__.__dict__["request_id"] = None
        super(Ca, __self__).__init__(
            'outscale:index/ca:Ca',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ca_fingerprint: Optional[pulumi.Input[str]] = None,
            ca_id: Optional[pulumi.Input[str]] = None,
            ca_pem: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            request_id: Optional[pulumi.Input[str]] = None) -> 'Ca':
        """
        Get an existing Ca resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CaState.__new__(_CaState)

        __props__.__dict__["ca_fingerprint"] = ca_fingerprint
        __props__.__dict__["ca_id"] = ca_id
        __props__.__dict__["ca_pem"] = ca_pem
        __props__.__dict__["description"] = description
        __props__.__dict__["request_id"] = request_id
        return Ca(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="caFingerprint")
    def ca_fingerprint(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ca_fingerprint")

    @property
    @pulumi.getter(name="caId")
    def ca_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ca_id")

    @property
    @pulumi.getter(name="caPem")
    def ca_pem(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ca_pem")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

