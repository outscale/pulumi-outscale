# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPublicIpResult',
    'AwaitableGetPublicIpResult',
    'get_public_ip',
    'get_public_ip_output',
]

@pulumi.output_type
class GetPublicIpResult:
    """
    A collection of values returned by getPublicIp.
    """
    def __init__(__self__, filters=None, id=None, link_public_ip_id=None, nic_account_id=None, nic_id=None, private_ip=None, public_ip=None, public_ip_id=None, request_id=None, tags=None, vm_id=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if link_public_ip_id and not isinstance(link_public_ip_id, str):
            raise TypeError("Expected argument 'link_public_ip_id' to be a str")
        pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        if nic_account_id and not isinstance(nic_account_id, str):
            raise TypeError("Expected argument 'nic_account_id' to be a str")
        pulumi.set(__self__, "nic_account_id", nic_account_id)
        if nic_id and not isinstance(nic_id, str):
            raise TypeError("Expected argument 'nic_id' to be a str")
        pulumi.set(__self__, "nic_id", nic_id)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_id and not isinstance(public_ip_id, str):
            raise TypeError("Expected argument 'public_ip_id' to be a str")
        pulumi.set(__self__, "public_ip_id", public_ip_id)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if vm_id and not isinstance(vm_id, str):
            raise TypeError("Expected argument 'vm_id' to be a str")
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetPublicIpFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> str:
        return pulumi.get(self, "link_public_ip_id")

    @property
    @pulumi.getter(name="nicAccountId")
    def nic_account_id(self) -> str:
        return pulumi.get(self, "nic_account_id")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> str:
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> str:
        return pulumi.get(self, "public_ip_id")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetPublicIpTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")


class AwaitableGetPublicIpResult(GetPublicIpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPublicIpResult(
            filters=self.filters,
            id=self.id,
            link_public_ip_id=self.link_public_ip_id,
            nic_account_id=self.nic_account_id,
            nic_id=self.nic_id,
            private_ip=self.private_ip,
            public_ip=self.public_ip,
            public_ip_id=self.public_ip_id,
            request_id=self.request_id,
            tags=self.tags,
            vm_id=self.vm_id)


def get_public_ip(filters: Optional[Sequence[pulumi.InputType['GetPublicIpFilterArgs']]] = None,
                  public_ip: Optional[str] = None,
                  public_ip_id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPublicIpResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['publicIp'] = public_ip
    __args__['publicIpId'] = public_ip_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getPublicIp:getPublicIp', __args__, opts=opts, typ=GetPublicIpResult).value

    return AwaitableGetPublicIpResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        link_public_ip_id=pulumi.get(__ret__, 'link_public_ip_id'),
        nic_account_id=pulumi.get(__ret__, 'nic_account_id'),
        nic_id=pulumi.get(__ret__, 'nic_id'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        public_ip=pulumi.get(__ret__, 'public_ip'),
        public_ip_id=pulumi.get(__ret__, 'public_ip_id'),
        request_id=pulumi.get(__ret__, 'request_id'),
        tags=pulumi.get(__ret__, 'tags'),
        vm_id=pulumi.get(__ret__, 'vm_id'))


@_utilities.lift_output_func(get_public_ip)
def get_public_ip_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetPublicIpFilterArgs']]]]] = None,
                         public_ip: Optional[pulumi.Input[Optional[str]]] = None,
                         public_ip_id: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPublicIpResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
