# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'AccessKeyTimeouts',
    'ClientGatewayTag',
    'DhcpOptionTag',
    'FlexibleGpuTimeouts',
    'ImageBlockDeviceMapping',
    'ImageBlockDeviceMappingBsus',
    'ImageExportTaskOsuExport',
    'ImageExportTaskOsuExportOsuApiKey',
    'ImageExportTaskTag',
    'ImageLaunchPermissionPermissionAdditions',
    'ImageLaunchPermissionPermissionRemovals',
    'ImageLaunchPermissionPermissionsToLaunch',
    'ImagePermissionsToLaunch',
    'ImageStateComment',
    'ImageTag',
    'InternetServiceLinkTag',
    'InternetServiceLinkTimeouts',
    'InternetServiceTag',
    'InternetServiceTimeouts',
    'KeypairTag',
    'KeypairTimeouts',
    'LoadBalancerAccessLog',
    'LoadBalancerApplicationStickyCookiePolicy',
    'LoadBalancerAttributesAccessLog',
    'LoadBalancerAttributesApplicationStickyCookiePolicy',
    'LoadBalancerAttributesHealthCheck',
    'LoadBalancerAttributesListener',
    'LoadBalancerAttributesLoadBalancerStickyCookiePolicy',
    'LoadBalancerAttributesSourceSecurityGroup',
    'LoadBalancerAttributesTag',
    'LoadBalancerHealthCheck',
    'LoadBalancerListener',
    'LoadBalancerListenerRuleListener',
    'LoadBalancerListenerRuleListenerRule',
    'LoadBalancerLoadBalancerStickyCookiePolicy',
    'LoadBalancerPolicyAccessLog',
    'LoadBalancerPolicyApplicationStickyCookiePolicy',
    'LoadBalancerPolicyHealthCheck',
    'LoadBalancerPolicyListener',
    'LoadBalancerPolicyLoadBalancerStickyCookiePolicy',
    'LoadBalancerPolicySourceSecurityGroup',
    'LoadBalancerPolicyTag',
    'LoadBalancerSourceSecurityGroup',
    'LoadBalancerTag',
    'LoadBalancerVmsTimeouts',
    'MainRouteTableLinkTimeouts',
    'NatServicePublicIp',
    'NatServiceTag',
    'NetAccessPointTag',
    'NetAccessPointTimeouts',
    'NetAttributesTag',
    'NetAttributesTimeouts',
    'NetPeeringAcceptationAccepterNet',
    'NetPeeringAcceptationSourceNet',
    'NetPeeringAcceptationState',
    'NetPeeringAcceptationTag',
    'NetPeeringAcceptationTimeouts',
    'NetPeeringAccepterNet',
    'NetPeeringSourceNet',
    'NetPeeringState',
    'NetPeeringTag',
    'NetPeeringTimeouts',
    'NetTag',
    'NetTimeouts',
    'NicLinkNic',
    'NicLinkPublicIp',
    'NicPrivateIp',
    'NicPrivateIpLinkPublicIp',
    'NicSecurityGroup',
    'NicTag',
    'OutboundRuleRule',
    'OutboundRuleRuleSecurityGroupsMember',
    'PublicIpLinkTag',
    'PublicIpTag',
    'RouteTableLinkRouteTable',
    'RouteTableLinkTimeouts',
    'RouteTableRoute',
    'RouteTableRoutePropagatingVirtualGateway',
    'RouteTableTag',
    'RouteTableTimeouts',
    'RouteTimeouts',
    'SecurityGroupInboundRule',
    'SecurityGroupOutboundRule',
    'SecurityGroupRuleRule',
    'SecurityGroupRuleRuleSecurityGroupsMember',
    'SecurityGroupTag',
    'SnapshotAttributesPermissionsToCreateVolumeAdditions',
    'SnapshotAttributesPermissionsToCreateVolumeRemoval',
    'SnapshotExportTaskOsuExport',
    'SnapshotExportTaskOsuExportOsuApiKey',
    'SnapshotExportTaskTag',
    'SnapshotPermissionsToCreateVolume',
    'SnapshotTag',
    'SubnetTag',
    'SubnetTimeouts',
    'TagTag',
    'UserGroupPolicy',
    'UserGroupUser',
    'UserPolicy',
    'VirtualGatewayLinkNetToVirtualGatewayLink',
    'VirtualGatewayNetToVirtualGatewayLink',
    'VirtualGatewayTag',
    'VmActionsOnNextBoot',
    'VmBlockDeviceMapping',
    'VmBlockDeviceMappingBsu',
    'VmBlockDeviceMappingBsuTag',
    'VmBlockDeviceMappingsCreated',
    'VmBlockDeviceMappingsCreatedBsus',
    'VmBlockDeviceMappingsCreatedBsusTag',
    'VmNic',
    'VmNicLinkNic',
    'VmNicLinkPublicIp',
    'VmNicPrivateIp',
    'VmNicPrivateIpLinkPublicIp',
    'VmNicSecurityGroup',
    'VmPrimaryNic',
    'VmPrimaryNicLinkNic',
    'VmPrimaryNicLinkPublicIp',
    'VmPrimaryNicPrivateIp',
    'VmPrimaryNicPrivateIpLinkPublicIp',
    'VmPrimaryNicSecurityGroup',
    'VmSecurityGroup',
    'VmTag',
    'VolumeLinkTimeouts',
    'VolumeLinkedVolume',
    'VolumeTag',
    'VolumeTimeouts',
    'VpnConnectionRoute',
    'VpnConnectionTag',
    'VpnConnectionVgwTelemetry',
    'GetAccessKeyFilterResult',
    'GetAccessKeysAccessKeyResult',
    'GetAccessKeysFilterResult',
    'GetAccountsAccountResult',
    'GetApiAccessRuleFilterResult',
    'GetApiAccessRulesApiAccessRuleResult',
    'GetApiAccessRulesFilterResult',
    'GetCaFilterResult',
    'GetCasCaResult',
    'GetCasFilterResult',
    'GetClientGatewayFilterResult',
    'GetClientGatewayTagResult',
    'GetClientGatewaysClientGatewayResult',
    'GetClientGatewaysClientGatewayTagResult',
    'GetClientGatewaysFilterResult',
    'GetDhcpOptionFilterResult',
    'GetDhcpOptionTagResult',
    'GetDhcpOptionsDhcpOptionResult',
    'GetDhcpOptionsDhcpOptionTagResult',
    'GetDhcpOptionsFilterResult',
    'GetEntitiesLinkedToPolicyPolicyEntityResult',
    'GetEntitiesLinkedToPolicyPolicyEntityAccountResult',
    'GetEntitiesLinkedToPolicyPolicyEntityGroupResult',
    'GetEntitiesLinkedToPolicyPolicyEntityUserResult',
    'GetFlexibleGpuCatalogFilterResult',
    'GetFlexibleGpuCatalogFlexibleGpuCatalogResult',
    'GetFlexibleGpuFilterResult',
    'GetFlexibleGpusFilterResult',
    'GetFlexibleGpusFlexibleGpusResult',
    'GetImageBlockDeviceMappingResult',
    'GetImageBlockDeviceMappingBsusResult',
    'GetImageExportTaskFilterResult',
    'GetImageExportTaskOsuExportResult',
    'GetImageExportTaskTagResult',
    'GetImageExportTasksFilterResult',
    'GetImageExportTasksImageExportTaskResult',
    'GetImageExportTasksImageExportTaskOsuExportResult',
    'GetImageExportTasksImageExportTaskTagResult',
    'GetImageFilterResult',
    'GetImagePermissionsToLaunchResult',
    'GetImageStateCommentResult',
    'GetImageTagResult',
    'GetImagesFilterResult',
    'GetImagesImageResult',
    'GetImagesImageBlockDeviceMappingResult',
    'GetImagesImageBlockDeviceMappingBsusResult',
    'GetImagesImagePermissionsToLaunchResult',
    'GetImagesImageStateCommentResult',
    'GetImagesImageTagResult',
    'GetInternetServiceFilterResult',
    'GetInternetServiceTagResult',
    'GetInternetServicesFilterResult',
    'GetInternetServicesInternetServiceResult',
    'GetInternetServicesInternetServiceTagResult',
    'GetKeypairFilterResult',
    'GetKeypairTagResult',
    'GetKeypairsFilterResult',
    'GetKeypairsKeypairResult',
    'GetKeypairsKeypairTagResult',
    'GetLoadBalancerAccessLogResult',
    'GetLoadBalancerApplicationStickyCookiePolicyResult',
    'GetLoadBalancerFilterResult',
    'GetLoadBalancerHealthCheckResult',
    'GetLoadBalancerListenerResult',
    'GetLoadBalancerListenerRuleFilterResult',
    'GetLoadBalancerListenerRulesFilterResult',
    'GetLoadBalancerListenerRulesListenerRuleResult',
    'GetLoadBalancerLoadBalancerStickyCookiePolicyResult',
    'GetLoadBalancerSourceSecurityGroupResult',
    'GetLoadBalancerTagResult',
    'GetLoadBalancerTagsFilterResult',
    'GetLoadBalancerTagsTagResult',
    'GetLoadBalancerVmHealthBackendVmHealthResult',
    'GetLoadBalancerVmHealthFilterResult',
    'GetLoadBalancersFilterResult',
    'GetLoadBalancersLoadBalancerResult',
    'GetLoadBalancersLoadBalancerAccessLogResult',
    'GetLoadBalancersLoadBalancerApplicationStickyCookiePolicyResult',
    'GetLoadBalancersLoadBalancerBackendVmIdResult',
    'GetLoadBalancersLoadBalancerHealthCheckResult',
    'GetLoadBalancersLoadBalancerListenerResult',
    'GetLoadBalancersLoadBalancerLoadBalancerStickyCookiePolicyResult',
    'GetLoadBalancersLoadBalancerSourceSecurityGroupResult',
    'GetLoadBalancersLoadBalancerTagResult',
    'GetNatServiceFilterResult',
    'GetNatServicePublicIpResult',
    'GetNatServiceTagResult',
    'GetNatServicesFilterResult',
    'GetNatServicesNatServiceResult',
    'GetNatServicesNatServicePublicIpResult',
    'GetNatServicesNatServiceTagResult',
    'GetNetAccessPointFilterResult',
    'GetNetAccessPointServicesFilterResult',
    'GetNetAccessPointServicesServiceResult',
    'GetNetAccessPointTagResult',
    'GetNetAccessPointsFilterResult',
    'GetNetAccessPointsNetAccessPointResult',
    'GetNetAccessPointsNetAccessPointTagResult',
    'GetNetAttributesTagResult',
    'GetNetFilterResult',
    'GetNetPeeringAccepterNetResult',
    'GetNetPeeringFilterResult',
    'GetNetPeeringSourceNetResult',
    'GetNetPeeringStateResult',
    'GetNetPeeringTagResult',
    'GetNetPeeringsFilterResult',
    'GetNetPeeringsNetPeeringResult',
    'GetNetPeeringsNetPeeringAccepterNetResult',
    'GetNetPeeringsNetPeeringSourceNetResult',
    'GetNetPeeringsNetPeeringStateResult',
    'GetNetPeeringsNetPeeringTagResult',
    'GetNetTagResult',
    'GetNetsFilterResult',
    'GetNetsNetResult',
    'GetNetsNetTagResult',
    'GetNicFilterResult',
    'GetNicLinkNicResult',
    'GetNicLinkPublicIpResult',
    'GetNicPrivateIpResult',
    'GetNicPrivateIpLinkPublicIpResult',
    'GetNicSecurityGroupResult',
    'GetNicTagResult',
    'GetNicsFilterResult',
    'GetNicsNicResult',
    'GetNicsNicLinkNicResult',
    'GetNicsNicLinkPublicIpResult',
    'GetNicsNicPrivateIpResult',
    'GetNicsNicPrivateIpLinkPublicIpResult',
    'GetNicsNicSecurityGroupResult',
    'GetNicsNicTagResult',
    'GetPoliciesFilterResult',
    'GetPoliciesLinkedToUserGroupFilterResult',
    'GetPoliciesLinkedToUserGroupPolicyResult',
    'GetPoliciesLinkedToUserPolicyResult',
    'GetPoliciesPolicyResult',
    'GetProductTypeFilterResult',
    'GetProductTypesFilterResult',
    'GetProductTypesProductTypeResult',
    'GetPublicCatalogCatalogResult',
    'GetPublicCatalogCatalogEntryResult',
    'GetPublicIpFilterResult',
    'GetPublicIpTagResult',
    'GetPublicIpsFilterResult',
    'GetPublicIpsPublicIpResult',
    'GetPublicIpsPublicIpTagResult',
    'GetQuotaFilterResult',
    'GetQuotasFilterResult',
    'GetQuotasQuotaResult',
    'GetRegionsRegionResult',
    'GetRouteTableFilterResult',
    'GetRouteTableLinkRouteTableResult',
    'GetRouteTableRouteResult',
    'GetRouteTableRoutePropagatingVirtualGatewayResult',
    'GetRouteTableTagResult',
    'GetRouteTablesFilterResult',
    'GetRouteTablesRouteTableResult',
    'GetRouteTablesRouteTableLinkRouteTableResult',
    'GetRouteTablesRouteTableRouteResult',
    'GetRouteTablesRouteTableRoutePropagatingVirtualGatewayResult',
    'GetRouteTablesRouteTableTagResult',
    'GetSecurityGroupFilterResult',
    'GetSecurityGroupInboundRuleResult',
    'GetSecurityGroupInboundRuleSecurityGroupsMemberResult',
    'GetSecurityGroupOutboundRuleResult',
    'GetSecurityGroupOutboundRuleSecurityGroupsMemberResult',
    'GetSecurityGroupTagResult',
    'GetSecurityGroupsFilterResult',
    'GetSecurityGroupsSecurityGroupResult',
    'GetSecurityGroupsSecurityGroupInboundRuleResult',
    'GetSecurityGroupsSecurityGroupInboundRuleSecurityGroupsMemberResult',
    'GetSecurityGroupsSecurityGroupOutboundRuleResult',
    'GetSecurityGroupsSecurityGroupOutboundRuleSecurityGroupsMemberResult',
    'GetSecurityGroupsSecurityGroupTagResult',
    'GetServerCertificateFilterResult',
    'GetServerCertificatesFilterResult',
    'GetServerCertificatesServerCertificateResult',
    'GetSnapshotExportTaskFilterResult',
    'GetSnapshotExportTaskOsuExportResult',
    'GetSnapshotExportTaskTagResult',
    'GetSnapshotExportTasksFilterResult',
    'GetSnapshotExportTasksSnapshotExportTaskResult',
    'GetSnapshotExportTasksSnapshotExportTaskOsuExportResult',
    'GetSnapshotExportTasksSnapshotExportTaskTagResult',
    'GetSnapshotFilterResult',
    'GetSnapshotPermissionsToCreateVolumeResult',
    'GetSnapshotTagResult',
    'GetSnapshotsFilterResult',
    'GetSnapshotsSnapshotResult',
    'GetSnapshotsSnapshotPermissionsToCreateVolumeResult',
    'GetSnapshotsSnapshotTagResult',
    'GetSubnetFilterResult',
    'GetSubnetTagResult',
    'GetSubnetsFilterResult',
    'GetSubnetsSubnetResult',
    'GetSubnetsSubnetTagResult',
    'GetSubregionsFilterResult',
    'GetSubregionsSubregionResult',
    'GetTagFilterResult',
    'GetTagsFilterResult',
    'GetTagsTagResult',
    'GetUserFilterResult',
    'GetUserGroupUserResult',
    'GetUserGroupsFilterResult',
    'GetUserGroupsPerUserUserGroupResult',
    'GetUserGroupsUserGroupResult',
    'GetUsersFilterResult',
    'GetUsersUserResult',
    'GetVirtualGatewayFilterResult',
    'GetVirtualGatewayNetToVirtualGatewayLinkResult',
    'GetVirtualGatewayTagResult',
    'GetVirtualGatewaysFilterResult',
    'GetVirtualGatewaysVirtualGatewayResult',
    'GetVirtualGatewaysVirtualGatewayNetToVirtualGatewayLinkResult',
    'GetVirtualGatewaysVirtualGatewayTagResult',
    'GetVmActionsOnNextBootResult',
    'GetVmBlockDeviceMappingsCreatedResult',
    'GetVmBlockDeviceMappingsCreatedBsusResult',
    'GetVmBlockDeviceMappingsCreatedBsusTagResult',
    'GetVmFilterResult',
    'GetVmNicResult',
    'GetVmNicLinkNicResult',
    'GetVmNicLinkPublicIpResult',
    'GetVmNicPrivateIpResult',
    'GetVmNicPrivateIpLinkPublicIpResult',
    'GetVmNicSecurityGroupResult',
    'GetVmPrimaryNicResult',
    'GetVmPrimaryNicLinkNicResult',
    'GetVmPrimaryNicLinkPublicIpResult',
    'GetVmPrimaryNicPrivateIpResult',
    'GetVmPrimaryNicPrivateIpLinkPublicIpResult',
    'GetVmPrimaryNicSecurityGroupResult',
    'GetVmSecurityGroupResult',
    'GetVmStateFilterResult',
    'GetVmStateMaintenanceEventResult',
    'GetVmStatesFilterResult',
    'GetVmStatesVmStateResult',
    'GetVmStatesVmStateMaintenanceEventResult',
    'GetVmTagResult',
    'GetVmTypesFilterResult',
    'GetVmTypesVmTypeResult',
    'GetVmsFilterResult',
    'GetVmsVmResult',
    'GetVmsVmActionsOnNextBootResult',
    'GetVmsVmBlockDeviceMappingsCreatedResult',
    'GetVmsVmBlockDeviceMappingsCreatedBsusResult',
    'GetVmsVmBlockDeviceMappingsCreatedBsusTagResult',
    'GetVmsVmNicResult',
    'GetVmsVmNicLinkNicResult',
    'GetVmsVmNicLinkPublicIpResult',
    'GetVmsVmNicPrivateIpResult',
    'GetVmsVmNicPrivateIpLinkPublicIpResult',
    'GetVmsVmNicSecurityGroupResult',
    'GetVmsVmPrimaryNicResult',
    'GetVmsVmPrimaryNicLinkNicResult',
    'GetVmsVmPrimaryNicLinkPublicIpResult',
    'GetVmsVmPrimaryNicPrivateIpResult',
    'GetVmsVmPrimaryNicPrivateIpLinkPublicIpResult',
    'GetVmsVmPrimaryNicSecurityGroupResult',
    'GetVmsVmSecurityGroupResult',
    'GetVmsVmTagResult',
    'GetVolumeFilterResult',
    'GetVolumeLinkedVolumeResult',
    'GetVolumeTagResult',
    'GetVolumesFilterResult',
    'GetVolumesVolumeResult',
    'GetVolumesVolumeLinkedVolumeResult',
    'GetVolumesVolumeTagResult',
    'GetVpnConnectionFilterResult',
    'GetVpnConnectionRouteResult',
    'GetVpnConnectionTagResult',
    'GetVpnConnectionVgwTelemetryResult',
    'GetVpnConnectionsFilterResult',
    'GetVpnConnectionsVpnConnectionResult',
    'GetVpnConnectionsVpnConnectionRouteResult',
    'GetVpnConnectionsVpnConnectionTagResult',
    'GetVpnConnectionsVpnConnectionVgwTelemetryResult',
]

@pulumi.output_type
class AccessKeyTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class ClientGatewayTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class DhcpOptionTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class FlexibleGpuTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class ImageBlockDeviceMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceName":
            suggest = "device_name"
        elif key == "virtualDeviceName":
            suggest = "virtual_device_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageBlockDeviceMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageBlockDeviceMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageBlockDeviceMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bsus: Optional[Sequence['outputs.ImageBlockDeviceMappingBsus']] = None,
                 device_name: Optional[_builtins.str] = None,
                 virtual_device_name: Optional[_builtins.str] = None):
        """
        :param Sequence['ImageBlockDeviceMappingBsusArgs'] bsus: Information about the BSU volume to create.
        :param _builtins.str device_name: The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        :param _builtins.str virtual_device_name: The name of the virtual device (`ephemeralN`).
        """
        if bsus is not None:
            pulumi.set(__self__, "bsus", bsus)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if virtual_device_name is not None:
            pulumi.set(__self__, "virtual_device_name", virtual_device_name)

    @_builtins.property
    @pulumi.getter
    def bsus(self) -> Optional[Sequence['outputs.ImageBlockDeviceMappingBsus']]:
        """
        Information about the BSU volume to create.
        """
        return pulumi.get(self, "bsus")

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[_builtins.str]:
        """
        The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        """
        return pulumi.get(self, "device_name")

    @_builtins.property
    @pulumi.getter(name="virtualDeviceName")
    def virtual_device_name(self) -> Optional[_builtins.str]:
        """
        The name of the virtual device (`ephemeralN`).
        """
        return pulumi.get(self, "virtual_device_name")


@pulumi.output_type
class ImageBlockDeviceMappingBsus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "snapshotId":
            suggest = "snapshot_id"
        elif key == "volumeSize":
            suggest = "volume_size"
        elif key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageBlockDeviceMappingBsus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageBlockDeviceMappingBsus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageBlockDeviceMappingBsus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[_builtins.bool] = None,
                 iops: Optional[_builtins.int] = None,
                 snapshot_id: Optional[_builtins.str] = None,
                 volume_size: Optional[_builtins.int] = None,
                 volume_type: Optional[_builtins.str] = None):
        """
        :param _builtins.bool delete_on_vm_deletion: By default or if set to true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        :param _builtins.int iops: The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        :param _builtins.str snapshot_id: The ID of the snapshot used to create the volume.
        :param _builtins.int volume_size: The size of the volume, in gibibytes (GiB).<br />
               If you specify a snapshot ID, the volume size must be at least equal to the snapshot size.<br />
               If you specify a snapshot ID but no volume size, the volume is created with a size similar to the snapshot one.
        :param _builtins.str volume_type: The type of the volume (`standard` \\| `io1` \\| `gp2`). If not specified in the request, a `standard` volume is created.<br />
               For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
        """
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[_builtins.bool]:
        """
        By default or if set to true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[_builtins.int]:
        """
        The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[_builtins.str]:
        """
        The ID of the snapshot used to create the volume.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[_builtins.int]:
        """
        The size of the volume, in gibibytes (GiB).<br />
        If you specify a snapshot ID, the volume size must be at least equal to the snapshot size.<br />
        If you specify a snapshot ID but no volume size, the volume is created with a size similar to the snapshot one.
        """
        return pulumi.get(self, "volume_size")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[_builtins.str]:
        """
        The type of the volume (`standard` \\| `io1` \\| `gp2`). If not specified in the request, a `standard` volume is created.<br />
        For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class ImageExportTaskOsuExport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskImageFormat":
            suggest = "disk_image_format"
        elif key == "osuBucket":
            suggest = "osu_bucket"
        elif key == "osuApiKeys":
            suggest = "osu_api_keys"
        elif key == "osuManifestUrl":
            suggest = "osu_manifest_url"
        elif key == "osuPrefix":
            suggest = "osu_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageExportTaskOsuExport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageExportTaskOsuExport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageExportTaskOsuExport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_image_format: _builtins.str,
                 osu_bucket: _builtins.str,
                 osu_api_keys: Optional[Sequence['outputs.ImageExportTaskOsuExportOsuApiKey']] = None,
                 osu_manifest_url: Optional[_builtins.str] = None,
                 osu_prefix: Optional[_builtins.str] = None):
        """
        :param _builtins.str disk_image_format: The format of the export disk (`qcow2` \\| `raw`).
        :param _builtins.str osu_bucket: The name of the OOS bucket where you want to export the object.
        :param Sequence['ImageExportTaskOsuExportOsuApiKeyArgs'] osu_api_keys: Information about the OOS API key.
        :param _builtins.str osu_manifest_url: The URL of the manifest file.
        :param _builtins.str osu_prefix: The prefix for the key of the OOS object.
        """
        pulumi.set(__self__, "disk_image_format", disk_image_format)
        pulumi.set(__self__, "osu_bucket", osu_bucket)
        if osu_api_keys is not None:
            pulumi.set(__self__, "osu_api_keys", osu_api_keys)
        if osu_manifest_url is not None:
            pulumi.set(__self__, "osu_manifest_url", osu_manifest_url)
        if osu_prefix is not None:
            pulumi.set(__self__, "osu_prefix", osu_prefix)

    @_builtins.property
    @pulumi.getter(name="diskImageFormat")
    def disk_image_format(self) -> _builtins.str:
        """
        The format of the export disk (`qcow2` \\| `raw`).
        """
        return pulumi.get(self, "disk_image_format")

    @_builtins.property
    @pulumi.getter(name="osuBucket")
    def osu_bucket(self) -> _builtins.str:
        """
        The name of the OOS bucket where you want to export the object.
        """
        return pulumi.get(self, "osu_bucket")

    @_builtins.property
    @pulumi.getter(name="osuApiKeys")
    def osu_api_keys(self) -> Optional[Sequence['outputs.ImageExportTaskOsuExportOsuApiKey']]:
        """
        Information about the OOS API key.
        """
        return pulumi.get(self, "osu_api_keys")

    @_builtins.property
    @pulumi.getter(name="osuManifestUrl")
    def osu_manifest_url(self) -> Optional[_builtins.str]:
        """
        The URL of the manifest file.
        """
        return pulumi.get(self, "osu_manifest_url")

    @_builtins.property
    @pulumi.getter(name="osuPrefix")
    def osu_prefix(self) -> Optional[_builtins.str]:
        """
        The prefix for the key of the OOS object.
        """
        return pulumi.get(self, "osu_prefix")


@pulumi.output_type
class ImageExportTaskOsuExportOsuApiKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKeyId":
            suggest = "api_key_id"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageExportTaskOsuExportOsuApiKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageExportTaskOsuExportOsuApiKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageExportTaskOsuExportOsuApiKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key_id: _builtins.str,
                 secret_key: _builtins.str):
        """
        :param _builtins.str api_key_id: The API key of the OOS account that enables you to access the bucket.
        :param _builtins.str secret_key: The secret key of the OOS account that enables you to access the bucket.
        """
        pulumi.set(__self__, "api_key_id", api_key_id)
        pulumi.set(__self__, "secret_key", secret_key)

    @_builtins.property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> _builtins.str:
        """
        The API key of the OOS account that enables you to access the bucket.
        """
        return pulumi.get(self, "api_key_id")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> _builtins.str:
        """
        The secret key of the OOS account that enables you to access the bucket.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class ImageExportTaskTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ImageLaunchPermissionPermissionAdditions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountIds":
            suggest = "account_ids"
        elif key == "globalPermission":
            suggest = "global_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageLaunchPermissionPermissionAdditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageLaunchPermissionPermissionAdditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageLaunchPermissionPermissionAdditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_ids: Optional[Sequence[_builtins.str]] = None,
                 global_permission: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] account_ids: The account ID of one or more users to whom you want to give permissions.
        :param _builtins.str global_permission: If true, the resource is public. If false, the resource is private.
        """
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @_builtins.property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        The account ID of one or more users to whom you want to give permissions.
        """
        return pulumi.get(self, "account_ids")

    @_builtins.property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[_builtins.str]:
        """
        If true, the resource is public. If false, the resource is private.
        """
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class ImageLaunchPermissionPermissionRemovals(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountIds":
            suggest = "account_ids"
        elif key == "globalPermission":
            suggest = "global_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageLaunchPermissionPermissionRemovals. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageLaunchPermissionPermissionRemovals.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageLaunchPermissionPermissionRemovals.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_ids: Optional[Sequence[_builtins.str]] = None,
                 global_permission: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] account_ids: The account ID of one or more users from whom you want to remove permissions.
        :param _builtins.str global_permission: If true, the resource is public. If false, the resource is private.
        """
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @_builtins.property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        The account ID of one or more users from whom you want to remove permissions.
        """
        return pulumi.get(self, "account_ids")

    @_builtins.property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[_builtins.str]:
        """
        If true, the resource is public. If false, the resource is private.
        """
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class ImageLaunchPermissionPermissionsToLaunch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountIds":
            suggest = "account_ids"
        elif key == "globalPermission":
            suggest = "global_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageLaunchPermissionPermissionsToLaunch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageLaunchPermissionPermissionsToLaunch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageLaunchPermissionPermissionsToLaunch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_ids: Optional[Sequence[_builtins.str]] = None,
                 global_permission: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] account_ids: One or more account IDs that the permission is associated with.
        :param _builtins.str global_permission: A global permission for all accounts.<br />
               (Request) Set this parameter to true to make the resource public (if the parent parameter is `additions`) or to make the resource private (if the parent parameter is `removals`).<br />
               (Response) If true, the resource is public. If false, the resource is private.
        """
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @_builtins.property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        One or more account IDs that the permission is associated with.
        """
        return pulumi.get(self, "account_ids")

    @_builtins.property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[_builtins.str]:
        """
        A global permission for all accounts.<br />
        (Request) Set this parameter to true to make the resource public (if the parent parameter is `additions`) or to make the resource private (if the parent parameter is `removals`).<br />
        (Response) If true, the resource is public. If false, the resource is private.
        """
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class ImagePermissionsToLaunch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountIds":
            suggest = "account_ids"
        elif key == "globalPermission":
            suggest = "global_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImagePermissionsToLaunch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImagePermissionsToLaunch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImagePermissionsToLaunch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_ids: Optional[Sequence[_builtins.str]] = None,
                 global_permission: Optional[_builtins.bool] = None):
        """
        :param Sequence[_builtins.str] account_ids: One or more account IDs that the permission is associated with.
        :param _builtins.bool global_permission: A global permission for all accounts.<br />
               (Request) Set this parameter to true to make the resource public (if the parent parameter is `Additions`) or to make the resource private (if the parent parameter is `Removals`).<br />
               (Response) If true, the resource is public. If false, the resource is private.
        """
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @_builtins.property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        One or more account IDs that the permission is associated with.
        """
        return pulumi.get(self, "account_ids")

    @_builtins.property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[_builtins.bool]:
        """
        A global permission for all accounts.<br />
        (Request) Set this parameter to true to make the resource public (if the parent parameter is `Additions`) or to make the resource private (if the parent parameter is `Removals`).<br />
        (Response) If true, the resource is public. If false, the resource is private.
        """
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class ImageStateComment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stateCode":
            suggest = "state_code"
        elif key == "stateMessage":
            suggest = "state_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageStateComment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageStateComment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageStateComment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 state_code: Optional[_builtins.str] = None,
                 state_message: Optional[_builtins.str] = None):
        """
        :param _builtins.str state_code: The code of the change of state.
        :param _builtins.str state_message: A message explaining the change of state.
        """
        if state_code is not None:
            pulumi.set(__self__, "state_code", state_code)
        if state_message is not None:
            pulumi.set(__self__, "state_message", state_message)

    @_builtins.property
    @pulumi.getter(name="stateCode")
    def state_code(self) -> Optional[_builtins.str]:
        """
        The code of the change of state.
        """
        return pulumi.get(self, "state_code")

    @_builtins.property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> Optional[_builtins.str]:
        """
        A message explaining the change of state.
        """
        return pulumi.get(self, "state_message")


@pulumi.output_type
class ImageTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InternetServiceLinkTag(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InternetServiceLinkTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class InternetServiceTag(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InternetServiceTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class KeypairTag(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class KeypairTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class LoadBalancerAccessLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "osuBucketName":
            suggest = "osu_bucket_name"
        elif key == "osuBucketPrefix":
            suggest = "osu_bucket_prefix"
        elif key == "publicationInterval":
            suggest = "publication_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAccessLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAccessLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAccessLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[_builtins.bool] = None,
                 osu_bucket_name: Optional[_builtins.str] = None,
                 osu_bucket_prefix: Optional[_builtins.str] = None,
                 publication_interval: Optional[_builtins.int] = None):
        """
        :param _builtins.bool is_enabled: If true, access logs are enabled for your load balancer. If false, they are not. If you set this to true in your request, the `osu_bucket_name` parameter is required.
        :param _builtins.str osu_bucket_name: The name of the OOS bucket for the access logs.
        :param _builtins.str osu_bucket_prefix: The path to the folder of the access logs in your OOS bucket (by default, the `root` level of your bucket).
        :param _builtins.int publication_interval: The time interval for the publication of access logs in the OOS bucket, in minutes. This value can be either `5` or `60` (by default, `60`).
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if osu_bucket_name is not None:
            pulumi.set(__self__, "osu_bucket_name", osu_bucket_name)
        if osu_bucket_prefix is not None:
            pulumi.set(__self__, "osu_bucket_prefix", osu_bucket_prefix)
        if publication_interval is not None:
            pulumi.set(__self__, "publication_interval", publication_interval)

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[_builtins.bool]:
        """
        If true, access logs are enabled for your load balancer. If false, they are not. If you set this to true in your request, the `osu_bucket_name` parameter is required.
        """
        return pulumi.get(self, "is_enabled")

    @_builtins.property
    @pulumi.getter(name="osuBucketName")
    def osu_bucket_name(self) -> Optional[_builtins.str]:
        """
        The name of the OOS bucket for the access logs.
        """
        return pulumi.get(self, "osu_bucket_name")

    @_builtins.property
    @pulumi.getter(name="osuBucketPrefix")
    def osu_bucket_prefix(self) -> Optional[_builtins.str]:
        """
        The path to the folder of the access logs in your OOS bucket (by default, the `root` level of your bucket).
        """
        return pulumi.get(self, "osu_bucket_prefix")

    @_builtins.property
    @pulumi.getter(name="publicationInterval")
    def publication_interval(self) -> Optional[_builtins.int]:
        """
        The time interval for the publication of access logs in the OOS bucket, in minutes. This value can be either `5` or `60` (by default, `60`).
        """
        return pulumi.get(self, "publication_interval")


@pulumi.output_type
class LoadBalancerApplicationStickyCookiePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerApplicationStickyCookiePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerApplicationStickyCookiePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerApplicationStickyCookiePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cookie_name: Optional[_builtins.str] = None,
                 policy_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str cookie_name: The name of the application cookie used for stickiness.
        :param _builtins.str policy_name: The name of the stickiness policy.
        """
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[_builtins.str]:
        """
        The name of the application cookie used for stickiness.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        """
        The name of the stickiness policy.
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class LoadBalancerAttributesAccessLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "osuBucketName":
            suggest = "osu_bucket_name"
        elif key == "osuBucketPrefix":
            suggest = "osu_bucket_prefix"
        elif key == "publicationInterval":
            suggest = "publication_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAttributesAccessLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAttributesAccessLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAttributesAccessLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[_builtins.bool] = None,
                 osu_bucket_name: Optional[_builtins.str] = None,
                 osu_bucket_prefix: Optional[_builtins.str] = None,
                 publication_interval: Optional[_builtins.int] = None):
        """
        :param _builtins.bool is_enabled: If true, access logs are enabled for your load balancer. If false, they are not. If you set this to true in your request, the `osu_bucket_name` parameter is required.
        :param _builtins.str osu_bucket_name: The name of the OOS bucket for the access logs.
        :param _builtins.str osu_bucket_prefix: The path to the folder of the access logs in your OOS bucket (by default, the `root` level of your bucket).
        :param _builtins.int publication_interval: The time interval for the publication of access logs in the OOS bucket, in minutes. This value can be either `5` or `60` (by default, `60`).
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if osu_bucket_name is not None:
            pulumi.set(__self__, "osu_bucket_name", osu_bucket_name)
        if osu_bucket_prefix is not None:
            pulumi.set(__self__, "osu_bucket_prefix", osu_bucket_prefix)
        if publication_interval is not None:
            pulumi.set(__self__, "publication_interval", publication_interval)

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[_builtins.bool]:
        """
        If true, access logs are enabled for your load balancer. If false, they are not. If you set this to true in your request, the `osu_bucket_name` parameter is required.
        """
        return pulumi.get(self, "is_enabled")

    @_builtins.property
    @pulumi.getter(name="osuBucketName")
    def osu_bucket_name(self) -> Optional[_builtins.str]:
        """
        The name of the OOS bucket for the access logs.
        """
        return pulumi.get(self, "osu_bucket_name")

    @_builtins.property
    @pulumi.getter(name="osuBucketPrefix")
    def osu_bucket_prefix(self) -> Optional[_builtins.str]:
        """
        The path to the folder of the access logs in your OOS bucket (by default, the `root` level of your bucket).
        """
        return pulumi.get(self, "osu_bucket_prefix")

    @_builtins.property
    @pulumi.getter(name="publicationInterval")
    def publication_interval(self) -> Optional[_builtins.int]:
        """
        The time interval for the publication of access logs in the OOS bucket, in minutes. This value can be either `5` or `60` (by default, `60`).
        """
        return pulumi.get(self, "publication_interval")


@pulumi.output_type
class LoadBalancerAttributesApplicationStickyCookiePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAttributesApplicationStickyCookiePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAttributesApplicationStickyCookiePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAttributesApplicationStickyCookiePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cookie_name: Optional[_builtins.str] = None,
                 policy_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str cookie_name: The name of the application cookie used for stickiness.
        :param _builtins.str policy_name: The name of the stickiness policy.
        """
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[_builtins.str]:
        """
        The name of the application cookie used for stickiness.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        """
        The name of the stickiness policy.
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class LoadBalancerAttributesHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkInterval":
            suggest = "check_interval"
        elif key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAttributesHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAttributesHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAttributesHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: _builtins.int,
                 protocol: _builtins.str,
                 check_interval: Optional[_builtins.int] = None,
                 healthy_threshold: Optional[_builtins.int] = None,
                 path: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None,
                 unhealthy_threshold: Optional[_builtins.int] = None):
        """
        :param _builtins.int port: The port number (between `1` and `65535`, both included).
        :param _builtins.str protocol: The protocol for the URL of the VM (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param _builtins.int check_interval: The number of seconds between two requests (between `5` and `600` both included).
        :param _builtins.int healthy_threshold: The number of consecutive successful requests before considering the VM as healthy (between `2` and `10` both included).
        :param _builtins.str path: If you use the HTTP or HTTPS protocols, the request URL path.
        :param _builtins.int timeout: The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
        :param _builtins.int unhealthy_threshold: The number of consecutive failed requests before considering the VM as unhealthy (between `2` and `10` both included).
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if check_interval is not None:
            pulumi.set(__self__, "check_interval", check_interval)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The port number (between `1` and `65535`, both included).
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol for the URL of the VM (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> Optional[_builtins.int]:
        """
        The number of seconds between two requests (between `5` and `600` both included).
        """
        return pulumi.get(self, "check_interval")

    @_builtins.property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[_builtins.int]:
        """
        The number of consecutive successful requests before considering the VM as healthy (between `2` and `10` both included).
        """
        return pulumi.get(self, "healthy_threshold")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        If you use the HTTP or HTTPS protocols, the request URL path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[_builtins.int]:
        """
        The number of consecutive failed requests before considering the VM as unhealthy (between `2` and `10` both included).
        """
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class LoadBalancerAttributesListener(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendPort":
            suggest = "backend_port"
        elif key == "backendProtocol":
            suggest = "backend_protocol"
        elif key == "loadBalancerPort":
            suggest = "load_balancer_port"
        elif key == "loadBalancerProtocol":
            suggest = "load_balancer_protocol"
        elif key == "policyNames":
            suggest = "policy_names"
        elif key == "serverCertificateId":
            suggest = "server_certificate_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAttributesListener. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAttributesListener.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAttributesListener.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_port: Optional[_builtins.int] = None,
                 backend_protocol: Optional[_builtins.str] = None,
                 load_balancer_port: Optional[_builtins.int] = None,
                 load_balancer_protocol: Optional[_builtins.str] = None,
                 policy_names: Optional[Sequence[_builtins.str]] = None,
                 server_certificate_id: Optional[_builtins.str] = None):
        """
        :param _builtins.int backend_port: The port on which the backend VM is listening (between `1` and `65535`, both included).
        :param _builtins.str backend_protocol: The protocol for routing traffic to backend VMs (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param _builtins.int load_balancer_port: The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
        :param _builtins.str load_balancer_protocol: The routing protocol (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param Sequence[_builtins.str] policy_names: The name of the policy you want to enable for the listener.
        :param _builtins.str server_certificate_id: The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
        """
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if backend_protocol is not None:
            pulumi.set(__self__, "backend_protocol", backend_protocol)
        if load_balancer_port is not None:
            pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        if load_balancer_protocol is not None:
            pulumi.set(__self__, "load_balancer_protocol", load_balancer_protocol)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if server_certificate_id is not None:
            pulumi.set(__self__, "server_certificate_id", server_certificate_id)

    @_builtins.property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[_builtins.int]:
        """
        The port on which the backend VM is listening (between `1` and `65535`, both included).
        """
        return pulumi.get(self, "backend_port")

    @_builtins.property
    @pulumi.getter(name="backendProtocol")
    def backend_protocol(self) -> Optional[_builtins.str]:
        """
        The protocol for routing traffic to backend VMs (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "backend_protocol")

    @_builtins.property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> Optional[_builtins.int]:
        """
        The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
        """
        return pulumi.get(self, "load_balancer_port")

    @_builtins.property
    @pulumi.getter(name="loadBalancerProtocol")
    def load_balancer_protocol(self) -> Optional[_builtins.str]:
        """
        The routing protocol (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "load_balancer_protocol")

    @_builtins.property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        The name of the policy you want to enable for the listener.
        """
        return pulumi.get(self, "policy_names")

    @_builtins.property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> Optional[_builtins.str]:
        """
        The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
        """
        return pulumi.get(self, "server_certificate_id")


@pulumi.output_type
class LoadBalancerAttributesLoadBalancerStickyCookiePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAttributesLoadBalancerStickyCookiePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAttributesLoadBalancerStickyCookiePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAttributesLoadBalancerStickyCookiePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str policy_name: The name of the stickiness policy.
        """
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        """
        The name of the stickiness policy.
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class LoadBalancerAttributesSourceSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupAccountId":
            suggest = "security_group_account_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAttributesSourceSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAttributesSourceSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAttributesSourceSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_account_id: Optional[_builtins.str] = None,
                 security_group_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str security_group_account_id: The account ID of the owner of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        if security_group_account_id is not None:
            pulumi.set(__self__, "security_group_account_id", security_group_account_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupAccountId")
    def security_group_account_id(self) -> Optional[_builtins.str]:
        """
        The account ID of the owner of the security group.
        """
        return pulumi.get(self, "security_group_account_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[_builtins.str]:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class LoadBalancerAttributesTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LoadBalancerHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkInterval":
            suggest = "check_interval"
        elif key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_interval: Optional[_builtins.int] = None,
                 healthy_threshold: Optional[_builtins.int] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 protocol: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None,
                 unhealthy_threshold: Optional[_builtins.int] = None):
        """
        :param _builtins.int check_interval: The number of seconds between two requests (between `5` and `600` both included).
        :param _builtins.int healthy_threshold: The number of consecutive successful requests before considering the VM as healthy (between `2` and `10` both included).
        :param _builtins.str path: If you use the HTTP or HTTPS protocols, the request URL path.
        :param _builtins.int port: The port number (between `1` and `65535`, both included).
        :param _builtins.str protocol: The protocol for the URL of the VM (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param _builtins.int timeout: The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
        :param _builtins.int unhealthy_threshold: The number of consecutive failed requests before considering the VM as unhealthy (between `2` and `10` both included).
        """
        if check_interval is not None:
            pulumi.set(__self__, "check_interval", check_interval)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @_builtins.property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> Optional[_builtins.int]:
        """
        The number of seconds between two requests (between `5` and `600` both included).
        """
        return pulumi.get(self, "check_interval")

    @_builtins.property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[_builtins.int]:
        """
        The number of consecutive successful requests before considering the VM as healthy (between `2` and `10` both included).
        """
        return pulumi.get(self, "healthy_threshold")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        If you use the HTTP or HTTPS protocols, the request URL path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        The port number (between `1` and `65535`, both included).
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        The protocol for the URL of the VM (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[_builtins.int]:
        """
        The number of consecutive failed requests before considering the VM as unhealthy (between `2` and `10` both included).
        """
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class LoadBalancerListener(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendPort":
            suggest = "backend_port"
        elif key == "backendProtocol":
            suggest = "backend_protocol"
        elif key == "loadBalancerPort":
            suggest = "load_balancer_port"
        elif key == "loadBalancerProtocol":
            suggest = "load_balancer_protocol"
        elif key == "policyNames":
            suggest = "policy_names"
        elif key == "serverCertificateId":
            suggest = "server_certificate_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerListener. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerListener.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerListener.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_port: _builtins.int,
                 backend_protocol: _builtins.str,
                 load_balancer_port: _builtins.int,
                 load_balancer_protocol: _builtins.str,
                 policy_names: Optional[Sequence[_builtins.str]] = None,
                 server_certificate_id: Optional[_builtins.str] = None):
        """
        :param _builtins.int backend_port: The port on which the backend VM is listening (between `1` and `65535`, both included).
        :param _builtins.str backend_protocol: The protocol for routing traffic to backend VMs (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param _builtins.int load_balancer_port: The port on which the load balancer is listening (between `1` and `65535`, both included).
        :param _builtins.str load_balancer_protocol: The routing protocol (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param Sequence[_builtins.str] policy_names: The names of the policies. If there are no policies enabled, the list is empty.
        :param _builtins.str server_certificate_id: The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
        """
        pulumi.set(__self__, "backend_port", backend_port)
        pulumi.set(__self__, "backend_protocol", backend_protocol)
        pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        pulumi.set(__self__, "load_balancer_protocol", load_balancer_protocol)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if server_certificate_id is not None:
            pulumi.set(__self__, "server_certificate_id", server_certificate_id)

    @_builtins.property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> _builtins.int:
        """
        The port on which the backend VM is listening (between `1` and `65535`, both included).
        """
        return pulumi.get(self, "backend_port")

    @_builtins.property
    @pulumi.getter(name="backendProtocol")
    def backend_protocol(self) -> _builtins.str:
        """
        The protocol for routing traffic to backend VMs (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "backend_protocol")

    @_builtins.property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> _builtins.int:
        """
        The port on which the load balancer is listening (between `1` and `65535`, both included).
        """
        return pulumi.get(self, "load_balancer_port")

    @_builtins.property
    @pulumi.getter(name="loadBalancerProtocol")
    def load_balancer_protocol(self) -> _builtins.str:
        """
        The routing protocol (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "load_balancer_protocol")

    @_builtins.property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        The names of the policies. If there are no policies enabled, the list is empty.
        """
        return pulumi.get(self, "policy_names")

    @_builtins.property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> Optional[_builtins.str]:
        """
        The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
        """
        return pulumi.get(self, "server_certificate_id")


@pulumi.output_type
class LoadBalancerListenerRuleListener(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loadBalancerName":
            suggest = "load_balancer_name"
        elif key == "loadBalancerPort":
            suggest = "load_balancer_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerListenerRuleListener. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerListenerRuleListener.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerListenerRuleListener.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 load_balancer_name: _builtins.str,
                 load_balancer_port: _builtins.int):
        """
        :param _builtins.str load_balancer_name: The name of the load balancer to which the listener is attached.
        :param _builtins.int load_balancer_port: The port of load balancer on which the load balancer is listening (between `1` and `65535` both included).
        """
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        pulumi.set(__self__, "load_balancer_port", load_balancer_port)

    @_builtins.property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> _builtins.str:
        """
        The name of the load balancer to which the listener is attached.
        """
        return pulumi.get(self, "load_balancer_name")

    @_builtins.property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> _builtins.int:
        """
        The port of load balancer on which the load balancer is listening (between `1` and `65535` both included).
        """
        return pulumi.get(self, "load_balancer_port")


@pulumi.output_type
class LoadBalancerListenerRuleListenerRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "listenerRuleName":
            suggest = "listener_rule_name"
        elif key == "hostNamePattern":
            suggest = "host_name_pattern"
        elif key == "listenerId":
            suggest = "listener_id"
        elif key == "listenerRuleId":
            suggest = "listener_rule_id"
        elif key == "pathPattern":
            suggest = "path_pattern"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerListenerRuleListenerRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerListenerRuleListenerRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerListenerRuleListenerRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 listener_rule_name: _builtins.str,
                 priority: _builtins.int,
                 action: Optional[_builtins.str] = None,
                 host_name_pattern: Optional[_builtins.str] = None,
                 listener_id: Optional[_builtins.int] = None,
                 listener_rule_id: Optional[_builtins.int] = None,
                 path_pattern: Optional[_builtins.str] = None):
        """
        :param _builtins.str listener_rule_name: A human-readable name for the listener rule.
        :param _builtins.int priority: The priority level of the listener rule, between `1` and `19999` both included. Each rule must have a unique priority level. Otherwise, an error is returned.
        :param _builtins.str action: The type of action for the rule (always `forward`).
        :param _builtins.str host_name_pattern: A host-name pattern for the rule, with a maximum length of 128 characters. This host-name pattern supports maximum three wildcards, and must not contain any special characters except `-.?`.
        :param _builtins.int listener_id: The ID of the listener.
        :param _builtins.int listener_rule_id: The ID of the listener rule.
        :param _builtins.str path_pattern: A path pattern for the rule, with a maximum length of 128 characters. This path pattern supports maximum three wildcards, and must not contain any special characters except `_-.$/~&quot;'@:+?`.
        """
        pulumi.set(__self__, "listener_rule_name", listener_rule_name)
        pulumi.set(__self__, "priority", priority)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if host_name_pattern is not None:
            pulumi.set(__self__, "host_name_pattern", host_name_pattern)
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if listener_rule_id is not None:
            pulumi.set(__self__, "listener_rule_id", listener_rule_id)
        if path_pattern is not None:
            pulumi.set(__self__, "path_pattern", path_pattern)

    @_builtins.property
    @pulumi.getter(name="listenerRuleName")
    def listener_rule_name(self) -> _builtins.str:
        """
        A human-readable name for the listener rule.
        """
        return pulumi.get(self, "listener_rule_name")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        The priority level of the listener rule, between `1` and `19999` both included. Each rule must have a unique priority level. Otherwise, an error is returned.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter
    def action(self) -> Optional[_builtins.str]:
        """
        The type of action for the rule (always `forward`).
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="hostNamePattern")
    def host_name_pattern(self) -> Optional[_builtins.str]:
        """
        A host-name pattern for the rule, with a maximum length of 128 characters. This host-name pattern supports maximum three wildcards, and must not contain any special characters except `-.?`.
        """
        return pulumi.get(self, "host_name_pattern")

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[_builtins.int]:
        """
        The ID of the listener.
        """
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter(name="listenerRuleId")
    def listener_rule_id(self) -> Optional[_builtins.int]:
        """
        The ID of the listener rule.
        """
        return pulumi.get(self, "listener_rule_id")

    @_builtins.property
    @pulumi.getter(name="pathPattern")
    def path_pattern(self) -> Optional[_builtins.str]:
        """
        A path pattern for the rule, with a maximum length of 128 characters. This path pattern supports maximum three wildcards, and must not contain any special characters except `_-.$/~&quot;'@:+?`.
        """
        return pulumi.get(self, "path_pattern")


@pulumi.output_type
class LoadBalancerLoadBalancerStickyCookiePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerLoadBalancerStickyCookiePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerLoadBalancerStickyCookiePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerLoadBalancerStickyCookiePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str policy_name: The name of the stickiness policy.
        """
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        """
        The name of the stickiness policy.
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class LoadBalancerPolicyAccessLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "osuBucketName":
            suggest = "osu_bucket_name"
        elif key == "osuBucketPrefix":
            suggest = "osu_bucket_prefix"
        elif key == "publicationInterval":
            suggest = "publication_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerPolicyAccessLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerPolicyAccessLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerPolicyAccessLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[_builtins.bool] = None,
                 osu_bucket_name: Optional[_builtins.str] = None,
                 osu_bucket_prefix: Optional[_builtins.str] = None,
                 publication_interval: Optional[_builtins.int] = None):
        """
        :param _builtins.bool is_enabled: If true, access logs are enabled for your load balancer. If false, they are not. If you set this to true in your request, the `osu_bucket_name` parameter is required.
        :param _builtins.str osu_bucket_name: The name of the OOS bucket for the access logs.
        :param _builtins.str osu_bucket_prefix: The path to the folder of the access logs in your OOS bucket (by default, the `root` level of your bucket).
        :param _builtins.int publication_interval: The time interval for the publication of access logs in the OOS bucket, in minutes. This value can be either `5` or `60` (by default, `60`).
        """
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if osu_bucket_name is not None:
            pulumi.set(__self__, "osu_bucket_name", osu_bucket_name)
        if osu_bucket_prefix is not None:
            pulumi.set(__self__, "osu_bucket_prefix", osu_bucket_prefix)
        if publication_interval is not None:
            pulumi.set(__self__, "publication_interval", publication_interval)

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[_builtins.bool]:
        """
        If true, access logs are enabled for your load balancer. If false, they are not. If you set this to true in your request, the `osu_bucket_name` parameter is required.
        """
        return pulumi.get(self, "is_enabled")

    @_builtins.property
    @pulumi.getter(name="osuBucketName")
    def osu_bucket_name(self) -> Optional[_builtins.str]:
        """
        The name of the OOS bucket for the access logs.
        """
        return pulumi.get(self, "osu_bucket_name")

    @_builtins.property
    @pulumi.getter(name="osuBucketPrefix")
    def osu_bucket_prefix(self) -> Optional[_builtins.str]:
        """
        The path to the folder of the access logs in your OOS bucket (by default, the `root` level of your bucket).
        """
        return pulumi.get(self, "osu_bucket_prefix")

    @_builtins.property
    @pulumi.getter(name="publicationInterval")
    def publication_interval(self) -> Optional[_builtins.int]:
        """
        The time interval for the publication of access logs in the OOS bucket, in minutes. This value can be either `5` or `60` (by default, `60`).
        """
        return pulumi.get(self, "publication_interval")


@pulumi.output_type
class LoadBalancerPolicyApplicationStickyCookiePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerPolicyApplicationStickyCookiePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerPolicyApplicationStickyCookiePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerPolicyApplicationStickyCookiePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cookie_name: Optional[_builtins.str] = None,
                 policy_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str cookie_name: The name of the application cookie used for stickiness. This parameter is required if you create a stickiness policy based on an application-generated cookie.
        :param _builtins.str policy_name: The unique name of the policy, with a maximum length of 32 alphanumeric characters and dashes (`-`).
        """
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[_builtins.str]:
        """
        The name of the application cookie used for stickiness. This parameter is required if you create a stickiness policy based on an application-generated cookie.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        """
        The unique name of the policy, with a maximum length of 32 alphanumeric characters and dashes (`-`).
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class LoadBalancerPolicyHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkInterval":
            suggest = "check_interval"
        elif key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerPolicyHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerPolicyHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerPolicyHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_interval: Optional[_builtins.int] = None,
                 healthy_threshold: Optional[_builtins.int] = None,
                 path: Optional[_builtins.str] = None,
                 port: Optional[_builtins.int] = None,
                 protocol: Optional[_builtins.str] = None,
                 timeout: Optional[_builtins.int] = None,
                 unhealthy_threshold: Optional[_builtins.int] = None):
        """
        :param _builtins.int check_interval: The number of seconds between two requests (between `5` and `600` both included).
        :param _builtins.int healthy_threshold: The number of consecutive successful requests before considering the VM as healthy (between `2` and `10` both included).
        :param _builtins.str path: If you use the HTTP or HTTPS protocols, the request URL path.
        :param _builtins.int port: The port number (between `1` and `65535`, both included).
        :param _builtins.str protocol: The protocol for the URL of the VM (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param _builtins.int timeout: The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
        :param _builtins.int unhealthy_threshold: The number of consecutive failed requests before considering the VM as unhealthy (between `2` and `10` both included).
        """
        if check_interval is not None:
            pulumi.set(__self__, "check_interval", check_interval)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @_builtins.property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> Optional[_builtins.int]:
        """
        The number of seconds between two requests (between `5` and `600` both included).
        """
        return pulumi.get(self, "check_interval")

    @_builtins.property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[_builtins.int]:
        """
        The number of consecutive successful requests before considering the VM as healthy (between `2` and `10` both included).
        """
        return pulumi.get(self, "healthy_threshold")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        If you use the HTTP or HTTPS protocols, the request URL path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> Optional[_builtins.int]:
        """
        The port number (between `1` and `65535`, both included).
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> Optional[_builtins.str]:
        """
        The protocol for the URL of the VM (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> Optional[_builtins.int]:
        """
        The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[_builtins.int]:
        """
        The number of consecutive failed requests before considering the VM as unhealthy (between `2` and `10` both included).
        """
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class LoadBalancerPolicyListener(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendPort":
            suggest = "backend_port"
        elif key == "backendProtocol":
            suggest = "backend_protocol"
        elif key == "loadBalancerPort":
            suggest = "load_balancer_port"
        elif key == "loadBalancerProtocol":
            suggest = "load_balancer_protocol"
        elif key == "policyNames":
            suggest = "policy_names"
        elif key == "serverCertificateId":
            suggest = "server_certificate_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerPolicyListener. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerPolicyListener.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerPolicyListener.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_port: Optional[_builtins.int] = None,
                 backend_protocol: Optional[_builtins.str] = None,
                 load_balancer_port: Optional[_builtins.int] = None,
                 load_balancer_protocol: Optional[_builtins.str] = None,
                 policy_names: Optional[Sequence[_builtins.str]] = None,
                 server_certificate_id: Optional[_builtins.str] = None):
        """
        :param _builtins.int backend_port: The port on which the backend VM is listening (between `1` and `65535`, both included).
        :param _builtins.str backend_protocol: The protocol for routing traffic to backend VMs (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param _builtins.int load_balancer_port: The port on which the load balancer is listening (between `1` and `65535`, both included).
        :param _builtins.str load_balancer_protocol: The routing protocol (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param Sequence[_builtins.str] policy_names: The names of the policies. If there are no policies enabled, the list is empty.
        :param _builtins.str server_certificate_id: The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
        """
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if backend_protocol is not None:
            pulumi.set(__self__, "backend_protocol", backend_protocol)
        if load_balancer_port is not None:
            pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        if load_balancer_protocol is not None:
            pulumi.set(__self__, "load_balancer_protocol", load_balancer_protocol)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if server_certificate_id is not None:
            pulumi.set(__self__, "server_certificate_id", server_certificate_id)

    @_builtins.property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[_builtins.int]:
        """
        The port on which the backend VM is listening (between `1` and `65535`, both included).
        """
        return pulumi.get(self, "backend_port")

    @_builtins.property
    @pulumi.getter(name="backendProtocol")
    def backend_protocol(self) -> Optional[_builtins.str]:
        """
        The protocol for routing traffic to backend VMs (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "backend_protocol")

    @_builtins.property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> Optional[_builtins.int]:
        """
        The port on which the load balancer is listening (between `1` and `65535`, both included).
        """
        return pulumi.get(self, "load_balancer_port")

    @_builtins.property
    @pulumi.getter(name="loadBalancerProtocol")
    def load_balancer_protocol(self) -> Optional[_builtins.str]:
        """
        The routing protocol (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "load_balancer_protocol")

    @_builtins.property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[_builtins.str]]:
        """
        The names of the policies. If there are no policies enabled, the list is empty.
        """
        return pulumi.get(self, "policy_names")

    @_builtins.property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> Optional[_builtins.str]:
        """
        The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
        """
        return pulumi.get(self, "server_certificate_id")


@pulumi.output_type
class LoadBalancerPolicyLoadBalancerStickyCookiePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerPolicyLoadBalancerStickyCookiePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerPolicyLoadBalancerStickyCookiePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerPolicyLoadBalancerStickyCookiePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str policy_name: The unique name of the policy, with a maximum length of 32 alphanumeric characters and dashes (`-`).
        """
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        """
        The unique name of the policy, with a maximum length of 32 alphanumeric characters and dashes (`-`).
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class LoadBalancerPolicySourceSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupAccountId":
            suggest = "security_group_account_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerPolicySourceSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerPolicySourceSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerPolicySourceSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_account_id: Optional[_builtins.str] = None,
                 security_group_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str security_group_account_id: The account ID of the owner of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        if security_group_account_id is not None:
            pulumi.set(__self__, "security_group_account_id", security_group_account_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupAccountId")
    def security_group_account_id(self) -> Optional[_builtins.str]:
        """
        The account ID of the owner of the security group.
        """
        return pulumi.get(self, "security_group_account_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[_builtins.str]:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class LoadBalancerPolicyTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LoadBalancerSourceSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupAccountId":
            suggest = "security_group_account_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerSourceSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerSourceSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerSourceSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_account_id: Optional[_builtins.str] = None,
                 security_group_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str security_group_account_id: The account ID of the owner of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        if security_group_account_id is not None:
            pulumi.set(__self__, "security_group_account_id", security_group_account_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupAccountId")
    def security_group_account_id(self) -> Optional[_builtins.str]:
        """
        The account ID of the owner of the security group.
        """
        return pulumi.get(self, "security_group_account_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[_builtins.str]:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class LoadBalancerTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LoadBalancerVmsTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class MainRouteTableLinkTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class NatServicePublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicIp":
            suggest = "public_ip"
        elif key == "publicIpId":
            suggest = "public_ip_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NatServicePublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NatServicePublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NatServicePublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_ip: Optional[_builtins.str] = None,
                 public_ip_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str public_ip: The public IP associated with the NAT service.
        :param _builtins.str public_ip_id: The allocation ID of the public IP to associate with the NAT service.<br />
               If the public IP is already associated with another resource, you must first disassociate it.
        """
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_id is not None:
            pulumi.set(__self__, "public_ip_id", public_ip_id)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The public IP associated with the NAT service.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> Optional[_builtins.str]:
        """
        The allocation ID of the public IP to associate with the NAT service.<br />
        If the public IP is already associated with another resource, you must first disassociate it.
        """
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class NatServiceTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NetAccessPointTag(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NetAccessPointTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class NetAttributesTag(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NetAttributesTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class NetPeeringAcceptationAccepterNet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "ipRange":
            suggest = "ip_range"
        elif key == "netId":
            suggest = "net_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetPeeringAcceptationAccepterNet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetPeeringAcceptationAccepterNet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetPeeringAcceptationAccepterNet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: _builtins.str,
                 ip_range: _builtins.str,
                 net_id: _builtins.str):
        """
        :param _builtins.str account_id: The account ID of the owner of the source Net.
        :param _builtins.str ip_range: The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        :param _builtins.str net_id: The ID of the source Net.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "net_id", net_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the source Net.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> _builtins.str:
        """
        The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_range")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the source Net.
        """
        return pulumi.get(self, "net_id")


@pulumi.output_type
class NetPeeringAcceptationSourceNet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "ipRange":
            suggest = "ip_range"
        elif key == "netId":
            suggest = "net_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetPeeringAcceptationSourceNet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetPeeringAcceptationSourceNet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetPeeringAcceptationSourceNet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: _builtins.str,
                 ip_range: _builtins.str,
                 net_id: _builtins.str):
        """
        :param _builtins.str account_id: The account ID of the owner of the source Net.
        :param _builtins.str ip_range: The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        :param _builtins.str net_id: The ID of the source Net.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "net_id", net_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the source Net.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> _builtins.str:
        """
        The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_range")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the source Net.
        """
        return pulumi.get(self, "net_id")


@pulumi.output_type
class NetPeeringAcceptationState(dict):
    def __init__(__self__, *,
                 message: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str message: Additional information about the state of the Net peering.
        :param _builtins.str name: The state of the Net peering (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Additional information about the state of the Net peering.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The state of the Net peering (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class NetPeeringAcceptationTag(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NetPeeringAcceptationTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class NetPeeringAccepterNet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "ipRange":
            suggest = "ip_range"
        elif key == "netId":
            suggest = "net_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetPeeringAccepterNet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetPeeringAccepterNet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetPeeringAccepterNet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: _builtins.str,
                 ip_range: _builtins.str,
                 net_id: _builtins.str):
        """
        :param _builtins.str account_id: The account ID of the owner of the source Net.
        :param _builtins.str ip_range: The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        :param _builtins.str net_id: The ID of the source Net.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "net_id", net_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the source Net.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> _builtins.str:
        """
        The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_range")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the source Net.
        """
        return pulumi.get(self, "net_id")


@pulumi.output_type
class NetPeeringSourceNet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "ipRange":
            suggest = "ip_range"
        elif key == "netId":
            suggest = "net_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetPeeringSourceNet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetPeeringSourceNet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetPeeringSourceNet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: _builtins.str,
                 ip_range: _builtins.str,
                 net_id: _builtins.str):
        """
        :param _builtins.str account_id: The account ID of the owner of the source Net.
        :param _builtins.str ip_range: The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        :param _builtins.str net_id: The ID of the source Net.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "net_id", net_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the source Net.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> _builtins.str:
        """
        The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_range")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the source Net.
        """
        return pulumi.get(self, "net_id")


@pulumi.output_type
class NetPeeringState(dict):
    def __init__(__self__, *,
                 message: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str message: Additional information about the state of the Net peering.
        :param _builtins.str name: The state of the Net peering (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Additional information about the state of the Net peering.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The state of the Net peering (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class NetPeeringTag(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NetPeeringTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class NetTag(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class NetTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class NicLinkNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "deviceNumber":
            suggest = "device_number"
        elif key == "linkNicId":
            suggest = "link_nic_id"
        elif key == "vmAccountId":
            suggest = "vm_account_id"
        elif key == "vmId":
            suggest = "vm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicLinkNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicLinkNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicLinkNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[_builtins.str] = None,
                 device_number: Optional[_builtins.int] = None,
                 link_nic_id: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None,
                 vm_account_id: Optional[_builtins.str] = None,
                 vm_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.int device_number: The device index for the NIC attachment (between `1` and `7`, both included).
        :param _builtins.str link_nic_id: The ID of the NIC to attach.
        :param _builtins.str state: The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).
        :param _builtins.str vm_account_id: The account ID of the owner of the VM.
        :param _builtins.str vm_id: The ID of the VM.
        """
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if device_number is not None:
            pulumi.set(__self__, "device_number", device_number)
        if link_nic_id is not None:
            pulumi.set(__self__, "link_nic_id", link_nic_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vm_account_id is not None:
            pulumi.set(__self__, "vm_account_id", vm_account_id)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[_builtins.str]:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> Optional[_builtins.int]:
        """
        The device index for the NIC attachment (between `1` and `7`, both included).
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> Optional[_builtins.str]:
        """
        The ID of the NIC to attach.
        """
        return pulumi.get(self, "link_nic_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> Optional[_builtins.str]:
        """
        The account ID of the owner of the VM.
        """
        return pulumi.get(self, "vm_account_id")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[_builtins.str]:
        """
        The ID of the VM.
        """
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class NicLinkPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkPublicIpId":
            suggest = "link_public_ip_id"
        elif key == "publicDnsName":
            suggest = "public_dns_name"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "publicIpAccountId":
            suggest = "public_ip_account_id"
        elif key == "publicIpId":
            suggest = "public_ip_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicLinkPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicLinkPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicLinkPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_public_ip_id: Optional[_builtins.str] = None,
                 public_dns_name: Optional[_builtins.str] = None,
                 public_ip: Optional[_builtins.str] = None,
                 public_ip_account_id: Optional[_builtins.str] = None,
                 public_ip_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str link_public_ip_id: (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP associated with the NIC.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        :param _builtins.str public_ip_id: The allocation ID of the public IP.
        """
        if link_public_ip_id is not None:
            pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_account_id is not None:
            pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)
        if public_ip_id is not None:
            pulumi.set(__self__, "public_ip_id", public_ip_id)

    @_builtins.property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> Optional[_builtins.str]:
        """
        (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        """
        return pulumi.get(self, "link_public_ip_id")

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[_builtins.str]:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The public IP associated with the NIC.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> Optional[_builtins.str]:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")

    @_builtins.property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> Optional[_builtins.str]:
        """
        The allocation ID of the public IP.
        """
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class NicPrivateIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isPrimary":
            suggest = "is_primary"
        elif key == "linkPublicIps":
            suggest = "link_public_ips"
        elif key == "privateDnsName":
            suggest = "private_dns_name"
        elif key == "privateIp":
            suggest = "private_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicPrivateIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicPrivateIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicPrivateIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_primary: Optional[_builtins.bool] = None,
                 link_public_ips: Optional[Sequence['outputs.NicPrivateIpLinkPublicIp']] = None,
                 private_dns_name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None):
        """
        :param _builtins.bool is_primary: If true, the IP is the primary private IP of the NIC.
        :param Sequence['NicPrivateIpLinkPublicIpArgs'] link_public_ips: Information about the public IP association.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param _builtins.str private_ip: The private IP of the NIC.
        """
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if link_public_ips is not None:
            pulumi.set(__self__, "link_public_ips", link_public_ips)
        if private_dns_name is not None:
            pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)

    @_builtins.property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[_builtins.bool]:
        """
        If true, the IP is the primary private IP of the NIC.
        """
        return pulumi.get(self, "is_primary")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Optional[Sequence['outputs.NicPrivateIpLinkPublicIp']]:
        """
        Information about the public IP association.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> Optional[_builtins.str]:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        The private IP of the NIC.
        """
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class NicPrivateIpLinkPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkPublicIpId":
            suggest = "link_public_ip_id"
        elif key == "publicDnsName":
            suggest = "public_dns_name"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "publicIpAccountId":
            suggest = "public_ip_account_id"
        elif key == "publicIpId":
            suggest = "public_ip_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicPrivateIpLinkPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicPrivateIpLinkPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicPrivateIpLinkPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_public_ip_id: Optional[_builtins.str] = None,
                 public_dns_name: Optional[_builtins.str] = None,
                 public_ip: Optional[_builtins.str] = None,
                 public_ip_account_id: Optional[_builtins.str] = None,
                 public_ip_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str link_public_ip_id: (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP associated with the NIC.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        :param _builtins.str public_ip_id: The allocation ID of the public IP.
        """
        if link_public_ip_id is not None:
            pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_account_id is not None:
            pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)
        if public_ip_id is not None:
            pulumi.set(__self__, "public_ip_id", public_ip_id)

    @_builtins.property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> Optional[_builtins.str]:
        """
        (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        """
        return pulumi.get(self, "link_public_ip_id")

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[_builtins.str]:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The public IP associated with the NIC.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> Optional[_builtins.str]:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")

    @_builtins.property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> Optional[_builtins.str]:
        """
        The allocation ID of the public IP.
        """
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class NicSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_id: Optional[_builtins.str] = None,
                 security_group_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[_builtins.str]:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[_builtins.str]:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class NicTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class OutboundRuleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPortRange":
            suggest = "from_port_range"
        elif key == "ipProtocol":
            suggest = "ip_protocol"
        elif key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "securityGroupsMembers":
            suggest = "security_groups_members"
        elif key == "serviceIds":
            suggest = "service_ids"
        elif key == "toPortRange":
            suggest = "to_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutboundRuleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutboundRuleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutboundRuleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_port_range: Optional[_builtins.int] = None,
                 ip_protocol: Optional[_builtins.str] = None,
                 ip_ranges: Optional[Sequence[_builtins.str]] = None,
                 security_groups_members: Optional[Sequence['outputs.OutboundRuleRuleSecurityGroupsMember']] = None,
                 service_ids: Optional[Sequence[_builtins.str]] = None,
                 to_port_range: Optional[_builtins.int] = None):
        if from_port_range is not None:
            pulumi.set(__self__, "from_port_range", from_port_range)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if security_groups_members is not None:
            pulumi.set(__self__, "security_groups_members", security_groups_members)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if to_port_range is not None:
            pulumi.set(__self__, "to_port_range", to_port_range)

    @_builtins.property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "from_port_range")

    @_builtins.property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "ip_protocol")

    @_builtins.property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "ip_ranges")

    @_builtins.property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Optional[Sequence['outputs.OutboundRuleRuleSecurityGroupsMember']]:
        return pulumi.get(self, "security_groups_members")

    @_builtins.property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "service_ids")

    @_builtins.property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class OutboundRuleRuleSecurityGroupsMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutboundRuleRuleSecurityGroupsMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutboundRuleRuleSecurityGroupsMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutboundRuleRuleSecurityGroupsMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[_builtins.str] = None,
                 security_group_id: Optional[_builtins.str] = None,
                 security_group_name: Optional[_builtins.str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class PublicIpLinkTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class PublicIpTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RouteTableLinkRouteTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkRouteTableId":
            suggest = "link_route_table_id"
        elif key == "netId":
            suggest = "net_id"
        elif key == "routeTableId":
            suggest = "route_table_id"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteTableLinkRouteTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteTableLinkRouteTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteTableLinkRouteTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_route_table_id: _builtins.str,
                 main: _builtins.bool,
                 net_id: _builtins.str,
                 route_table_id: _builtins.str,
                 subnet_id: _builtins.str):
        """
        :param _builtins.str link_route_table_id: The ID of the association between the route table and the Net or Subnet.
        :param _builtins.bool main: If true, the route table is the main one.
        :param _builtins.str net_id: The ID of the Net for which you want to create a route table.
        :param _builtins.str route_table_id: The ID of the route table.
        :param _builtins.str subnet_id: The ID of the Subnet, if the route table is explicitly linked to a Subnet.
        """
        pulumi.set(__self__, "link_route_table_id", link_route_table_id)
        pulumi.set(__self__, "main", main)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="linkRouteTableId")
    def link_route_table_id(self) -> _builtins.str:
        """
        The ID of the association between the route table and the Net or Subnet.
        """
        return pulumi.get(self, "link_route_table_id")

    @_builtins.property
    @pulumi.getter
    def main(self) -> _builtins.bool:
        """
        If true, the route table is the main one.
        """
        return pulumi.get(self, "main")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net for which you want to create a route table.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> _builtins.str:
        """
        The ID of the route table.
        """
        return pulumi.get(self, "route_table_id")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the Subnet, if the route table is explicitly linked to a Subnet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class RouteTableLinkTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class RouteTableRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationMethod":
            suggest = "creation_method"
        elif key == "destinationIpRange":
            suggest = "destination_ip_range"
        elif key == "destinationServiceId":
            suggest = "destination_service_id"
        elif key == "gatewayId":
            suggest = "gateway_id"
        elif key == "natServiceId":
            suggest = "nat_service_id"
        elif key == "netAccessPointId":
            suggest = "net_access_point_id"
        elif key == "netPeeringId":
            suggest = "net_peering_id"
        elif key == "nicId":
            suggest = "nic_id"
        elif key == "vmAccountId":
            suggest = "vm_account_id"
        elif key == "vmId":
            suggest = "vm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteTableRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteTableRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteTableRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_method: _builtins.str,
                 destination_ip_range: _builtins.str,
                 destination_service_id: _builtins.str,
                 gateway_id: _builtins.str,
                 nat_service_id: _builtins.str,
                 net_access_point_id: _builtins.str,
                 net_peering_id: _builtins.str,
                 nic_id: _builtins.str,
                 state: _builtins.str,
                 vm_account_id: _builtins.str,
                 vm_id: _builtins.str):
        """
        :param _builtins.str creation_method: The method used to create the route.
        :param _builtins.str destination_ip_range: The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        :param _builtins.str destination_service_id: The ID of the OUTSCALE service.
        :param _builtins.str gateway_id: The ID of the internet service or virtual gateway attached to the Net.
        :param _builtins.str nat_service_id: The ID of a NAT service attached to the Net.
        :param _builtins.str net_access_point_id: The ID of the Net access point.
        :param _builtins.str net_peering_id: The ID of the Net peering.
        :param _builtins.str nic_id: The ID of the NIC.
        :param _builtins.str state: The state of a route in the route table (always `active`).
        :param _builtins.str vm_account_id: The account ID of the owner of the VM.
        :param _builtins.str vm_id: The ID of a VM specified in a route in the table.
        """
        pulumi.set(__self__, "creation_method", creation_method)
        pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        pulumi.set(__self__, "destination_service_id", destination_service_id)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "nat_service_id", nat_service_id)
        pulumi.set(__self__, "net_access_point_id", net_access_point_id)
        pulumi.set(__self__, "net_peering_id", net_peering_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_account_id", vm_account_id)
        pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter(name="creationMethod")
    def creation_method(self) -> _builtins.str:
        """
        The method used to create the route.
        """
        return pulumi.get(self, "creation_method")

    @_builtins.property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> _builtins.str:
        """
        The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        """
        return pulumi.get(self, "destination_ip_range")

    @_builtins.property
    @pulumi.getter(name="destinationServiceId")
    def destination_service_id(self) -> _builtins.str:
        """
        The ID of the OUTSCALE service.
        """
        return pulumi.get(self, "destination_service_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> _builtins.str:
        """
        The ID of the internet service or virtual gateway attached to the Net.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> _builtins.str:
        """
        The ID of a NAT service attached to the Net.
        """
        return pulumi.get(self, "nat_service_id")

    @_builtins.property
    @pulumi.getter(name="netAccessPointId")
    def net_access_point_id(self) -> _builtins.str:
        """
        The ID of the Net access point.
        """
        return pulumi.get(self, "net_access_point_id")

    @_builtins.property
    @pulumi.getter(name="netPeeringId")
    def net_peering_id(self) -> _builtins.str:
        """
        The ID of the Net peering.
        """
        return pulumi.get(self, "net_peering_id")

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> _builtins.str:
        """
        The ID of the NIC.
        """
        return pulumi.get(self, "nic_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of a route in the route table (always `active`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the VM.
        """
        return pulumi.get(self, "vm_account_id")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        The ID of a VM specified in a route in the table.
        """
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class RouteTableRoutePropagatingVirtualGateway(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "virtualGatewayId":
            suggest = "virtual_gateway_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteTableRoutePropagatingVirtualGateway. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteTableRoutePropagatingVirtualGateway.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteTableRoutePropagatingVirtualGateway.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 virtual_gateway_id: _builtins.str):
        """
        :param _builtins.str virtual_gateway_id: The ID of the virtual gateway.
        """
        pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)

    @_builtins.property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> _builtins.str:
        """
        The ID of the virtual gateway.
        """
        return pulumi.get(self, "virtual_gateway_id")


@pulumi.output_type
class RouteTableTag(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RouteTableTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class RouteTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class SecurityGroupInboundRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPortRange":
            suggest = "from_port_range"
        elif key == "ipProtocol":
            suggest = "ip_protocol"
        elif key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "securityGroupsMembers":
            suggest = "security_groups_members"
        elif key == "toPortRange":
            suggest = "to_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityGroupInboundRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityGroupInboundRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityGroupInboundRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_port_range: Optional[_builtins.int] = None,
                 ip_protocol: Optional[_builtins.str] = None,
                 ip_ranges: Optional[Sequence[_builtins.str]] = None,
                 security_groups_members: Optional[Sequence[Mapping[str, _builtins.str]]] = None,
                 to_port_range: Optional[_builtins.int] = None):
        """
        :param _builtins.int from_port_range: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
        :param _builtins.str ip_protocol: The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        :param Sequence[_builtins.str] ip_ranges: One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
        :param Sequence[Mapping[str, _builtins.str]] security_groups_members: Information about one or more source or destination security groups.
        :param _builtins.int to_port_range: The end of the port range for the TCP and UDP protocols, or an ICMP code number.
        """
        if from_port_range is not None:
            pulumi.set(__self__, "from_port_range", from_port_range)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if security_groups_members is not None:
            pulumi.set(__self__, "security_groups_members", security_groups_members)
        if to_port_range is not None:
            pulumi.set(__self__, "to_port_range", to_port_range)

    @_builtins.property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> Optional[_builtins.int]:
        """
        The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
        """
        return pulumi.get(self, "from_port_range")

    @_builtins.property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[_builtins.str]:
        """
        The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        """
        return pulumi.get(self, "ip_protocol")

    @_builtins.property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[_builtins.str]]:
        """
        One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_ranges")

    @_builtins.property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Optional[Sequence[Mapping[str, _builtins.str]]]:
        """
        Information about one or more source or destination security groups.
        """
        return pulumi.get(self, "security_groups_members")

    @_builtins.property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> Optional[_builtins.int]:
        """
        The end of the port range for the TCP and UDP protocols, or an ICMP code number.
        """
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class SecurityGroupOutboundRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPortRange":
            suggest = "from_port_range"
        elif key == "ipProtocol":
            suggest = "ip_protocol"
        elif key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "securityGroupsMembers":
            suggest = "security_groups_members"
        elif key == "toPortRange":
            suggest = "to_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityGroupOutboundRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityGroupOutboundRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityGroupOutboundRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_port_range: Optional[_builtins.int] = None,
                 ip_protocol: Optional[_builtins.str] = None,
                 ip_ranges: Optional[Sequence[_builtins.str]] = None,
                 security_groups_members: Optional[Sequence[Mapping[str, _builtins.str]]] = None,
                 to_port_range: Optional[_builtins.int] = None):
        """
        :param _builtins.int from_port_range: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
        :param _builtins.str ip_protocol: The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        :param Sequence[_builtins.str] ip_ranges: One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
        :param Sequence[Mapping[str, _builtins.str]] security_groups_members: Information about one or more source or destination security groups.
        :param _builtins.int to_port_range: The end of the port range for the TCP and UDP protocols, or an ICMP code number.
        """
        if from_port_range is not None:
            pulumi.set(__self__, "from_port_range", from_port_range)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if security_groups_members is not None:
            pulumi.set(__self__, "security_groups_members", security_groups_members)
        if to_port_range is not None:
            pulumi.set(__self__, "to_port_range", to_port_range)

    @_builtins.property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> Optional[_builtins.int]:
        """
        The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
        """
        return pulumi.get(self, "from_port_range")

    @_builtins.property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[_builtins.str]:
        """
        The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        """
        return pulumi.get(self, "ip_protocol")

    @_builtins.property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[_builtins.str]]:
        """
        One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_ranges")

    @_builtins.property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Optional[Sequence[Mapping[str, _builtins.str]]]:
        """
        Information about one or more source or destination security groups.
        """
        return pulumi.get(self, "security_groups_members")

    @_builtins.property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> Optional[_builtins.int]:
        """
        The end of the port range for the TCP and UDP protocols, or an ICMP code number.
        """
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class SecurityGroupRuleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPortRange":
            suggest = "from_port_range"
        elif key == "ipProtocol":
            suggest = "ip_protocol"
        elif key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "securityGroupsMembers":
            suggest = "security_groups_members"
        elif key == "serviceIds":
            suggest = "service_ids"
        elif key == "toPortRange":
            suggest = "to_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityGroupRuleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityGroupRuleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityGroupRuleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_port_range: Optional[_builtins.int] = None,
                 ip_protocol: Optional[_builtins.str] = None,
                 ip_ranges: Optional[Sequence[_builtins.str]] = None,
                 security_groups_members: Optional[Sequence['outputs.SecurityGroupRuleRuleSecurityGroupsMember']] = None,
                 service_ids: Optional[Sequence[_builtins.str]] = None,
                 to_port_range: Optional[_builtins.int] = None):
        """
        :param _builtins.int from_port_range: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
        :param _builtins.str ip_protocol: The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        :param Sequence[_builtins.str] ip_ranges: One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
        :param Sequence['SecurityGroupRuleRuleSecurityGroupsMemberArgs'] security_groups_members: Information about one or more source or destination security groups.
        :param Sequence[_builtins.str] service_ids: One or more service IDs to allow traffic from a Net to access the corresponding OUTSCALE services. For more information, see [ReadNetAccessPointServices](https://docs.outscale.com/api#readnetaccesspointservices).
        :param _builtins.int to_port_range: The end of the port range for the TCP and UDP protocols, or an ICMP code number.
        """
        if from_port_range is not None:
            pulumi.set(__self__, "from_port_range", from_port_range)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if security_groups_members is not None:
            pulumi.set(__self__, "security_groups_members", security_groups_members)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if to_port_range is not None:
            pulumi.set(__self__, "to_port_range", to_port_range)

    @_builtins.property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> Optional[_builtins.int]:
        """
        The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
        """
        return pulumi.get(self, "from_port_range")

    @_builtins.property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[_builtins.str]:
        """
        The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        """
        return pulumi.get(self, "ip_protocol")

    @_builtins.property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[_builtins.str]]:
        """
        One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_ranges")

    @_builtins.property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Optional[Sequence['outputs.SecurityGroupRuleRuleSecurityGroupsMember']]:
        """
        Information about one or more source or destination security groups.
        """
        return pulumi.get(self, "security_groups_members")

    @_builtins.property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        One or more service IDs to allow traffic from a Net to access the corresponding OUTSCALE services. For more information, see [ReadNetAccessPointServices](https://docs.outscale.com/api#readnetaccesspointservices).
        """
        return pulumi.get(self, "service_ids")

    @_builtins.property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> Optional[_builtins.int]:
        """
        The end of the port range for the TCP and UDP protocols, or an ICMP code number.
        """
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class SecurityGroupRuleRuleSecurityGroupsMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityGroupRuleRuleSecurityGroupsMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityGroupRuleRuleSecurityGroupsMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityGroupRuleRuleSecurityGroupsMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[_builtins.str] = None,
                 security_group_id: Optional[_builtins.str] = None,
                 security_group_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str account_id: The account ID that owns the source or destination security group.
        :param _builtins.str security_group_id: The ID of a source or destination security group that you want to link to the security group of the rule.
        :param _builtins.str security_group_name: (Public Cloud only) The name of a source or destination security group that you want to link to the security group of the rule.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        """
        The account ID that owns the source or destination security group.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[_builtins.str]:
        """
        The ID of a source or destination security group that you want to link to the security group of the rule.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[_builtins.str]:
        """
        (Public Cloud only) The name of a source or destination security group that you want to link to the security group of the rule.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class SecurityGroupTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SnapshotAttributesPermissionsToCreateVolumeAdditions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountIds":
            suggest = "account_ids"
        elif key == "globalPermission":
            suggest = "global_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnapshotAttributesPermissionsToCreateVolumeAdditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnapshotAttributesPermissionsToCreateVolumeAdditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnapshotAttributesPermissionsToCreateVolumeAdditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_ids: Optional[Sequence[_builtins.str]] = None,
                 global_permission: Optional[_builtins.bool] = None):
        """
        :param Sequence[_builtins.str] account_ids: The account ID of one or more users to whom you want to give permissions.
        :param _builtins.bool global_permission: If true, the resource is public. If false, the resource is private.
        """
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @_builtins.property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        The account ID of one or more users to whom you want to give permissions.
        """
        return pulumi.get(self, "account_ids")

    @_builtins.property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[_builtins.bool]:
        """
        If true, the resource is public. If false, the resource is private.
        """
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class SnapshotAttributesPermissionsToCreateVolumeRemoval(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountIds":
            suggest = "account_ids"
        elif key == "globalPermission":
            suggest = "global_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnapshotAttributesPermissionsToCreateVolumeRemoval. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnapshotAttributesPermissionsToCreateVolumeRemoval.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnapshotAttributesPermissionsToCreateVolumeRemoval.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_ids: Optional[Sequence[_builtins.str]] = None,
                 global_permission: Optional[_builtins.bool] = None):
        """
        :param Sequence[_builtins.str] account_ids: The account ID of one or more users from whom you want to remove permissions.
        :param _builtins.bool global_permission: If true, the resource is public. If false, the resource is private.
        """
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @_builtins.property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        The account ID of one or more users from whom you want to remove permissions.
        """
        return pulumi.get(self, "account_ids")

    @_builtins.property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[_builtins.bool]:
        """
        If true, the resource is public. If false, the resource is private.
        """
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class SnapshotExportTaskOsuExport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskImageFormat":
            suggest = "disk_image_format"
        elif key == "osuBucket":
            suggest = "osu_bucket"
        elif key == "osuApiKeys":
            suggest = "osu_api_keys"
        elif key == "osuPrefix":
            suggest = "osu_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnapshotExportTaskOsuExport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnapshotExportTaskOsuExport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnapshotExportTaskOsuExport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_image_format: _builtins.str,
                 osu_bucket: _builtins.str,
                 osu_api_keys: Optional[Sequence['outputs.SnapshotExportTaskOsuExportOsuApiKey']] = None,
                 osu_prefix: Optional[_builtins.str] = None):
        """
        :param _builtins.str disk_image_format: The format of the export disk (`qcow2` \\| `raw`).
        :param _builtins.str osu_bucket: The name of the OOS bucket where you want to export the object.
        :param Sequence['SnapshotExportTaskOsuExportOsuApiKeyArgs'] osu_api_keys: Information about the OOS API key.
        :param _builtins.str osu_prefix: The prefix for the key of the OOS object.
        """
        pulumi.set(__self__, "disk_image_format", disk_image_format)
        pulumi.set(__self__, "osu_bucket", osu_bucket)
        if osu_api_keys is not None:
            pulumi.set(__self__, "osu_api_keys", osu_api_keys)
        if osu_prefix is not None:
            pulumi.set(__self__, "osu_prefix", osu_prefix)

    @_builtins.property
    @pulumi.getter(name="diskImageFormat")
    def disk_image_format(self) -> _builtins.str:
        """
        The format of the export disk (`qcow2` \\| `raw`).
        """
        return pulumi.get(self, "disk_image_format")

    @_builtins.property
    @pulumi.getter(name="osuBucket")
    def osu_bucket(self) -> _builtins.str:
        """
        The name of the OOS bucket where you want to export the object.
        """
        return pulumi.get(self, "osu_bucket")

    @_builtins.property
    @pulumi.getter(name="osuApiKeys")
    def osu_api_keys(self) -> Optional[Sequence['outputs.SnapshotExportTaskOsuExportOsuApiKey']]:
        """
        Information about the OOS API key.
        """
        return pulumi.get(self, "osu_api_keys")

    @_builtins.property
    @pulumi.getter(name="osuPrefix")
    def osu_prefix(self) -> Optional[_builtins.str]:
        """
        The prefix for the key of the OOS object.
        """
        return pulumi.get(self, "osu_prefix")


@pulumi.output_type
class SnapshotExportTaskOsuExportOsuApiKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKeyId":
            suggest = "api_key_id"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnapshotExportTaskOsuExportOsuApiKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnapshotExportTaskOsuExportOsuApiKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnapshotExportTaskOsuExportOsuApiKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key_id: _builtins.str,
                 secret_key: _builtins.str):
        """
        :param _builtins.str api_key_id: The API key of the OOS account that enables you to access the bucket.
        :param _builtins.str secret_key: The secret key of the OOS account that enables you to access the bucket.
        """
        pulumi.set(__self__, "api_key_id", api_key_id)
        pulumi.set(__self__, "secret_key", secret_key)

    @_builtins.property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> _builtins.str:
        """
        The API key of the OOS account that enables you to access the bucket.
        """
        return pulumi.get(self, "api_key_id")

    @_builtins.property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> _builtins.str:
        """
        The secret key of the OOS account that enables you to access the bucket.
        """
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class SnapshotExportTaskTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SnapshotPermissionsToCreateVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "globalPermission":
            suggest = "global_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnapshotPermissionsToCreateVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnapshotPermissionsToCreateVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnapshotPermissionsToCreateVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[_builtins.str] = None,
                 global_permission: Optional[_builtins.bool] = None):
        """
        :param _builtins.str account_id: The account ID of the owner of the snapshot.
        :param _builtins.bool global_permission: A global permission for all accounts.<br />
               (Request) Set this parameter to true to make the resource public (if the parent parameter is `Additions`) or to make the resource private (if the parent parameter is `Removals`).<br />
               (Response) If true, the resource is public. If false, the resource is private.
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        """
        The account ID of the owner of the snapshot.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[_builtins.bool]:
        """
        A global permission for all accounts.<br />
        (Request) Set this parameter to true to make the resource public (if the parent parameter is `Additions`) or to make the resource private (if the parent parameter is `Removals`).<br />
        (Response) If true, the resource is public. If false, the resource is private.
        """
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class SnapshotTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SubnetTag(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SubnetTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class TagTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TagTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TagTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TagTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 resource_id: Optional[_builtins.str] = None,
                 resource_type: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserGroupPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyOrn":
            suggest = "policy_orn"
        elif key == "creationDate":
            suggest = "creation_date"
        elif key == "defaultVersionId":
            suggest = "default_version_id"
        elif key == "lastModificationDate":
            suggest = "last_modification_date"
        elif key == "policyId":
            suggest = "policy_id"
        elif key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserGroupPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserGroupPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserGroupPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_orn: _builtins.str,
                 creation_date: Optional[_builtins.str] = None,
                 default_version_id: Optional[_builtins.str] = None,
                 last_modification_date: Optional[_builtins.str] = None,
                 policy_id: Optional[_builtins.str] = None,
                 policy_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str creation_date: The date and time (UTC) of creation of the user group.
        :param _builtins.str default_version_id: The ID of a policy version that you want to make the default one (the active one).
        :param _builtins.str last_modification_date: The date and time (UTC) of the last modification of the user group.
        """
        pulumi.set(__self__, "policy_orn", policy_orn)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if default_version_id is not None:
            pulumi.set(__self__, "default_version_id", default_version_id)
        if last_modification_date is not None:
            pulumi.set(__self__, "last_modification_date", last_modification_date)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @_builtins.property
    @pulumi.getter(name="policyOrn")
    def policy_orn(self) -> _builtins.str:
        return pulumi.get(self, "policy_orn")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[_builtins.str]:
        """
        The date and time (UTC) of creation of the user group.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="defaultVersionId")
    def default_version_id(self) -> Optional[_builtins.str]:
        """
        The ID of a policy version that you want to make the default one (the active one).
        """
        return pulumi.get(self, "default_version_id")

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> Optional[_builtins.str]:
        """
        The date and time (UTC) of the last modification of the user group.
        """
        return pulumi.get(self, "last_modification_date")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class UserGroupUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userName":
            suggest = "user_name"
        elif key == "creationDate":
            suggest = "creation_date"
        elif key == "lastModificationDate":
            suggest = "last_modification_date"
        elif key == "userId":
            suggest = "user_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserGroupUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserGroupUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserGroupUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_name: _builtins.str,
                 creation_date: Optional[_builtins.str] = None,
                 last_modification_date: Optional[_builtins.str] = None,
                 path: Optional[_builtins.str] = None,
                 user_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str creation_date: The date and time (UTC) of creation of the user group.
        :param _builtins.str last_modification_date: The date and time (UTC) of the last modification of the user group.
        :param _builtins.str path: The path to the group. If not specified, it is set to a slash (`/`).
        """
        pulumi.set(__self__, "user_name", user_name)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if last_modification_date is not None:
            pulumi.set(__self__, "last_modification_date", last_modification_date)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[_builtins.str]:
        """
        The date and time (UTC) of creation of the user group.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> Optional[_builtins.str]:
        """
        The date and time (UTC) of the last modification of the user group.
        """
        return pulumi.get(self, "last_modification_date")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to the group. If not specified, it is set to a slash (`/`).
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_id")


@pulumi.output_type
class UserPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyOrn":
            suggest = "policy_orn"
        elif key == "creationDate":
            suggest = "creation_date"
        elif key == "defaultVersionId":
            suggest = "default_version_id"
        elif key == "lastModificationDate":
            suggest = "last_modification_date"
        elif key == "policyId":
            suggest = "policy_id"
        elif key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_orn: _builtins.str,
                 creation_date: Optional[_builtins.str] = None,
                 default_version_id: Optional[_builtins.str] = None,
                 last_modification_date: Optional[_builtins.str] = None,
                 policy_id: Optional[_builtins.str] = None,
                 policy_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str creation_date: The date and time (UTC) of creation of the EIM user.
        :param _builtins.str default_version_id: The ID of a policy version that you want to make the default one (the active one).
        :param _builtins.str last_modification_date: The date and time (UTC) of the last modification of the EIM user.
        """
        pulumi.set(__self__, "policy_orn", policy_orn)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if default_version_id is not None:
            pulumi.set(__self__, "default_version_id", default_version_id)
        if last_modification_date is not None:
            pulumi.set(__self__, "last_modification_date", last_modification_date)
        if policy_id is not None:
            pulumi.set(__self__, "policy_id", policy_id)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @_builtins.property
    @pulumi.getter(name="policyOrn")
    def policy_orn(self) -> _builtins.str:
        return pulumi.get(self, "policy_orn")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[_builtins.str]:
        """
        The date and time (UTC) of creation of the EIM user.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="defaultVersionId")
    def default_version_id(self) -> Optional[_builtins.str]:
        """
        The ID of a policy version that you want to make the default one (the active one).
        """
        return pulumi.get(self, "default_version_id")

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> Optional[_builtins.str]:
        """
        The date and time (UTC) of the last modification of the EIM user.
        """
        return pulumi.get(self, "last_modification_date")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class VirtualGatewayLinkNetToVirtualGatewayLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "netId":
            suggest = "net_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualGatewayLinkNetToVirtualGatewayLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualGatewayLinkNetToVirtualGatewayLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualGatewayLinkNetToVirtualGatewayLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 net_id: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None):
        """
        :param _builtins.str net_id: The ID of the Net to which you want to attach the virtual gateway.
        :param _builtins.str state: The state of the attachment (`attaching` \\| `attached` \\| `detaching` \\| `detached`).
        """
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[_builtins.str]:
        """
        The ID of the Net to which you want to attach the virtual gateway.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The state of the attachment (`attaching` \\| `attached` \\| `detaching` \\| `detached`).
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class VirtualGatewayNetToVirtualGatewayLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "netId":
            suggest = "net_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualGatewayNetToVirtualGatewayLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualGatewayNetToVirtualGatewayLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualGatewayNetToVirtualGatewayLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 net_id: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None):
        """
        :param _builtins.str net_id: The ID of the Net to which the virtual gateway is attached.
        :param _builtins.str state: The state of the virtual gateway (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[_builtins.str]:
        """
        The ID of the Net to which the virtual gateway is attached.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The state of the virtual gateway (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class VirtualGatewayTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VmActionsOnNextBoot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secureBoot":
            suggest = "secure_boot"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmActionsOnNextBoot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmActionsOnNextBoot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmActionsOnNextBoot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secure_boot: Optional[_builtins.str] = None):
        """
        :param _builtins.str secure_boot: One action to perform on the next boot of the VM (`enable` | `disable` | `setup-mode` |`none`). For more information, see [About Secure Boot](https://docs.outscale.com/en/userguide/About-Secure-Boot.html#_secure_boot_actions).
        """
        if secure_boot is not None:
            pulumi.set(__self__, "secure_boot", secure_boot)

    @_builtins.property
    @pulumi.getter(name="secureBoot")
    def secure_boot(self) -> Optional[_builtins.str]:
        """
        One action to perform on the next boot of the VM (`enable` | `disable` | `setup-mode` |`none`). For more information, see [About Secure Boot](https://docs.outscale.com/en/userguide/About-Secure-Boot.html#_secure_boot_actions).
        """
        return pulumi.get(self, "secure_boot")


@pulumi.output_type
class VmBlockDeviceMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceName":
            suggest = "device_name"
        elif key == "noDevice":
            suggest = "no_device"
        elif key == "virtualDeviceName":
            suggest = "virtual_device_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmBlockDeviceMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmBlockDeviceMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmBlockDeviceMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bsu: Optional['outputs.VmBlockDeviceMappingBsu'] = None,
                 device_name: Optional[_builtins.str] = None,
                 no_device: Optional[_builtins.str] = None,
                 virtual_device_name: Optional[_builtins.str] = None):
        """
        :param 'VmBlockDeviceMappingBsuArgs' bsu: Information about the BSU volume to create.
        :param _builtins.str device_name: The name of the device.
        """
        if bsu is not None:
            pulumi.set(__self__, "bsu", bsu)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if no_device is not None:
            pulumi.set(__self__, "no_device", no_device)
        if virtual_device_name is not None:
            pulumi.set(__self__, "virtual_device_name", virtual_device_name)

    @_builtins.property
    @pulumi.getter
    def bsu(self) -> Optional['outputs.VmBlockDeviceMappingBsu']:
        """
        Information about the BSU volume to create.
        """
        return pulumi.get(self, "bsu")

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[_builtins.str]:
        """
        The name of the device.
        """
        return pulumi.get(self, "device_name")

    @_builtins.property
    @pulumi.getter(name="noDevice")
    def no_device(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "no_device")

    @_builtins.property
    @pulumi.getter(name="virtualDeviceName")
    def virtual_device_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "virtual_device_name")


@pulumi.output_type
class VmBlockDeviceMappingBsu(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "snapshotId":
            suggest = "snapshot_id"
        elif key == "volumeSize":
            suggest = "volume_size"
        elif key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmBlockDeviceMappingBsu. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmBlockDeviceMappingBsu.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmBlockDeviceMappingBsu.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[_builtins.bool] = None,
                 iops: Optional[_builtins.int] = None,
                 snapshot_id: Optional[_builtins.str] = None,
                 tags: Optional[Sequence['outputs.VmBlockDeviceMappingBsuTag']] = None,
                 volume_size: Optional[_builtins.int] = None,
                 volume_type: Optional[_builtins.str] = None):
        """
        :param _builtins.bool delete_on_vm_deletion: By default or if set to true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        :param _builtins.int iops: The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        :param _builtins.str snapshot_id: The ID of the snapshot used to create the volume.
        :param Sequence['VmBlockDeviceMappingBsuTagArgs'] tags: One or more tags associated with the VM.
        :param _builtins.int volume_size: The size of the volume, in gibibytes (GiB).
        """
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[_builtins.bool]:
        """
        By default or if set to true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> Optional[_builtins.int]:
        """
        The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[_builtins.str]:
        """
        The ID of the snapshot used to create the volume.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.VmBlockDeviceMappingBsuTag']]:
        """
        One or more tags associated with the VM.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[_builtins.int]:
        """
        The size of the volume, in gibibytes (GiB).
        """
        return pulumi.get(self, "volume_size")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class VmBlockDeviceMappingBsuTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VmBlockDeviceMappingsCreated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceName":
            suggest = "device_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmBlockDeviceMappingsCreated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmBlockDeviceMappingsCreated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmBlockDeviceMappingsCreated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bsus: Optional[Sequence['outputs.VmBlockDeviceMappingsCreatedBsus']] = None,
                 device_name: Optional[_builtins.str] = None):
        """
        :param Sequence['VmBlockDeviceMappingsCreatedBsusArgs'] bsus: Information about the created BSU volume.
        :param _builtins.str device_name: The name of the device.
        """
        if bsus is not None:
            pulumi.set(__self__, "bsus", bsus)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)

    @_builtins.property
    @pulumi.getter
    def bsus(self) -> Optional[Sequence['outputs.VmBlockDeviceMappingsCreatedBsus']]:
        """
        Information about the created BSU volume.
        """
        return pulumi.get(self, "bsus")

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[_builtins.str]:
        """
        The name of the device.
        """
        return pulumi.get(self, "device_name")


@pulumi.output_type
class VmBlockDeviceMappingsCreatedBsus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "linkDate":
            suggest = "link_date"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmBlockDeviceMappingsCreatedBsus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmBlockDeviceMappingsCreatedBsus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmBlockDeviceMappingsCreatedBsus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[_builtins.bool] = None,
                 link_date: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None,
                 tags: Optional[Sequence['outputs.VmBlockDeviceMappingsCreatedBsusTag']] = None,
                 volume_id: Optional[_builtins.str] = None):
        """
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.str link_date: The date and time (UTC) at which the volume was attached to the VM, in ISO 8601 date-time format.
        :param _builtins.str state: The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        :param Sequence['VmBlockDeviceMappingsCreatedBsusTagArgs'] tags: A tag to add to this resource. You can specify this argument several times.
        :param _builtins.str volume_id: The ID of the volume.
        """
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if link_date is not None:
            pulumi.set(__self__, "link_date", link_date)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[_builtins.bool]:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="linkDate")
    def link_date(self) -> Optional[_builtins.str]:
        """
        The date and time (UTC) at which the volume was attached to the VM, in ISO 8601 date-time format.
        """
        return pulumi.get(self, "link_date")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.VmBlockDeviceMappingsCreatedBsusTag']]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[_builtins.str]:
        """
        The ID of the volume.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class VmBlockDeviceMappingsCreatedBsusTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VmNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceNumber":
            suggest = "device_number"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "isSourceDestChecked":
            suggest = "is_source_dest_checked"
        elif key == "linkNics":
            suggest = "link_nics"
        elif key == "linkPublicIps":
            suggest = "link_public_ips"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "netId":
            suggest = "net_id"
        elif key == "nicId":
            suggest = "nic_id"
        elif key == "privateDnsName":
            suggest = "private_dns_name"
        elif key == "privateIps":
            suggest = "private_ips"
        elif key == "secondaryPrivateIpCount":
            suggest = "secondary_private_ip_count"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_number: _builtins.int,
                 account_id: Optional[_builtins.str] = None,
                 delete_on_vm_deletion: Optional[_builtins.bool] = None,
                 description: Optional[_builtins.str] = None,
                 is_source_dest_checked: Optional[_builtins.bool] = None,
                 link_nics: Optional[Sequence['outputs.VmNicLinkNic']] = None,
                 link_public_ips: Optional[Sequence['outputs.VmNicLinkPublicIp']] = None,
                 mac_address: Optional[_builtins.str] = None,
                 net_id: Optional[_builtins.str] = None,
                 nic_id: Optional[_builtins.str] = None,
                 private_dns_name: Optional[_builtins.str] = None,
                 private_ips: Optional[Sequence['outputs.VmNicPrivateIp']] = None,
                 secondary_private_ip_count: Optional[_builtins.int] = None,
                 security_group_ids: Optional[Sequence[_builtins.str]] = None,
                 security_groups: Optional[Sequence['outputs.VmNicSecurityGroup']] = None,
                 state: Optional[_builtins.str] = None,
                 subnet_id: Optional[_builtins.str] = None):
        """
        :param _builtins.int device_number: The index of the VM device for the NIC attachment (between `1` and `7`, both included). This parameter is required if you create a NIC when creating the VM.
        :param _builtins.str account_id: The account ID of the owner of the NIC.
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated. You can specify this parameter only for a new NIC. To modify this value for an existing NIC, see [UpdateNic](https://docs.outscale.com/api#updatenic).
        :param _builtins.str description: The description of the NIC, if you are creating a NIC when creating the VM.
        :param _builtins.bool is_source_dest_checked: (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        :param Sequence['VmNicLinkNicArgs'] link_nics: Information about the network interface card (NIC).
        :param Sequence['VmNicLinkPublicIpArgs'] link_public_ips: Information about the public IP associated with the NIC.
        :param _builtins.str mac_address: The Media Access Control (MAC) address of the NIC.
        :param _builtins.str net_id: The ID of the Net for the NIC.
        :param _builtins.str nic_id: The ID of the NIC, if you are attaching an existing NIC when creating a VM.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param Sequence['VmNicPrivateIpArgs'] private_ips: One or more private IPs to assign to the NIC, if you create a NIC when creating a VM. Only one private IP can be the primary private IP.
        :param _builtins.int secondary_private_ip_count: The number of secondary private IPs, if you create a NIC when creating a VM. This parameter cannot be specified if you specified more than one private IP in the `private_ips` parameter.
        :param Sequence[_builtins.str] security_group_ids: One or more IDs of security groups for the NIC, if you create a NIC when creating a VM.
        :param Sequence['VmNicSecurityGroupArgs'] security_groups: One or more security groups associated with the VM.
        :param _builtins.str state: The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        :param _builtins.str subnet_id: The ID of the Subnet for the NIC, if you create a NIC when creating a VM. This parameter is required if you create a NIC when creating the VM.
        """
        pulumi.set(__self__, "device_number", device_number)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_source_dest_checked is not None:
            pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        if link_nics is not None:
            pulumi.set(__self__, "link_nics", link_nics)
        if link_public_ips is not None:
            pulumi.set(__self__, "link_public_ips", link_public_ips)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if nic_id is not None:
            pulumi.set(__self__, "nic_id", nic_id)
        if private_dns_name is not None:
            pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)
        if secondary_private_ip_count is not None:
            pulumi.set(__self__, "secondary_private_ip_count", secondary_private_ip_count)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> _builtins.int:
        """
        The index of the VM device for the NIC attachment (between `1` and `7`, both included). This parameter is required if you create a NIC when creating the VM.
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        """
        The account ID of the owner of the NIC.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[_builtins.bool]:
        """
        If true, the NIC is deleted when the VM is terminated. You can specify this parameter only for a new NIC. To modify this value for an existing NIC, see [UpdateNic](https://docs.outscale.com/api#updatenic).
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the NIC, if you are creating a NIC when creating the VM.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> Optional[_builtins.bool]:
        """
        (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        """
        return pulumi.get(self, "is_source_dest_checked")

    @_builtins.property
    @pulumi.getter(name="linkNics")
    def link_nics(self) -> Optional[Sequence['outputs.VmNicLinkNic']]:
        """
        Information about the network interface card (NIC).
        """
        return pulumi.get(self, "link_nics")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Optional[Sequence['outputs.VmNicLinkPublicIp']]:
        """
        Information about the public IP associated with the NIC.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        The Media Access Control (MAC) address of the NIC.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[_builtins.str]:
        """
        The ID of the Net for the NIC.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> Optional[_builtins.str]:
        """
        The ID of the NIC, if you are attaching an existing NIC when creating a VM.
        """
        return pulumi.get(self, "nic_id")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> Optional[_builtins.str]:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[Sequence['outputs.VmNicPrivateIp']]:
        """
        One or more private IPs to assign to the NIC, if you create a NIC when creating a VM. Only one private IP can be the primary private IP.
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter(name="secondaryPrivateIpCount")
    def secondary_private_ip_count(self) -> Optional[_builtins.int]:
        """
        The number of secondary private IPs, if you create a NIC when creating a VM. This parameter cannot be specified if you specified more than one private IP in the `private_ips` parameter.
        """
        return pulumi.get(self, "secondary_private_ip_count")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        One or more IDs of security groups for the NIC, if you create a NIC when creating a VM.
        """
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence['outputs.VmNicSecurityGroup']]:
        """
        One or more security groups associated with the VM.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        """
        The ID of the Subnet for the NIC, if you create a NIC when creating a VM. This parameter is required if you create a NIC when creating the VM.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class VmNicLinkNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "deviceNumber":
            suggest = "device_number"
        elif key == "linkNicId":
            suggest = "link_nic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmNicLinkNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmNicLinkNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmNicLinkNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[_builtins.bool] = None,
                 device_number: Optional[_builtins.str] = None,
                 link_nic_id: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None):
        """
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.str device_number: The device index for the NIC attachment (between `1` and `7`, both included).
        :param _builtins.str link_nic_id: The ID of the NIC to attach.
        :param _builtins.str state: The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        """
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if device_number is not None:
            pulumi.set(__self__, "device_number", device_number)
        if link_nic_id is not None:
            pulumi.set(__self__, "link_nic_id", link_nic_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[_builtins.bool]:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> Optional[_builtins.str]:
        """
        The device index for the NIC attachment (between `1` and `7`, both included).
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> Optional[_builtins.str]:
        """
        The ID of the NIC to attach.
        """
        return pulumi.get(self, "link_nic_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class VmNicLinkPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicDnsName":
            suggest = "public_dns_name"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "publicIpAccountId":
            suggest = "public_ip_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmNicLinkPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmNicLinkPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmNicLinkPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_dns_name: Optional[_builtins.str] = None,
                 public_ip: Optional[_builtins.str] = None,
                 public_ip_account_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP of the VM.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        """
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_account_id is not None:
            pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[_builtins.str]:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> Optional[_builtins.str]:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class VmNicPrivateIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isPrimary":
            suggest = "is_primary"
        elif key == "linkPublicIps":
            suggest = "link_public_ips"
        elif key == "privateDnsName":
            suggest = "private_dns_name"
        elif key == "privateIp":
            suggest = "private_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmNicPrivateIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmNicPrivateIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmNicPrivateIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_primary: Optional[_builtins.bool] = None,
                 link_public_ips: Optional[Sequence['outputs.VmNicPrivateIpLinkPublicIp']] = None,
                 private_dns_name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None):
        """
        :param _builtins.bool is_primary: If true, the IP is the primary private IP of the NIC.
        :param Sequence['VmNicPrivateIpLinkPublicIpArgs'] link_public_ips: Information about the public IP associated with the NIC.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param _builtins.str private_ip: The private IP of the NIC.
        """
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if link_public_ips is not None:
            pulumi.set(__self__, "link_public_ips", link_public_ips)
        if private_dns_name is not None:
            pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)

    @_builtins.property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[_builtins.bool]:
        """
        If true, the IP is the primary private IP of the NIC.
        """
        return pulumi.get(self, "is_primary")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Optional[Sequence['outputs.VmNicPrivateIpLinkPublicIp']]:
        """
        Information about the public IP associated with the NIC.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> Optional[_builtins.str]:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        The private IP of the NIC.
        """
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class VmNicPrivateIpLinkPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicDnsName":
            suggest = "public_dns_name"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "publicIpAccountId":
            suggest = "public_ip_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmNicPrivateIpLinkPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmNicPrivateIpLinkPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmNicPrivateIpLinkPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_dns_name: Optional[_builtins.str] = None,
                 public_ip: Optional[_builtins.str] = None,
                 public_ip_account_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP of the VM.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        """
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_account_id is not None:
            pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[_builtins.str]:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> Optional[_builtins.str]:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class VmNicSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmNicSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmNicSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmNicSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_id: Optional[_builtins.str] = None,
                 security_group_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[_builtins.str]:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[_builtins.str]:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class VmPrimaryNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceNumber":
            suggest = "device_number"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "isSourceDestChecked":
            suggest = "is_source_dest_checked"
        elif key == "linkNics":
            suggest = "link_nics"
        elif key == "linkPublicIps":
            suggest = "link_public_ips"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "netId":
            suggest = "net_id"
        elif key == "nicId":
            suggest = "nic_id"
        elif key == "privateDnsName":
            suggest = "private_dns_name"
        elif key == "privateIps":
            suggest = "private_ips"
        elif key == "secondaryPrivateIpCount":
            suggest = "secondary_private_ip_count"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmPrimaryNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmPrimaryNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmPrimaryNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_number: _builtins.int,
                 account_id: Optional[_builtins.str] = None,
                 delete_on_vm_deletion: Optional[_builtins.bool] = None,
                 description: Optional[_builtins.str] = None,
                 is_source_dest_checked: Optional[_builtins.bool] = None,
                 link_nics: Optional[Sequence['outputs.VmPrimaryNicLinkNic']] = None,
                 link_public_ips: Optional[Sequence['outputs.VmPrimaryNicLinkPublicIp']] = None,
                 mac_address: Optional[_builtins.str] = None,
                 net_id: Optional[_builtins.str] = None,
                 nic_id: Optional[_builtins.str] = None,
                 private_dns_name: Optional[_builtins.str] = None,
                 private_ips: Optional[Sequence['outputs.VmPrimaryNicPrivateIp']] = None,
                 secondary_private_ip_count: Optional[_builtins.int] = None,
                 security_group_ids: Optional[Sequence[_builtins.str]] = None,
                 security_groups: Optional[Sequence['outputs.VmPrimaryNicSecurityGroup']] = None,
                 state: Optional[_builtins.str] = None,
                 subnet_id: Optional[_builtins.str] = None):
        """
        :param _builtins.int device_number: The index of the VM device for the NIC attachment (must be `0`). This parameter is required if you create a NIC when creating the VM.
        :param _builtins.str account_id: The account ID of the owner of the NIC.
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated. You can specify this parameter only for a new NIC. To modify this value for an existing NIC, see [UpdateNic](https://docs.outscale.com/api#updatenic).
        :param _builtins.str description: The description of the NIC, if you are creating a NIC when creating the VM.
        :param _builtins.bool is_source_dest_checked: (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        :param Sequence['VmPrimaryNicLinkNicArgs'] link_nics: Information about the network interface card (NIC).
        :param Sequence['VmPrimaryNicLinkPublicIpArgs'] link_public_ips: Information about the public IP associated with the NIC.
        :param _builtins.str mac_address: The Media Access Control (MAC) address of the NIC.
        :param _builtins.str net_id: The ID of the Net for the NIC.
        :param _builtins.str nic_id: The ID of the NIC, if you are attaching an existing NIC when creating a VM.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param Sequence['VmPrimaryNicPrivateIpArgs'] private_ips: One or more private IPs to assign to the NIC, if you create a NIC when creating a VM. Only one private IP can be the primary private IP.
        :param _builtins.int secondary_private_ip_count: The number of secondary private IPs, if you create a NIC when creating a VM. This parameter cannot be specified if you specified more than one private IP in the `private_ips` parameter.
        :param Sequence[_builtins.str] security_group_ids: One or more IDs of security groups for the NIC, if you create a NIC when creating a VM.
        :param Sequence['VmPrimaryNicSecurityGroupArgs'] security_groups: One or more security groups associated with the VM.
        :param _builtins.str state: The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        :param _builtins.str subnet_id: The ID of the Subnet for the NIC, if you create a NIC when creating a VM. This parameter is required if you create a NIC when creating the VM.
        """
        pulumi.set(__self__, "device_number", device_number)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_source_dest_checked is not None:
            pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        if link_nics is not None:
            pulumi.set(__self__, "link_nics", link_nics)
        if link_public_ips is not None:
            pulumi.set(__self__, "link_public_ips", link_public_ips)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if nic_id is not None:
            pulumi.set(__self__, "nic_id", nic_id)
        if private_dns_name is not None:
            pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)
        if secondary_private_ip_count is not None:
            pulumi.set(__self__, "secondary_private_ip_count", secondary_private_ip_count)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> _builtins.int:
        """
        The index of the VM device for the NIC attachment (must be `0`). This parameter is required if you create a NIC when creating the VM.
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        """
        The account ID of the owner of the NIC.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[_builtins.bool]:
        """
        If true, the NIC is deleted when the VM is terminated. You can specify this parameter only for a new NIC. To modify this value for an existing NIC, see [UpdateNic](https://docs.outscale.com/api#updatenic).
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of the NIC, if you are creating a NIC when creating the VM.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> Optional[_builtins.bool]:
        """
        (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        """
        return pulumi.get(self, "is_source_dest_checked")

    @_builtins.property
    @pulumi.getter(name="linkNics")
    def link_nics(self) -> Optional[Sequence['outputs.VmPrimaryNicLinkNic']]:
        """
        Information about the network interface card (NIC).
        """
        return pulumi.get(self, "link_nics")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Optional[Sequence['outputs.VmPrimaryNicLinkPublicIp']]:
        """
        Information about the public IP associated with the NIC.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[_builtins.str]:
        """
        The Media Access Control (MAC) address of the NIC.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[_builtins.str]:
        """
        The ID of the Net for the NIC.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> Optional[_builtins.str]:
        """
        The ID of the NIC, if you are attaching an existing NIC when creating a VM.
        """
        return pulumi.get(self, "nic_id")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> Optional[_builtins.str]:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[Sequence['outputs.VmPrimaryNicPrivateIp']]:
        """
        One or more private IPs to assign to the NIC, if you create a NIC when creating a VM. Only one private IP can be the primary private IP.
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter(name="secondaryPrivateIpCount")
    def secondary_private_ip_count(self) -> Optional[_builtins.int]:
        """
        The number of secondary private IPs, if you create a NIC when creating a VM. This parameter cannot be specified if you specified more than one private IP in the `private_ips` parameter.
        """
        return pulumi.get(self, "secondary_private_ip_count")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[_builtins.str]]:
        """
        One or more IDs of security groups for the NIC, if you create a NIC when creating a VM.
        """
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence['outputs.VmPrimaryNicSecurityGroup']]:
        """
        One or more security groups associated with the VM.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[_builtins.str]:
        """
        The ID of the Subnet for the NIC, if you create a NIC when creating a VM. This parameter is required if you create a NIC when creating the VM.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class VmPrimaryNicLinkNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "deviceNumber":
            suggest = "device_number"
        elif key == "linkNicId":
            suggest = "link_nic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmPrimaryNicLinkNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmPrimaryNicLinkNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmPrimaryNicLinkNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[_builtins.bool] = None,
                 device_number: Optional[_builtins.str] = None,
                 link_nic_id: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None):
        """
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.str device_number: The device index for the NIC attachment (between `1` and `7`, both included).
        :param _builtins.str link_nic_id: The ID of the NIC to attach.
        :param _builtins.str state: The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        """
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if device_number is not None:
            pulumi.set(__self__, "device_number", device_number)
        if link_nic_id is not None:
            pulumi.set(__self__, "link_nic_id", link_nic_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[_builtins.bool]:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> Optional[_builtins.str]:
        """
        The device index for the NIC attachment (between `1` and `7`, both included).
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> Optional[_builtins.str]:
        """
        The ID of the NIC to attach.
        """
        return pulumi.get(self, "link_nic_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class VmPrimaryNicLinkPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicDnsName":
            suggest = "public_dns_name"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "publicIpAccountId":
            suggest = "public_ip_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmPrimaryNicLinkPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmPrimaryNicLinkPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmPrimaryNicLinkPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_dns_name: Optional[_builtins.str] = None,
                 public_ip: Optional[_builtins.str] = None,
                 public_ip_account_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP of the VM.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        """
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_account_id is not None:
            pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[_builtins.str]:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> Optional[_builtins.str]:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class VmPrimaryNicPrivateIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isPrimary":
            suggest = "is_primary"
        elif key == "linkPublicIps":
            suggest = "link_public_ips"
        elif key == "privateDnsName":
            suggest = "private_dns_name"
        elif key == "privateIp":
            suggest = "private_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmPrimaryNicPrivateIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmPrimaryNicPrivateIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmPrimaryNicPrivateIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_primary: Optional[_builtins.bool] = None,
                 link_public_ips: Optional[Sequence['outputs.VmPrimaryNicPrivateIpLinkPublicIp']] = None,
                 private_dns_name: Optional[_builtins.str] = None,
                 private_ip: Optional[_builtins.str] = None):
        """
        :param _builtins.bool is_primary: If true, the IP is the primary private IP of the NIC.
        :param Sequence['VmPrimaryNicPrivateIpLinkPublicIpArgs'] link_public_ips: Information about the public IP associated with the NIC.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param _builtins.str private_ip: The private IP of the NIC.
        """
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if link_public_ips is not None:
            pulumi.set(__self__, "link_public_ips", link_public_ips)
        if private_dns_name is not None:
            pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)

    @_builtins.property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[_builtins.bool]:
        """
        If true, the IP is the primary private IP of the NIC.
        """
        return pulumi.get(self, "is_primary")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Optional[Sequence['outputs.VmPrimaryNicPrivateIpLinkPublicIp']]:
        """
        Information about the public IP associated with the NIC.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> Optional[_builtins.str]:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[_builtins.str]:
        """
        The private IP of the NIC.
        """
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class VmPrimaryNicPrivateIpLinkPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicDnsName":
            suggest = "public_dns_name"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "publicIpAccountId":
            suggest = "public_ip_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmPrimaryNicPrivateIpLinkPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmPrimaryNicPrivateIpLinkPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmPrimaryNicPrivateIpLinkPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_dns_name: Optional[_builtins.str] = None,
                 public_ip: Optional[_builtins.str] = None,
                 public_ip_account_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP of the VM.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        """
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_account_id is not None:
            pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[_builtins.str]:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[_builtins.str]:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> Optional[_builtins.str]:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class VmPrimaryNicSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmPrimaryNicSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmPrimaryNicSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmPrimaryNicSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_id: Optional[_builtins.str] = None,
                 security_group_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[_builtins.str]:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[_builtins.str]:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class VmSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_id: Optional[_builtins.str] = None,
                 security_group_name: Optional[_builtins.str] = None):
        """
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[_builtins.str]:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[_builtins.str]:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class VmTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VolumeLinkTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class VolumeLinkedVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "deviceName":
            suggest = "device_name"
        elif key == "vmId":
            suggest = "vm_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeLinkedVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeLinkedVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeLinkedVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_vm_deletion: _builtins.bool,
                 device_name: _builtins.str,
                 state: _builtins.str,
                 vm_id: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.bool delete_on_vm_deletion: If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        :param _builtins.str device_name: The name of the device.
        :param _builtins.str state: The state of the volume (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).
        :param _builtins.str vm_id: The ID of the VM.
        :param _builtins.str volume_id: The ID of the volume.
        """
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_id", vm_id)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> _builtins.str:
        """
        The name of the device.
        """
        return pulumi.get(self, "device_name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the volume (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        The ID of the VM.
        """
        return pulumi.get(self, "vm_id")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The ID of the volume.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class VolumeTag(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VolumeTimeouts(dict):
    def __init__(__self__, *,
                 create: Optional[_builtins.str] = None,
                 delete: Optional[_builtins.str] = None,
                 read: Optional[_builtins.str] = None,
                 update: Optional[_builtins.str] = None):
        """
        :param _builtins.str create: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        :param _builtins.str delete: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        :param _builtins.str read: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        :param _builtins.str update: A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if read is not None:
            pulumi.set(__self__, "read", read)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @_builtins.property
    @pulumi.getter
    def create(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "create")

    @_builtins.property
    @pulumi.getter
    def delete(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
        """
        return pulumi.get(self, "delete")

    @_builtins.property
    @pulumi.getter
    def read(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Read operations occur during any refresh or planning operation when refresh is enabled.
        """
        return pulumi.get(self, "read")

    @_builtins.property
    @pulumi.getter
    def update(self) -> Optional[_builtins.str]:
        """
        A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
        """
        return pulumi.get(self, "update")


@pulumi.output_type
class VpnConnectionRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationIpRange":
            suggest = "destination_ip_range"
        elif key == "routeType":
            suggest = "route_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnConnectionRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnConnectionRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnConnectionRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_ip_range: Optional[_builtins.str] = None,
                 route_type: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None):
        """
        :param _builtins.str destination_ip_range: The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        :param _builtins.str route_type: The type of route (always `static`).
        :param _builtins.str state: The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        """
        if destination_ip_range is not None:
            pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        if route_type is not None:
            pulumi.set(__self__, "route_type", route_type)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> Optional[_builtins.str]:
        """
        The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        """
        return pulumi.get(self, "destination_ip_range")

    @_builtins.property
    @pulumi.getter(name="routeType")
    def route_type(self) -> Optional[_builtins.str]:
        """
        The type of route (always `static`).
        """
        return pulumi.get(self, "route_type")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class VpnConnectionTag(dict):
    def __init__(__self__, *,
                 key: Optional[_builtins.str] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[_builtins.str]:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class VpnConnectionVgwTelemetry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptedRouteCount":
            suggest = "accepted_route_count"
        elif key == "lastStateChangeDate":
            suggest = "last_state_change_date"
        elif key == "outsideIpAddress":
            suggest = "outside_ip_address"
        elif key == "stateDescription":
            suggest = "state_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnConnectionVgwTelemetry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnConnectionVgwTelemetry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnConnectionVgwTelemetry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accepted_route_count: Optional[_builtins.int] = None,
                 last_state_change_date: Optional[_builtins.str] = None,
                 outside_ip_address: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None,
                 state_description: Optional[_builtins.str] = None):
        """
        :param _builtins.int accepted_route_count: The number of routes accepted through BGP (Border Gateway Protocol) route exchanges.
        :param _builtins.str last_state_change_date: The date and time (UTC) of the latest state update.
        :param _builtins.str outside_ip_address: The IP on the OUTSCALE side of the tunnel.
        :param _builtins.str state: The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        :param _builtins.str state_description: A description of the current state of the tunnel.
        """
        if accepted_route_count is not None:
            pulumi.set(__self__, "accepted_route_count", accepted_route_count)
        if last_state_change_date is not None:
            pulumi.set(__self__, "last_state_change_date", last_state_change_date)
        if outside_ip_address is not None:
            pulumi.set(__self__, "outside_ip_address", outside_ip_address)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_description is not None:
            pulumi.set(__self__, "state_description", state_description)

    @_builtins.property
    @pulumi.getter(name="acceptedRouteCount")
    def accepted_route_count(self) -> Optional[_builtins.int]:
        """
        The number of routes accepted through BGP (Border Gateway Protocol) route exchanges.
        """
        return pulumi.get(self, "accepted_route_count")

    @_builtins.property
    @pulumi.getter(name="lastStateChangeDate")
    def last_state_change_date(self) -> Optional[_builtins.str]:
        """
        The date and time (UTC) of the latest state update.
        """
        return pulumi.get(self, "last_state_change_date")

    @_builtins.property
    @pulumi.getter(name="outsideIpAddress")
    def outside_ip_address(self) -> Optional[_builtins.str]:
        """
        The IP on the OUTSCALE side of the tunnel.
        """
        return pulumi.get(self, "outside_ip_address")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="stateDescription")
    def state_description(self) -> Optional[_builtins.str]:
        """
        A description of the current state of the tunnel.
        """
        return pulumi.get(self, "state_description")


@pulumi.output_type
class GetAccessKeyFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAccessKeysAccessKeyResult(dict):
    def __init__(__self__, *,
                 access_key_id: _builtins.str,
                 creation_date: _builtins.str,
                 expiration_date: _builtins.str,
                 last_modification_date: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str access_key_id: The ID of the access key.
        :param _builtins.str creation_date: The date and time (UTC) at which the access key was created.
        :param _builtins.str expiration_date: The date and time (UTC) at which the access key expires.
        :param _builtins.str last_modification_date: The date and time (UTC) at which the access key was last modified.
        :param _builtins.str state: The state of the access key (`ACTIVE` if the key is valid for API calls, or `INACTIVE` if not).
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "expiration_date", expiration_date)
        pulumi.set(__self__, "last_modification_date", last_modification_date)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> _builtins.str:
        """
        The ID of the access key.
        """
        return pulumi.get(self, "access_key_id")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the access key was created.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the access key expires.
        """
        return pulumi.get(self, "expiration_date")

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the access key was last modified.
        """
        return pulumi.get(self, "last_modification_date")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the access key (`ACTIVE` if the key is valid for API calls, or `INACTIVE` if not).
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetAccessKeysFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAccountsAccountResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 additional_emails: Sequence[_builtins.str],
                 city: _builtins.str,
                 company_name: _builtins.str,
                 country: _builtins.str,
                 customer_id: _builtins.str,
                 email: _builtins.str,
                 first_name: _builtins.str,
                 job_title: _builtins.str,
                 last_name: _builtins.str,
                 mobile_number: _builtins.str,
                 phone_number: _builtins.str,
                 state_province: _builtins.str,
                 vat_number: _builtins.str,
                 zip_code: _builtins.str):
        """
        :param _builtins.str account_id: The ID of the account.
        :param Sequence[_builtins.str] additional_emails: One or more additional email addresses for the account. These addresses are used for notifications only.
        :param _builtins.str city: The city of the account owner.
        :param _builtins.str company_name: The name of the company for the account.
        :param _builtins.str country: The country of the account owner.
        :param _builtins.str customer_id: The ID of the customer.
        :param _builtins.str email: The main email address for the account. This address is used for your credentials and for notifications.
        :param _builtins.str first_name: The first name of the account owner.
        :param _builtins.str job_title: The job title of the account owner.
        :param _builtins.str last_name: The last name of the account owner.
        :param _builtins.str mobile_number: The mobile phone number of the account owner.
        :param _builtins.str phone_number: The landline phone number of the account owner.
        :param _builtins.str state_province: The state/province of the account.
        :param _builtins.str vat_number: The value added tax (VAT) number for the account.
        :param _builtins.str zip_code: The ZIP code of the city.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "additional_emails", additional_emails)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "company_name", company_name)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "job_title", job_title)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "mobile_number", mobile_number)
        pulumi.set(__self__, "phone_number", phone_number)
        pulumi.set(__self__, "state_province", state_province)
        pulumi.set(__self__, "vat_number", vat_number)
        pulumi.set(__self__, "zip_code", zip_code)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The ID of the account.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="additionalEmails")
    def additional_emails(self) -> Sequence[_builtins.str]:
        """
        One or more additional email addresses for the account. These addresses are used for notifications only.
        """
        return pulumi.get(self, "additional_emails")

    @_builtins.property
    @pulumi.getter
    def city(self) -> _builtins.str:
        """
        The city of the account owner.
        """
        return pulumi.get(self, "city")

    @_builtins.property
    @pulumi.getter(name="companyName")
    def company_name(self) -> _builtins.str:
        """
        The name of the company for the account.
        """
        return pulumi.get(self, "company_name")

    @_builtins.property
    @pulumi.getter
    def country(self) -> _builtins.str:
        """
        The country of the account owner.
        """
        return pulumi.get(self, "country")

    @_builtins.property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> _builtins.str:
        """
        The ID of the customer.
        """
        return pulumi.get(self, "customer_id")

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        The main email address for the account. This address is used for your credentials and for notifications.
        """
        return pulumi.get(self, "email")

    @_builtins.property
    @pulumi.getter(name="firstName")
    def first_name(self) -> _builtins.str:
        """
        The first name of the account owner.
        """
        return pulumi.get(self, "first_name")

    @_builtins.property
    @pulumi.getter(name="jobTitle")
    def job_title(self) -> _builtins.str:
        """
        The job title of the account owner.
        """
        return pulumi.get(self, "job_title")

    @_builtins.property
    @pulumi.getter(name="lastName")
    def last_name(self) -> _builtins.str:
        """
        The last name of the account owner.
        """
        return pulumi.get(self, "last_name")

    @_builtins.property
    @pulumi.getter(name="mobileNumber")
    def mobile_number(self) -> _builtins.str:
        """
        The mobile phone number of the account owner.
        """
        return pulumi.get(self, "mobile_number")

    @_builtins.property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> _builtins.str:
        """
        The landline phone number of the account owner.
        """
        return pulumi.get(self, "phone_number")

    @_builtins.property
    @pulumi.getter(name="stateProvince")
    def state_province(self) -> _builtins.str:
        """
        The state/province of the account.
        """
        return pulumi.get(self, "state_province")

    @_builtins.property
    @pulumi.getter(name="vatNumber")
    def vat_number(self) -> _builtins.str:
        """
        The value added tax (VAT) number for the account.
        """
        return pulumi.get(self, "vat_number")

    @_builtins.property
    @pulumi.getter(name="zipCode")
    def zip_code(self) -> _builtins.str:
        """
        The ZIP code of the city.
        """
        return pulumi.get(self, "zip_code")


@pulumi.output_type
class GetApiAccessRuleFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiAccessRulesApiAccessRuleResult(dict):
    def __init__(__self__, *,
                 api_access_rule_id: _builtins.str,
                 ca_ids: Sequence[_builtins.str],
                 cns: Sequence[_builtins.str],
                 description: _builtins.str,
                 ip_ranges: Sequence[_builtins.str]):
        """
        :param _builtins.str api_access_rule_id: The ID of the API access rule.
        :param Sequence[_builtins.str] ca_ids: One or more IDs of Client Certificate Authorities (CAs) used for the API access rule.
        :param Sequence[_builtins.str] cns: One or more Client Certificate Common Names (CNs).
        :param _builtins.str description: The description of the API access rule.
        :param Sequence[_builtins.str] ip_ranges: One or more IP ranges used for the API access rule, in CIDR notation (for example, `192.0.2.0/16`).
        """
        pulumi.set(__self__, "api_access_rule_id", api_access_rule_id)
        pulumi.set(__self__, "ca_ids", ca_ids)
        pulumi.set(__self__, "cns", cns)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ip_ranges", ip_ranges)

    @_builtins.property
    @pulumi.getter(name="apiAccessRuleId")
    def api_access_rule_id(self) -> _builtins.str:
        """
        The ID of the API access rule.
        """
        return pulumi.get(self, "api_access_rule_id")

    @_builtins.property
    @pulumi.getter(name="caIds")
    def ca_ids(self) -> Sequence[_builtins.str]:
        """
        One or more IDs of Client Certificate Authorities (CAs) used for the API access rule.
        """
        return pulumi.get(self, "ca_ids")

    @_builtins.property
    @pulumi.getter
    def cns(self) -> Sequence[_builtins.str]:
        """
        One or more Client Certificate Common Names (CNs).
        """
        return pulumi.get(self, "cns")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the API access rule.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[_builtins.str]:
        """
        One or more IP ranges used for the API access rule, in CIDR notation (for example, `192.0.2.0/16`).
        """
        return pulumi.get(self, "ip_ranges")


@pulumi.output_type
class GetApiAccessRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCaFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCasCaResult(dict):
    def __init__(__self__, *,
                 ca_fingerprint: _builtins.str,
                 ca_id: _builtins.str,
                 description: _builtins.str):
        """
        :param _builtins.str ca_fingerprint: The fingerprint of the CA.
        :param _builtins.str ca_id: The ID of the CA.
        :param _builtins.str description: The description of the CA.
        """
        pulumi.set(__self__, "ca_fingerprint", ca_fingerprint)
        pulumi.set(__self__, "ca_id", ca_id)
        pulumi.set(__self__, "description", description)

    @_builtins.property
    @pulumi.getter(name="caFingerprint")
    def ca_fingerprint(self) -> _builtins.str:
        """
        The fingerprint of the CA.
        """
        return pulumi.get(self, "ca_fingerprint")

    @_builtins.property
    @pulumi.getter(name="caId")
    def ca_id(self) -> _builtins.str:
        """
        The ID of the CA.
        """
        return pulumi.get(self, "ca_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the CA.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class GetCasFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetClientGatewayFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetClientGatewayTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClientGatewaysClientGatewayResult(dict):
    def __init__(__self__, *,
                 bgp_asn: _builtins.int,
                 connection_type: _builtins.str,
                 public_ip: _builtins.str,
                 state: _builtins.str,
                 tags: Sequence['outputs.GetClientGatewaysClientGatewayTagResult'],
                 client_gateway_id: Optional[_builtins.str] = None):
        """
        :param _builtins.int bgp_asn: The Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find the path to your client gateway through the Internet.
        :param _builtins.str connection_type: The type of communication tunnel used by the client gateway (always `ipsec.1`).
        :param _builtins.str public_ip: The public IPv4 address of the client gateway (must be a fixed address into a NATed network).
        :param _builtins.str state: The state of the client gateway (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        :param Sequence['GetClientGatewaysClientGatewayTagArgs'] tags: One or more tags associated with the client gateway.
        :param _builtins.str client_gateway_id: The ID of the client gateway.
        """
        pulumi.set(__self__, "bgp_asn", bgp_asn)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        if client_gateway_id is not None:
            pulumi.set(__self__, "client_gateway_id", client_gateway_id)

    @_builtins.property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> _builtins.int:
        """
        The Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find the path to your client gateway through the Internet.
        """
        return pulumi.get(self, "bgp_asn")

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        The type of communication tunnel used by the client gateway (always `ipsec.1`).
        """
        return pulumi.get(self, "connection_type")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IPv4 address of the client gateway (must be a fixed address into a NATed network).
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the client gateway (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetClientGatewaysClientGatewayTagResult']:
        """
        One or more tags associated with the client gateway.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="clientGatewayId")
    def client_gateway_id(self) -> Optional[_builtins.str]:
        """
        The ID of the client gateway.
        """
        return pulumi.get(self, "client_gateway_id")


@pulumi.output_type
class GetClientGatewaysClientGatewayTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClientGatewaysFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDhcpOptionFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDhcpOptionTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDhcpOptionsDhcpOptionResult(dict):
    def __init__(__self__, *,
                 default: _builtins.bool,
                 dhcp_options_set_id: _builtins.str,
                 domain_name: _builtins.str,
                 domain_name_servers: Sequence[_builtins.str],
                 log_servers: Sequence[_builtins.str],
                 ntp_servers: Sequence[_builtins.str],
                 tags: Sequence['outputs.GetDhcpOptionsDhcpOptionTagResult']):
        """
        :param _builtins.bool default: If true, the DHCP options set is a default one. If false, it is not.
        :param _builtins.str dhcp_options_set_id: The ID of the DHCP options set.
        :param _builtins.str domain_name: The domain name.
        :param Sequence[_builtins.str] domain_name_servers: One or more IPs for the domain name servers.
        :param Sequence[_builtins.str] log_servers: One or more IPs for the log servers.
        :param Sequence[_builtins.str] ntp_servers: One or more IPs for the NTP servers.
        :param Sequence['GetDhcpOptionsDhcpOptionTagArgs'] tags: One or more tags associated with the DHCP options set.
        """
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "dhcp_options_set_id", dhcp_options_set_id)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "domain_name_servers", domain_name_servers)
        pulumi.set(__self__, "log_servers", log_servers)
        pulumi.set(__self__, "ntp_servers", ntp_servers)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def default(self) -> _builtins.bool:
        """
        If true, the DHCP options set is a default one. If false, it is not.
        """
        return pulumi.get(self, "default")

    @_builtins.property
    @pulumi.getter(name="dhcpOptionsSetId")
    def dhcp_options_set_id(self) -> _builtins.str:
        """
        The ID of the DHCP options set.
        """
        return pulumi.get(self, "dhcp_options_set_id")

    @_builtins.property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> _builtins.str:
        """
        The domain name.
        """
        return pulumi.get(self, "domain_name")

    @_builtins.property
    @pulumi.getter(name="domainNameServers")
    def domain_name_servers(self) -> Sequence[_builtins.str]:
        """
        One or more IPs for the domain name servers.
        """
        return pulumi.get(self, "domain_name_servers")

    @_builtins.property
    @pulumi.getter(name="logServers")
    def log_servers(self) -> Sequence[_builtins.str]:
        """
        One or more IPs for the log servers.
        """
        return pulumi.get(self, "log_servers")

    @_builtins.property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Sequence[_builtins.str]:
        """
        One or more IPs for the NTP servers.
        """
        return pulumi.get(self, "ntp_servers")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDhcpOptionsDhcpOptionTagResult']:
        """
        One or more tags associated with the DHCP options set.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetDhcpOptionsDhcpOptionTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDhcpOptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetEntitiesLinkedToPolicyPolicyEntityResult(dict):
    def __init__(__self__, *,
                 accounts: Sequence['outputs.GetEntitiesLinkedToPolicyPolicyEntityAccountResult'],
                 groups: Sequence['outputs.GetEntitiesLinkedToPolicyPolicyEntityGroupResult'],
                 users: Sequence['outputs.GetEntitiesLinkedToPolicyPolicyEntityUserResult']):
        """
        :param Sequence['GetEntitiesLinkedToPolicyPolicyEntityAccountArgs'] accounts: TODO_ARRAY
        :param Sequence['GetEntitiesLinkedToPolicyPolicyEntityGroupArgs'] groups: TODO_ARRAY
        :param Sequence['GetEntitiesLinkedToPolicyPolicyEntityUserArgs'] users: TODO_ARRAY
        """
        pulumi.set(__self__, "accounts", accounts)
        pulumi.set(__self__, "groups", groups)
        pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter
    def accounts(self) -> Sequence['outputs.GetEntitiesLinkedToPolicyPolicyEntityAccountResult']:
        """
        TODO_ARRAY
        """
        return pulumi.get(self, "accounts")

    @_builtins.property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetEntitiesLinkedToPolicyPolicyEntityGroupResult']:
        """
        TODO_ARRAY
        """
        return pulumi.get(self, "groups")

    @_builtins.property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetEntitiesLinkedToPolicyPolicyEntityUserResult']:
        """
        TODO_ARRAY
        """
        return pulumi.get(self, "users")


@pulumi.output_type
class GetEntitiesLinkedToPolicyPolicyEntityAccountResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 orn: _builtins.str):
        """
        :param _builtins.str id: The ID of the entity.
        :param _builtins.str name: The name of the entity.
        :param _builtins.str orn: The OUTSCALE Resource Name (ORN) of the entity. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "orn", orn)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the entity.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the entity.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def orn(self) -> _builtins.str:
        """
        The OUTSCALE Resource Name (ORN) of the entity. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        """
        return pulumi.get(self, "orn")


@pulumi.output_type
class GetEntitiesLinkedToPolicyPolicyEntityGroupResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 orn: _builtins.str):
        """
        :param _builtins.str id: The ID of the entity.
        :param _builtins.str name: The name of the entity.
        :param _builtins.str orn: The OUTSCALE Resource Name (ORN) of the entity. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "orn", orn)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the entity.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the entity.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def orn(self) -> _builtins.str:
        """
        The OUTSCALE Resource Name (ORN) of the entity. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        """
        return pulumi.get(self, "orn")


@pulumi.output_type
class GetEntitiesLinkedToPolicyPolicyEntityUserResult(dict):
    def __init__(__self__, *,
                 id: _builtins.str,
                 name: _builtins.str,
                 orn: _builtins.str):
        """
        :param _builtins.str id: The ID of the entity.
        :param _builtins.str name: The name of the entity.
        :param _builtins.str orn: The OUTSCALE Resource Name (ORN) of the entity. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "orn", orn)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the entity.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the entity.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def orn(self) -> _builtins.str:
        """
        The OUTSCALE Resource Name (ORN) of the entity. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        """
        return pulumi.get(self, "orn")


@pulumi.output_type
class GetFlexibleGpuCatalogFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetFlexibleGpuCatalogFlexibleGpuCatalogResult(dict):
    def __init__(__self__, *,
                 generations: Sequence[_builtins.str],
                 max_cpu: _builtins.int,
                 max_ram: _builtins.int,
                 model_name: _builtins.str,
                 v_ram: _builtins.int):
        """
        :param Sequence[_builtins.str] generations: The processor generations that the fGPUs are compatible with.
        :param _builtins.int max_cpu: The maximum number of VM vCores that the fGPU is compatible with.
        :param _builtins.int max_ram: The maximum amount of VM memory that the fGPU is compatible with.
        :param _builtins.str model_name: The model of fGPU.
        :param _builtins.int v_ram: The amount of video RAM (VRAM) of the fGPU.
        """
        pulumi.set(__self__, "generations", generations)
        pulumi.set(__self__, "max_cpu", max_cpu)
        pulumi.set(__self__, "max_ram", max_ram)
        pulumi.set(__self__, "model_name", model_name)
        pulumi.set(__self__, "v_ram", v_ram)

    @_builtins.property
    @pulumi.getter
    def generations(self) -> Sequence[_builtins.str]:
        """
        The processor generations that the fGPUs are compatible with.
        """
        return pulumi.get(self, "generations")

    @_builtins.property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> _builtins.int:
        """
        The maximum number of VM vCores that the fGPU is compatible with.
        """
        return pulumi.get(self, "max_cpu")

    @_builtins.property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> _builtins.int:
        """
        The maximum amount of VM memory that the fGPU is compatible with.
        """
        return pulumi.get(self, "max_ram")

    @_builtins.property
    @pulumi.getter(name="modelName")
    def model_name(self) -> _builtins.str:
        """
        The model of fGPU.
        """
        return pulumi.get(self, "model_name")

    @_builtins.property
    @pulumi.getter(name="vRam")
    def v_ram(self) -> _builtins.int:
        """
        The amount of video RAM (VRAM) of the fGPU.
        """
        return pulumi.get(self, "v_ram")


@pulumi.output_type
class GetFlexibleGpuFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetFlexibleGpusFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetFlexibleGpusFlexibleGpusResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: _builtins.bool,
                 flexible_gpu_id: _builtins.str,
                 generation: _builtins.str,
                 model_name: _builtins.str,
                 state: _builtins.str,
                 subregion_name: _builtins.str,
                 vm_id: _builtins.str):
        """
        :param _builtins.bool delete_on_vm_deletion: If true, the fGPU is deleted when the VM is terminated.
        :param _builtins.str flexible_gpu_id: The ID of the fGPU.
        :param _builtins.str generation: The compatible processor generation.
        :param _builtins.str model_name: The model of fGPU. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
        :param _builtins.str state: The state of the fGPU (`allocated` \\| `attaching` \\| `attached` \\| `detaching`).
        :param _builtins.str subregion_name: The Subregion where the fGPU is located.
        :param _builtins.str vm_id: The ID of the VM the fGPU is attached to, if any.
        """
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "flexible_gpu_id", flexible_gpu_id)
        pulumi.set(__self__, "generation", generation)
        pulumi.set(__self__, "model_name", model_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subregion_name", subregion_name)
        pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the fGPU is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="flexibleGpuId")
    def flexible_gpu_id(self) -> _builtins.str:
        """
        The ID of the fGPU.
        """
        return pulumi.get(self, "flexible_gpu_id")

    @_builtins.property
    @pulumi.getter
    def generation(self) -> _builtins.str:
        """
        The compatible processor generation.
        """
        return pulumi.get(self, "generation")

    @_builtins.property
    @pulumi.getter(name="modelName")
    def model_name(self) -> _builtins.str:
        """
        The model of fGPU. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
        """
        return pulumi.get(self, "model_name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the fGPU (`allocated` \\| `attaching` \\| `attached` \\| `detaching`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> _builtins.str:
        """
        The Subregion where the fGPU is located.
        """
        return pulumi.get(self, "subregion_name")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        The ID of the VM the fGPU is attached to, if any.
        """
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetImageBlockDeviceMappingResult(dict):
    def __init__(__self__, *,
                 bsus: Sequence['outputs.GetImageBlockDeviceMappingBsusResult'],
                 device_name: _builtins.str,
                 virtual_device_name: _builtins.str):
        """
        :param Sequence['GetImageBlockDeviceMappingBsusArgs'] bsus: Information about the BSU volume to create.
        :param _builtins.str device_name: The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        :param _builtins.str virtual_device_name: The name of the virtual device (`ephemeralN`).
        """
        pulumi.set(__self__, "bsus", bsus)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "virtual_device_name", virtual_device_name)

    @_builtins.property
    @pulumi.getter
    def bsus(self) -> Sequence['outputs.GetImageBlockDeviceMappingBsusResult']:
        """
        Information about the BSU volume to create.
        """
        return pulumi.get(self, "bsus")

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> _builtins.str:
        """
        The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        """
        return pulumi.get(self, "device_name")

    @_builtins.property
    @pulumi.getter(name="virtualDeviceName")
    def virtual_device_name(self) -> _builtins.str:
        """
        The name of the virtual device (`ephemeralN`).
        """
        return pulumi.get(self, "virtual_device_name")


@pulumi.output_type
class GetImageBlockDeviceMappingBsusResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: _builtins.bool,
                 iops: _builtins.int,
                 snapshot_id: _builtins.str,
                 volume_size: _builtins.int,
                 volume_type: _builtins.str):
        """
        :param _builtins.bool delete_on_vm_deletion: By default or if set to true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        :param _builtins.int iops: The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        :param _builtins.str snapshot_id: The ID of the snapshot used to create the volume.
        :param _builtins.int volume_size: The size of the volume, in gibibytes (GiB).<br />
               If you specify a snapshot ID, the volume size must be at least equal to the snapshot size.<br />
               If you specify a snapshot ID but no volume size, the volume is created with a size similar to the snapshot one.
        :param _builtins.str volume_type: The type of the volume (`standard` \\| `io1` \\| `gp2`). If not specified in the request, a `standard` volume is created.<br />
               For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
        """
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        By default or if set to true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> _builtins.int:
        """
        The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        The ID of the snapshot used to create the volume.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> _builtins.int:
        """
        The size of the volume, in gibibytes (GiB).<br />
        If you specify a snapshot ID, the volume size must be at least equal to the snapshot size.<br />
        If you specify a snapshot ID but no volume size, the volume is created with a size similar to the snapshot one.
        """
        return pulumi.get(self, "volume_size")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        """
        The type of the volume (`standard` \\| `io1` \\| `gp2`). If not specified in the request, a `standard` volume is created.<br />
        For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetImageExportTaskFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetImageExportTaskOsuExportResult(dict):
    def __init__(__self__, *,
                 disk_image_format: _builtins.str,
                 osu_bucket: _builtins.str,
                 osu_manifest_url: _builtins.str,
                 osu_prefix: _builtins.str):
        """
        :param _builtins.str disk_image_format: The format of the export disk (`qcow2` \\| `raw`).
        :param _builtins.str osu_bucket: The name of the OOS bucket the OMI is exported to.
        :param _builtins.str osu_manifest_url: The URL of the manifest file.
        :param _builtins.str osu_prefix: The prefix for the key of the OOS object corresponding to the image.
        """
        pulumi.set(__self__, "disk_image_format", disk_image_format)
        pulumi.set(__self__, "osu_bucket", osu_bucket)
        pulumi.set(__self__, "osu_manifest_url", osu_manifest_url)
        pulumi.set(__self__, "osu_prefix", osu_prefix)

    @_builtins.property
    @pulumi.getter(name="diskImageFormat")
    def disk_image_format(self) -> _builtins.str:
        """
        The format of the export disk (`qcow2` \\| `raw`).
        """
        return pulumi.get(self, "disk_image_format")

    @_builtins.property
    @pulumi.getter(name="osuBucket")
    def osu_bucket(self) -> _builtins.str:
        """
        The name of the OOS bucket the OMI is exported to.
        """
        return pulumi.get(self, "osu_bucket")

    @_builtins.property
    @pulumi.getter(name="osuManifestUrl")
    def osu_manifest_url(self) -> _builtins.str:
        """
        The URL of the manifest file.
        """
        return pulumi.get(self, "osu_manifest_url")

    @_builtins.property
    @pulumi.getter(name="osuPrefix")
    def osu_prefix(self) -> _builtins.str:
        """
        The prefix for the key of the OOS object corresponding to the image.
        """
        return pulumi.get(self, "osu_prefix")


@pulumi.output_type
class GetImageExportTaskTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageExportTasksFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetImageExportTasksImageExportTaskResult(dict):
    def __init__(__self__, *,
                 comment: _builtins.str,
                 image_id: _builtins.str,
                 osu_exports: Sequence['outputs.GetImageExportTasksImageExportTaskOsuExportResult'],
                 progress: _builtins.int,
                 state: _builtins.str,
                 tags: Sequence['outputs.GetImageExportTasksImageExportTaskTagResult'],
                 task_id: _builtins.str):
        """
        :param _builtins.str comment: If the OMI export task fails, an error message appears.
        :param _builtins.str image_id: The ID of the OMI to be exported.
        :param Sequence['GetImageExportTasksImageExportTaskOsuExportArgs'] osu_exports: Information about the OMI export task.
        :param _builtins.int progress: The progress of the OMI export task, as a percentage.
        :param _builtins.str state: The state of the OMI export task (`pending/queued` \\| `pending` \\| `completed` \\| `failed` \\| `cancelled`).
        :param Sequence['GetImageExportTasksImageExportTaskTagArgs'] tags: One or more tags associated with the image export task.
        :param _builtins.str task_id: The ID of the OMI export task.
        """
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "osu_exports", osu_exports)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "task_id", task_id)

    @_builtins.property
    @pulumi.getter
    def comment(self) -> _builtins.str:
        """
        If the OMI export task fails, an error message appears.
        """
        return pulumi.get(self, "comment")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The ID of the OMI to be exported.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="osuExports")
    def osu_exports(self) -> Sequence['outputs.GetImageExportTasksImageExportTaskOsuExportResult']:
        """
        Information about the OMI export task.
        """
        return pulumi.get(self, "osu_exports")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.int:
        """
        The progress of the OMI export task, as a percentage.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the OMI export task (`pending/queued` \\| `pending` \\| `completed` \\| `failed` \\| `cancelled`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetImageExportTasksImageExportTaskTagResult']:
        """
        One or more tags associated with the image export task.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> _builtins.str:
        """
        The ID of the OMI export task.
        """
        return pulumi.get(self, "task_id")


@pulumi.output_type
class GetImageExportTasksImageExportTaskOsuExportResult(dict):
    def __init__(__self__, *,
                 disk_image_format: _builtins.str,
                 osu_bucket: _builtins.str,
                 osu_manifest_url: _builtins.str,
                 osu_prefix: _builtins.str):
        """
        :param _builtins.str disk_image_format: The format of the export disk (`qcow2` \\| `raw`).
        :param _builtins.str osu_bucket: The name of the OOS bucket the OMI is exported to.
        :param _builtins.str osu_manifest_url: The URL of the manifest file.
        :param _builtins.str osu_prefix: The prefix for the key of the OOS object corresponding to the image.
        """
        pulumi.set(__self__, "disk_image_format", disk_image_format)
        pulumi.set(__self__, "osu_bucket", osu_bucket)
        pulumi.set(__self__, "osu_manifest_url", osu_manifest_url)
        pulumi.set(__self__, "osu_prefix", osu_prefix)

    @_builtins.property
    @pulumi.getter(name="diskImageFormat")
    def disk_image_format(self) -> _builtins.str:
        """
        The format of the export disk (`qcow2` \\| `raw`).
        """
        return pulumi.get(self, "disk_image_format")

    @_builtins.property
    @pulumi.getter(name="osuBucket")
    def osu_bucket(self) -> _builtins.str:
        """
        The name of the OOS bucket the OMI is exported to.
        """
        return pulumi.get(self, "osu_bucket")

    @_builtins.property
    @pulumi.getter(name="osuManifestUrl")
    def osu_manifest_url(self) -> _builtins.str:
        """
        The URL of the manifest file.
        """
        return pulumi.get(self, "osu_manifest_url")

    @_builtins.property
    @pulumi.getter(name="osuPrefix")
    def osu_prefix(self) -> _builtins.str:
        """
        The prefix for the key of the OOS object corresponding to the image.
        """
        return pulumi.get(self, "osu_prefix")


@pulumi.output_type
class GetImageExportTasksImageExportTaskTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetImagePermissionsToLaunchResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 global_permission: _builtins.bool):
        """
        :param _builtins.str account_id: The account ID of the owner of the OMI.
        :param _builtins.bool global_permission: A global permission for all accounts.<br />
               (Request) Set this parameter to true to make the resource public (if the parent parameter is `Additions`) or to make the resource private (if the parent parameter is `Removals`).<br />
               (Response) If true, the resource is public. If false, the resource is private.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "global_permission", global_permission)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the OMI.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> _builtins.bool:
        """
        A global permission for all accounts.<br />
        (Request) Set this parameter to true to make the resource public (if the parent parameter is `Additions`) or to make the resource private (if the parent parameter is `Removals`).<br />
        (Response) If true, the resource is public. If false, the resource is private.
        """
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class GetImageStateCommentResult(dict):
    def __init__(__self__, *,
                 state_code: _builtins.str,
                 state_message: _builtins.str):
        """
        :param _builtins.str state_code: The code of the change of state.
        :param _builtins.str state_message: A message explaining the change of state.
        """
        pulumi.set(__self__, "state_code", state_code)
        pulumi.set(__self__, "state_message", state_message)

    @_builtins.property
    @pulumi.getter(name="stateCode")
    def state_code(self) -> _builtins.str:
        """
        The code of the change of state.
        """
        return pulumi.get(self, "state_code")

    @_builtins.property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> _builtins.str:
        """
        A message explaining the change of state.
        """
        return pulumi.get(self, "state_message")


@pulumi.output_type
class GetImageTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImagesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetImagesImageResult(dict):
    def __init__(__self__, *,
                 account_alias: _builtins.str,
                 account_id: _builtins.str,
                 architecture: _builtins.str,
                 block_device_mappings: Sequence['outputs.GetImagesImageBlockDeviceMappingResult'],
                 creation_date: _builtins.str,
                 description: _builtins.str,
                 file_location: _builtins.str,
                 image_id: _builtins.str,
                 image_name: _builtins.str,
                 image_type: _builtins.str,
                 permissions_to_launches: Sequence['outputs.GetImagesImagePermissionsToLaunchResult'],
                 product_codes: Sequence[_builtins.str],
                 root_device_name: _builtins.str,
                 root_device_type: _builtins.str,
                 state: _builtins.str,
                 state_comments: Sequence['outputs.GetImagesImageStateCommentResult'],
                 tags: Sequence['outputs.GetImagesImageTagResult']):
        """
        :param _builtins.str account_alias: The account alias of the owner of the OMI.
        :param _builtins.str account_id: The account ID of the owner of the OMI.
        :param _builtins.str architecture: The architecture of the OMI.
        :param Sequence['GetImagesImageBlockDeviceMappingArgs'] block_device_mappings: One or more block device mappings.
        :param _builtins.str creation_date: The date and time (UTC) at which the OMI was created.
        :param _builtins.str description: The description of the OMI.
        :param _builtins.str file_location: The location from which the OMI files were created.
        :param _builtins.str image_id: The ID of the OMI.
        :param _builtins.str image_name: The name of the OMI.
        :param _builtins.str image_type: The type of the OMI.
        :param Sequence['GetImagesImagePermissionsToLaunchArgs'] permissions_to_launches: Permissions for the resource.
        :param Sequence[_builtins.str] product_codes: The product codes associated with the OMI.
        :param _builtins.str root_device_name: The name of the root device.
        :param _builtins.str root_device_type: The type of root device used by the OMI (always `bsu`).
        :param _builtins.str state: The state of the OMI (`pending` \\| `available` \\| `failed`).
        :param Sequence['GetImagesImageStateCommentArgs'] state_comments: Information about the change of state.
        :param Sequence['GetImagesImageTagArgs'] tags: One or more tags associated with the OMI.
        """
        pulumi.set(__self__, "account_alias", account_alias)
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "block_device_mappings", block_device_mappings)
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "file_location", file_location)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "permissions_to_launches", permissions_to_launches)
        pulumi.set(__self__, "product_codes", product_codes)
        pulumi.set(__self__, "root_device_name", root_device_name)
        pulumi.set(__self__, "root_device_type", root_device_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "state_comments", state_comments)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accountAlias")
    def account_alias(self) -> _builtins.str:
        """
        The account alias of the owner of the OMI.
        """
        return pulumi.get(self, "account_alias")

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the OMI.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> _builtins.str:
        """
        The architecture of the OMI.
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="blockDeviceMappings")
    def block_device_mappings(self) -> Sequence['outputs.GetImagesImageBlockDeviceMappingResult']:
        """
        One or more block device mappings.
        """
        return pulumi.get(self, "block_device_mappings")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the OMI was created.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the OMI.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="fileLocation")
    def file_location(self) -> _builtins.str:
        """
        The location from which the OMI files were created.
        """
        return pulumi.get(self, "file_location")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The ID of the OMI.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> _builtins.str:
        """
        The name of the OMI.
        """
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> _builtins.str:
        """
        The type of the OMI.
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter(name="permissionsToLaunches")
    def permissions_to_launches(self) -> Sequence['outputs.GetImagesImagePermissionsToLaunchResult']:
        """
        Permissions for the resource.
        """
        return pulumi.get(self, "permissions_to_launches")

    @_builtins.property
    @pulumi.getter(name="productCodes")
    def product_codes(self) -> Sequence[_builtins.str]:
        """
        The product codes associated with the OMI.
        """
        return pulumi.get(self, "product_codes")

    @_builtins.property
    @pulumi.getter(name="rootDeviceName")
    def root_device_name(self) -> _builtins.str:
        """
        The name of the root device.
        """
        return pulumi.get(self, "root_device_name")

    @_builtins.property
    @pulumi.getter(name="rootDeviceType")
    def root_device_type(self) -> _builtins.str:
        """
        The type of root device used by the OMI (always `bsu`).
        """
        return pulumi.get(self, "root_device_type")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the OMI (`pending` \\| `available` \\| `failed`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="stateComments")
    def state_comments(self) -> Sequence['outputs.GetImagesImageStateCommentResult']:
        """
        Information about the change of state.
        """
        return pulumi.get(self, "state_comments")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetImagesImageTagResult']:
        """
        One or more tags associated with the OMI.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetImagesImageBlockDeviceMappingResult(dict):
    def __init__(__self__, *,
                 bsus: Sequence['outputs.GetImagesImageBlockDeviceMappingBsusResult'],
                 device_name: _builtins.str,
                 virtual_device_name: _builtins.str):
        """
        :param Sequence['GetImagesImageBlockDeviceMappingBsusArgs'] bsus: Information about the BSU volume to create.
        :param _builtins.str device_name: The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        :param _builtins.str virtual_device_name: The name of the virtual device (`ephemeralN`).
        """
        pulumi.set(__self__, "bsus", bsus)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "virtual_device_name", virtual_device_name)

    @_builtins.property
    @pulumi.getter
    def bsus(self) -> Sequence['outputs.GetImagesImageBlockDeviceMappingBsusResult']:
        """
        Information about the BSU volume to create.
        """
        return pulumi.get(self, "bsus")

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> _builtins.str:
        """
        The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        """
        return pulumi.get(self, "device_name")

    @_builtins.property
    @pulumi.getter(name="virtualDeviceName")
    def virtual_device_name(self) -> _builtins.str:
        """
        The name of the virtual device (`ephemeralN`).
        """
        return pulumi.get(self, "virtual_device_name")


@pulumi.output_type
class GetImagesImageBlockDeviceMappingBsusResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: _builtins.bool,
                 iops: _builtins.int,
                 snapshot_id: _builtins.str,
                 volume_size: _builtins.int,
                 volume_type: _builtins.str):
        """
        :param _builtins.bool delete_on_vm_deletion: By default or if set to true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        :param _builtins.int iops: The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        :param _builtins.str snapshot_id: The ID of the snapshot used to create the volume.
        :param _builtins.int volume_size: The size of the volume, in gibibytes (GiB).<br />
               If you specify a snapshot ID, the volume size must be at least equal to the snapshot size.<br />
               If you specify a snapshot ID but no volume size, the volume is created with a size similar to the snapshot one.
        :param _builtins.str volume_type: The type of the volume (`standard` \\| `io1` \\| `gp2`). If not specified in the request, a `standard` volume is created.<br />
               For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
        """
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        By default or if set to true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> _builtins.int:
        """
        The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        The ID of the snapshot used to create the volume.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> _builtins.int:
        """
        The size of the volume, in gibibytes (GiB).<br />
        If you specify a snapshot ID, the volume size must be at least equal to the snapshot size.<br />
        If you specify a snapshot ID but no volume size, the volume is created with a size similar to the snapshot one.
        """
        return pulumi.get(self, "volume_size")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        """
        The type of the volume (`standard` \\| `io1` \\| `gp2`). If not specified in the request, a `standard` volume is created.<br />
        For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetImagesImagePermissionsToLaunchResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 global_permission: _builtins.bool):
        """
        :param _builtins.str account_id: The account ID of the owner of the OMI.
        :param _builtins.bool global_permission: A global permission for all accounts.<br />
               (Request) Set this parameter to true to make the resource public (if the parent parameter is `Additions`) or to make the resource private (if the parent parameter is `Removals`).<br />
               (Response) If true, the resource is public. If false, the resource is private.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "global_permission", global_permission)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the OMI.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> _builtins.bool:
        """
        A global permission for all accounts.<br />
        (Request) Set this parameter to true to make the resource public (if the parent parameter is `Additions`) or to make the resource private (if the parent parameter is `Removals`).<br />
        (Response) If true, the resource is public. If false, the resource is private.
        """
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class GetImagesImageStateCommentResult(dict):
    def __init__(__self__, *,
                 state_code: _builtins.str,
                 state_message: _builtins.str):
        """
        :param _builtins.str state_code: The code of the change of state.
        :param _builtins.str state_message: A message explaining the change of state.
        """
        pulumi.set(__self__, "state_code", state_code)
        pulumi.set(__self__, "state_message", state_message)

    @_builtins.property
    @pulumi.getter(name="stateCode")
    def state_code(self) -> _builtins.str:
        """
        The code of the change of state.
        """
        return pulumi.get(self, "state_code")

    @_builtins.property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> _builtins.str:
        """
        A message explaining the change of state.
        """
        return pulumi.get(self, "state_message")


@pulumi.output_type
class GetImagesImageTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInternetServiceFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetInternetServiceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInternetServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetInternetServicesInternetServiceResult(dict):
    def __init__(__self__, *,
                 internet_service_id: _builtins.str,
                 net_id: _builtins.str,
                 state: _builtins.str,
                 tags: Sequence['outputs.GetInternetServicesInternetServiceTagResult']):
        """
        :param _builtins.str internet_service_id: The ID of the internet service.
        :param _builtins.str net_id: The ID of the Net attached to the internet service.
        :param _builtins.str state: The state of the attachment of the internet service to the Net (always `available`).
        :param Sequence['GetInternetServicesInternetServiceTagArgs'] tags: One or more tags associated with the internet service.
        """
        pulumi.set(__self__, "internet_service_id", internet_service_id)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="internetServiceId")
    def internet_service_id(self) -> _builtins.str:
        """
        The ID of the internet service.
        """
        return pulumi.get(self, "internet_service_id")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net attached to the internet service.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the attachment of the internet service to the Net (always `available`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetInternetServicesInternetServiceTagResult']:
        """
        One or more tags associated with the internet service.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetInternetServicesInternetServiceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetKeypairFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetKeypairTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetKeypairsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetKeypairsKeypairResult(dict):
    def __init__(__self__, *,
                 keypair_fingerprint: _builtins.str,
                 keypair_id: _builtins.str,
                 keypair_name: _builtins.str,
                 keypair_type: _builtins.str,
                 tags: Sequence['outputs.GetKeypairsKeypairTagResult']):
        """
        :param _builtins.str keypair_fingerprint: The MD5 public key fingerprint as specified in section 4 of RFC 4716.
        :param _builtins.str keypair_id: The ID of the keypair.
        :param _builtins.str keypair_name: The name of the keypair.
        :param _builtins.str keypair_type: The type of the keypair (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
        :param Sequence['GetKeypairsKeypairTagArgs'] tags: One or more tags associated with the keypair.
        """
        pulumi.set(__self__, "keypair_fingerprint", keypair_fingerprint)
        pulumi.set(__self__, "keypair_id", keypair_id)
        pulumi.set(__self__, "keypair_name", keypair_name)
        pulumi.set(__self__, "keypair_type", keypair_type)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="keypairFingerprint")
    def keypair_fingerprint(self) -> _builtins.str:
        """
        The MD5 public key fingerprint as specified in section 4 of RFC 4716.
        """
        return pulumi.get(self, "keypair_fingerprint")

    @_builtins.property
    @pulumi.getter(name="keypairId")
    def keypair_id(self) -> _builtins.str:
        """
        The ID of the keypair.
        """
        return pulumi.get(self, "keypair_id")

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> _builtins.str:
        """
        The name of the keypair.
        """
        return pulumi.get(self, "keypair_name")

    @_builtins.property
    @pulumi.getter(name="keypairType")
    def keypair_type(self) -> _builtins.str:
        """
        The type of the keypair (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
        """
        return pulumi.get(self, "keypair_type")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetKeypairsKeypairTagResult']:
        """
        One or more tags associated with the keypair.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetKeypairsKeypairTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetLoadBalancerAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: _builtins.bool,
                 osu_bucket_name: _builtins.str,
                 osu_bucket_prefix: _builtins.str,
                 publication_interval: _builtins.int):
        """
        :param _builtins.bool is_enabled: If true, access logs are enabled for your load balancer. If false, they are not. If you set this to true in your request, the `osu_bucket_name` parameter is required.
        :param _builtins.str osu_bucket_name: The name of the OOS bucket for the access logs.
        :param _builtins.str osu_bucket_prefix: The path to the folder of the access logs in your OOS bucket (by default, the `root` level of your bucket).
        :param _builtins.int publication_interval: The time interval for the publication of access logs in the OOS bucket, in minutes. This value can be either `5` or `60` (by default, `60`).
        """
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "osu_bucket_name", osu_bucket_name)
        pulumi.set(__self__, "osu_bucket_prefix", osu_bucket_prefix)
        pulumi.set(__self__, "publication_interval", publication_interval)

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> _builtins.bool:
        """
        If true, access logs are enabled for your load balancer. If false, they are not. If you set this to true in your request, the `osu_bucket_name` parameter is required.
        """
        return pulumi.get(self, "is_enabled")

    @_builtins.property
    @pulumi.getter(name="osuBucketName")
    def osu_bucket_name(self) -> _builtins.str:
        """
        The name of the OOS bucket for the access logs.
        """
        return pulumi.get(self, "osu_bucket_name")

    @_builtins.property
    @pulumi.getter(name="osuBucketPrefix")
    def osu_bucket_prefix(self) -> _builtins.str:
        """
        The path to the folder of the access logs in your OOS bucket (by default, the `root` level of your bucket).
        """
        return pulumi.get(self, "osu_bucket_prefix")

    @_builtins.property
    @pulumi.getter(name="publicationInterval")
    def publication_interval(self) -> _builtins.int:
        """
        The time interval for the publication of access logs in the OOS bucket, in minutes. This value can be either `5` or `60` (by default, `60`).
        """
        return pulumi.get(self, "publication_interval")


@pulumi.output_type
class GetLoadBalancerApplicationStickyCookiePolicyResult(dict):
    def __init__(__self__, *,
                 cookie_name: _builtins.str,
                 policy_name: _builtins.str):
        """
        :param _builtins.str cookie_name: The name of the application cookie used for stickiness.
        :param _builtins.str policy_name: The name of the stickiness policy.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "policy_name", policy_name)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> _builtins.str:
        """
        The name of the application cookie used for stickiness.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        The name of the stickiness policy.
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class GetLoadBalancerFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetLoadBalancerHealthCheckResult(dict):
    def __init__(__self__, *,
                 check_interval: _builtins.int,
                 healthy_threshold: _builtins.int,
                 path: _builtins.str,
                 port: _builtins.int,
                 protocol: _builtins.str,
                 timeout: _builtins.int,
                 unhealthy_threshold: _builtins.int):
        """
        :param _builtins.int check_interval: The number of seconds between two requests (between `5` and `600` both included).
        :param _builtins.int healthy_threshold: The number of consecutive successful requests before considering the VM as healthy (between `2` and `10` both included).
        :param _builtins.str path: If you use the HTTP or HTTPS protocols, the request URL path.
        :param _builtins.int port: The port number (between `1` and `65535`, both included).
        :param _builtins.str protocol: The protocol for the URL of the VM (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param _builtins.int timeout: The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
        :param _builtins.int unhealthy_threshold: The number of consecutive failed requests before considering the VM as unhealthy (between `2` and `10` both included).
        """
        pulumi.set(__self__, "check_interval", check_interval)
        pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @_builtins.property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> _builtins.int:
        """
        The number of seconds between two requests (between `5` and `600` both included).
        """
        return pulumi.get(self, "check_interval")

    @_builtins.property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> _builtins.int:
        """
        The number of consecutive successful requests before considering the VM as healthy (between `2` and `10` both included).
        """
        return pulumi.get(self, "healthy_threshold")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        If you use the HTTP or HTTPS protocols, the request URL path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The port number (between `1` and `65535`, both included).
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol for the URL of the VM (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> _builtins.int:
        """
        The number of consecutive failed requests before considering the VM as unhealthy (between `2` and `10` both included).
        """
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class GetLoadBalancerListenerResult(dict):
    def __init__(__self__, *,
                 backend_port: _builtins.int,
                 backend_protocol: _builtins.str,
                 load_balancer_port: _builtins.int,
                 load_balancer_protocol: _builtins.str,
                 policy_names: Sequence[_builtins.str],
                 server_certificate_id: _builtins.str):
        """
        :param _builtins.int backend_port: The port on which the backend VM is listening (between `1` and `65535`, both included).
        :param _builtins.str backend_protocol: The protocol for routing traffic to backend VMs (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param _builtins.int load_balancer_port: The port on which the load balancer is listening (between `1` and `65535`, both included).
        :param _builtins.str load_balancer_protocol: The routing protocol (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param Sequence[_builtins.str] policy_names: The names of the policies. If there are no policies enabled, the list is empty.
        :param _builtins.str server_certificate_id: The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
        """
        pulumi.set(__self__, "backend_port", backend_port)
        pulumi.set(__self__, "backend_protocol", backend_protocol)
        pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        pulumi.set(__self__, "load_balancer_protocol", load_balancer_protocol)
        pulumi.set(__self__, "policy_names", policy_names)
        pulumi.set(__self__, "server_certificate_id", server_certificate_id)

    @_builtins.property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> _builtins.int:
        """
        The port on which the backend VM is listening (between `1` and `65535`, both included).
        """
        return pulumi.get(self, "backend_port")

    @_builtins.property
    @pulumi.getter(name="backendProtocol")
    def backend_protocol(self) -> _builtins.str:
        """
        The protocol for routing traffic to backend VMs (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "backend_protocol")

    @_builtins.property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> _builtins.int:
        """
        The port on which the load balancer is listening (between `1` and `65535`, both included).
        """
        return pulumi.get(self, "load_balancer_port")

    @_builtins.property
    @pulumi.getter(name="loadBalancerProtocol")
    def load_balancer_protocol(self) -> _builtins.str:
        """
        The routing protocol (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "load_balancer_protocol")

    @_builtins.property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Sequence[_builtins.str]:
        """
        The names of the policies. If there are no policies enabled, the list is empty.
        """
        return pulumi.get(self, "policy_names")

    @_builtins.property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> _builtins.str:
        """
        The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
        """
        return pulumi.get(self, "server_certificate_id")


@pulumi.output_type
class GetLoadBalancerListenerRuleFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetLoadBalancerListenerRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetLoadBalancerListenerRulesListenerRuleResult(dict):
    def __init__(__self__, *,
                 action: _builtins.str,
                 host_name_pattern: _builtins.str,
                 listener_id: _builtins.int,
                 listener_rule_id: _builtins.int,
                 listener_rule_name: _builtins.str,
                 path_pattern: _builtins.str,
                 priority: _builtins.int,
                 vm_ids: Sequence[_builtins.str]):
        """
        :param _builtins.str action: The type of action for the rule (always `forward`).
        :param _builtins.str host_name_pattern: A host-name pattern for the rule, with a maximum length of 128 characters. This host-name pattern supports maximum three wildcards, and must not contain any special characters except `-.?`.
        :param _builtins.int listener_id: The ID of the listener.
        :param _builtins.int listener_rule_id: The ID of the listener rule.
        :param _builtins.str listener_rule_name: A human-readable name for the listener rule.
        :param _builtins.str path_pattern: A path pattern for the rule, with a maximum length of 128 characters. This path pattern supports maximum three wildcards, and must not contain any special characters except `_-.$/~&quot;'@:+?`.
        :param _builtins.int priority: The priority level of the listener rule, between `1` and `19999` both included. Each rule must have a unique priority level. Otherwise, an error is returned.
        :param Sequence[_builtins.str] vm_ids: The IDs of the backend VMs.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "host_name_pattern", host_name_pattern)
        pulumi.set(__self__, "listener_id", listener_id)
        pulumi.set(__self__, "listener_rule_id", listener_rule_id)
        pulumi.set(__self__, "listener_rule_name", listener_rule_name)
        pulumi.set(__self__, "path_pattern", path_pattern)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "vm_ids", vm_ids)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        The type of action for the rule (always `forward`).
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter(name="hostNamePattern")
    def host_name_pattern(self) -> _builtins.str:
        """
        A host-name pattern for the rule, with a maximum length of 128 characters. This host-name pattern supports maximum three wildcards, and must not contain any special characters except `-.?`.
        """
        return pulumi.get(self, "host_name_pattern")

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> _builtins.int:
        """
        The ID of the listener.
        """
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter(name="listenerRuleId")
    def listener_rule_id(self) -> _builtins.int:
        """
        The ID of the listener rule.
        """
        return pulumi.get(self, "listener_rule_id")

    @_builtins.property
    @pulumi.getter(name="listenerRuleName")
    def listener_rule_name(self) -> _builtins.str:
        """
        A human-readable name for the listener rule.
        """
        return pulumi.get(self, "listener_rule_name")

    @_builtins.property
    @pulumi.getter(name="pathPattern")
    def path_pattern(self) -> _builtins.str:
        """
        A path pattern for the rule, with a maximum length of 128 characters. This path pattern supports maximum three wildcards, and must not contain any special characters except `_-.$/~&quot;'@:+?`.
        """
        return pulumi.get(self, "path_pattern")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        The priority level of the listener rule, between `1` and `19999` both included. Each rule must have a unique priority level. Otherwise, an error is returned.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> Sequence[_builtins.str]:
        """
        The IDs of the backend VMs.
        """
        return pulumi.get(self, "vm_ids")


@pulumi.output_type
class GetLoadBalancerLoadBalancerStickyCookiePolicyResult(dict):
    def __init__(__self__, *,
                 policy_name: _builtins.str):
        """
        :param _builtins.str policy_name: The name of the stickiness policy.
        """
        pulumi.set(__self__, "policy_name", policy_name)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        The name of the stickiness policy.
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class GetLoadBalancerSourceSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_account_id: _builtins.str,
                 security_group_name: _builtins.str):
        """
        :param _builtins.str security_group_account_id: The account ID of the owner of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        pulumi.set(__self__, "security_group_account_id", security_group_account_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupAccountId")
    def security_group_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the security group.
        """
        return pulumi.get(self, "security_group_account_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetLoadBalancerTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetLoadBalancerTagsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetLoadBalancerTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 load_balancer_name: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> _builtins.str:
        return pulumi.get(self, "load_balancer_name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetLoadBalancerVmHealthBackendVmHealthResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 state: _builtins.str,
                 state_reason: _builtins.str,
                 vm_id: _builtins.str):
        """
        :param _builtins.str description: The description of the state of the backend VM.
        :param _builtins.str state: The state of the backend VM (`InService` \\| `OutOfService` \\| `Unknown`).
        :param _builtins.str state_reason: Information about the cause of `OutOfService` VMs.<br />
               Specifically, whether the cause is Elastic Load Balancing or the VM (`ELB` \\| `Instance` \\| `N/A`).
        :param _builtins.str vm_id: The ID of the backend VM.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "state_reason", state_reason)
        pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the state of the backend VM.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the backend VM (`InService` \\| `OutOfService` \\| `Unknown`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="stateReason")
    def state_reason(self) -> _builtins.str:
        """
        Information about the cause of `OutOfService` VMs.<br />
        Specifically, whether the cause is Elastic Load Balancing or the VM (`ELB` \\| `Instance` \\| `N/A`).
        """
        return pulumi.get(self, "state_reason")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        The ID of the backend VM.
        """
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetLoadBalancerVmHealthFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetLoadBalancersFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetLoadBalancersLoadBalancerResult(dict):
    def __init__(__self__, *,
                 access_logs: Sequence['outputs.GetLoadBalancersLoadBalancerAccessLogResult'],
                 application_sticky_cookie_policies: Sequence['outputs.GetLoadBalancersLoadBalancerApplicationStickyCookiePolicyResult'],
                 backend_ips: Sequence[_builtins.str],
                 backend_vm_ids: Sequence['outputs.GetLoadBalancersLoadBalancerBackendVmIdResult'],
                 dns_name: _builtins.str,
                 health_checks: Sequence['outputs.GetLoadBalancersLoadBalancerHealthCheckResult'],
                 listeners: Sequence['outputs.GetLoadBalancersLoadBalancerListenerResult'],
                 load_balancer_name: _builtins.str,
                 load_balancer_sticky_cookie_policies: Sequence['outputs.GetLoadBalancersLoadBalancerLoadBalancerStickyCookiePolicyResult'],
                 load_balancer_type: _builtins.str,
                 net_id: _builtins.str,
                 public_ip: _builtins.str,
                 secured_cookies: _builtins.bool,
                 security_groups: Sequence[_builtins.str],
                 source_security_groups: Sequence['outputs.GetLoadBalancersLoadBalancerSourceSecurityGroupResult'],
                 subnet_ids: Sequence[_builtins.str],
                 subregion_names: Sequence[_builtins.str],
                 tags: Sequence['outputs.GetLoadBalancersLoadBalancerTagResult']):
        """
        :param Sequence['GetLoadBalancersLoadBalancerAccessLogArgs'] access_logs: Information about access logs.
        :param Sequence['GetLoadBalancersLoadBalancerApplicationStickyCookiePolicyArgs'] application_sticky_cookie_policies: The stickiness policies defined for the load balancer.
        :param Sequence['GetLoadBalancersLoadBalancerBackendVmIdArgs'] backend_vm_ids: One or more IDs of backend VMs for the load balancer.
        :param _builtins.str dns_name: The DNS name of the load balancer.
        :param Sequence['GetLoadBalancersLoadBalancerHealthCheckArgs'] health_checks: Information about the health check configuration.
        :param Sequence['GetLoadBalancersLoadBalancerListenerArgs'] listeners: The listeners for the load balancer.
        :param _builtins.str load_balancer_name: The name of the load balancer.
        :param Sequence['GetLoadBalancersLoadBalancerLoadBalancerStickyCookiePolicyArgs'] load_balancer_sticky_cookie_policies: The policies defined for the load balancer.
        :param _builtins.str load_balancer_type: The type of load balancer. Valid only for load balancers in a Net.<br />
               If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
               If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
        :param _builtins.str net_id: The ID of the Net for the load balancer.
        :param _builtins.str public_ip: (internet-facing only) The public IP associated with the load balancer.
        :param _builtins.bool secured_cookies: Whether secure cookies are enabled for the load balancer.
        :param Sequence[_builtins.str] security_groups: One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
        :param Sequence['GetLoadBalancersLoadBalancerSourceSecurityGroupArgs'] source_security_groups: Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
               To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
        :param Sequence[_builtins.str] subregion_names: The ID of the Subregion in which the load balancer was created.
        :param Sequence['GetLoadBalancersLoadBalancerTagArgs'] tags: One or more tags associated with the load balancer.
        """
        pulumi.set(__self__, "access_logs", access_logs)
        pulumi.set(__self__, "application_sticky_cookie_policies", application_sticky_cookie_policies)
        pulumi.set(__self__, "backend_ips", backend_ips)
        pulumi.set(__self__, "backend_vm_ids", backend_vm_ids)
        pulumi.set(__self__, "dns_name", dns_name)
        pulumi.set(__self__, "health_checks", health_checks)
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        pulumi.set(__self__, "load_balancer_sticky_cookie_policies", load_balancer_sticky_cookie_policies)
        pulumi.set(__self__, "load_balancer_type", load_balancer_type)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "secured_cookies", secured_cookies)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "source_security_groups", source_security_groups)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "subregion_names", subregion_names)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accessLogs")
    def access_logs(self) -> Sequence['outputs.GetLoadBalancersLoadBalancerAccessLogResult']:
        """
        Information about access logs.
        """
        return pulumi.get(self, "access_logs")

    @_builtins.property
    @pulumi.getter(name="applicationStickyCookiePolicies")
    def application_sticky_cookie_policies(self) -> Sequence['outputs.GetLoadBalancersLoadBalancerApplicationStickyCookiePolicyResult']:
        """
        The stickiness policies defined for the load balancer.
        """
        return pulumi.get(self, "application_sticky_cookie_policies")

    @_builtins.property
    @pulumi.getter(name="backendIps")
    def backend_ips(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "backend_ips")

    @_builtins.property
    @pulumi.getter(name="backendVmIds")
    def backend_vm_ids(self) -> Sequence['outputs.GetLoadBalancersLoadBalancerBackendVmIdResult']:
        """
        One or more IDs of backend VMs for the load balancer.
        """
        return pulumi.get(self, "backend_vm_ids")

    @_builtins.property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> _builtins.str:
        """
        The DNS name of the load balancer.
        """
        return pulumi.get(self, "dns_name")

    @_builtins.property
    @pulumi.getter(name="healthChecks")
    def health_checks(self) -> Sequence['outputs.GetLoadBalancersLoadBalancerHealthCheckResult']:
        """
        Information about the health check configuration.
        """
        return pulumi.get(self, "health_checks")

    @_builtins.property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetLoadBalancersLoadBalancerListenerResult']:
        """
        The listeners for the load balancer.
        """
        return pulumi.get(self, "listeners")

    @_builtins.property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> _builtins.str:
        """
        The name of the load balancer.
        """
        return pulumi.get(self, "load_balancer_name")

    @_builtins.property
    @pulumi.getter(name="loadBalancerStickyCookiePolicies")
    def load_balancer_sticky_cookie_policies(self) -> Sequence['outputs.GetLoadBalancersLoadBalancerLoadBalancerStickyCookiePolicyResult']:
        """
        The policies defined for the load balancer.
        """
        return pulumi.get(self, "load_balancer_sticky_cookie_policies")

    @_builtins.property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> _builtins.str:
        """
        The type of load balancer. Valid only for load balancers in a Net.<br />
        If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
        If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
        """
        return pulumi.get(self, "load_balancer_type")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net for the load balancer.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        (internet-facing only) The public IP associated with the load balancer.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="securedCookies")
    def secured_cookies(self) -> _builtins.bool:
        """
        Whether secure cookies are enabled for the load balancer.
        """
        return pulumi.get(self, "secured_cookies")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[_builtins.str]:
        """
        One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="sourceSecurityGroups")
    def source_security_groups(self) -> Sequence['outputs.GetLoadBalancersLoadBalancerSourceSecurityGroupResult']:
        """
        Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
        To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
        """
        return pulumi.get(self, "source_security_groups")

    @_builtins.property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "subnet_ids")

    @_builtins.property
    @pulumi.getter(name="subregionNames")
    def subregion_names(self) -> Sequence[_builtins.str]:
        """
        The ID of the Subregion in which the load balancer was created.
        """
        return pulumi.get(self, "subregion_names")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetLoadBalancersLoadBalancerTagResult']:
        """
        One or more tags associated with the load balancer.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetLoadBalancersLoadBalancerAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: _builtins.bool,
                 osu_bucket_name: _builtins.str,
                 osu_bucket_prefix: _builtins.str,
                 publication_interval: _builtins.int):
        """
        :param _builtins.bool is_enabled: If true, access logs are enabled for your load balancer. If false, they are not. If you set this to true in your request, the `osu_bucket_name` parameter is required.
        :param _builtins.str osu_bucket_name: The name of the OOS bucket for the access logs.
        :param _builtins.str osu_bucket_prefix: The path to the folder of the access logs in your OOS bucket (by default, the `root` level of your bucket).
        :param _builtins.int publication_interval: The time interval for the publication of access logs in the OOS bucket, in minutes. This value can be either `5` or `60` (by default, `60`).
        """
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "osu_bucket_name", osu_bucket_name)
        pulumi.set(__self__, "osu_bucket_prefix", osu_bucket_prefix)
        pulumi.set(__self__, "publication_interval", publication_interval)

    @_builtins.property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> _builtins.bool:
        """
        If true, access logs are enabled for your load balancer. If false, they are not. If you set this to true in your request, the `osu_bucket_name` parameter is required.
        """
        return pulumi.get(self, "is_enabled")

    @_builtins.property
    @pulumi.getter(name="osuBucketName")
    def osu_bucket_name(self) -> _builtins.str:
        """
        The name of the OOS bucket for the access logs.
        """
        return pulumi.get(self, "osu_bucket_name")

    @_builtins.property
    @pulumi.getter(name="osuBucketPrefix")
    def osu_bucket_prefix(self) -> _builtins.str:
        """
        The path to the folder of the access logs in your OOS bucket (by default, the `root` level of your bucket).
        """
        return pulumi.get(self, "osu_bucket_prefix")

    @_builtins.property
    @pulumi.getter(name="publicationInterval")
    def publication_interval(self) -> _builtins.int:
        """
        The time interval for the publication of access logs in the OOS bucket, in minutes. This value can be either `5` or `60` (by default, `60`).
        """
        return pulumi.get(self, "publication_interval")


@pulumi.output_type
class GetLoadBalancersLoadBalancerApplicationStickyCookiePolicyResult(dict):
    def __init__(__self__, *,
                 cookie_name: _builtins.str,
                 policy_name: _builtins.str):
        """
        :param _builtins.str cookie_name: The name of the application cookie used for stickiness.
        :param _builtins.str policy_name: The name of the stickiness policy.
        """
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "policy_name", policy_name)

    @_builtins.property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> _builtins.str:
        """
        The name of the application cookie used for stickiness.
        """
        return pulumi.get(self, "cookie_name")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        The name of the stickiness policy.
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class GetLoadBalancersLoadBalancerBackendVmIdResult(dict):
    def __init__(__self__, *,
                 vm_id: _builtins.str):
        pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetLoadBalancersLoadBalancerHealthCheckResult(dict):
    def __init__(__self__, *,
                 check_interval: _builtins.int,
                 healthy_threshold: _builtins.int,
                 path: _builtins.str,
                 port: _builtins.int,
                 protocol: _builtins.str,
                 timeout: _builtins.int,
                 unhealthy_threshold: _builtins.int):
        """
        :param _builtins.int check_interval: The number of seconds between two requests (between `5` and `600` both included).
        :param _builtins.int healthy_threshold: The number of consecutive successful requests before considering the VM as healthy (between `2` and `10` both included).
        :param _builtins.str path: If you use the HTTP or HTTPS protocols, the request URL path.
        :param _builtins.int port: The port number (between `1` and `65535`, both included).
        :param _builtins.str protocol: The protocol for the URL of the VM (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param _builtins.int timeout: The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
        :param _builtins.int unhealthy_threshold: The number of consecutive failed requests before considering the VM as unhealthy (between `2` and `10` both included).
        """
        pulumi.set(__self__, "check_interval", check_interval)
        pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @_builtins.property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> _builtins.int:
        """
        The number of seconds between two requests (between `5` and `600` both included).
        """
        return pulumi.get(self, "check_interval")

    @_builtins.property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> _builtins.int:
        """
        The number of consecutive successful requests before considering the VM as healthy (between `2` and `10` both included).
        """
        return pulumi.get(self, "healthy_threshold")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        If you use the HTTP or HTTPS protocols, the request URL path.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def port(self) -> _builtins.int:
        """
        The port number (between `1` and `65535`, both included).
        """
        return pulumi.get(self, "port")

    @_builtins.property
    @pulumi.getter
    def protocol(self) -> _builtins.str:
        """
        The protocol for the URL of the VM (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "protocol")

    @_builtins.property
    @pulumi.getter
    def timeout(self) -> _builtins.int:
        """
        The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
        """
        return pulumi.get(self, "timeout")

    @_builtins.property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> _builtins.int:
        """
        The number of consecutive failed requests before considering the VM as unhealthy (between `2` and `10` both included).
        """
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class GetLoadBalancersLoadBalancerListenerResult(dict):
    def __init__(__self__, *,
                 backend_port: _builtins.int,
                 backend_protocol: _builtins.str,
                 load_balancer_port: _builtins.int,
                 load_balancer_protocol: _builtins.str,
                 policy_names: Sequence[_builtins.str],
                 server_certificate_id: _builtins.str):
        """
        :param _builtins.int backend_port: The port on which the backend VM is listening (between `1` and `65535`, both included).
        :param _builtins.str backend_protocol: The protocol for routing traffic to backend VMs (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param _builtins.int load_balancer_port: The port on which the load balancer is listening (between `1` and `65535`, both included).
        :param _builtins.str load_balancer_protocol: The routing protocol (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        :param Sequence[_builtins.str] policy_names: The names of the policies. If there are no policies enabled, the list is empty.
        :param _builtins.str server_certificate_id: The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
        """
        pulumi.set(__self__, "backend_port", backend_port)
        pulumi.set(__self__, "backend_protocol", backend_protocol)
        pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        pulumi.set(__self__, "load_balancer_protocol", load_balancer_protocol)
        pulumi.set(__self__, "policy_names", policy_names)
        pulumi.set(__self__, "server_certificate_id", server_certificate_id)

    @_builtins.property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> _builtins.int:
        """
        The port on which the backend VM is listening (between `1` and `65535`, both included).
        """
        return pulumi.get(self, "backend_port")

    @_builtins.property
    @pulumi.getter(name="backendProtocol")
    def backend_protocol(self) -> _builtins.str:
        """
        The protocol for routing traffic to backend VMs (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "backend_protocol")

    @_builtins.property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> _builtins.int:
        """
        The port on which the load balancer is listening (between `1` and `65535`, both included).
        """
        return pulumi.get(self, "load_balancer_port")

    @_builtins.property
    @pulumi.getter(name="loadBalancerProtocol")
    def load_balancer_protocol(self) -> _builtins.str:
        """
        The routing protocol (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
        """
        return pulumi.get(self, "load_balancer_protocol")

    @_builtins.property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Sequence[_builtins.str]:
        """
        The names of the policies. If there are no policies enabled, the list is empty.
        """
        return pulumi.get(self, "policy_names")

    @_builtins.property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> _builtins.str:
        """
        The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
        """
        return pulumi.get(self, "server_certificate_id")


@pulumi.output_type
class GetLoadBalancersLoadBalancerLoadBalancerStickyCookiePolicyResult(dict):
    def __init__(__self__, *,
                 policy_name: _builtins.str):
        """
        :param _builtins.str policy_name: The name of the stickiness policy.
        """
        pulumi.set(__self__, "policy_name", policy_name)

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        The name of the stickiness policy.
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class GetLoadBalancersLoadBalancerSourceSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_account_id: _builtins.str,
                 security_group_name: _builtins.str):
        """
        :param _builtins.str security_group_account_id: The account ID of the owner of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        pulumi.set(__self__, "security_group_account_id", security_group_account_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupAccountId")
    def security_group_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the security group.
        """
        return pulumi.get(self, "security_group_account_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetLoadBalancersLoadBalancerTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNatServiceFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNatServicePublicIpResult(dict):
    def __init__(__self__, *,
                 public_ip: _builtins.str,
                 public_ip_id: _builtins.str):
        """
        :param _builtins.str public_ip: The public IP associated with the NAT service.
        :param _builtins.str public_ip_id: The allocation ID of the public IP associated with the NAT service.
        """
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_id", public_ip_id)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP associated with the NAT service.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> _builtins.str:
        """
        The allocation ID of the public IP associated with the NAT service.
        """
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class GetNatServiceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNatServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNatServicesNatServiceResult(dict):
    def __init__(__self__, *,
                 nat_service_id: _builtins.str,
                 net_id: _builtins.str,
                 public_ips: Sequence['outputs.GetNatServicesNatServicePublicIpResult'],
                 state: _builtins.str,
                 subnet_id: _builtins.str,
                 tags: Sequence['outputs.GetNatServicesNatServiceTagResult']):
        """
        :param _builtins.str nat_service_id: The ID of the NAT service.
        :param _builtins.str net_id: The ID of the Net in which the NAT service is.
        :param Sequence['GetNatServicesNatServicePublicIpArgs'] public_ips: Information about the public IP or IPs associated with the NAT service.
        :param _builtins.str state: The state of the NAT service (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        :param _builtins.str subnet_id: The ID of the Subnet in which the NAT service is.
        :param Sequence['GetNatServicesNatServiceTagArgs'] tags: One or more tags associated with the NAT service.
        """
        pulumi.set(__self__, "nat_service_id", nat_service_id)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "public_ips", public_ips)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> _builtins.str:
        """
        The ID of the NAT service.
        """
        return pulumi.get(self, "nat_service_id")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net in which the NAT service is.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Sequence['outputs.GetNatServicesNatServicePublicIpResult']:
        """
        Information about the public IP or IPs associated with the NAT service.
        """
        return pulumi.get(self, "public_ips")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the NAT service (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the Subnet in which the NAT service is.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNatServicesNatServiceTagResult']:
        """
        One or more tags associated with the NAT service.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNatServicesNatServicePublicIpResult(dict):
    def __init__(__self__, *,
                 public_ip: _builtins.str,
                 public_ip_id: _builtins.str):
        """
        :param _builtins.str public_ip: The public IP associated with the NAT service.
        :param _builtins.str public_ip_id: The allocation ID of the public IP associated with the NAT service.
        """
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_id", public_ip_id)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP associated with the NAT service.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> _builtins.str:
        """
        The allocation ID of the public IP associated with the NAT service.
        """
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class GetNatServicesNatServiceTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetAccessPointFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetAccessPointServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetAccessPointServicesServiceResult(dict):
    def __init__(__self__, *,
                 ip_ranges: Sequence[_builtins.str],
                 service_id: _builtins.str,
                 service_name: _builtins.str):
        """
        :param Sequence[_builtins.str] ip_ranges: The list of network prefixes used by the service, in CIDR notation.
        :param _builtins.str service_id: The ID of the service.
        :param _builtins.str service_name: The name of the service.
        """
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)

    @_builtins.property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[_builtins.str]:
        """
        The list of network prefixes used by the service, in CIDR notation.
        """
        return pulumi.get(self, "ip_ranges")

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> _builtins.str:
        """
        The ID of the service.
        """
        return pulumi.get(self, "service_id")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        The name of the service.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetNetAccessPointTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetAccessPointsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetAccessPointsNetAccessPointResult(dict):
    def __init__(__self__, *,
                 net_access_point_id: _builtins.str,
                 net_id: _builtins.str,
                 route_table_ids: Sequence[_builtins.str],
                 service_name: _builtins.str,
                 state: _builtins.str,
                 tags: Sequence['outputs.GetNetAccessPointsNetAccessPointTagResult']):
        """
        :param _builtins.str net_access_point_id: The ID of the Net access point.
        :param _builtins.str net_id: The ID of the Net with which the Net access point is associated.
        :param Sequence[_builtins.str] route_table_ids: The ID of the route tables associated with the Net access point.
        :param _builtins.str service_name: The name of the service with which the Net access point is associated.
        :param _builtins.str state: The state of the Net access point (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        :param Sequence['GetNetAccessPointsNetAccessPointTagArgs'] tags: One or more tags associated with the Net access point.
        """
        pulumi.set(__self__, "net_access_point_id", net_access_point_id)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "route_table_ids", route_table_ids)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="netAccessPointId")
    def net_access_point_id(self) -> _builtins.str:
        """
        The ID of the Net access point.
        """
        return pulumi.get(self, "net_access_point_id")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net with which the Net access point is associated.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="routeTableIds")
    def route_table_ids(self) -> Sequence[_builtins.str]:
        """
        The ID of the route tables associated with the Net access point.
        """
        return pulumi.get(self, "route_table_ids")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        The name of the service with which the Net access point is associated.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the Net access point (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNetAccessPointsNetAccessPointTagResult']:
        """
        One or more tags associated with the Net access point.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNetAccessPointsNetAccessPointTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetAttributesTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetPeeringAccepterNetResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 ip_range: _builtins.str,
                 net_id: _builtins.str):
        """
        :param _builtins.str account_id: The account ID of the owner of the source Net.
        :param _builtins.str ip_range: The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        :param _builtins.str net_id: The ID of the source Net.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "net_id", net_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the source Net.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> _builtins.str:
        """
        The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_range")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the source Net.
        """
        return pulumi.get(self, "net_id")


@pulumi.output_type
class GetNetPeeringFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str name: The state of the Net peering (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The state of the Net peering (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetPeeringSourceNetResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 ip_range: _builtins.str,
                 net_id: _builtins.str):
        """
        :param _builtins.str account_id: The account ID of the owner of the source Net.
        :param _builtins.str ip_range: The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        :param _builtins.str net_id: The ID of the source Net.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "net_id", net_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the source Net.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> _builtins.str:
        """
        The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_range")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the source Net.
        """
        return pulumi.get(self, "net_id")


@pulumi.output_type
class GetNetPeeringStateResult(dict):
    def __init__(__self__, *,
                 message: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str message: Additional information about the state of the Net peering.
        :param _builtins.str name: The state of the Net peering (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Additional information about the state of the Net peering.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The state of the Net peering (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNetPeeringTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetPeeringsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str name: The state of the Net peering (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The state of the Net peering (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetPeeringsNetPeeringResult(dict):
    def __init__(__self__, *,
                 accepter_nets: Sequence['outputs.GetNetPeeringsNetPeeringAccepterNetResult'],
                 net_peering_id: _builtins.str,
                 source_nets: Sequence['outputs.GetNetPeeringsNetPeeringSourceNetResult'],
                 states: Sequence['outputs.GetNetPeeringsNetPeeringStateResult'],
                 tags: Sequence['outputs.GetNetPeeringsNetPeeringTagResult']):
        """
        :param Sequence['GetNetPeeringsNetPeeringAccepterNetArgs'] accepter_nets: Information about the accepter Net.
        :param _builtins.str net_peering_id: The ID of the Net peering.
        :param Sequence['GetNetPeeringsNetPeeringSourceNetArgs'] source_nets: Information about the source Net.
        :param Sequence['GetNetPeeringsNetPeeringStateArgs'] states: Information about the state of the Net peering.
        :param Sequence['GetNetPeeringsNetPeeringTagArgs'] tags: One or more tags associated with the Net peering.
        """
        pulumi.set(__self__, "accepter_nets", accepter_nets)
        pulumi.set(__self__, "net_peering_id", net_peering_id)
        pulumi.set(__self__, "source_nets", source_nets)
        pulumi.set(__self__, "states", states)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accepterNets")
    def accepter_nets(self) -> Sequence['outputs.GetNetPeeringsNetPeeringAccepterNetResult']:
        """
        Information about the accepter Net.
        """
        return pulumi.get(self, "accepter_nets")

    @_builtins.property
    @pulumi.getter(name="netPeeringId")
    def net_peering_id(self) -> _builtins.str:
        """
        The ID of the Net peering.
        """
        return pulumi.get(self, "net_peering_id")

    @_builtins.property
    @pulumi.getter(name="sourceNets")
    def source_nets(self) -> Sequence['outputs.GetNetPeeringsNetPeeringSourceNetResult']:
        """
        Information about the source Net.
        """
        return pulumi.get(self, "source_nets")

    @_builtins.property
    @pulumi.getter
    def states(self) -> Sequence['outputs.GetNetPeeringsNetPeeringStateResult']:
        """
        Information about the state of the Net peering.
        """
        return pulumi.get(self, "states")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNetPeeringsNetPeeringTagResult']:
        """
        One or more tags associated with the Net peering.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNetPeeringsNetPeeringAccepterNetResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 ip_range: _builtins.str,
                 net_id: _builtins.str):
        """
        :param _builtins.str account_id: The account ID of the owner of the source Net.
        :param _builtins.str ip_range: The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        :param _builtins.str net_id: The ID of the source Net.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "net_id", net_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the source Net.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> _builtins.str:
        """
        The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_range")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the source Net.
        """
        return pulumi.get(self, "net_id")


@pulumi.output_type
class GetNetPeeringsNetPeeringSourceNetResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 ip_range: _builtins.str,
                 net_id: _builtins.str):
        """
        :param _builtins.str account_id: The account ID of the owner of the source Net.
        :param _builtins.str ip_range: The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        :param _builtins.str net_id: The ID of the source Net.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "net_id", net_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the source Net.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> _builtins.str:
        """
        The IP range for the source Net, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_range")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the source Net.
        """
        return pulumi.get(self, "net_id")


@pulumi.output_type
class GetNetPeeringsNetPeeringStateResult(dict):
    def __init__(__self__, *,
                 message: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str message: Additional information about the state of the Net peering.
        :param _builtins.str name: The state of the Net peering (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Additional information about the state of the Net peering.
        """
        return pulumi.get(self, "message")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The state of the Net peering (`pending-acceptance` \\| `active` \\| `rejected` \\| `failed` \\| `expired` \\| `deleted`).
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNetPeeringsNetPeeringTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetsNetResult(dict):
    def __init__(__self__, *,
                 dhcp_options_set_id: _builtins.str,
                 ip_range: _builtins.str,
                 net_id: _builtins.str,
                 state: _builtins.str,
                 tags: Sequence['outputs.GetNetsNetTagResult'],
                 tenancy: _builtins.str):
        """
        :param _builtins.str dhcp_options_set_id: The ID of the DHCP options set (or `default` if you want to associate the default one).
        :param _builtins.str ip_range: The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
        :param _builtins.str net_id: The ID of the Net.
        :param _builtins.str state: The state of the Net (`pending` \\| `available` \\| `deleting`).
        :param Sequence['GetNetsNetTagArgs'] tags: One or more tags associated with the Net.
        :param _builtins.str tenancy: The VM tenancy in a Net.
        """
        pulumi.set(__self__, "dhcp_options_set_id", dhcp_options_set_id)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy", tenancy)

    @_builtins.property
    @pulumi.getter(name="dhcpOptionsSetId")
    def dhcp_options_set_id(self) -> _builtins.str:
        """
        The ID of the DHCP options set (or `default` if you want to associate the default one).
        """
        return pulumi.get(self, "dhcp_options_set_id")

    @_builtins.property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> _builtins.str:
        """
        The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_range")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the Net (`pending` \\| `available` \\| `deleting`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNetsNetTagResult']:
        """
        One or more tags associated with the Net.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def tenancy(self) -> _builtins.str:
        """
        The VM tenancy in a Net.
        """
        return pulumi.get(self, "tenancy")


@pulumi.output_type
class GetNetsNetTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNicFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNicLinkNicResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: _builtins.str,
                 device_number: _builtins.int,
                 link_nic_id: _builtins.str,
                 state: _builtins.str,
                 vm_account_id: _builtins.str,
                 vm_id: _builtins.str):
        """
        :param _builtins.str delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.int device_number: The device index for the NIC attachment (between `1` and `7`, both included).
        :param _builtins.str link_nic_id: The ID of the NIC to attach.
        :param _builtins.str state: The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).
        :param _builtins.str vm_account_id: The account ID of the owner of the VM.
        :param _builtins.str vm_id: The ID of the VM.
        """
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "link_nic_id", link_nic_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_account_id", vm_account_id)
        pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.str:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> _builtins.int:
        """
        The device index for the NIC attachment (between `1` and `7`, both included).
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> _builtins.str:
        """
        The ID of the NIC to attach.
        """
        return pulumi.get(self, "link_nic_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the VM.
        """
        return pulumi.get(self, "vm_account_id")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        The ID of the VM.
        """
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetNicLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 link_public_ip_id: _builtins.str,
                 public_dns_name: _builtins.str,
                 public_ip: _builtins.str,
                 public_ip_account_id: _builtins.str,
                 public_ip_id: _builtins.str):
        """
        :param _builtins.str link_public_ip_id: (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP associated with the NIC.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        :param _builtins.str public_ip_id: The allocation ID of the public IP.
        """
        pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)
        pulumi.set(__self__, "public_ip_id", public_ip_id)

    @_builtins.property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> _builtins.str:
        """
        (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        """
        return pulumi.get(self, "link_public_ip_id")

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> _builtins.str:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP associated with the NIC.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")

    @_builtins.property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> _builtins.str:
        """
        The allocation ID of the public IP.
        """
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class GetNicPrivateIpResult(dict):
    def __init__(__self__, *,
                 is_primary: _builtins.bool,
                 link_public_ips: Sequence['outputs.GetNicPrivateIpLinkPublicIpResult'],
                 private_dns_name: _builtins.str,
                 private_ip: _builtins.str):
        """
        :param _builtins.bool is_primary: If true, the IP is the primary private IP of the NIC.
        :param Sequence['GetNicPrivateIpLinkPublicIpArgs'] link_public_ips: Information about the public IP association.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param _builtins.str private_ip: The private IP of the NIC.
        """
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ip", private_ip)

    @_builtins.property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> _builtins.bool:
        """
        If true, the IP is the primary private IP of the NIC.
        """
        return pulumi.get(self, "is_primary")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetNicPrivateIpLinkPublicIpResult']:
        """
        Information about the public IP association.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> _builtins.str:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The private IP of the NIC.
        """
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetNicPrivateIpLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 link_public_ip_id: _builtins.str,
                 public_dns_name: _builtins.str,
                 public_ip: _builtins.str,
                 public_ip_account_id: _builtins.str,
                 public_ip_id: _builtins.str):
        """
        :param _builtins.str link_public_ip_id: (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP associated with the NIC.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        :param _builtins.str public_ip_id: The allocation ID of the public IP.
        """
        pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)
        pulumi.set(__self__, "public_ip_id", public_ip_id)

    @_builtins.property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> _builtins.str:
        """
        (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        """
        return pulumi.get(self, "link_public_ip_id")

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> _builtins.str:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP associated with the NIC.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")

    @_builtins.property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> _builtins.str:
        """
        The allocation ID of the public IP.
        """
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class GetNicSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_id: _builtins.str,
                 security_group_name: _builtins.str):
        """
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetNicTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNicsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNicsNicResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 description: _builtins.str,
                 is_source_dest_checked: _builtins.bool,
                 link_nics: Sequence['outputs.GetNicsNicLinkNicResult'],
                 link_public_ips: Sequence['outputs.GetNicsNicLinkPublicIpResult'],
                 mac_address: _builtins.str,
                 net_id: _builtins.str,
                 nic_id: _builtins.str,
                 private_dns_name: _builtins.str,
                 private_ips: Sequence['outputs.GetNicsNicPrivateIpResult'],
                 security_groups: Sequence['outputs.GetNicsNicSecurityGroupResult'],
                 state: _builtins.str,
                 subnet_id: _builtins.str,
                 subregion_name: _builtins.str,
                 tags: Sequence['outputs.GetNicsNicTagResult']):
        """
        :param _builtins.str account_id: The account ID of the owner of the NIC.
        :param _builtins.str description: The description of the NIC.
        :param _builtins.bool is_source_dest_checked: (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        :param Sequence['GetNicsNicLinkNicArgs'] link_nics: Information about the NIC attachment.
        :param Sequence['GetNicsNicLinkPublicIpArgs'] link_public_ips: Information about the public IP association.
        :param _builtins.str mac_address: The Media Access Control (MAC) address of the NIC.
        :param _builtins.str net_id: The ID of the Net for the NIC.
        :param _builtins.str nic_id: The ID of the NIC.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param Sequence['GetNicsNicPrivateIpArgs'] private_ips: The private IPs of the NIC.
        :param Sequence['GetNicsNicSecurityGroupArgs'] security_groups: One or more IDs of security groups for the NIC.
        :param _builtins.str state: The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).
        :param _builtins.str subnet_id: The ID of the Subnet.
        :param _builtins.str subregion_name: The Subregion in which the NIC is located.
        :param Sequence['GetNicsNicTagArgs'] tags: One or more tags associated with the NIC.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        pulumi.set(__self__, "link_nics", link_nics)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "subregion_name", subregion_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the NIC.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the NIC.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> _builtins.bool:
        """
        (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        """
        return pulumi.get(self, "is_source_dest_checked")

    @_builtins.property
    @pulumi.getter(name="linkNics")
    def link_nics(self) -> Sequence['outputs.GetNicsNicLinkNicResult']:
        """
        Information about the NIC attachment.
        """
        return pulumi.get(self, "link_nics")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetNicsNicLinkPublicIpResult']:
        """
        Information about the public IP association.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        The Media Access Control (MAC) address of the NIC.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net for the NIC.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> _builtins.str:
        """
        The ID of the NIC.
        """
        return pulumi.get(self, "nic_id")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> _builtins.str:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence['outputs.GetNicsNicPrivateIpResult']:
        """
        The private IPs of the NIC.
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetNicsNicSecurityGroupResult']:
        """
        One or more IDs of security groups for the NIC.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the Subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> _builtins.str:
        """
        The Subregion in which the NIC is located.
        """
        return pulumi.get(self, "subregion_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNicsNicTagResult']:
        """
        One or more tags associated with the NIC.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNicsNicLinkNicResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: _builtins.bool,
                 device_number: _builtins.int,
                 link_nic_id: _builtins.str,
                 state: _builtins.str,
                 vm_account_id: _builtins.str,
                 vm_id: _builtins.str):
        """
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.int device_number: The device index for the NIC attachment (between `1` and `7`, both included).
        :param _builtins.str link_nic_id: The ID of the NIC to attach.
        :param _builtins.str state: The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).
        :param _builtins.str vm_account_id: The account ID of the owner of the VM.
        :param _builtins.str vm_id: The ID of the VM.
        """
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "link_nic_id", link_nic_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_account_id", vm_account_id)
        pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> _builtins.int:
        """
        The device index for the NIC attachment (between `1` and `7`, both included).
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> _builtins.str:
        """
        The ID of the NIC to attach.
        """
        return pulumi.get(self, "link_nic_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the VM.
        """
        return pulumi.get(self, "vm_account_id")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        The ID of the VM.
        """
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetNicsNicLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 link_public_ip_id: _builtins.str,
                 public_dns_name: _builtins.str,
                 public_ip: _builtins.str,
                 public_ip_account_id: _builtins.str,
                 public_ip_id: _builtins.str):
        """
        :param _builtins.str link_public_ip_id: (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP associated with the NIC.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        :param _builtins.str public_ip_id: The allocation ID of the public IP.
        """
        pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)
        pulumi.set(__self__, "public_ip_id", public_ip_id)

    @_builtins.property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> _builtins.str:
        """
        (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        """
        return pulumi.get(self, "link_public_ip_id")

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> _builtins.str:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP associated with the NIC.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")

    @_builtins.property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> _builtins.str:
        """
        The allocation ID of the public IP.
        """
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class GetNicsNicPrivateIpResult(dict):
    def __init__(__self__, *,
                 is_primary: _builtins.bool,
                 link_public_ips: Sequence['outputs.GetNicsNicPrivateIpLinkPublicIpResult'],
                 private_dns_name: _builtins.str,
                 private_ip: _builtins.str):
        """
        :param _builtins.bool is_primary: If true, the IP is the primary private IP of the NIC.
        :param Sequence['GetNicsNicPrivateIpLinkPublicIpArgs'] link_public_ips: Information about the public IP association.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param _builtins.str private_ip: The private IP of the NIC.
        """
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ip", private_ip)

    @_builtins.property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> _builtins.bool:
        """
        If true, the IP is the primary private IP of the NIC.
        """
        return pulumi.get(self, "is_primary")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetNicsNicPrivateIpLinkPublicIpResult']:
        """
        Information about the public IP association.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> _builtins.str:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The private IP of the NIC.
        """
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetNicsNicPrivateIpLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 link_public_ip_id: _builtins.str,
                 public_dns_name: _builtins.str,
                 public_ip: _builtins.str,
                 public_ip_account_id: _builtins.str,
                 public_ip_id: _builtins.str):
        """
        :param _builtins.str link_public_ip_id: (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP associated with the NIC.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        :param _builtins.str public_ip_id: The allocation ID of the public IP.
        """
        pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)
        pulumi.set(__self__, "public_ip_id", public_ip_id)

    @_builtins.property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> _builtins.str:
        """
        (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        """
        return pulumi.get(self, "link_public_ip_id")

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> _builtins.str:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP associated with the NIC.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")

    @_builtins.property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> _builtins.str:
        """
        The allocation ID of the public IP.
        """
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class GetNicsNicSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_id: _builtins.str,
                 security_group_name: _builtins.str):
        """
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetNicsNicTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPoliciesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPoliciesLinkedToUserGroupFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPoliciesLinkedToUserGroupPolicyResult(dict):
    def __init__(__self__, *,
                 creation_date: _builtins.str,
                 last_modification_date: _builtins.str,
                 orn: _builtins.str,
                 policy_id: _builtins.str,
                 policy_name: _builtins.str):
        """
        :param _builtins.str creation_date: The date and time (UTC) at which the linked policy was created.
        :param _builtins.str last_modification_date: The date and time (UTC) at which the linked policy was last modified.
        :param _builtins.str orn: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        :param _builtins.str policy_id: The ID of the policy.
        :param _builtins.str policy_name: The name of the policy.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "last_modification_date", last_modification_date)
        pulumi.set(__self__, "orn", orn)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the linked policy was created.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the linked policy was last modified.
        """
        return pulumi.get(self, "last_modification_date")

    @_builtins.property
    @pulumi.getter
    def orn(self) -> _builtins.str:
        """
        The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        """
        return pulumi.get(self, "orn")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        The ID of the policy.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        The name of the policy.
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class GetPoliciesLinkedToUserPolicyResult(dict):
    def __init__(__self__, *,
                 creation_date: _builtins.str,
                 last_modification_date: _builtins.str,
                 orn: _builtins.str,
                 policy_id: _builtins.str,
                 policy_name: _builtins.str):
        """
        :param _builtins.str creation_date: The date and time (UTC) at which the linked policy was created.
        :param _builtins.str last_modification_date: The date and time (UTC) at which the linked policy was last modified.
        :param _builtins.str orn: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        :param _builtins.str policy_id: The ID of the policy.
        :param _builtins.str policy_name: The name of the policy.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "last_modification_date", last_modification_date)
        pulumi.set(__self__, "orn", orn)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the linked policy was created.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the linked policy was last modified.
        """
        return pulumi.get(self, "last_modification_date")

    @_builtins.property
    @pulumi.getter
    def orn(self) -> _builtins.str:
        """
        The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        """
        return pulumi.get(self, "orn")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        The ID of the policy.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        The name of the policy.
        """
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class GetPoliciesPolicyResult(dict):
    def __init__(__self__, *,
                 creation_date: _builtins.str,
                 description: _builtins.str,
                 is_linkable: _builtins.bool,
                 last_modification_date: _builtins.str,
                 orn: _builtins.str,
                 path: _builtins.str,
                 policy_default_version_id: _builtins.str,
                 policy_id: _builtins.str,
                 policy_name: _builtins.str,
                 resources_count: _builtins.int):
        """
        :param _builtins.str creation_date: The date and time (UTC) at which the policy was created.
        :param _builtins.str description: A friendly name for the policy (between 0 and 1000 characters).
        :param _builtins.bool is_linkable: Indicates whether the policy can be linked to a group or an EIM user.
        :param _builtins.str last_modification_date: The date and time (UTC) at which the policy was last modified.
        :param _builtins.str orn: The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        :param _builtins.str path: The path to the policy.
        :param _builtins.str policy_default_version_id: The ID of the policy default version.
        :param _builtins.str policy_id: The ID of the policy.
        :param _builtins.str policy_name: The name of the policy.
        :param _builtins.int resources_count: The number of resources attached to the policy.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_linkable", is_linkable)
        pulumi.set(__self__, "last_modification_date", last_modification_date)
        pulumi.set(__self__, "orn", orn)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "policy_default_version_id", policy_default_version_id)
        pulumi.set(__self__, "policy_id", policy_id)
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "resources_count", resources_count)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the policy was created.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        A friendly name for the policy (between 0 and 1000 characters).
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="isLinkable")
    def is_linkable(self) -> _builtins.bool:
        """
        Indicates whether the policy can be linked to a group or an EIM user.
        """
        return pulumi.get(self, "is_linkable")

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the policy was last modified.
        """
        return pulumi.get(self, "last_modification_date")

    @_builtins.property
    @pulumi.getter
    def orn(self) -> _builtins.str:
        """
        The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        """
        return pulumi.get(self, "orn")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The path to the policy.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="policyDefaultVersionId")
    def policy_default_version_id(self) -> _builtins.str:
        """
        The ID of the policy default version.
        """
        return pulumi.get(self, "policy_default_version_id")

    @_builtins.property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> _builtins.str:
        """
        The ID of the policy.
        """
        return pulumi.get(self, "policy_id")

    @_builtins.property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> _builtins.str:
        """
        The name of the policy.
        """
        return pulumi.get(self, "policy_name")

    @_builtins.property
    @pulumi.getter(name="resourcesCount")
    def resources_count(self) -> _builtins.int:
        """
        The number of resources attached to the policy.
        """
        return pulumi.get(self, "resources_count")


@pulumi.output_type
class GetProductTypeFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProductTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProductTypesProductTypeResult(dict):
    def __init__(__self__, *,
                 description: _builtins.str,
                 product_type_id: _builtins.str,
                 vendor: _builtins.str):
        """
        :param _builtins.str description: The description of the product type.
        :param _builtins.str product_type_id: The ID of the product type.
        :param _builtins.str vendor: The vendor of the product type.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "product_type_id", product_type_id)
        pulumi.set(__self__, "vendor", vendor)

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the product type.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="productTypeId")
    def product_type_id(self) -> _builtins.str:
        """
        The ID of the product type.
        """
        return pulumi.get(self, "product_type_id")

    @_builtins.property
    @pulumi.getter
    def vendor(self) -> _builtins.str:
        """
        The vendor of the product type.
        """
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetPublicCatalogCatalogResult(dict):
    def __init__(__self__, *,
                 entries: Sequence['outputs.GetPublicCatalogCatalogEntryResult']):
        pulumi.set(__self__, "entries", entries)

    @_builtins.property
    @pulumi.getter
    def entries(self) -> Sequence['outputs.GetPublicCatalogCatalogEntryResult']:
        return pulumi.get(self, "entries")


@pulumi.output_type
class GetPublicCatalogCatalogEntryResult(dict):
    def __init__(__self__, *,
                 category: _builtins.str,
                 flags: _builtins.str,
                 operation: _builtins.str,
                 service: _builtins.str,
                 subregion_name: _builtins.str,
                 title: _builtins.str,
                 type: _builtins.str,
                 unit_price: _builtins.float):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "subregion_name", subregion_name)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unit_price", unit_price)

    @_builtins.property
    @pulumi.getter
    def category(self) -> _builtins.str:
        return pulumi.get(self, "category")

    @_builtins.property
    @pulumi.getter
    def flags(self) -> _builtins.str:
        return pulumi.get(self, "flags")

    @_builtins.property
    @pulumi.getter
    def operation(self) -> _builtins.str:
        return pulumi.get(self, "operation")

    @_builtins.property
    @pulumi.getter
    def service(self) -> _builtins.str:
        return pulumi.get(self, "service")

    @_builtins.property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> _builtins.str:
        return pulumi.get(self, "subregion_name")

    @_builtins.property
    @pulumi.getter
    def title(self) -> _builtins.str:
        return pulumi.get(self, "title")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="unitPrice")
    def unit_price(self) -> _builtins.float:
        return pulumi.get(self, "unit_price")


@pulumi.output_type
class GetPublicIpFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPublicIpTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPublicIpsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPublicIpsPublicIpResult(dict):
    def __init__(__self__, *,
                 link_public_ip_id: _builtins.str,
                 nic_account_id: _builtins.str,
                 nic_id: _builtins.str,
                 private_ip: _builtins.str,
                 public_ip: _builtins.str,
                 public_ip_id: _builtins.str,
                 tags: Sequence['outputs.GetPublicIpsPublicIpTagResult'],
                 vm_id: _builtins.str):
        """
        :param _builtins.str link_public_ip_id: (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        :param _builtins.str nic_account_id: The account ID of the owner of the NIC.
        :param _builtins.str nic_id: The ID of the NIC the public IP is associated with (if any).
        :param _builtins.str private_ip: The private IP associated with the public IP.
        :param _builtins.str public_ip: The public IP.
        :param _builtins.str public_ip_id: The allocation ID of the public IP.
        :param Sequence['GetPublicIpsPublicIpTagArgs'] tags: One or more tags associated with the public IP.
        :param _builtins.str vm_id: The ID of the VM the public IP is associated with (if any).
        """
        pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        pulumi.set(__self__, "nic_account_id", nic_account_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_id", public_ip_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> _builtins.str:
        """
        (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        """
        return pulumi.get(self, "link_public_ip_id")

    @_builtins.property
    @pulumi.getter(name="nicAccountId")
    def nic_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the NIC.
        """
        return pulumi.get(self, "nic_account_id")

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> _builtins.str:
        """
        The ID of the NIC the public IP is associated with (if any).
        """
        return pulumi.get(self, "nic_id")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The private IP associated with the public IP.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> _builtins.str:
        """
        The allocation ID of the public IP.
        """
        return pulumi.get(self, "public_ip_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetPublicIpsPublicIpTagResult']:
        """
        One or more tags associated with the public IP.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        The ID of the VM the public IP is associated with (if any).
        """
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetPublicIpsPublicIpTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetQuotaFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str name: The unique name of the quota.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The unique name of the quota.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetQuotasFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str name: The unique name of the quota.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The unique name of the quota.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 description: _builtins.str,
                 max_value: _builtins.int,
                 name: _builtins.str,
                 quota_collection: _builtins.str,
                 quota_type: _builtins.str,
                 short_description: _builtins.str,
                 used_value: _builtins.int):
        """
        :param _builtins.str account_id: The account ID of the owner of the quotas.
        :param _builtins.str description: The description of the quota.
        :param _builtins.int max_value: The maximum value of the quota for the account (if there is no limit, `0`).
        :param _builtins.str name: The unique name of the quota.
        :param _builtins.str quota_collection: The group name of the quota.
        :param _builtins.str quota_type: The ressource ID if it is a resource-specific quota, `global` if it is not.
        :param _builtins.str short_description: The description of the quota.
        :param _builtins.int used_value: The limit value currently used by the account.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "quota_collection", quota_collection)
        pulumi.set(__self__, "quota_type", quota_type)
        pulumi.set(__self__, "short_description", short_description)
        pulumi.set(__self__, "used_value", used_value)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the quotas.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the quota.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> _builtins.int:
        """
        The maximum value of the quota for the account (if there is no limit, `0`).
        """
        return pulumi.get(self, "max_value")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The unique name of the quota.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="quotaCollection")
    def quota_collection(self) -> _builtins.str:
        """
        The group name of the quota.
        """
        return pulumi.get(self, "quota_collection")

    @_builtins.property
    @pulumi.getter(name="quotaType")
    def quota_type(self) -> _builtins.str:
        """
        The ressource ID if it is a resource-specific quota, `global` if it is not.
        """
        return pulumi.get(self, "quota_type")

    @_builtins.property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> _builtins.str:
        """
        The description of the quota.
        """
        return pulumi.get(self, "short_description")

    @_builtins.property
    @pulumi.getter(name="usedValue")
    def used_value(self) -> _builtins.int:
        """
        The limit value currently used by the account.
        """
        return pulumi.get(self, "used_value")


@pulumi.output_type
class GetRegionsRegionResult(dict):
    def __init__(__self__, *,
                 endpoint: _builtins.str,
                 region_name: _builtins.str):
        """
        :param _builtins.str endpoint: The hostname of the gateway to access the Region.
        :param _builtins.str region_name: The administrative name of the Region.
        """
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "region_name", region_name)

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        The hostname of the gateway to access the Region.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter(name="regionName")
    def region_name(self) -> _builtins.str:
        """
        The administrative name of the Region.
        """
        return pulumi.get(self, "region_name")


@pulumi.output_type
class GetRouteTableFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetRouteTableLinkRouteTableResult(dict):
    def __init__(__self__, *,
                 link_route_table_id: _builtins.str,
                 main: _builtins.bool,
                 route_table_id: _builtins.str,
                 route_table_to_subnet_link_id: _builtins.str,
                 subnet_id: _builtins.str):
        """
        :param _builtins.str link_route_table_id: The ID of the association between the route table and the Net or Subnet.
        :param _builtins.bool main: If true, the route table is the main one.
        :param _builtins.str route_table_id: The ID of the route table.
        :param _builtins.str subnet_id: The ID of the Subnet, if the route table is explicitly linked to a Subnet.
        """
        pulumi.set(__self__, "link_route_table_id", link_route_table_id)
        pulumi.set(__self__, "main", main)
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "route_table_to_subnet_link_id", route_table_to_subnet_link_id)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="linkRouteTableId")
    def link_route_table_id(self) -> _builtins.str:
        """
        The ID of the association between the route table and the Net or Subnet.
        """
        return pulumi.get(self, "link_route_table_id")

    @_builtins.property
    @pulumi.getter
    def main(self) -> _builtins.bool:
        """
        If true, the route table is the main one.
        """
        return pulumi.get(self, "main")

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> _builtins.str:
        """
        The ID of the route table.
        """
        return pulumi.get(self, "route_table_id")

    @_builtins.property
    @pulumi.getter(name="routeTableToSubnetLinkId")
    def route_table_to_subnet_link_id(self) -> _builtins.str:
        return pulumi.get(self, "route_table_to_subnet_link_id")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the Subnet, if the route table is explicitly linked to a Subnet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetRouteTableRouteResult(dict):
    def __init__(__self__, *,
                 creation_method: _builtins.str,
                 destination_ip_range: _builtins.str,
                 destination_service_id: _builtins.str,
                 gateway_id: _builtins.str,
                 nat_service_id: _builtins.str,
                 net_access_point_id: _builtins.str,
                 net_peering_id: _builtins.str,
                 nic_id: _builtins.str,
                 state: _builtins.str,
                 vm_account_id: _builtins.str,
                 vm_id: _builtins.str):
        """
        :param _builtins.str creation_method: The method used to create the route.
        :param _builtins.str destination_ip_range: The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        :param _builtins.str destination_service_id: The ID of the OUTSCALE service.
        :param _builtins.str gateway_id: The ID of the internet service or virtual gateway attached to the Net.
        :param _builtins.str nat_service_id: The ID of a NAT service attached to the Net.
        :param _builtins.str net_access_point_id: The ID of the Net access point.
        :param _builtins.str net_peering_id: The ID of the Net peering.
        :param _builtins.str nic_id: The ID of the NIC.
        :param _builtins.str state: The state of a route in the route table (always `active`).
        :param _builtins.str vm_account_id: The account ID of the owner of the VM.
        :param _builtins.str vm_id: The ID of a VM specified in a route in the table.
        """
        pulumi.set(__self__, "creation_method", creation_method)
        pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        pulumi.set(__self__, "destination_service_id", destination_service_id)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "nat_service_id", nat_service_id)
        pulumi.set(__self__, "net_access_point_id", net_access_point_id)
        pulumi.set(__self__, "net_peering_id", net_peering_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_account_id", vm_account_id)
        pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter(name="creationMethod")
    def creation_method(self) -> _builtins.str:
        """
        The method used to create the route.
        """
        return pulumi.get(self, "creation_method")

    @_builtins.property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> _builtins.str:
        """
        The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        """
        return pulumi.get(self, "destination_ip_range")

    @_builtins.property
    @pulumi.getter(name="destinationServiceId")
    def destination_service_id(self) -> _builtins.str:
        """
        The ID of the OUTSCALE service.
        """
        return pulumi.get(self, "destination_service_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> _builtins.str:
        """
        The ID of the internet service or virtual gateway attached to the Net.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> _builtins.str:
        """
        The ID of a NAT service attached to the Net.
        """
        return pulumi.get(self, "nat_service_id")

    @_builtins.property
    @pulumi.getter(name="netAccessPointId")
    def net_access_point_id(self) -> _builtins.str:
        """
        The ID of the Net access point.
        """
        return pulumi.get(self, "net_access_point_id")

    @_builtins.property
    @pulumi.getter(name="netPeeringId")
    def net_peering_id(self) -> _builtins.str:
        """
        The ID of the Net peering.
        """
        return pulumi.get(self, "net_peering_id")

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> _builtins.str:
        """
        The ID of the NIC.
        """
        return pulumi.get(self, "nic_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of a route in the route table (always `active`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the VM.
        """
        return pulumi.get(self, "vm_account_id")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        The ID of a VM specified in a route in the table.
        """
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetRouteTableRoutePropagatingVirtualGatewayResult(dict):
    def __init__(__self__, *,
                 virtual_gateway_id: _builtins.str):
        """
        :param _builtins.str virtual_gateway_id: The ID of the virtual gateway.
        """
        pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)

    @_builtins.property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> _builtins.str:
        """
        The ID of the virtual gateway.
        """
        return pulumi.get(self, "virtual_gateway_id")


@pulumi.output_type
class GetRouteTableTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRouteTablesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetRouteTablesRouteTableResult(dict):
    def __init__(__self__, *,
                 link_route_tables: Sequence['outputs.GetRouteTablesRouteTableLinkRouteTableResult'],
                 net_id: _builtins.str,
                 route_propagating_virtual_gateways: Sequence['outputs.GetRouteTablesRouteTableRoutePropagatingVirtualGatewayResult'],
                 route_table_id: _builtins.str,
                 routes: Sequence['outputs.GetRouteTablesRouteTableRouteResult'],
                 tags: Sequence['outputs.GetRouteTablesRouteTableTagResult']):
        """
        :param Sequence['GetRouteTablesRouteTableLinkRouteTableArgs'] link_route_tables: One or more associations between the route table and Subnets.
        :param _builtins.str net_id: The ID of the Net for the route table.
        :param Sequence['GetRouteTablesRouteTableRoutePropagatingVirtualGatewayArgs'] route_propagating_virtual_gateways: Information about virtual gateways propagating routes.
        :param _builtins.str route_table_id: The ID of the route table.
        :param Sequence['GetRouteTablesRouteTableRouteArgs'] routes: One or more routes in the route table.
        :param Sequence['GetRouteTablesRouteTableTagArgs'] tags: One or more tags associated with the route table.
        """
        pulumi.set(__self__, "link_route_tables", link_route_tables)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "route_propagating_virtual_gateways", route_propagating_virtual_gateways)
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "routes", routes)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="linkRouteTables")
    def link_route_tables(self) -> Sequence['outputs.GetRouteTablesRouteTableLinkRouteTableResult']:
        """
        One or more associations between the route table and Subnets.
        """
        return pulumi.get(self, "link_route_tables")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net for the route table.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="routePropagatingVirtualGateways")
    def route_propagating_virtual_gateways(self) -> Sequence['outputs.GetRouteTablesRouteTableRoutePropagatingVirtualGatewayResult']:
        """
        Information about virtual gateways propagating routes.
        """
        return pulumi.get(self, "route_propagating_virtual_gateways")

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> _builtins.str:
        """
        The ID of the route table.
        """
        return pulumi.get(self, "route_table_id")

    @_builtins.property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetRouteTablesRouteTableRouteResult']:
        """
        One or more routes in the route table.
        """
        return pulumi.get(self, "routes")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetRouteTablesRouteTableTagResult']:
        """
        One or more tags associated with the route table.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetRouteTablesRouteTableLinkRouteTableResult(dict):
    def __init__(__self__, *,
                 link_route_table_id: _builtins.str,
                 main: _builtins.bool,
                 route_table_id: _builtins.str,
                 route_table_to_subnet_link_id: _builtins.str,
                 subnet_id: _builtins.str):
        """
        :param _builtins.str link_route_table_id: The ID of the association between the route table and the Net or Subnet.
        :param _builtins.bool main: If true, the route table is the main one.
        :param _builtins.str route_table_id: The ID of the route table.
        :param _builtins.str subnet_id: The ID of the Subnet, if the route table is explicitly linked to a Subnet.
        """
        pulumi.set(__self__, "link_route_table_id", link_route_table_id)
        pulumi.set(__self__, "main", main)
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "route_table_to_subnet_link_id", route_table_to_subnet_link_id)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="linkRouteTableId")
    def link_route_table_id(self) -> _builtins.str:
        """
        The ID of the association between the route table and the Net or Subnet.
        """
        return pulumi.get(self, "link_route_table_id")

    @_builtins.property
    @pulumi.getter
    def main(self) -> _builtins.bool:
        """
        If true, the route table is the main one.
        """
        return pulumi.get(self, "main")

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> _builtins.str:
        """
        The ID of the route table.
        """
        return pulumi.get(self, "route_table_id")

    @_builtins.property
    @pulumi.getter(name="routeTableToSubnetLinkId")
    def route_table_to_subnet_link_id(self) -> _builtins.str:
        return pulumi.get(self, "route_table_to_subnet_link_id")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the Subnet, if the route table is explicitly linked to a Subnet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetRouteTablesRouteTableRouteResult(dict):
    def __init__(__self__, *,
                 creation_method: _builtins.str,
                 destination_ip_range: _builtins.str,
                 destination_service_id: _builtins.str,
                 gateway_id: _builtins.str,
                 nat_service_id: _builtins.str,
                 net_access_point_id: _builtins.str,
                 net_peering_id: _builtins.str,
                 nic_id: _builtins.str,
                 state: _builtins.str,
                 vm_account_id: _builtins.str,
                 vm_id: _builtins.str):
        """
        :param _builtins.str creation_method: The method used to create the route.
        :param _builtins.str destination_ip_range: The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        :param _builtins.str destination_service_id: The ID of the OUTSCALE service.
        :param _builtins.str gateway_id: The ID of the internet service or virtual gateway attached to the Net.
        :param _builtins.str nat_service_id: The ID of a NAT service attached to the Net.
        :param _builtins.str net_access_point_id: The ID of the Net access point.
        :param _builtins.str net_peering_id: The ID of the Net peering.
        :param _builtins.str nic_id: The ID of the NIC.
        :param _builtins.str state: The state of a route in the route table (always `active`).
        :param _builtins.str vm_account_id: The account ID of the owner of the VM.
        :param _builtins.str vm_id: The ID of a VM specified in a route in the table.
        """
        pulumi.set(__self__, "creation_method", creation_method)
        pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        pulumi.set(__self__, "destination_service_id", destination_service_id)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "nat_service_id", nat_service_id)
        pulumi.set(__self__, "net_access_point_id", net_access_point_id)
        pulumi.set(__self__, "net_peering_id", net_peering_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_account_id", vm_account_id)
        pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter(name="creationMethod")
    def creation_method(self) -> _builtins.str:
        """
        The method used to create the route.
        """
        return pulumi.get(self, "creation_method")

    @_builtins.property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> _builtins.str:
        """
        The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        """
        return pulumi.get(self, "destination_ip_range")

    @_builtins.property
    @pulumi.getter(name="destinationServiceId")
    def destination_service_id(self) -> _builtins.str:
        """
        The ID of the OUTSCALE service.
        """
        return pulumi.get(self, "destination_service_id")

    @_builtins.property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> _builtins.str:
        """
        The ID of the internet service or virtual gateway attached to the Net.
        """
        return pulumi.get(self, "gateway_id")

    @_builtins.property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> _builtins.str:
        """
        The ID of a NAT service attached to the Net.
        """
        return pulumi.get(self, "nat_service_id")

    @_builtins.property
    @pulumi.getter(name="netAccessPointId")
    def net_access_point_id(self) -> _builtins.str:
        """
        The ID of the Net access point.
        """
        return pulumi.get(self, "net_access_point_id")

    @_builtins.property
    @pulumi.getter(name="netPeeringId")
    def net_peering_id(self) -> _builtins.str:
        """
        The ID of the Net peering.
        """
        return pulumi.get(self, "net_peering_id")

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> _builtins.str:
        """
        The ID of the NIC.
        """
        return pulumi.get(self, "nic_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of a route in the route table (always `active`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the VM.
        """
        return pulumi.get(self, "vm_account_id")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        The ID of a VM specified in a route in the table.
        """
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetRouteTablesRouteTableRoutePropagatingVirtualGatewayResult(dict):
    def __init__(__self__, *,
                 virtual_gateway_id: _builtins.str):
        """
        :param _builtins.str virtual_gateway_id: The ID of the virtual gateway.
        """
        pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)

    @_builtins.property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> _builtins.str:
        """
        The ID of the virtual gateway.
        """
        return pulumi.get(self, "virtual_gateway_id")


@pulumi.output_type
class GetRouteTablesRouteTableTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityGroupFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSecurityGroupInboundRuleResult(dict):
    def __init__(__self__, *,
                 from_port_range: _builtins.int,
                 ip_protocol: _builtins.str,
                 ip_ranges: Sequence[_builtins.str],
                 prefix_list_ids: Sequence[_builtins.str],
                 security_groups_members: Sequence['outputs.GetSecurityGroupInboundRuleSecurityGroupsMemberResult'],
                 to_port_range: _builtins.int):
        """
        :param _builtins.int from_port_range: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
        :param _builtins.str ip_protocol: The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        :param Sequence[_builtins.str] ip_ranges: One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
        :param Sequence['GetSecurityGroupInboundRuleSecurityGroupsMemberArgs'] security_groups_members: Information about one or more source or destination security groups.
        :param _builtins.int to_port_range: The end of the port range for the TCP and UDP protocols, or an ICMP code number.
        """
        pulumi.set(__self__, "from_port_range", from_port_range)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "prefix_list_ids", prefix_list_ids)
        pulumi.set(__self__, "security_groups_members", security_groups_members)
        pulumi.set(__self__, "to_port_range", to_port_range)

    @_builtins.property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> _builtins.int:
        """
        The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
        """
        return pulumi.get(self, "from_port_range")

    @_builtins.property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> _builtins.str:
        """
        The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        """
        return pulumi.get(self, "ip_protocol")

    @_builtins.property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[_builtins.str]:
        """
        One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_ranges")

    @_builtins.property
    @pulumi.getter(name="prefixListIds")
    def prefix_list_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "prefix_list_ids")

    @_builtins.property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Sequence['outputs.GetSecurityGroupInboundRuleSecurityGroupsMemberResult']:
        """
        Information about one or more source or destination security groups.
        """
        return pulumi.get(self, "security_groups_members")

    @_builtins.property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> _builtins.int:
        """
        The end of the port range for the TCP and UDP protocols, or an ICMP code number.
        """
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class GetSecurityGroupInboundRuleSecurityGroupsMemberResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 security_group_id: _builtins.str,
                 security_group_name: _builtins.str):
        """
        :param _builtins.str account_id: The account ID that owns the source or destination security group.
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID that owns the source or destination security group.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetSecurityGroupOutboundRuleResult(dict):
    def __init__(__self__, *,
                 from_port_range: _builtins.int,
                 ip_protocol: _builtins.str,
                 ip_ranges: Sequence[_builtins.str],
                 prefix_list_ids: Sequence[_builtins.str],
                 security_groups_members: Sequence['outputs.GetSecurityGroupOutboundRuleSecurityGroupsMemberResult'],
                 to_port_range: _builtins.int):
        """
        :param _builtins.int from_port_range: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
        :param _builtins.str ip_protocol: The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        :param Sequence[_builtins.str] ip_ranges: One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
        :param Sequence['GetSecurityGroupOutboundRuleSecurityGroupsMemberArgs'] security_groups_members: Information about one or more source or destination security groups.
        :param _builtins.int to_port_range: The end of the port range for the TCP and UDP protocols, or an ICMP code number.
        """
        pulumi.set(__self__, "from_port_range", from_port_range)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "prefix_list_ids", prefix_list_ids)
        pulumi.set(__self__, "security_groups_members", security_groups_members)
        pulumi.set(__self__, "to_port_range", to_port_range)

    @_builtins.property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> _builtins.int:
        """
        The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
        """
        return pulumi.get(self, "from_port_range")

    @_builtins.property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> _builtins.str:
        """
        The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        """
        return pulumi.get(self, "ip_protocol")

    @_builtins.property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[_builtins.str]:
        """
        One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_ranges")

    @_builtins.property
    @pulumi.getter(name="prefixListIds")
    def prefix_list_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "prefix_list_ids")

    @_builtins.property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Sequence['outputs.GetSecurityGroupOutboundRuleSecurityGroupsMemberResult']:
        """
        Information about one or more source or destination security groups.
        """
        return pulumi.get(self, "security_groups_members")

    @_builtins.property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> _builtins.int:
        """
        The end of the port range for the TCP and UDP protocols, or an ICMP code number.
        """
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class GetSecurityGroupOutboundRuleSecurityGroupsMemberResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 security_group_id: _builtins.str,
                 security_group_name: _builtins.str):
        """
        :param _builtins.str account_id: The account ID that owns the source or destination security group.
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID that owns the source or destination security group.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetSecurityGroupTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSecurityGroupsSecurityGroupResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 description: _builtins.str,
                 inbound_rules: Sequence['outputs.GetSecurityGroupsSecurityGroupInboundRuleResult'],
                 net_id: _builtins.str,
                 outbound_rules: Sequence['outputs.GetSecurityGroupsSecurityGroupOutboundRuleResult'],
                 security_group_id: _builtins.str,
                 security_group_name: _builtins.str,
                 tags: Sequence['outputs.GetSecurityGroupsSecurityGroupTagResult']):
        """
        :param _builtins.str account_id: The account ID that owns the source or destination security group.
        :param _builtins.str description: The description of the security group.
        :param Sequence['GetSecurityGroupsSecurityGroupInboundRuleArgs'] inbound_rules: The inbound rules associated with the security group.
        :param _builtins.str net_id: The ID of the Net for the security group.
        :param Sequence['GetSecurityGroupsSecurityGroupOutboundRuleArgs'] outbound_rules: The outbound rules associated with the security group.
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        :param Sequence['GetSecurityGroupsSecurityGroupTagArgs'] tags: One or more tags associated with the security group.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "inbound_rules", inbound_rules)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "outbound_rules", outbound_rules)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID that owns the source or destination security group.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the security group.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="inboundRules")
    def inbound_rules(self) -> Sequence['outputs.GetSecurityGroupsSecurityGroupInboundRuleResult']:
        """
        The inbound rules associated with the security group.
        """
        return pulumi.get(self, "inbound_rules")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net for the security group.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="outboundRules")
    def outbound_rules(self) -> Sequence['outputs.GetSecurityGroupsSecurityGroupOutboundRuleResult']:
        """
        The outbound rules associated with the security group.
        """
        return pulumi.get(self, "outbound_rules")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetSecurityGroupsSecurityGroupTagResult']:
        """
        One or more tags associated with the security group.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSecurityGroupsSecurityGroupInboundRuleResult(dict):
    def __init__(__self__, *,
                 from_port_range: _builtins.int,
                 ip_protocol: _builtins.str,
                 ip_ranges: Sequence[_builtins.str],
                 prefix_list_ids: Sequence[_builtins.str],
                 security_groups_members: Sequence['outputs.GetSecurityGroupsSecurityGroupInboundRuleSecurityGroupsMemberResult'],
                 to_port_range: _builtins.int):
        """
        :param _builtins.int from_port_range: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
        :param _builtins.str ip_protocol: The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        :param Sequence[_builtins.str] ip_ranges: One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
        :param Sequence['GetSecurityGroupsSecurityGroupInboundRuleSecurityGroupsMemberArgs'] security_groups_members: Information about one or more source or destination security groups.
        :param _builtins.int to_port_range: The end of the port range for the TCP and UDP protocols, or an ICMP code number.
        """
        pulumi.set(__self__, "from_port_range", from_port_range)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "prefix_list_ids", prefix_list_ids)
        pulumi.set(__self__, "security_groups_members", security_groups_members)
        pulumi.set(__self__, "to_port_range", to_port_range)

    @_builtins.property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> _builtins.int:
        """
        The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
        """
        return pulumi.get(self, "from_port_range")

    @_builtins.property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> _builtins.str:
        """
        The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        """
        return pulumi.get(self, "ip_protocol")

    @_builtins.property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[_builtins.str]:
        """
        One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_ranges")

    @_builtins.property
    @pulumi.getter(name="prefixListIds")
    def prefix_list_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "prefix_list_ids")

    @_builtins.property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Sequence['outputs.GetSecurityGroupsSecurityGroupInboundRuleSecurityGroupsMemberResult']:
        """
        Information about one or more source or destination security groups.
        """
        return pulumi.get(self, "security_groups_members")

    @_builtins.property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> _builtins.int:
        """
        The end of the port range for the TCP and UDP protocols, or an ICMP code number.
        """
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class GetSecurityGroupsSecurityGroupInboundRuleSecurityGroupsMemberResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 security_group_id: _builtins.str,
                 security_group_name: _builtins.str):
        """
        :param _builtins.str account_id: The account ID that owns the source or destination security group.
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID that owns the source or destination security group.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetSecurityGroupsSecurityGroupOutboundRuleResult(dict):
    def __init__(__self__, *,
                 from_port_range: _builtins.int,
                 ip_protocol: _builtins.str,
                 ip_ranges: Sequence[_builtins.str],
                 prefix_list_ids: Sequence[_builtins.str],
                 security_groups_members: Sequence['outputs.GetSecurityGroupsSecurityGroupOutboundRuleSecurityGroupsMemberResult'],
                 to_port_range: _builtins.int):
        """
        :param _builtins.int from_port_range: The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
        :param _builtins.str ip_protocol: The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        :param Sequence[_builtins.str] ip_ranges: One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
        :param Sequence['GetSecurityGroupsSecurityGroupOutboundRuleSecurityGroupsMemberArgs'] security_groups_members: Information about one or more source or destination security groups.
        :param _builtins.int to_port_range: The end of the port range for the TCP and UDP protocols, or an ICMP code number.
        """
        pulumi.set(__self__, "from_port_range", from_port_range)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "prefix_list_ids", prefix_list_ids)
        pulumi.set(__self__, "security_groups_members", security_groups_members)
        pulumi.set(__self__, "to_port_range", to_port_range)

    @_builtins.property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> _builtins.int:
        """
        The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
        """
        return pulumi.get(self, "from_port_range")

    @_builtins.property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> _builtins.str:
        """
        The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
        """
        return pulumi.get(self, "ip_protocol")

    @_builtins.property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[_builtins.str]:
        """
        One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_ranges")

    @_builtins.property
    @pulumi.getter(name="prefixListIds")
    def prefix_list_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "prefix_list_ids")

    @_builtins.property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Sequence['outputs.GetSecurityGroupsSecurityGroupOutboundRuleSecurityGroupsMemberResult']:
        """
        Information about one or more source or destination security groups.
        """
        return pulumi.get(self, "security_groups_members")

    @_builtins.property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> _builtins.int:
        """
        The end of the port range for the TCP and UDP protocols, or an ICMP code number.
        """
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class GetSecurityGroupsSecurityGroupOutboundRuleSecurityGroupsMemberResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 security_group_id: _builtins.str,
                 security_group_name: _builtins.str):
        """
        :param _builtins.str account_id: The account ID that owns the source or destination security group.
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID that owns the source or destination security group.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetSecurityGroupsSecurityGroupTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerCertificateFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str name: The name of the server certificate.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the server certificate.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetServerCertificatesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str name: The name of the server certificate.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the server certificate.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetServerCertificatesServerCertificateResult(dict):
    def __init__(__self__, *,
                 expiration_date: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 orn: _builtins.str,
                 path: _builtins.str,
                 upload_date: _builtins.str):
        """
        :param _builtins.str expiration_date: The date on which the server certificate expires.
        :param _builtins.str id: The ID of the server certificate.
        :param _builtins.str name: The name of the server certificate.
        :param _builtins.str orn: The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
        :param _builtins.str path: The path to the server certificate.
        :param _builtins.str upload_date: The date on which the server certificate has been uploaded.
        """
        pulumi.set(__self__, "expiration_date", expiration_date)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "orn", orn)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "upload_date", upload_date)

    @_builtins.property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> _builtins.str:
        """
        The date on which the server certificate expires.
        """
        return pulumi.get(self, "expiration_date")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The ID of the server certificate.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the server certificate.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def orn(self) -> _builtins.str:
        """
        The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
        """
        return pulumi.get(self, "orn")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The path to the server certificate.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="uploadDate")
    def upload_date(self) -> _builtins.str:
        """
        The date on which the server certificate has been uploaded.
        """
        return pulumi.get(self, "upload_date")


@pulumi.output_type
class GetSnapshotExportTaskFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSnapshotExportTaskOsuExportResult(dict):
    def __init__(__self__, *,
                 disk_image_format: _builtins.str,
                 osu_bucket: _builtins.str,
                 osu_prefix: _builtins.str):
        """
        :param _builtins.str disk_image_format: The format of the export disk (`qcow2` \\| `raw`).
        :param _builtins.str osu_bucket: The name of the OOS bucket the snapshot is exported to.
        :param _builtins.str osu_prefix: The prefix for the key of the OOS object corresponding to the snapshot.
        """
        pulumi.set(__self__, "disk_image_format", disk_image_format)
        pulumi.set(__self__, "osu_bucket", osu_bucket)
        pulumi.set(__self__, "osu_prefix", osu_prefix)

    @_builtins.property
    @pulumi.getter(name="diskImageFormat")
    def disk_image_format(self) -> _builtins.str:
        """
        The format of the export disk (`qcow2` \\| `raw`).
        """
        return pulumi.get(self, "disk_image_format")

    @_builtins.property
    @pulumi.getter(name="osuBucket")
    def osu_bucket(self) -> _builtins.str:
        """
        The name of the OOS bucket the snapshot is exported to.
        """
        return pulumi.get(self, "osu_bucket")

    @_builtins.property
    @pulumi.getter(name="osuPrefix")
    def osu_prefix(self) -> _builtins.str:
        """
        The prefix for the key of the OOS object corresponding to the snapshot.
        """
        return pulumi.get(self, "osu_prefix")


@pulumi.output_type
class GetSnapshotExportTaskTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSnapshotExportTasksFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSnapshotExportTasksSnapshotExportTaskResult(dict):
    def __init__(__self__, *,
                 comment: _builtins.str,
                 osu_exports: Sequence['outputs.GetSnapshotExportTasksSnapshotExportTaskOsuExportResult'],
                 progress: _builtins.int,
                 snapshot_id: _builtins.str,
                 state: _builtins.str,
                 tags: Sequence['outputs.GetSnapshotExportTasksSnapshotExportTaskTagResult'],
                 task_id: _builtins.str):
        """
        :param _builtins.str comment: If the snapshot export task fails, an error message appears.
        :param Sequence['GetSnapshotExportTasksSnapshotExportTaskOsuExportArgs'] osu_exports: Information about the snapshot export task.
        :param _builtins.int progress: The progress of the snapshot export task, as a percentage.
        :param _builtins.str snapshot_id: The ID of the snapshot to be exported.
        :param _builtins.str state: The state of the snapshot export task (`pending` \\| `active` \\| `completed` \\| `failed`).
        :param Sequence['GetSnapshotExportTasksSnapshotExportTaskTagArgs'] tags: One or more tags associated with the snapshot export task.
        :param _builtins.str task_id: The ID of the snapshot export task.
        """
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "osu_exports", osu_exports)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "task_id", task_id)

    @_builtins.property
    @pulumi.getter
    def comment(self) -> _builtins.str:
        """
        If the snapshot export task fails, an error message appears.
        """
        return pulumi.get(self, "comment")

    @_builtins.property
    @pulumi.getter(name="osuExports")
    def osu_exports(self) -> Sequence['outputs.GetSnapshotExportTasksSnapshotExportTaskOsuExportResult']:
        """
        Information about the snapshot export task.
        """
        return pulumi.get(self, "osu_exports")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.int:
        """
        The progress of the snapshot export task, as a percentage.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        The ID of the snapshot to be exported.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the snapshot export task (`pending` \\| `active` \\| `completed` \\| `failed`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetSnapshotExportTasksSnapshotExportTaskTagResult']:
        """
        One or more tags associated with the snapshot export task.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="taskId")
    def task_id(self) -> _builtins.str:
        """
        The ID of the snapshot export task.
        """
        return pulumi.get(self, "task_id")


@pulumi.output_type
class GetSnapshotExportTasksSnapshotExportTaskOsuExportResult(dict):
    def __init__(__self__, *,
                 disk_image_format: _builtins.str,
                 osu_bucket: _builtins.str,
                 osu_prefix: _builtins.str):
        """
        :param _builtins.str disk_image_format: The format of the export disk (`qcow2` \\| `raw`).
        :param _builtins.str osu_bucket: The name of the OOS bucket the snapshot is exported to.
        :param _builtins.str osu_prefix: The prefix for the key of the OOS object corresponding to the snapshot.
        """
        pulumi.set(__self__, "disk_image_format", disk_image_format)
        pulumi.set(__self__, "osu_bucket", osu_bucket)
        pulumi.set(__self__, "osu_prefix", osu_prefix)

    @_builtins.property
    @pulumi.getter(name="diskImageFormat")
    def disk_image_format(self) -> _builtins.str:
        """
        The format of the export disk (`qcow2` \\| `raw`).
        """
        return pulumi.get(self, "disk_image_format")

    @_builtins.property
    @pulumi.getter(name="osuBucket")
    def osu_bucket(self) -> _builtins.str:
        """
        The name of the OOS bucket the snapshot is exported to.
        """
        return pulumi.get(self, "osu_bucket")

    @_builtins.property
    @pulumi.getter(name="osuPrefix")
    def osu_prefix(self) -> _builtins.str:
        """
        The prefix for the key of the OOS object corresponding to the snapshot.
        """
        return pulumi.get(self, "osu_prefix")


@pulumi.output_type
class GetSnapshotExportTasksSnapshotExportTaskTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSnapshotFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSnapshotPermissionsToCreateVolumeResult(dict):
    def __init__(__self__, *,
                 account_ids: Sequence[_builtins.str],
                 global_permission: _builtins.bool):
        """
        :param Sequence[_builtins.str] account_ids: One or more account IDs that the permission is associated with.
        :param _builtins.bool global_permission: A global permission for all accounts.<br />
               (Request) Set this parameter to true to make the resource public (if the parent parameter is `Additions`) or to make the resource private (if the parent parameter is `Removals`).<br />
               (Response) If true, the resource is public. If false, the resource is private.
        """
        pulumi.set(__self__, "account_ids", account_ids)
        pulumi.set(__self__, "global_permission", global_permission)

    @_builtins.property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Sequence[_builtins.str]:
        """
        One or more account IDs that the permission is associated with.
        """
        return pulumi.get(self, "account_ids")

    @_builtins.property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> _builtins.bool:
        """
        A global permission for all accounts.<br />
        (Request) Set this parameter to true to make the resource public (if the parent parameter is `Additions`) or to make the resource private (if the parent parameter is `Removals`).<br />
        (Response) If true, the resource is public. If false, the resource is private.
        """
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class GetSnapshotTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSnapshotsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSnapshotsSnapshotResult(dict):
    def __init__(__self__, *,
                 account_alias: _builtins.str,
                 account_id: _builtins.str,
                 creation_date: _builtins.str,
                 description: _builtins.str,
                 permissions_to_create_volumes: Sequence['outputs.GetSnapshotsSnapshotPermissionsToCreateVolumeResult'],
                 progress: _builtins.int,
                 snapshot_id: _builtins.str,
                 state: _builtins.str,
                 tags: Sequence['outputs.GetSnapshotsSnapshotTagResult'],
                 volume_id: _builtins.str,
                 volume_size: _builtins.int):
        """
        :param _builtins.str account_alias: The account alias of the owner of the snapshot.
        :param _builtins.str account_id: The account ID of the owner of the snapshot.
        :param _builtins.str creation_date: The date and time (UTC) at which the snapshot was created.
        :param _builtins.str description: The description of the snapshot.
        :param Sequence['GetSnapshotsSnapshotPermissionsToCreateVolumeArgs'] permissions_to_create_volumes: Permissions for the resource.
        :param _builtins.int progress: The progress of the snapshot, as a percentage.
        :param _builtins.str snapshot_id: The ID of the snapshot.
        :param _builtins.str state: The state of the snapshot (`in-queue` \\| `pending` \\| `completed` \\| `error` \\| `deleting`)).
        :param Sequence['GetSnapshotsSnapshotTagArgs'] tags: One or more tags associated with the snapshot.
        :param _builtins.str volume_id: The ID of the volume used to create the snapshot.
        :param _builtins.int volume_size: The size of the volume used to create the snapshot, in gibibytes (GiB).
        """
        pulumi.set(__self__, "account_alias", account_alias)
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "permissions_to_create_volumes", permissions_to_create_volumes)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "volume_id", volume_id)
        pulumi.set(__self__, "volume_size", volume_size)

    @_builtins.property
    @pulumi.getter(name="accountAlias")
    def account_alias(self) -> _builtins.str:
        """
        The account alias of the owner of the snapshot.
        """
        return pulumi.get(self, "account_alias")

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the snapshot.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the snapshot was created.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the snapshot.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="permissionsToCreateVolumes")
    def permissions_to_create_volumes(self) -> Sequence['outputs.GetSnapshotsSnapshotPermissionsToCreateVolumeResult']:
        """
        Permissions for the resource.
        """
        return pulumi.get(self, "permissions_to_create_volumes")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> _builtins.int:
        """
        The progress of the snapshot, as a percentage.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        The ID of the snapshot.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the snapshot (`in-queue` \\| `pending` \\| `completed` \\| `error` \\| `deleting`)).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetSnapshotsSnapshotTagResult']:
        """
        One or more tags associated with the snapshot.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The ID of the volume used to create the snapshot.
        """
        return pulumi.get(self, "volume_id")

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> _builtins.int:
        """
        The size of the volume used to create the snapshot, in gibibytes (GiB).
        """
        return pulumi.get(self, "volume_size")


@pulumi.output_type
class GetSnapshotsSnapshotPermissionsToCreateVolumeResult(dict):
    def __init__(__self__, *,
                 account_ids: Sequence[_builtins.str],
                 global_permission: _builtins.bool):
        """
        :param Sequence[_builtins.str] account_ids: One or more account IDs that the permission is associated with.
        :param _builtins.bool global_permission: A global permission for all accounts.<br />
               (Request) Set this parameter to true to make the resource public (if the parent parameter is `Additions`) or to make the resource private (if the parent parameter is `Removals`).<br />
               (Response) If true, the resource is public. If false, the resource is private.
        """
        pulumi.set(__self__, "account_ids", account_ids)
        pulumi.set(__self__, "global_permission", global_permission)

    @_builtins.property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Sequence[_builtins.str]:
        """
        One or more account IDs that the permission is associated with.
        """
        return pulumi.get(self, "account_ids")

    @_builtins.property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> _builtins.bool:
        """
        A global permission for all accounts.<br />
        (Request) Set this parameter to true to make the resource public (if the parent parameter is `Additions`) or to make the resource private (if the parent parameter is `Removals`).<br />
        (Response) If true, the resource is public. If false, the resource is private.
        """
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class GetSnapshotsSnapshotTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSubnetFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSubnetTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSubnetsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSubnetsSubnetResult(dict):
    def __init__(__self__, *,
                 available_ips_count: _builtins.int,
                 ip_range: _builtins.str,
                 map_public_ip_on_launch: _builtins.bool,
                 net_id: _builtins.str,
                 state: _builtins.str,
                 subnet_id: _builtins.str,
                 subregion_name: _builtins.str,
                 tags: Sequence['outputs.GetSubnetsSubnetTagResult']):
        """
        :param _builtins.int available_ips_count: The number of available IPs in the Subnets.
        :param _builtins.str ip_range: The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).
        :param _builtins.bool map_public_ip_on_launch: If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.
        :param _builtins.str net_id: The ID of the Net in which the Subnet is.
        :param _builtins.str state: The state of the Subnet (`pending` \\| `available` \\| `deleted`).
        :param _builtins.str subnet_id: The ID of the Subnet.
        :param _builtins.str subregion_name: The name of the Subregion in which the Subnet is located.
        :param Sequence['GetSubnetsSubnetTagArgs'] tags: One or more tags associated with the Subnet.
        """
        pulumi.set(__self__, "available_ips_count", available_ips_count)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "map_public_ip_on_launch", map_public_ip_on_launch)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "subregion_name", subregion_name)
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="availableIpsCount")
    def available_ips_count(self) -> _builtins.int:
        """
        The number of available IPs in the Subnets.
        """
        return pulumi.get(self, "available_ips_count")

    @_builtins.property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> _builtins.str:
        """
        The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_range")

    @_builtins.property
    @pulumi.getter(name="mapPublicIpOnLaunch")
    def map_public_ip_on_launch(self) -> _builtins.bool:
        """
        If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.
        """
        return pulumi.get(self, "map_public_ip_on_launch")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net in which the Subnet is.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the Subnet (`pending` \\| `available` \\| `deleted`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the Subnet.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> _builtins.str:
        """
        The name of the Subregion in which the Subnet is located.
        """
        return pulumi.get(self, "subregion_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetSubnetsSubnetTagResult']:
        """
        One or more tags associated with the Subnet.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSubnetsSubnetTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSubregionsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSubregionsSubregionResult(dict):
    def __init__(__self__, *,
                 location_code: _builtins.str,
                 region_name: _builtins.str,
                 state: _builtins.str,
                 subregion_name: _builtins.str):
        """
        :param _builtins.str location_code: The location code (physical zone) of the Subregion. For more information, see [About Regions > Mapping Between Subregions and Physical Zones](https://docs.outscale.com/en/userguide/About-Regions-and-Subregions.html#_mapping_between_subregions_and_physical_zones).
        :param _builtins.str region_name: The name of the Region containing the Subregion.
        :param _builtins.str state: The state of the Subregion.
        :param _builtins.str subregion_name: The name of the Subregion.
        """
        pulumi.set(__self__, "location_code", location_code)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subregion_name", subregion_name)

    @_builtins.property
    @pulumi.getter(name="locationCode")
    def location_code(self) -> _builtins.str:
        """
        The location code (physical zone) of the Subregion. For more information, see [About Regions > Mapping Between Subregions and Physical Zones](https://docs.outscale.com/en/userguide/About-Regions-and-Subregions.html#_mapping_between_subregions_and_physical_zones).
        """
        return pulumi.get(self, "location_code")

    @_builtins.property
    @pulumi.getter(name="regionName")
    def region_name(self) -> _builtins.str:
        """
        The name of the Region containing the Subregion.
        """
        return pulumi.get(self, "region_name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the Subregion.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> _builtins.str:
        """
        The name of the Subregion.
        """
        return pulumi.get(self, "subregion_name")


@pulumi.output_type
class GetTagFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTagsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 resource_id: _builtins.str,
                 resource_type: _builtins.str,
                 value: _builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> _builtins.str:
        return pulumi.get(self, "resource_id")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> _builtins.str:
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetUserGroupUserResult(dict):
    def __init__(__self__, *,
                 creation_date: _builtins.str,
                 last_modification_date: _builtins.str,
                 path: _builtins.str,
                 user_email: _builtins.str,
                 user_id: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str creation_date: The date and time (UTC) of creation of the EIM user.
        :param _builtins.str last_modification_date: The date and time (UTC) of the last modification of the EIM user.
        :param _builtins.str path: The path to the group. If not specified, it is set to a slash (`/`).
        :param _builtins.str user_email: The email address of the EIM user.
        :param _builtins.str user_id: The ID of the EIM user.
        :param _builtins.str user_name: The name of the EIM user.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "last_modification_date", last_modification_date)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "user_email", user_email)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) of creation of the EIM user.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> _builtins.str:
        """
        The date and time (UTC) of the last modification of the EIM user.
        """
        return pulumi.get(self, "last_modification_date")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The path to the group. If not specified, it is set to a slash (`/`).
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> _builtins.str:
        """
        The email address of the EIM user.
        """
        return pulumi.get(self, "user_email")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        The ID of the EIM user.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        The name of the EIM user.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetUserGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        """
        :param _builtins.str name: The name of the user group.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The name of the user group.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetUserGroupsPerUserUserGroupResult(dict):
    def __init__(__self__, *,
                 creation_date: _builtins.str,
                 last_modification_date: _builtins.str,
                 orn: _builtins.str,
                 path: _builtins.str,
                 user_group_id: _builtins.str,
                 user_group_name: _builtins.str):
        """
        :param _builtins.str creation_date: The date and time (UTC) of creation of the user group.
        :param _builtins.str last_modification_date: The date and time (UTC) of the last modification of the user group.
        :param _builtins.str orn: The Outscale Resource Name (ORN) of the user group. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        :param _builtins.str path: The path to the user group.
        :param _builtins.str user_group_id: The ID of the user group.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "last_modification_date", last_modification_date)
        pulumi.set(__self__, "orn", orn)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "user_group_id", user_group_id)
        pulumi.set(__self__, "user_group_name", user_group_name)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) of creation of the user group.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> _builtins.str:
        """
        The date and time (UTC) of the last modification of the user group.
        """
        return pulumi.get(self, "last_modification_date")

    @_builtins.property
    @pulumi.getter
    def orn(self) -> _builtins.str:
        """
        The Outscale Resource Name (ORN) of the user group. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        """
        return pulumi.get(self, "orn")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The path to the user group.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> _builtins.str:
        """
        The ID of the user group.
        """
        return pulumi.get(self, "user_group_id")

    @_builtins.property
    @pulumi.getter(name="userGroupName")
    def user_group_name(self) -> _builtins.str:
        return pulumi.get(self, "user_group_name")


@pulumi.output_type
class GetUserGroupsUserGroupResult(dict):
    def __init__(__self__, *,
                 creation_date: _builtins.str,
                 last_modification_date: _builtins.str,
                 orn: _builtins.str,
                 path: _builtins.str,
                 user_group_id: _builtins.str,
                 user_group_name: _builtins.str):
        """
        :param _builtins.str creation_date: The date and time (UTC) of creation of the user group.
        :param _builtins.str last_modification_date: The date and time (UTC) of the last modification of the user group.
        :param _builtins.str orn: The Outscale Resource Name (ORN) of the user group. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        :param _builtins.str path: The path to the user group.
        :param _builtins.str user_group_id: The ID of the user group.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "last_modification_date", last_modification_date)
        pulumi.set(__self__, "orn", orn)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "user_group_id", user_group_id)
        pulumi.set(__self__, "user_group_name", user_group_name)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) of creation of the user group.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> _builtins.str:
        """
        The date and time (UTC) of the last modification of the user group.
        """
        return pulumi.get(self, "last_modification_date")

    @_builtins.property
    @pulumi.getter
    def orn(self) -> _builtins.str:
        """
        The Outscale Resource Name (ORN) of the user group. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        """
        return pulumi.get(self, "orn")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The path to the user group.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> _builtins.str:
        """
        The ID of the user group.
        """
        return pulumi.get(self, "user_group_id")

    @_builtins.property
    @pulumi.getter(name="userGroupName")
    def user_group_name(self) -> _builtins.str:
        return pulumi.get(self, "user_group_name")


@pulumi.output_type
class GetUsersFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 creation_date: _builtins.str,
                 last_modification_date: _builtins.str,
                 path: _builtins.str,
                 user_email: _builtins.str,
                 user_id: _builtins.str,
                 user_name: _builtins.str):
        """
        :param _builtins.str creation_date: The date and time (UTC) of creation of the EIM user.
        :param _builtins.str last_modification_date: The date and time (UTC) of the last modification of the EIM user.
        :param _builtins.str path: The path to the EIM user.
        :param _builtins.str user_email: The email address of the EIM user.
        :param _builtins.str user_id: The ID of the EIM user.
        :param _builtins.str user_name: The name of the EIM user.
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "last_modification_date", last_modification_date)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "user_email", user_email)
        pulumi.set(__self__, "user_id", user_id)
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) of creation of the EIM user.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> _builtins.str:
        """
        The date and time (UTC) of the last modification of the EIM user.
        """
        return pulumi.get(self, "last_modification_date")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The path to the EIM user.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> _builtins.str:
        """
        The email address of the EIM user.
        """
        return pulumi.get(self, "user_email")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        The ID of the EIM user.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        The name of the EIM user.
        """
        return pulumi.get(self, "user_name")


@pulumi.output_type
class GetVirtualGatewayFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVirtualGatewayNetToVirtualGatewayLinkResult(dict):
    def __init__(__self__, *,
                 net_id: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str net_id: The ID of the Net to which the virtual gateway is attached.
        :param _builtins.str state: The state of the virtual gateway (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net to which the virtual gateway is attached.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the virtual gateway (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVirtualGatewayTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVirtualGatewaysFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVirtualGatewaysVirtualGatewayResult(dict):
    def __init__(__self__, *,
                 connection_type: _builtins.str,
                 net_to_virtual_gateway_links: Sequence['outputs.GetVirtualGatewaysVirtualGatewayNetToVirtualGatewayLinkResult'],
                 state: _builtins.str,
                 tags: Sequence['outputs.GetVirtualGatewaysVirtualGatewayTagResult'],
                 virtual_gateway_id: _builtins.str):
        """
        :param _builtins.str connection_type: The type of VPN connection supported by the virtual gateway (always `ipsec.1`).
        :param Sequence['GetVirtualGatewaysVirtualGatewayNetToVirtualGatewayLinkArgs'] net_to_virtual_gateway_links: The Net to which the virtual gateway is attached.
        :param _builtins.str state: The state of the virtual gateway (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        :param Sequence['GetVirtualGatewaysVirtualGatewayTagArgs'] tags: One or more tags associated with the virtual gateway.
        :param _builtins.str virtual_gateway_id: The ID of the virtual gateway.
        """
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "net_to_virtual_gateway_links", net_to_virtual_gateway_links)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        The type of VPN connection supported by the virtual gateway (always `ipsec.1`).
        """
        return pulumi.get(self, "connection_type")

    @_builtins.property
    @pulumi.getter(name="netToVirtualGatewayLinks")
    def net_to_virtual_gateway_links(self) -> Sequence['outputs.GetVirtualGatewaysVirtualGatewayNetToVirtualGatewayLinkResult']:
        """
        The Net to which the virtual gateway is attached.
        """
        return pulumi.get(self, "net_to_virtual_gateway_links")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the virtual gateway (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVirtualGatewaysVirtualGatewayTagResult']:
        """
        One or more tags associated with the virtual gateway.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> _builtins.str:
        """
        The ID of the virtual gateway.
        """
        return pulumi.get(self, "virtual_gateway_id")


@pulumi.output_type
class GetVirtualGatewaysVirtualGatewayNetToVirtualGatewayLinkResult(dict):
    def __init__(__self__, *,
                 net_id: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str net_id: The ID of the Net to which the virtual gateway is attached.
        :param _builtins.str state: The state of the virtual gateway (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net to which the virtual gateway is attached.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the virtual gateway (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVirtualGatewaysVirtualGatewayTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVmActionsOnNextBootResult(dict):
    def __init__(__self__, *,
                 secure_boot: _builtins.str):
        pulumi.set(__self__, "secure_boot", secure_boot)

    @_builtins.property
    @pulumi.getter(name="secureBoot")
    def secure_boot(self) -> _builtins.str:
        return pulumi.get(self, "secure_boot")


@pulumi.output_type
class GetVmBlockDeviceMappingsCreatedResult(dict):
    def __init__(__self__, *,
                 bsus: Sequence['outputs.GetVmBlockDeviceMappingsCreatedBsusResult'],
                 device_name: _builtins.str):
        """
        :param Sequence['GetVmBlockDeviceMappingsCreatedBsusArgs'] bsus: Information about the created BSU volume.
        :param _builtins.str device_name: The name of the device.
        """
        pulumi.set(__self__, "bsus", bsus)
        pulumi.set(__self__, "device_name", device_name)

    @_builtins.property
    @pulumi.getter
    def bsus(self) -> Sequence['outputs.GetVmBlockDeviceMappingsCreatedBsusResult']:
        """
        Information about the created BSU volume.
        """
        return pulumi.get(self, "bsus")

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> _builtins.str:
        """
        The name of the device.
        """
        return pulumi.get(self, "device_name")


@pulumi.output_type
class GetVmBlockDeviceMappingsCreatedBsusResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: _builtins.bool,
                 link_date: _builtins.str,
                 state: _builtins.str,
                 volume_id: _builtins.str,
                 tags: Optional[Sequence['outputs.GetVmBlockDeviceMappingsCreatedBsusTagResult']] = None):
        """
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.str link_date: The date and time (UTC) at which the volume was attached to the VM, in ISO 8601 date-time format.
        :param _builtins.str state: The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        :param _builtins.str volume_id: The ID of the volume.
        :param Sequence['GetVmBlockDeviceMappingsCreatedBsusTagArgs'] tags: One or more tags associated with the VM.
        """
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "link_date", link_date)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "volume_id", volume_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="linkDate")
    def link_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the volume was attached to the VM, in ISO 8601 date-time format.
        """
        return pulumi.get(self, "link_date")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The ID of the volume.
        """
        return pulumi.get(self, "volume_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetVmBlockDeviceMappingsCreatedBsusTagResult']]:
        """
        One or more tags associated with the VM.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetVmBlockDeviceMappingsCreatedBsusTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVmFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVmNicResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 delete_on_vm_deletion: _builtins.bool,
                 description: _builtins.str,
                 device_number: _builtins.int,
                 is_source_dest_checked: _builtins.bool,
                 link_nics: Sequence['outputs.GetVmNicLinkNicResult'],
                 link_public_ips: Sequence['outputs.GetVmNicLinkPublicIpResult'],
                 mac_address: _builtins.str,
                 net_id: _builtins.str,
                 nic_id: _builtins.str,
                 private_dns_name: _builtins.str,
                 private_ips: Sequence['outputs.GetVmNicPrivateIpResult'],
                 secondary_private_ip_count: _builtins.int,
                 security_group_ids: Sequence[_builtins.str],
                 security_groups: Sequence['outputs.GetVmNicSecurityGroupResult'],
                 security_groups_names: Sequence[_builtins.str],
                 state: _builtins.str,
                 subnet_id: _builtins.str):
        """
        :param _builtins.str account_id: The account ID of the owner of the NIC.
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.str description: The description of the NIC.
        :param _builtins.int device_number: The device index for the NIC attachment (between `1` and `7`, both included).
        :param _builtins.bool is_source_dest_checked: (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        :param Sequence['GetVmNicLinkNicArgs'] link_nics: Information about the network interface card (NIC).
        :param Sequence['GetVmNicLinkPublicIpArgs'] link_public_ips: Information about the public IP associated with the NIC.
        :param _builtins.str mac_address: The Media Access Control (MAC) address of the NIC.
        :param _builtins.str net_id: The ID of the Net for the NIC.
        :param _builtins.str nic_id: The ID of the NIC.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param Sequence['GetVmNicPrivateIpArgs'] private_ips: The private IP or IPs of the NIC.
        :param Sequence[_builtins.str] security_group_ids: The IDs of the security groups for the VMs (only in the public Cloud).
        :param Sequence['GetVmNicSecurityGroupArgs'] security_groups: One or more security groups associated with the VM.
        :param _builtins.str state: The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        :param _builtins.str subnet_id: The ID of the Subnet for the VM.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        pulumi.set(__self__, "link_nics", link_nics)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "secondary_private_ip_count", secondary_private_ip_count)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "security_groups_names", security_groups_names)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the NIC.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the NIC.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> _builtins.int:
        """
        The device index for the NIC attachment (between `1` and `7`, both included).
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> _builtins.bool:
        """
        (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        """
        return pulumi.get(self, "is_source_dest_checked")

    @_builtins.property
    @pulumi.getter(name="linkNics")
    def link_nics(self) -> Sequence['outputs.GetVmNicLinkNicResult']:
        """
        Information about the network interface card (NIC).
        """
        return pulumi.get(self, "link_nics")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetVmNicLinkPublicIpResult']:
        """
        Information about the public IP associated with the NIC.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        The Media Access Control (MAC) address of the NIC.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net for the NIC.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> _builtins.str:
        """
        The ID of the NIC.
        """
        return pulumi.get(self, "nic_id")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> _builtins.str:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence['outputs.GetVmNicPrivateIpResult']:
        """
        The private IP or IPs of the NIC.
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter(name="secondaryPrivateIpCount")
    def secondary_private_ip_count(self) -> _builtins.int:
        return pulumi.get(self, "secondary_private_ip_count")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[_builtins.str]:
        """
        The IDs of the security groups for the VMs (only in the public Cloud).
        """
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetVmNicSecurityGroupResult']:
        """
        One or more security groups associated with the VM.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="securityGroupsNames")
    def security_groups_names(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_groups_names")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the Subnet for the VM.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetVmNicLinkNicResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: _builtins.bool,
                 device_number: _builtins.str,
                 link_nic_id: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.str device_number: The device index for the NIC attachment (between `1` and `7`, both included).
        :param _builtins.str link_nic_id: The ID of the NIC to attach.
        :param _builtins.str state: The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "link_nic_id", link_nic_id)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> _builtins.str:
        """
        The device index for the NIC attachment (between `1` and `7`, both included).
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> _builtins.str:
        """
        The ID of the NIC to attach.
        """
        return pulumi.get(self, "link_nic_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVmNicLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 public_dns_name: _builtins.str,
                 public_ip: _builtins.str,
                 public_ip_account_id: _builtins.str):
        """
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP of the VM.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        """
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> _builtins.str:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class GetVmNicPrivateIpResult(dict):
    def __init__(__self__, *,
                 is_primary: _builtins.bool,
                 link_public_ips: Sequence['outputs.GetVmNicPrivateIpLinkPublicIpResult'],
                 private_dns_name: _builtins.str,
                 private_ip: _builtins.str):
        """
        :param _builtins.bool is_primary: If true, the IP is the primary private IP of the NIC.
        :param Sequence['GetVmNicPrivateIpLinkPublicIpArgs'] link_public_ips: Information about the public IP associated with the NIC.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param _builtins.str private_ip: The primary private IP of the VM.
        """
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ip", private_ip)

    @_builtins.property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> _builtins.bool:
        """
        If true, the IP is the primary private IP of the NIC.
        """
        return pulumi.get(self, "is_primary")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetVmNicPrivateIpLinkPublicIpResult']:
        """
        Information about the public IP associated with the NIC.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> _builtins.str:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The primary private IP of the VM.
        """
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetVmNicPrivateIpLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 public_dns_name: _builtins.str,
                 public_ip: _builtins.str,
                 public_ip_account_id: _builtins.str):
        """
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP of the VM.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        """
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> _builtins.str:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class GetVmNicSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_id: _builtins.str,
                 security_group_name: _builtins.str):
        """
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetVmPrimaryNicResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 delete_on_vm_deletion: _builtins.bool,
                 description: _builtins.str,
                 device_number: _builtins.int,
                 is_source_dest_checked: _builtins.bool,
                 link_nics: Sequence['outputs.GetVmPrimaryNicLinkNicResult'],
                 link_public_ips: Sequence['outputs.GetVmPrimaryNicLinkPublicIpResult'],
                 mac_address: _builtins.str,
                 net_id: _builtins.str,
                 nic_id: _builtins.str,
                 private_dns_name: _builtins.str,
                 private_ips: Sequence['outputs.GetVmPrimaryNicPrivateIpResult'],
                 secondary_private_ip_count: _builtins.int,
                 security_group_ids: Sequence[_builtins.str],
                 security_groups: Sequence['outputs.GetVmPrimaryNicSecurityGroupResult'],
                 state: _builtins.str,
                 subnet_id: _builtins.str):
        """
        :param _builtins.str account_id: The account ID of the owner of the NIC.
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.str description: The description of the NIC.
        :param _builtins.int device_number: The device index for the NIC attachment (between `1` and `7`, both included).
        :param _builtins.bool is_source_dest_checked: (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        :param Sequence['GetVmPrimaryNicLinkNicArgs'] link_nics: Information about the network interface card (NIC).
        :param Sequence['GetVmPrimaryNicLinkPublicIpArgs'] link_public_ips: Information about the public IP associated with the NIC.
        :param _builtins.str mac_address: The Media Access Control (MAC) address of the NIC.
        :param _builtins.str net_id: The ID of the Net for the NIC.
        :param _builtins.str nic_id: The ID of the NIC.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param Sequence['GetVmPrimaryNicPrivateIpArgs'] private_ips: The private IP or IPs of the NIC.
        :param Sequence[_builtins.str] security_group_ids: The IDs of the security groups for the VMs (only in the public Cloud).
        :param Sequence['GetVmPrimaryNicSecurityGroupArgs'] security_groups: One or more security groups associated with the VM.
        :param _builtins.str state: The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        :param _builtins.str subnet_id: The ID of the Subnet for the VM.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        pulumi.set(__self__, "link_nics", link_nics)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "secondary_private_ip_count", secondary_private_ip_count)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the NIC.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the NIC.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> _builtins.int:
        """
        The device index for the NIC attachment (between `1` and `7`, both included).
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> _builtins.bool:
        """
        (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        """
        return pulumi.get(self, "is_source_dest_checked")

    @_builtins.property
    @pulumi.getter(name="linkNics")
    def link_nics(self) -> Sequence['outputs.GetVmPrimaryNicLinkNicResult']:
        """
        Information about the network interface card (NIC).
        """
        return pulumi.get(self, "link_nics")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetVmPrimaryNicLinkPublicIpResult']:
        """
        Information about the public IP associated with the NIC.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        The Media Access Control (MAC) address of the NIC.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net for the NIC.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> _builtins.str:
        """
        The ID of the NIC.
        """
        return pulumi.get(self, "nic_id")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> _builtins.str:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence['outputs.GetVmPrimaryNicPrivateIpResult']:
        """
        The private IP or IPs of the NIC.
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter(name="secondaryPrivateIpCount")
    def secondary_private_ip_count(self) -> _builtins.int:
        return pulumi.get(self, "secondary_private_ip_count")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[_builtins.str]:
        """
        The IDs of the security groups for the VMs (only in the public Cloud).
        """
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetVmPrimaryNicSecurityGroupResult']:
        """
        One or more security groups associated with the VM.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the Subnet for the VM.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetVmPrimaryNicLinkNicResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: _builtins.bool,
                 device_number: _builtins.str,
                 link_nic_id: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.str device_number: The device index for the NIC attachment (between `1` and `7`, both included).
        :param _builtins.str link_nic_id: The ID of the NIC to attach.
        :param _builtins.str state: The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "link_nic_id", link_nic_id)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> _builtins.str:
        """
        The device index for the NIC attachment (between `1` and `7`, both included).
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> _builtins.str:
        """
        The ID of the NIC to attach.
        """
        return pulumi.get(self, "link_nic_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVmPrimaryNicLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 public_dns_name: _builtins.str,
                 public_ip: _builtins.str,
                 public_ip_account_id: _builtins.str):
        """
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP of the VM.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        """
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> _builtins.str:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class GetVmPrimaryNicPrivateIpResult(dict):
    def __init__(__self__, *,
                 is_primary: _builtins.bool,
                 link_public_ips: Sequence['outputs.GetVmPrimaryNicPrivateIpLinkPublicIpResult'],
                 private_dns_name: _builtins.str,
                 private_ip: _builtins.str):
        """
        :param _builtins.bool is_primary: If true, the IP is the primary private IP of the NIC.
        :param Sequence['GetVmPrimaryNicPrivateIpLinkPublicIpArgs'] link_public_ips: Information about the public IP associated with the NIC.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param _builtins.str private_ip: The primary private IP of the VM.
        """
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ip", private_ip)

    @_builtins.property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> _builtins.bool:
        """
        If true, the IP is the primary private IP of the NIC.
        """
        return pulumi.get(self, "is_primary")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetVmPrimaryNicPrivateIpLinkPublicIpResult']:
        """
        Information about the public IP associated with the NIC.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> _builtins.str:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The primary private IP of the VM.
        """
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetVmPrimaryNicPrivateIpLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 public_dns_name: _builtins.str,
                 public_ip: _builtins.str,
                 public_ip_account_id: _builtins.str):
        """
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP of the VM.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        """
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> _builtins.str:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class GetVmPrimaryNicSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_id: _builtins.str,
                 security_group_name: _builtins.str):
        """
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetVmSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_id: _builtins.str,
                 security_group_name: _builtins.str):
        """
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetVmStateFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVmStateMaintenanceEventResult(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 description: _builtins.str,
                 not_after: _builtins.str,
                 not_before: _builtins.str):
        """
        :param _builtins.str code: The code of the event (`system-reboot` \\| `system-maintenance`).
        :param _builtins.str description: The description of the event.
        :param _builtins.str not_after: The latest scheduled end date and time (UTC) for the event.
        :param _builtins.str not_before: The earliest scheduled start date and time (UTC) for the event.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "not_after", not_after)
        pulumi.set(__self__, "not_before", not_before)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The code of the event (`system-reboot` \\| `system-maintenance`).
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the event.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> _builtins.str:
        """
        The latest scheduled end date and time (UTC) for the event.
        """
        return pulumi.get(self, "not_after")

    @_builtins.property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> _builtins.str:
        """
        The earliest scheduled start date and time (UTC) for the event.
        """
        return pulumi.get(self, "not_before")


@pulumi.output_type
class GetVmStatesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVmStatesVmStateResult(dict):
    def __init__(__self__, *,
                 maintenance_events: Sequence['outputs.GetVmStatesVmStateMaintenanceEventResult'],
                 subregion_name: _builtins.str,
                 vm_state: _builtins.str,
                 all_vms: Optional[_builtins.bool] = None,
                 vm_id: Optional[_builtins.str] = None):
        """
        :param Sequence['GetVmStatesVmStateMaintenanceEventArgs'] maintenance_events: One or more scheduled events associated with the VM.
        :param _builtins.str subregion_name: The name of the Subregion of the VM.
        :param _builtins.str vm_state: The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        :param _builtins.bool all_vms: If true, includes the status of all VMs. By default or if set to false, only includes the status of running VMs.
        :param _builtins.str vm_id: The ID of the VM.
        """
        pulumi.set(__self__, "maintenance_events", maintenance_events)
        pulumi.set(__self__, "subregion_name", subregion_name)
        pulumi.set(__self__, "vm_state", vm_state)
        if all_vms is not None:
            pulumi.set(__self__, "all_vms", all_vms)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter(name="maintenanceEvents")
    def maintenance_events(self) -> Sequence['outputs.GetVmStatesVmStateMaintenanceEventResult']:
        """
        One or more scheduled events associated with the VM.
        """
        return pulumi.get(self, "maintenance_events")

    @_builtins.property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> _builtins.str:
        """
        The name of the Subregion of the VM.
        """
        return pulumi.get(self, "subregion_name")

    @_builtins.property
    @pulumi.getter(name="vmState")
    def vm_state(self) -> _builtins.str:
        """
        The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        return pulumi.get(self, "vm_state")

    @_builtins.property
    @pulumi.getter(name="allVms")
    def all_vms(self) -> Optional[_builtins.bool]:
        """
        If true, includes the status of all VMs. By default or if set to false, only includes the status of running VMs.
        """
        return pulumi.get(self, "all_vms")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[_builtins.str]:
        """
        The ID of the VM.
        """
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetVmStatesVmStateMaintenanceEventResult(dict):
    def __init__(__self__, *,
                 code: _builtins.str,
                 description: _builtins.str,
                 not_after: _builtins.str,
                 not_before: _builtins.str):
        """
        :param _builtins.str code: The code of the event (`system-reboot` \\| `system-maintenance`).
        :param _builtins.str description: The description of the event.
        :param _builtins.str not_after: The latest scheduled end date and time (UTC) for the event.
        :param _builtins.str not_before: The earliest scheduled start date and time (UTC) for the event.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "not_after", not_after)
        pulumi.set(__self__, "not_before", not_before)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.str:
        """
        The code of the event (`system-reboot` \\| `system-maintenance`).
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the event.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> _builtins.str:
        """
        The latest scheduled end date and time (UTC) for the event.
        """
        return pulumi.get(self, "not_after")

    @_builtins.property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> _builtins.str:
        """
        The earliest scheduled start date and time (UTC) for the event.
        """
        return pulumi.get(self, "not_before")


@pulumi.output_type
class GetVmTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVmTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVmTypesVmTypeResult(dict):
    def __init__(__self__, *,
                 bsu_optimized: _builtins.bool,
                 max_private_ips: _builtins.int,
                 memory_size: _builtins.int,
                 vcore_count: _builtins.int,
                 vm_type_name: _builtins.str,
                 volume_count: _builtins.int,
                 volume_size: _builtins.int):
        """
        :param _builtins.bool bsu_optimized: This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
        :param _builtins.int max_private_ips: The maximum number of private IPs per network interface card (NIC).
        :param _builtins.int memory_size: The amount of memory, in gibibytes.
        :param _builtins.int vcore_count: The number of vCores.
        :param _builtins.str vm_type_name: The name of the VM type.
        :param _builtins.int volume_count: The maximum number of ephemeral storage disks.
        :param _builtins.int volume_size: The size of one ephemeral storage disk, in gibibytes (GiB).
        """
        pulumi.set(__self__, "bsu_optimized", bsu_optimized)
        pulumi.set(__self__, "max_private_ips", max_private_ips)
        pulumi.set(__self__, "memory_size", memory_size)
        pulumi.set(__self__, "vcore_count", vcore_count)
        pulumi.set(__self__, "vm_type_name", vm_type_name)
        pulumi.set(__self__, "volume_count", volume_count)
        pulumi.set(__self__, "volume_size", volume_size)

    @_builtins.property
    @pulumi.getter(name="bsuOptimized")
    def bsu_optimized(self) -> _builtins.bool:
        """
        This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
        """
        return pulumi.get(self, "bsu_optimized")

    @_builtins.property
    @pulumi.getter(name="maxPrivateIps")
    def max_private_ips(self) -> _builtins.int:
        """
        The maximum number of private IPs per network interface card (NIC).
        """
        return pulumi.get(self, "max_private_ips")

    @_builtins.property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> _builtins.int:
        """
        The amount of memory, in gibibytes.
        """
        return pulumi.get(self, "memory_size")

    @_builtins.property
    @pulumi.getter(name="vcoreCount")
    def vcore_count(self) -> _builtins.int:
        """
        The number of vCores.
        """
        return pulumi.get(self, "vcore_count")

    @_builtins.property
    @pulumi.getter(name="vmTypeName")
    def vm_type_name(self) -> _builtins.str:
        """
        The name of the VM type.
        """
        return pulumi.get(self, "vm_type_name")

    @_builtins.property
    @pulumi.getter(name="volumeCount")
    def volume_count(self) -> _builtins.int:
        """
        The maximum number of ephemeral storage disks.
        """
        return pulumi.get(self, "volume_count")

    @_builtins.property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> _builtins.int:
        """
        The size of one ephemeral storage disk, in gibibytes (GiB).
        """
        return pulumi.get(self, "volume_size")


@pulumi.output_type
class GetVmsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVmsVmResult(dict):
    def __init__(__self__, *,
                 actions_on_next_boots: Sequence['outputs.GetVmsVmActionsOnNextBootResult'],
                 architecture: _builtins.str,
                 block_device_mappings_createds: Sequence['outputs.GetVmsVmBlockDeviceMappingsCreatedResult'],
                 boot_mode: _builtins.str,
                 bsu_optimized: _builtins.bool,
                 client_token: _builtins.str,
                 creation_date: _builtins.str,
                 deletion_protection: _builtins.bool,
                 hypervisor: _builtins.str,
                 image_id: _builtins.str,
                 is_source_dest_checked: _builtins.bool,
                 keypair_name: _builtins.str,
                 launch_number: _builtins.int,
                 nested_virtualization: _builtins.bool,
                 net_id: _builtins.str,
                 nics: Sequence['outputs.GetVmsVmNicResult'],
                 os_family: _builtins.str,
                 performance: _builtins.str,
                 placement_subregion_name: _builtins.str,
                 placement_tenancy: _builtins.str,
                 primary_nics: Sequence['outputs.GetVmsVmPrimaryNicResult'],
                 private_dns_name: _builtins.str,
                 private_ip: _builtins.str,
                 private_ips: Sequence[_builtins.str],
                 product_codes: Sequence[_builtins.str],
                 public_dns_name: _builtins.str,
                 public_ip: _builtins.str,
                 request_id: _builtins.str,
                 reservation_id: _builtins.str,
                 root_device_name: _builtins.str,
                 root_device_type: _builtins.str,
                 security_group_ids: Sequence[_builtins.str],
                 security_group_names: Sequence[_builtins.str],
                 security_groups: Sequence['outputs.GetVmsVmSecurityGroupResult'],
                 state: _builtins.str,
                 state_reason: _builtins.str,
                 subnet_id: _builtins.str,
                 tags: Sequence['outputs.GetVmsVmTagResult'],
                 user_data: _builtins.str,
                 vm_id: _builtins.str,
                 vm_initiated_shutdown_behavior: _builtins.str,
                 vm_type: _builtins.str):
        """
        :param _builtins.str architecture: The architecture of the VM (`i386` \\| `x86_64`).
        :param Sequence['GetVmsVmBlockDeviceMappingsCreatedArgs'] block_device_mappings_createds: The block device mapping of the VM.
        :param _builtins.str client_token: The idempotency token provided when launching the VM.
        :param _builtins.str creation_date: The date and time (UTC) at which the VM was created.
        :param _builtins.bool deletion_protection: If true, you cannot delete the VM unless you change this parameter back to false.
        :param _builtins.str hypervisor: The hypervisor type of the VMs (`ovm` \\| `xen`).
        :param _builtins.str image_id: The ID of the OMI used to create the VM.
        :param _builtins.bool is_source_dest_checked: (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        :param _builtins.str keypair_name: The name of the keypair used when launching the VM.
        :param _builtins.int launch_number: The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
        :param _builtins.bool nested_virtualization: If true, nested virtualization is enabled. If false, it is disabled.
        :param _builtins.str net_id: The ID of the Net for the NIC.
        :param Sequence['GetVmsVmNicArgs'] nics: (Net only) The network interface cards (NICs) the VMs are attached to.
        :param _builtins.str os_family: Indicates the operating system (OS) of the VM.
        :param _builtins.str performance: The performance of the VM (`medium` \\| `high` \\|  `highest`).
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param _builtins.str private_ip: The primary private IP of the VM.
        :param Sequence[_builtins.str] private_ips: The private IP or IPs of the NIC.
        :param Sequence[_builtins.str] product_codes: The product codes associated with the OMI used to create the VM.
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP of the VM.
        :param _builtins.str reservation_id: The reservation ID of the VM.
        :param _builtins.str root_device_name: The name of the root device for the VM (for example, `/dev/sda1`).
        :param _builtins.str root_device_type: The type of root device used by the VM (always `bsu`).
        :param Sequence[_builtins.str] security_group_ids: The IDs of the security groups for the VMs (only in the public Cloud).
        :param Sequence[_builtins.str] security_group_names: The names of the security groups for the VMs (only in the public Cloud).
        :param Sequence['GetVmsVmSecurityGroupArgs'] security_groups: One or more security groups associated with the VM.
        :param _builtins.str state: The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        :param _builtins.str state_reason: The reason explaining the current state of the VM.
        :param _builtins.str subnet_id: The ID of the Subnet for the VM.
        :param Sequence['GetVmsVmTagArgs'] tags: One or more tags associated with the VM.
        :param _builtins.str user_data: The Base64-encoded MIME user data.
        :param _builtins.str vm_id: The ID of the VM.
        :param _builtins.str vm_initiated_shutdown_behavior: The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.
        :param _builtins.str vm_type: The type of VM. For more information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
        """
        pulumi.set(__self__, "actions_on_next_boots", actions_on_next_boots)
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "block_device_mappings_createds", block_device_mappings_createds)
        pulumi.set(__self__, "boot_mode", boot_mode)
        pulumi.set(__self__, "bsu_optimized", bsu_optimized)
        pulumi.set(__self__, "client_token", client_token)
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "deletion_protection", deletion_protection)
        pulumi.set(__self__, "hypervisor", hypervisor)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        pulumi.set(__self__, "keypair_name", keypair_name)
        pulumi.set(__self__, "launch_number", launch_number)
        pulumi.set(__self__, "nested_virtualization", nested_virtualization)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "nics", nics)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "performance", performance)
        pulumi.set(__self__, "placement_subregion_name", placement_subregion_name)
        pulumi.set(__self__, "placement_tenancy", placement_tenancy)
        pulumi.set(__self__, "primary_nics", primary_nics)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "product_codes", product_codes)
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "reservation_id", reservation_id)
        pulumi.set(__self__, "root_device_name", root_device_name)
        pulumi.set(__self__, "root_device_type", root_device_type)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "security_group_names", security_group_names)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "state_reason", state_reason)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "user_data", user_data)
        pulumi.set(__self__, "vm_id", vm_id)
        pulumi.set(__self__, "vm_initiated_shutdown_behavior", vm_initiated_shutdown_behavior)
        pulumi.set(__self__, "vm_type", vm_type)

    @_builtins.property
    @pulumi.getter(name="actionsOnNextBoots")
    def actions_on_next_boots(self) -> Sequence['outputs.GetVmsVmActionsOnNextBootResult']:
        return pulumi.get(self, "actions_on_next_boots")

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> _builtins.str:
        """
        The architecture of the VM (`i386` \\| `x86_64`).
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="blockDeviceMappingsCreateds")
    def block_device_mappings_createds(self) -> Sequence['outputs.GetVmsVmBlockDeviceMappingsCreatedResult']:
        """
        The block device mapping of the VM.
        """
        return pulumi.get(self, "block_device_mappings_createds")

    @_builtins.property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> _builtins.str:
        return pulumi.get(self, "boot_mode")

    @_builtins.property
    @pulumi.getter(name="bsuOptimized")
    def bsu_optimized(self) -> _builtins.bool:
        return pulumi.get(self, "bsu_optimized")

    @_builtins.property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> _builtins.str:
        """
        The idempotency token provided when launching the VM.
        """
        return pulumi.get(self, "client_token")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the VM was created.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> _builtins.bool:
        """
        If true, you cannot delete the VM unless you change this parameter back to false.
        """
        return pulumi.get(self, "deletion_protection")

    @_builtins.property
    @pulumi.getter
    def hypervisor(self) -> _builtins.str:
        """
        The hypervisor type of the VMs (`ovm` \\| `xen`).
        """
        return pulumi.get(self, "hypervisor")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The ID of the OMI used to create the VM.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> _builtins.bool:
        """
        (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        """
        return pulumi.get(self, "is_source_dest_checked")

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> _builtins.str:
        """
        The name of the keypair used when launching the VM.
        """
        return pulumi.get(self, "keypair_name")

    @_builtins.property
    @pulumi.getter(name="launchNumber")
    def launch_number(self) -> _builtins.int:
        """
        The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
        """
        return pulumi.get(self, "launch_number")

    @_builtins.property
    @pulumi.getter(name="nestedVirtualization")
    def nested_virtualization(self) -> _builtins.bool:
        """
        If true, nested virtualization is enabled. If false, it is disabled.
        """
        return pulumi.get(self, "nested_virtualization")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net for the NIC.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter
    def nics(self) -> Sequence['outputs.GetVmsVmNicResult']:
        """
        (Net only) The network interface cards (NICs) the VMs are attached to.
        """
        return pulumi.get(self, "nics")

    @_builtins.property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> _builtins.str:
        """
        Indicates the operating system (OS) of the VM.
        """
        return pulumi.get(self, "os_family")

    @_builtins.property
    @pulumi.getter
    def performance(self) -> _builtins.str:
        """
        The performance of the VM (`medium` \\| `high` \\|  `highest`).
        """
        return pulumi.get(self, "performance")

    @_builtins.property
    @pulumi.getter(name="placementSubregionName")
    def placement_subregion_name(self) -> _builtins.str:
        return pulumi.get(self, "placement_subregion_name")

    @_builtins.property
    @pulumi.getter(name="placementTenancy")
    def placement_tenancy(self) -> _builtins.str:
        return pulumi.get(self, "placement_tenancy")

    @_builtins.property
    @pulumi.getter(name="primaryNics")
    def primary_nics(self) -> Sequence['outputs.GetVmsVmPrimaryNicResult']:
        return pulumi.get(self, "primary_nics")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> _builtins.str:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The primary private IP of the VM.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence[_builtins.str]:
        """
        The private IP or IPs of the NIC.
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter(name="productCodes")
    def product_codes(self) -> Sequence[_builtins.str]:
        """
        The product codes associated with the OMI used to create the VM.
        """
        return pulumi.get(self, "product_codes")

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> _builtins.str:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="reservationId")
    def reservation_id(self) -> _builtins.str:
        """
        The reservation ID of the VM.
        """
        return pulumi.get(self, "reservation_id")

    @_builtins.property
    @pulumi.getter(name="rootDeviceName")
    def root_device_name(self) -> _builtins.str:
        """
        The name of the root device for the VM (for example, `/dev/sda1`).
        """
        return pulumi.get(self, "root_device_name")

    @_builtins.property
    @pulumi.getter(name="rootDeviceType")
    def root_device_type(self) -> _builtins.str:
        """
        The type of root device used by the VM (always `bsu`).
        """
        return pulumi.get(self, "root_device_type")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[_builtins.str]:
        """
        The IDs of the security groups for the VMs (only in the public Cloud).
        """
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter(name="securityGroupNames")
    def security_group_names(self) -> Sequence[_builtins.str]:
        """
        The names of the security groups for the VMs (only in the public Cloud).
        """
        return pulumi.get(self, "security_group_names")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetVmsVmSecurityGroupResult']:
        """
        One or more security groups associated with the VM.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="stateReason")
    def state_reason(self) -> _builtins.str:
        """
        The reason explaining the current state of the VM.
        """
        return pulumi.get(self, "state_reason")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the Subnet for the VM.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVmsVmTagResult']:
        """
        One or more tags associated with the VM.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> _builtins.str:
        """
        The Base64-encoded MIME user data.
        """
        return pulumi.get(self, "user_data")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        The ID of the VM.
        """
        return pulumi.get(self, "vm_id")

    @_builtins.property
    @pulumi.getter(name="vmInitiatedShutdownBehavior")
    def vm_initiated_shutdown_behavior(self) -> _builtins.str:
        """
        The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.
        """
        return pulumi.get(self, "vm_initiated_shutdown_behavior")

    @_builtins.property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> _builtins.str:
        """
        The type of VM. For more information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
        """
        return pulumi.get(self, "vm_type")


@pulumi.output_type
class GetVmsVmActionsOnNextBootResult(dict):
    def __init__(__self__, *,
                 secure_boot: _builtins.str):
        pulumi.set(__self__, "secure_boot", secure_boot)

    @_builtins.property
    @pulumi.getter(name="secureBoot")
    def secure_boot(self) -> _builtins.str:
        return pulumi.get(self, "secure_boot")


@pulumi.output_type
class GetVmsVmBlockDeviceMappingsCreatedResult(dict):
    def __init__(__self__, *,
                 bsus: Sequence['outputs.GetVmsVmBlockDeviceMappingsCreatedBsusResult'],
                 device_name: _builtins.str):
        """
        :param Sequence['GetVmsVmBlockDeviceMappingsCreatedBsusArgs'] bsus: Information about the created BSU volume.
        :param _builtins.str device_name: The name of the device.
        """
        pulumi.set(__self__, "bsus", bsus)
        pulumi.set(__self__, "device_name", device_name)

    @_builtins.property
    @pulumi.getter
    def bsus(self) -> Sequence['outputs.GetVmsVmBlockDeviceMappingsCreatedBsusResult']:
        """
        Information about the created BSU volume.
        """
        return pulumi.get(self, "bsus")

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> _builtins.str:
        """
        The name of the device.
        """
        return pulumi.get(self, "device_name")


@pulumi.output_type
class GetVmsVmBlockDeviceMappingsCreatedBsusResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: _builtins.bool,
                 link_date: _builtins.str,
                 state: _builtins.str,
                 volume_id: _builtins.str,
                 tags: Optional[Sequence['outputs.GetVmsVmBlockDeviceMappingsCreatedBsusTagResult']] = None):
        """
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.str link_date: The date and time (UTC) at which the volume was attached to the VM, in ISO 8601 date-time format.
        :param _builtins.str state: The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        :param _builtins.str volume_id: The ID of the volume.
        :param Sequence['GetVmsVmBlockDeviceMappingsCreatedBsusTagArgs'] tags: One or more tags associated with the VM.
        """
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "link_date", link_date)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "volume_id", volume_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="linkDate")
    def link_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the volume was attached to the VM, in ISO 8601 date-time format.
        """
        return pulumi.get(self, "link_date")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The ID of the volume.
        """
        return pulumi.get(self, "volume_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GetVmsVmBlockDeviceMappingsCreatedBsusTagResult']]:
        """
        One or more tags associated with the VM.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetVmsVmBlockDeviceMappingsCreatedBsusTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVmsVmNicResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 delete_on_vm_deletion: _builtins.bool,
                 description: _builtins.str,
                 device_number: _builtins.int,
                 is_source_dest_checked: _builtins.bool,
                 link_nics: Sequence['outputs.GetVmsVmNicLinkNicResult'],
                 link_public_ips: Sequence['outputs.GetVmsVmNicLinkPublicIpResult'],
                 mac_address: _builtins.str,
                 net_id: _builtins.str,
                 nic_id: _builtins.str,
                 private_dns_name: _builtins.str,
                 private_ips: Sequence['outputs.GetVmsVmNicPrivateIpResult'],
                 secondary_private_ip_count: _builtins.int,
                 security_group_ids: Sequence[_builtins.str],
                 security_groups: Sequence['outputs.GetVmsVmNicSecurityGroupResult'],
                 security_groups_names: Sequence[_builtins.str],
                 state: _builtins.str,
                 subnet_id: _builtins.str):
        """
        :param _builtins.str account_id: The account ID of the owner of the NIC.
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.str description: The description of the NIC.
        :param _builtins.int device_number: The device index for the NIC attachment (between `1` and `7`, both included).
        :param _builtins.bool is_source_dest_checked: (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        :param Sequence['GetVmsVmNicLinkNicArgs'] link_nics: Information about the network interface card (NIC).
        :param Sequence['GetVmsVmNicLinkPublicIpArgs'] link_public_ips: Information about the public IP associated with the NIC.
        :param _builtins.str mac_address: The Media Access Control (MAC) address of the NIC.
        :param _builtins.str net_id: The ID of the Net for the NIC.
        :param _builtins.str nic_id: The ID of the NIC.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param Sequence['GetVmsVmNicPrivateIpArgs'] private_ips: The private IP or IPs of the NIC.
        :param Sequence[_builtins.str] security_group_ids: The IDs of the security groups for the VMs (only in the public Cloud).
        :param Sequence['GetVmsVmNicSecurityGroupArgs'] security_groups: One or more security groups associated with the VM.
        :param _builtins.str state: The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        :param _builtins.str subnet_id: The ID of the Subnet for the VM.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        pulumi.set(__self__, "link_nics", link_nics)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "secondary_private_ip_count", secondary_private_ip_count)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "security_groups_names", security_groups_names)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the NIC.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the NIC.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> _builtins.int:
        """
        The device index for the NIC attachment (between `1` and `7`, both included).
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> _builtins.bool:
        """
        (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        """
        return pulumi.get(self, "is_source_dest_checked")

    @_builtins.property
    @pulumi.getter(name="linkNics")
    def link_nics(self) -> Sequence['outputs.GetVmsVmNicLinkNicResult']:
        """
        Information about the network interface card (NIC).
        """
        return pulumi.get(self, "link_nics")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetVmsVmNicLinkPublicIpResult']:
        """
        Information about the public IP associated with the NIC.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        The Media Access Control (MAC) address of the NIC.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net for the NIC.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> _builtins.str:
        """
        The ID of the NIC.
        """
        return pulumi.get(self, "nic_id")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> _builtins.str:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence['outputs.GetVmsVmNicPrivateIpResult']:
        """
        The private IP or IPs of the NIC.
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter(name="secondaryPrivateIpCount")
    def secondary_private_ip_count(self) -> _builtins.int:
        return pulumi.get(self, "secondary_private_ip_count")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[_builtins.str]:
        """
        The IDs of the security groups for the VMs (only in the public Cloud).
        """
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetVmsVmNicSecurityGroupResult']:
        """
        One or more security groups associated with the VM.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter(name="securityGroupsNames")
    def security_groups_names(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_groups_names")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the Subnet for the VM.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetVmsVmNicLinkNicResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: _builtins.bool,
                 device_number: _builtins.str,
                 link_nic_id: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.str device_number: The device index for the NIC attachment (between `1` and `7`, both included).
        :param _builtins.str link_nic_id: The ID of the NIC to attach.
        :param _builtins.str state: The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "link_nic_id", link_nic_id)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> _builtins.str:
        """
        The device index for the NIC attachment (between `1` and `7`, both included).
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> _builtins.str:
        """
        The ID of the NIC to attach.
        """
        return pulumi.get(self, "link_nic_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVmsVmNicLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 public_dns_name: _builtins.str,
                 public_ip: _builtins.str,
                 public_ip_account_id: _builtins.str):
        """
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP of the VM.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        """
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> _builtins.str:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class GetVmsVmNicPrivateIpResult(dict):
    def __init__(__self__, *,
                 is_primary: _builtins.bool,
                 link_public_ips: Sequence['outputs.GetVmsVmNicPrivateIpLinkPublicIpResult'],
                 private_dns_name: _builtins.str,
                 private_ip: _builtins.str):
        """
        :param _builtins.bool is_primary: If true, the IP is the primary private IP of the NIC.
        :param Sequence['GetVmsVmNicPrivateIpLinkPublicIpArgs'] link_public_ips: Information about the public IP associated with the NIC.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param _builtins.str private_ip: The primary private IP of the VM.
        """
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ip", private_ip)

    @_builtins.property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> _builtins.bool:
        """
        If true, the IP is the primary private IP of the NIC.
        """
        return pulumi.get(self, "is_primary")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetVmsVmNicPrivateIpLinkPublicIpResult']:
        """
        Information about the public IP associated with the NIC.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> _builtins.str:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The primary private IP of the VM.
        """
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetVmsVmNicPrivateIpLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 public_dns_name: _builtins.str,
                 public_ip: _builtins.str,
                 public_ip_account_id: _builtins.str):
        """
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP of the VM.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        """
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> _builtins.str:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class GetVmsVmNicSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_id: _builtins.str,
                 security_group_name: _builtins.str):
        """
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetVmsVmPrimaryNicResult(dict):
    def __init__(__self__, *,
                 account_id: _builtins.str,
                 delete_on_vm_deletion: _builtins.bool,
                 description: _builtins.str,
                 device_number: _builtins.int,
                 is_source_dest_checked: _builtins.bool,
                 link_nics: Sequence['outputs.GetVmsVmPrimaryNicLinkNicResult'],
                 link_public_ips: Sequence['outputs.GetVmsVmPrimaryNicLinkPublicIpResult'],
                 mac_address: _builtins.str,
                 net_id: _builtins.str,
                 nic_id: _builtins.str,
                 private_dns_name: _builtins.str,
                 private_ips: Sequence['outputs.GetVmsVmPrimaryNicPrivateIpResult'],
                 secondary_private_ip_count: _builtins.int,
                 security_group_ids: Sequence[_builtins.str],
                 security_groups: Sequence['outputs.GetVmsVmPrimaryNicSecurityGroupResult'],
                 state: _builtins.str,
                 subnet_id: _builtins.str):
        """
        :param _builtins.str account_id: The account ID of the owner of the NIC.
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.str description: The description of the NIC.
        :param _builtins.int device_number: The device index for the NIC attachment (between `1` and `7`, both included).
        :param _builtins.bool is_source_dest_checked: (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        :param Sequence['GetVmsVmPrimaryNicLinkNicArgs'] link_nics: Information about the network interface card (NIC).
        :param Sequence['GetVmsVmPrimaryNicLinkPublicIpArgs'] link_public_ips: Information about the public IP associated with the NIC.
        :param _builtins.str mac_address: The Media Access Control (MAC) address of the NIC.
        :param _builtins.str net_id: The ID of the Net for the NIC.
        :param _builtins.str nic_id: The ID of the NIC.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param Sequence['GetVmsVmPrimaryNicPrivateIpArgs'] private_ips: The private IP or IPs of the NIC.
        :param Sequence[_builtins.str] security_group_ids: The IDs of the security groups for the VMs (only in the public Cloud).
        :param Sequence['GetVmsVmPrimaryNicSecurityGroupArgs'] security_groups: One or more security groups associated with the VM.
        :param _builtins.str state: The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        :param _builtins.str subnet_id: The ID of the Subnet for the VM.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        pulumi.set(__self__, "link_nics", link_nics)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "secondary_private_ip_count", secondary_private_ip_count)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the NIC.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        The description of the NIC.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> _builtins.int:
        """
        The device index for the NIC attachment (between `1` and `7`, both included).
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> _builtins.bool:
        """
        (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        """
        return pulumi.get(self, "is_source_dest_checked")

    @_builtins.property
    @pulumi.getter(name="linkNics")
    def link_nics(self) -> Sequence['outputs.GetVmsVmPrimaryNicLinkNicResult']:
        """
        Information about the network interface card (NIC).
        """
        return pulumi.get(self, "link_nics")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetVmsVmPrimaryNicLinkPublicIpResult']:
        """
        Information about the public IP associated with the NIC.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> _builtins.str:
        """
        The Media Access Control (MAC) address of the NIC.
        """
        return pulumi.get(self, "mac_address")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net for the NIC.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> _builtins.str:
        """
        The ID of the NIC.
        """
        return pulumi.get(self, "nic_id")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> _builtins.str:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence['outputs.GetVmsVmPrimaryNicPrivateIpResult']:
        """
        The private IP or IPs of the NIC.
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter(name="secondaryPrivateIpCount")
    def secondary_private_ip_count(self) -> _builtins.int:
        return pulumi.get(self, "secondary_private_ip_count")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[_builtins.str]:
        """
        The IDs of the security groups for the VMs (only in the public Cloud).
        """
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetVmsVmPrimaryNicSecurityGroupResult']:
        """
        One or more security groups associated with the VM.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the Subnet for the VM.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetVmsVmPrimaryNicLinkNicResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: _builtins.bool,
                 device_number: _builtins.str,
                 link_nic_id: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.bool delete_on_vm_deletion: If true, the NIC is deleted when the VM is terminated.
        :param _builtins.str device_number: The device index for the NIC attachment (between `1` and `7`, both included).
        :param _builtins.str link_nic_id: The ID of the NIC to attach.
        :param _builtins.str state: The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "link_nic_id", link_nic_id)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the NIC is deleted when the VM is terminated.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> _builtins.str:
        """
        The device index for the NIC attachment (between `1` and `7`, both included).
        """
        return pulumi.get(self, "device_number")

    @_builtins.property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> _builtins.str:
        """
        The ID of the NIC to attach.
        """
        return pulumi.get(self, "link_nic_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVmsVmPrimaryNicLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 public_dns_name: _builtins.str,
                 public_ip: _builtins.str,
                 public_ip_account_id: _builtins.str):
        """
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP of the VM.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        """
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> _builtins.str:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class GetVmsVmPrimaryNicPrivateIpResult(dict):
    def __init__(__self__, *,
                 is_primary: _builtins.bool,
                 link_public_ips: Sequence['outputs.GetVmsVmPrimaryNicPrivateIpLinkPublicIpResult'],
                 private_dns_name: _builtins.str,
                 private_ip: _builtins.str):
        """
        :param _builtins.bool is_primary: If true, the IP is the primary private IP of the NIC.
        :param Sequence['GetVmsVmPrimaryNicPrivateIpLinkPublicIpArgs'] link_public_ips: Information about the public IP associated with the NIC.
        :param _builtins.str private_dns_name: The name of the private DNS.
        :param _builtins.str private_ip: The primary private IP of the VM.
        """
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ip", private_ip)

    @_builtins.property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> _builtins.bool:
        """
        If true, the IP is the primary private IP of the NIC.
        """
        return pulumi.get(self, "is_primary")

    @_builtins.property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetVmsVmPrimaryNicPrivateIpLinkPublicIpResult']:
        """
        Information about the public IP associated with the NIC.
        """
        return pulumi.get(self, "link_public_ips")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> _builtins.str:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The primary private IP of the VM.
        """
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetVmsVmPrimaryNicPrivateIpLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 public_dns_name: _builtins.str,
                 public_ip: _builtins.str,
                 public_ip_account_id: _builtins.str):
        """
        :param _builtins.str public_dns_name: The name of the public DNS.
        :param _builtins.str public_ip: The public IP of the VM.
        :param _builtins.str public_ip_account_id: The account ID of the owner of the public IP.
        """
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> _builtins.str:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> _builtins.str:
        """
        The account ID of the owner of the public IP.
        """
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class GetVmsVmPrimaryNicSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_id: _builtins.str,
                 security_group_name: _builtins.str):
        """
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetVmsVmSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_id: _builtins.str,
                 security_group_name: _builtins.str):
        """
        :param _builtins.str security_group_id: The ID of the security group.
        :param _builtins.str security_group_name: The name of the security group.
        """
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @_builtins.property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> _builtins.str:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_id")

    @_builtins.property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> _builtins.str:
        """
        The name of the security group.
        """
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetVmsVmTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVolumeFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVolumeLinkedVolumeResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: _builtins.bool,
                 device_name: _builtins.str,
                 state: _builtins.str,
                 vm_id: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.bool delete_on_vm_deletion: If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        :param _builtins.str device_name: The name of the device.
        :param _builtins.str state: The state of the volume (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).
        :param _builtins.str vm_id: The ID of the VM.
        :param _builtins.str volume_id: The ID of the volume.
        """
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_id", vm_id)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> _builtins.str:
        """
        The name of the device.
        """
        return pulumi.get(self, "device_name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the volume (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        The ID of the VM.
        """
        return pulumi.get(self, "vm_id")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The ID of the volume.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumeTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVolumesFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVolumesVolumeResult(dict):
    def __init__(__self__, *,
                 creation_date: _builtins.str,
                 iops: _builtins.int,
                 linked_volumes: Sequence['outputs.GetVolumesVolumeLinkedVolumeResult'],
                 size: _builtins.int,
                 snapshot_id: _builtins.str,
                 state: _builtins.str,
                 subregion_name: _builtins.str,
                 tags: Sequence['outputs.GetVolumesVolumeTagResult'],
                 volume_id: _builtins.str,
                 volume_type: _builtins.str):
        """
        :param _builtins.str creation_date: The date and time (UTC) at which the volume was created.
        :param _builtins.int iops: The number of I/O operations per second (IOPS):<br />- For `io1` volumes, the number of provisioned IOPS.<br />- For `gp2` volumes, the baseline performance of the volume.
        :param Sequence['GetVolumesVolumeLinkedVolumeArgs'] linked_volumes: Information about your volume attachment.
        :param _builtins.int size: The size of the volume, in gibibytes (GiB).
        :param _builtins.str snapshot_id: The snapshot from which the volume was created.
        :param _builtins.str state: The state of the volume (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).
        :param _builtins.str subregion_name: The Subregion in which the volume was created.
        :param Sequence['GetVolumesVolumeTagArgs'] tags: One or more tags associated with the volume.
        :param _builtins.str volume_id: The ID of the volume.
        :param _builtins.str volume_type: The type of the volume (`standard` \\| `gp2` \\| `io1`).
        """
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "linked_volumes", linked_volumes)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subregion_name", subregion_name)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "volume_id", volume_id)
        pulumi.set(__self__, "volume_type", volume_type)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the volume was created.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def iops(self) -> _builtins.int:
        """
        The number of I/O operations per second (IOPS):<br />- For `io1` volumes, the number of provisioned IOPS.<br />- For `gp2` volumes, the baseline performance of the volume.
        """
        return pulumi.get(self, "iops")

    @_builtins.property
    @pulumi.getter(name="linkedVolumes")
    def linked_volumes(self) -> Sequence['outputs.GetVolumesVolumeLinkedVolumeResult']:
        """
        Information about your volume attachment.
        """
        return pulumi.get(self, "linked_volumes")

    @_builtins.property
    @pulumi.getter
    def size(self) -> _builtins.int:
        """
        The size of the volume, in gibibytes (GiB).
        """
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> _builtins.str:
        """
        The snapshot from which the volume was created.
        """
        return pulumi.get(self, "snapshot_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the volume (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> _builtins.str:
        """
        The Subregion in which the volume was created.
        """
        return pulumi.get(self, "subregion_name")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVolumesVolumeTagResult']:
        """
        One or more tags associated with the volume.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The ID of the volume.
        """
        return pulumi.get(self, "volume_id")

    @_builtins.property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> _builtins.str:
        """
        The type of the volume (`standard` \\| `gp2` \\| `io1`).
        """
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetVolumesVolumeLinkedVolumeResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: _builtins.bool,
                 device_name: _builtins.str,
                 state: _builtins.str,
                 vm_id: _builtins.str,
                 volume_id: _builtins.str):
        """
        :param _builtins.bool delete_on_vm_deletion: If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        :param _builtins.str device_name: The name of the device.
        :param _builtins.str state: The state of the volume (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).
        :param _builtins.str vm_id: The ID of the VM.
        :param _builtins.str volume_id: The ID of the volume.
        """
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_id", vm_id)
        pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> _builtins.bool:
        """
        If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> _builtins.str:
        """
        The name of the device.
        """
        return pulumi.get(self, "device_name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the volume (`creating` \\| `available` \\| `in-use` \\| `updating` \\| `deleting` \\| `error`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        The ID of the VM.
        """
        return pulumi.get(self, "vm_id")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> _builtins.str:
        """
        The ID of the volume.
        """
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumesVolumeTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVpnConnectionFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVpnConnectionRouteResult(dict):
    def __init__(__self__, *,
                 destination_ip_range: _builtins.str,
                 route_type: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str destination_ip_range: The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        :param _builtins.str route_type: The type of route (always `static`).
        :param _builtins.str state: The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        """
        pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        pulumi.set(__self__, "route_type", route_type)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> _builtins.str:
        """
        The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        """
        return pulumi.get(self, "destination_ip_range")

    @_builtins.property
    @pulumi.getter(name="routeType")
    def route_type(self) -> _builtins.str:
        """
        The type of route (always `static`).
        """
        return pulumi.get(self, "route_type")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVpnConnectionTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVpnConnectionVgwTelemetryResult(dict):
    def __init__(__self__, *,
                 accepted_route_count: _builtins.int,
                 last_state_change_date: _builtins.str,
                 outside_ip_address: _builtins.str,
                 state: _builtins.str,
                 state_description: _builtins.str):
        """
        :param _builtins.int accepted_route_count: The number of routes accepted through BGP (Border Gateway Protocol) route exchanges.
        :param _builtins.str last_state_change_date: The date and time (UTC) of the latest state update.
        :param _builtins.str outside_ip_address: The IP on the OUTSCALE side of the tunnel.
        :param _builtins.str state: The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        :param _builtins.str state_description: A description of the current state of the tunnel.
        """
        pulumi.set(__self__, "accepted_route_count", accepted_route_count)
        pulumi.set(__self__, "last_state_change_date", last_state_change_date)
        pulumi.set(__self__, "outside_ip_address", outside_ip_address)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "state_description", state_description)

    @_builtins.property
    @pulumi.getter(name="acceptedRouteCount")
    def accepted_route_count(self) -> _builtins.int:
        """
        The number of routes accepted through BGP (Border Gateway Protocol) route exchanges.
        """
        return pulumi.get(self, "accepted_route_count")

    @_builtins.property
    @pulumi.getter(name="lastStateChangeDate")
    def last_state_change_date(self) -> _builtins.str:
        """
        The date and time (UTC) of the latest state update.
        """
        return pulumi.get(self, "last_state_change_date")

    @_builtins.property
    @pulumi.getter(name="outsideIpAddress")
    def outside_ip_address(self) -> _builtins.str:
        """
        The IP on the OUTSCALE side of the tunnel.
        """
        return pulumi.get(self, "outside_ip_address")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="stateDescription")
    def state_description(self) -> _builtins.str:
        """
        A description of the current state of the tunnel.
        """
        return pulumi.get(self, "state_description")


@pulumi.output_type
class GetVpnConnectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 values: Sequence[_builtins.str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def values(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVpnConnectionsVpnConnectionResult(dict):
    def __init__(__self__, *,
                 client_gateway_configuration: _builtins.str,
                 client_gateway_id: _builtins.str,
                 connection_type: _builtins.str,
                 routes: Sequence['outputs.GetVpnConnectionsVpnConnectionRouteResult'],
                 state: _builtins.str,
                 tags: Sequence['outputs.GetVpnConnectionsVpnConnectionTagResult'],
                 vgw_telemetries: Sequence['outputs.GetVpnConnectionsVpnConnectionVgwTelemetryResult'],
                 virtual_gateway_id: _builtins.str,
                 vpn_connection_id: _builtins.str,
                 static_routes_only: Optional[_builtins.bool] = None):
        """
        :param _builtins.str client_gateway_configuration: Example configuration for the client gateway.
        :param _builtins.str client_gateway_id: The ID of the client gateway used on the client end of the connection.
        :param _builtins.str connection_type: The type of VPN connection (always `ipsec.1`).
        :param Sequence['GetVpnConnectionsVpnConnectionRouteArgs'] routes: Information about one or more static routes associated with the VPN connection, if any.
        :param _builtins.str state: The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        :param Sequence['GetVpnConnectionsVpnConnectionTagArgs'] tags: One or more tags associated with the VPN connection.
        :param Sequence['GetVpnConnectionsVpnConnectionVgwTelemetryArgs'] vgw_telemetries: Information about the current state of one or more of the VPN tunnels.
        :param _builtins.str virtual_gateway_id: The ID of the virtual gateway used on the OUTSCALE end of the connection.
        :param _builtins.str vpn_connection_id: The ID of the VPN connection.
        :param _builtins.bool static_routes_only: If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
        """
        pulumi.set(__self__, "client_gateway_configuration", client_gateway_configuration)
        pulumi.set(__self__, "client_gateway_id", client_gateway_id)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "routes", routes)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vgw_telemetries", vgw_telemetries)
        pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)
        pulumi.set(__self__, "vpn_connection_id", vpn_connection_id)
        if static_routes_only is not None:
            pulumi.set(__self__, "static_routes_only", static_routes_only)

    @_builtins.property
    @pulumi.getter(name="clientGatewayConfiguration")
    def client_gateway_configuration(self) -> _builtins.str:
        """
        Example configuration for the client gateway.
        """
        return pulumi.get(self, "client_gateway_configuration")

    @_builtins.property
    @pulumi.getter(name="clientGatewayId")
    def client_gateway_id(self) -> _builtins.str:
        """
        The ID of the client gateway used on the client end of the connection.
        """
        return pulumi.get(self, "client_gateway_id")

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        The type of VPN connection (always `ipsec.1`).
        """
        return pulumi.get(self, "connection_type")

    @_builtins.property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetVpnConnectionsVpnConnectionRouteResult']:
        """
        Information about one or more static routes associated with the VPN connection, if any.
        """
        return pulumi.get(self, "routes")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVpnConnectionsVpnConnectionTagResult']:
        """
        One or more tags associated with the VPN connection.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="vgwTelemetries")
    def vgw_telemetries(self) -> Sequence['outputs.GetVpnConnectionsVpnConnectionVgwTelemetryResult']:
        """
        Information about the current state of one or more of the VPN tunnels.
        """
        return pulumi.get(self, "vgw_telemetries")

    @_builtins.property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> _builtins.str:
        """
        The ID of the virtual gateway used on the OUTSCALE end of the connection.
        """
        return pulumi.get(self, "virtual_gateway_id")

    @_builtins.property
    @pulumi.getter(name="vpnConnectionId")
    def vpn_connection_id(self) -> _builtins.str:
        """
        The ID of the VPN connection.
        """
        return pulumi.get(self, "vpn_connection_id")

    @_builtins.property
    @pulumi.getter(name="staticRoutesOnly")
    def static_routes_only(self) -> Optional[_builtins.bool]:
        """
        If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
        """
        return pulumi.get(self, "static_routes_only")


@pulumi.output_type
class GetVpnConnectionsVpnConnectionRouteResult(dict):
    def __init__(__self__, *,
                 destination_ip_range: _builtins.str,
                 route_type: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str destination_ip_range: The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        :param _builtins.str route_type: The type of route (always `static`).
        :param _builtins.str state: The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        """
        pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        pulumi.set(__self__, "route_type", route_type)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> _builtins.str:
        """
        The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        """
        return pulumi.get(self, "destination_ip_range")

    @_builtins.property
    @pulumi.getter(name="routeType")
    def route_type(self) -> _builtins.str:
        """
        The type of route (always `static`).
        """
        return pulumi.get(self, "route_type")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVpnConnectionsVpnConnectionTagResult(dict):
    def __init__(__self__, *,
                 key: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str key: The key of the tag, with a minimum of 1 character.
        :param _builtins.str value: The value of the tag, between 0 and 255 characters.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> _builtins.str:
        """
        The key of the tag, with a minimum of 1 character.
        """
        return pulumi.get(self, "key")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value of the tag, between 0 and 255 characters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVpnConnectionsVpnConnectionVgwTelemetryResult(dict):
    def __init__(__self__, *,
                 accepted_route_count: _builtins.int,
                 last_state_change_date: _builtins.str,
                 outside_ip_address: _builtins.str,
                 state: _builtins.str,
                 state_description: _builtins.str):
        """
        :param _builtins.int accepted_route_count: The number of routes accepted through BGP (Border Gateway Protocol) route exchanges.
        :param _builtins.str last_state_change_date: The date and time (UTC) of the latest state update.
        :param _builtins.str outside_ip_address: The IP on the OUTSCALE side of the tunnel.
        :param _builtins.str state: The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        :param _builtins.str state_description: A description of the current state of the tunnel.
        """
        pulumi.set(__self__, "accepted_route_count", accepted_route_count)
        pulumi.set(__self__, "last_state_change_date", last_state_change_date)
        pulumi.set(__self__, "outside_ip_address", outside_ip_address)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "state_description", state_description)

    @_builtins.property
    @pulumi.getter(name="acceptedRouteCount")
    def accepted_route_count(self) -> _builtins.int:
        """
        The number of routes accepted through BGP (Border Gateway Protocol) route exchanges.
        """
        return pulumi.get(self, "accepted_route_count")

    @_builtins.property
    @pulumi.getter(name="lastStateChangeDate")
    def last_state_change_date(self) -> _builtins.str:
        """
        The date and time (UTC) of the latest state update.
        """
        return pulumi.get(self, "last_state_change_date")

    @_builtins.property
    @pulumi.getter(name="outsideIpAddress")
    def outside_ip_address(self) -> _builtins.str:
        """
        The IP on the OUTSCALE side of the tunnel.
        """
        return pulumi.get(self, "outside_ip_address")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="stateDescription")
    def state_description(self) -> _builtins.str:
        """
        A description of the current state of the tunnel.
        """
        return pulumi.get(self, "state_description")


