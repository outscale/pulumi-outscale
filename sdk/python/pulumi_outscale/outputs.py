# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ClientGatewayTag',
    'DhcpOptionTag',
    'ImageBlockDeviceMapping',
    'ImageBlockDeviceMappingBsus',
    'ImageExportTaskOsuExport',
    'ImageExportTaskOsuExportOsuApiKey',
    'ImageExportTaskTag',
    'ImageLaunchPermissionPermissionAdditions',
    'ImageLaunchPermissionPermissionRemovals',
    'ImageLaunchPermissionPermissionsToLaunch',
    'ImagePermissionsToLaunch',
    'ImageStateComment',
    'ImageTag',
    'InternetServiceLinkTag',
    'InternetServiceTag',
    'LoadBalancerAccessLog',
    'LoadBalancerApplicationStickyCookiePolicy',
    'LoadBalancerAttributesAccessLog',
    'LoadBalancerAttributesApplicationStickyCookiePolicy',
    'LoadBalancerAttributesHealthCheck',
    'LoadBalancerAttributesListener',
    'LoadBalancerAttributesLoadBalancerStickyCookiePolicy',
    'LoadBalancerAttributesSourceSecurityGroup',
    'LoadBalancerAttributesTag',
    'LoadBalancerHealthCheck',
    'LoadBalancerListener',
    'LoadBalancerLoadBalancerStickyCookiePolicy',
    'LoadBalancerPolicyAccessLog',
    'LoadBalancerPolicyApplicationStickyCookiePolicy',
    'LoadBalancerPolicyHealthCheck',
    'LoadBalancerPolicyListener',
    'LoadBalancerPolicyLoadBalancerStickyCookiePolicy',
    'LoadBalancerPolicySourceSecurityGroup',
    'LoadBalancerPolicyTag',
    'LoadBalancerSourceSecurityGroup',
    'LoadBalancerTag',
    'NatServicePublicIp',
    'NatServiceTag',
    'NetAccessPointTag',
    'NetAttributesTag',
    'NetPeeringAccepterNet',
    'NetPeeringAcceptionAccepterNet',
    'NetPeeringAcceptionSourceNet',
    'NetPeeringAcceptionState',
    'NetPeeringAcceptionTag',
    'NetPeeringSourceNet',
    'NetPeeringState',
    'NetPeeringTag',
    'NetTag',
    'NicLinkNic',
    'NicLinkPublicIp',
    'NicPrivateIp',
    'NicPrivateIpLinkPublicIp',
    'NicSecurityGroup',
    'NicTag',
    'OutboundRuleRule',
    'OutboundRuleRuleSecurityGroupsMember',
    'PublicIpLinkTag',
    'PublicIpTag',
    'RouteTableLinkRouteTable',
    'RouteTableRoute',
    'RouteTableRoutePropagatingVirtualGateway',
    'RouteTableTag',
    'SecurityGroupInboundRule',
    'SecurityGroupOutboundRule',
    'SecurityGroupRuleRule',
    'SecurityGroupRuleRuleSecurityGroupsMember',
    'SecurityGroupTag',
    'SnapshotAttributesPermissionsToCreateVolumeAdditions',
    'SnapshotAttributesPermissionsToCreateVolumeRemoval',
    'SnapshotExportTaskOsuExport',
    'SnapshotExportTaskOsuExportOsuApiKey',
    'SnapshotExportTaskTag',
    'SnapshotPermissionsToCreateVolume',
    'SnapshotTag',
    'SubnetTag',
    'TagTag',
    'VirtualGatewayLinkNetToVirtualGatewayLink',
    'VirtualGatewayNetToVirtualGatewayLink',
    'VirtualGatewayTag',
    'VmBlockDeviceMapping',
    'VmBlockDeviceMappingBsu',
    'VmBlockDeviceMappingsCreated',
    'VmBlockDeviceMappingsCreatedBsu',
    'VmNic',
    'VmNicLinkNic',
    'VmNicLinkPublicIp',
    'VmNicPrivateIp',
    'VmNicPrivateIpLinkPublicIp',
    'VmNicSecurityGroup',
    'VmSecurityGroup',
    'VmTag',
    'VolumeLinkedVolume',
    'VolumeTag',
    'VpnConnectionRoute',
    'VpnConnectionTag',
    'VpnConnectionVgwTelemetry',
    'GetAccessKeyFilterResult',
    'GetAccessKeysAccessKeyResult',
    'GetAccessKeysFilterResult',
    'GetAccountsAccountResult',
    'GetApiAccessRuleFilterResult',
    'GetApiAccessRulesApiAccessRuleResult',
    'GetApiAccessRulesFilterResult',
    'GetCaFilterResult',
    'GetCasCaResult',
    'GetCasFilterResult',
    'GetClientGatewayFilterResult',
    'GetClientGatewayTagResult',
    'GetClientGatewaysClientGatewayResult',
    'GetClientGatewaysClientGatewayTagResult',
    'GetClientGatewaysFilterResult',
    'GetDhcpOptionFilterResult',
    'GetDhcpOptionTagResult',
    'GetDhcpOptionsDhcpOptionResult',
    'GetDhcpOptionsDhcpOptionTagResult',
    'GetDhcpOptionsFilterResult',
    'GetFlexibleGpuCatalogFilterResult',
    'GetFlexibleGpuCatalogFlexibleGpuCatalogResult',
    'GetFlexibleGpuFilterResult',
    'GetFlexibleGpusFilterResult',
    'GetFlexibleGpusFlexibleGpusResult',
    'GetImageBlockDeviceMappingResult',
    'GetImageBlockDeviceMappingBsusResult',
    'GetImageExportTaskFilterResult',
    'GetImageExportTaskOsuExportResult',
    'GetImageExportTaskTagResult',
    'GetImageExportTasksFilterResult',
    'GetImageExportTasksImageExportTaskResult',
    'GetImageExportTasksImageExportTaskOsuExportResult',
    'GetImageExportTasksImageExportTaskTagResult',
    'GetImageFilterResult',
    'GetImagePermissionsToLaunchResult',
    'GetImageStateCommentResult',
    'GetImageTagResult',
    'GetImagesFilterResult',
    'GetImagesImageResult',
    'GetImagesImageBlockDeviceMappingResult',
    'GetImagesImageBlockDeviceMappingBsusResult',
    'GetImagesImagePermissionsToLaunchResult',
    'GetImagesImageStateCommentResult',
    'GetImagesImageTagResult',
    'GetInternetServiceFilterResult',
    'GetInternetServiceTagResult',
    'GetInternetServicesFilterResult',
    'GetInternetServicesInternetServiceResult',
    'GetInternetServicesInternetServiceTagResult',
    'GetKeypairFilterResult',
    'GetKeypairsFilterResult',
    'GetKeypairsKeypairResult',
    'GetLoadBalancerAccessLogResult',
    'GetLoadBalancerApplicationStickyCookiePolicyResult',
    'GetLoadBalancerFilterResult',
    'GetLoadBalancerHealthCheckResult',
    'GetLoadBalancerListenerResult',
    'GetLoadBalancerLoadBalancerStickyCookiePolicyResult',
    'GetLoadBalancerSourceSecurityGroupResult',
    'GetLoadBalancerTagResult',
    'GetLoadBalancerTagsFilterResult',
    'GetLoadBalancerTagsTagResult',
    'GetLoadBalancerVmHealthBackendVmHealthResult',
    'GetLoadBalancerVmHealthFilterResult',
    'GetLoadBalancersFilterResult',
    'GetLoadBalancersLoadBalancerResult',
    'GetLoadBalancersLoadBalancerAccessLogResult',
    'GetLoadBalancersLoadBalancerApplicationStickyCookiePolicyResult',
    'GetLoadBalancersLoadBalancerBackendVmIdResult',
    'GetLoadBalancersLoadBalancerHealthCheckResult',
    'GetLoadBalancersLoadBalancerListenerResult',
    'GetLoadBalancersLoadBalancerLoadBalancerStickyCookiePolicyResult',
    'GetLoadBalancersLoadBalancerSourceSecurityGroupResult',
    'GetLoadBalancersLoadBalancerTagResult',
    'GetNatServiceFilterResult',
    'GetNatServicePublicIpResult',
    'GetNatServiceTagResult',
    'GetNatServicesFilterResult',
    'GetNatServicesNatServiceResult',
    'GetNatServicesNatServicePublicIpResult',
    'GetNatServicesNatServiceTagResult',
    'GetNetAccessPointFilterResult',
    'GetNetAccessPointServicesFilterResult',
    'GetNetAccessPointServicesServiceResult',
    'GetNetAccessPointTagResult',
    'GetNetAccessPointsFilterResult',
    'GetNetAccessPointsNetAccessPointResult',
    'GetNetAccessPointsNetAccessPointTagResult',
    'GetNetAttributesTagResult',
    'GetNetFilterResult',
    'GetNetPeeringAccepterNetResult',
    'GetNetPeeringFilterResult',
    'GetNetPeeringSourceNetResult',
    'GetNetPeeringStateResult',
    'GetNetPeeringTagResult',
    'GetNetPeeringsFilterResult',
    'GetNetPeeringsNetPeeringResult',
    'GetNetPeeringsNetPeeringAccepterNetResult',
    'GetNetPeeringsNetPeeringSourceNetResult',
    'GetNetPeeringsNetPeeringStateResult',
    'GetNetPeeringsNetPeeringTagResult',
    'GetNetTagResult',
    'GetNetsFilterResult',
    'GetNetsNetResult',
    'GetNetsNetTagResult',
    'GetNicFilterResult',
    'GetNicLinkNicResult',
    'GetNicLinkPublicIpResult',
    'GetNicPrivateIpResult',
    'GetNicPrivateIpLinkPublicIpResult',
    'GetNicSecurityGroupResult',
    'GetNicTagResult',
    'GetNicsFilterResult',
    'GetNicsNicResult',
    'GetNicsNicLinkNicResult',
    'GetNicsNicLinkPublicIpResult',
    'GetNicsNicPrivateIpResult',
    'GetNicsNicPrivateIpLinkPublicIpResult',
    'GetNicsNicSecurityGroupResult',
    'GetNicsNicTagResult',
    'GetProductTypeFilterResult',
    'GetProductTypesFilterResult',
    'GetProductTypesProductTypeResult',
    'GetPublicIpFilterResult',
    'GetPublicIpTagResult',
    'GetPublicIpsFilterResult',
    'GetPublicIpsPublicIpResult',
    'GetPublicIpsPublicIpTagResult',
    'GetPulicCatalogCatalogResult',
    'GetPulicCatalogCatalogEntryResult',
    'GetQuotaFilterResult',
    'GetQuotasFilterResult',
    'GetQuotasQuotaResult',
    'GetRegionsRegionResult',
    'GetRouteTableFilterResult',
    'GetRouteTableLinkRouteTableResult',
    'GetRouteTableRouteResult',
    'GetRouteTableRoutePropagatingVirtualGatewayResult',
    'GetRouteTableTagResult',
    'GetRouteTablesFilterResult',
    'GetRouteTablesRouteTableResult',
    'GetRouteTablesRouteTableLinkRouteTableResult',
    'GetRouteTablesRouteTableRouteResult',
    'GetRouteTablesRouteTableRoutePropagatingVirtualGatewayResult',
    'GetRouteTablesRouteTableTagResult',
    'GetSecurityGroupFilterResult',
    'GetSecurityGroupInboundRuleResult',
    'GetSecurityGroupInboundRuleSecurityGroupsMemberResult',
    'GetSecurityGroupOutboundRuleResult',
    'GetSecurityGroupOutboundRuleSecurityGroupsMemberResult',
    'GetSecurityGroupTagResult',
    'GetSecurityGroupsFilterResult',
    'GetSecurityGroupsSecurityGroupResult',
    'GetSecurityGroupsSecurityGroupInboundRuleResult',
    'GetSecurityGroupsSecurityGroupInboundRuleSecurityGroupsMemberResult',
    'GetSecurityGroupsSecurityGroupOutboundRuleResult',
    'GetSecurityGroupsSecurityGroupOutboundRuleSecurityGroupsMemberResult',
    'GetSecurityGroupsSecurityGroupTagResult',
    'GetServerCertificateFilterResult',
    'GetServerCertificatesFilterResult',
    'GetServerCertificatesServerCertificateResult',
    'GetSnapshotExportTaskFilterResult',
    'GetSnapshotExportTaskOsuExportResult',
    'GetSnapshotExportTaskTagResult',
    'GetSnapshotExportTasksFilterResult',
    'GetSnapshotExportTasksSnapshotExportTaskResult',
    'GetSnapshotExportTasksSnapshotExportTaskOsuExportResult',
    'GetSnapshotExportTasksSnapshotExportTaskTagResult',
    'GetSnapshotFilterResult',
    'GetSnapshotPermissionsToCreateVolumeResult',
    'GetSnapshotTagResult',
    'GetSnapshotsFilterResult',
    'GetSnapshotsSnapshotResult',
    'GetSnapshotsSnapshotPermissionsToCreateVolumeResult',
    'GetSnapshotsSnapshotTagResult',
    'GetSubnetFilterResult',
    'GetSubnetTagResult',
    'GetSubnetsFilterResult',
    'GetSubnetsSubnetResult',
    'GetSubnetsSubnetTagResult',
    'GetSubregionsFilterResult',
    'GetSubregionsSubregionResult',
    'GetTagFilterResult',
    'GetVirtualGatewayFilterResult',
    'GetVirtualGatewayNetToVirtualGatewayLinkResult',
    'GetVirtualGatewayTagResult',
    'GetVirtualGatewaysFilterResult',
    'GetVirtualGatewaysVirtualGatewayResult',
    'GetVirtualGatewaysVirtualGatewayNetToVirtualGatewayLinkResult',
    'GetVirtualGatewaysVirtualGatewayTagResult',
    'GetVmBlockDeviceMappingsCreatedResult',
    'GetVmBlockDeviceMappingsCreatedBsuResult',
    'GetVmFilterResult',
    'GetVmNicResult',
    'GetVmNicLinkNicResult',
    'GetVmNicLinkPublicIpResult',
    'GetVmNicPrivateIpResult',
    'GetVmNicPrivateIpLinkPublicIpResult',
    'GetVmNicSecurityGroupResult',
    'GetVmSecurityGroupResult',
    'GetVmStateFilterResult',
    'GetVmStateMaintenanceEventResult',
    'GetVmStatesFilterResult',
    'GetVmStatesVmStateResult',
    'GetVmStatesVmStateMaintenanceEventResult',
    'GetVmTagResult',
    'GetVmTypesFilterResult',
    'GetVmTypesVmTypeResult',
    'GetVmsFilterResult',
    'GetVmsVmResult',
    'GetVmsVmBlockDeviceMappingsCreatedResult',
    'GetVmsVmBlockDeviceMappingsCreatedBsuResult',
    'GetVmsVmNicResult',
    'GetVmsVmNicLinkNicResult',
    'GetVmsVmNicLinkPublicIpResult',
    'GetVmsVmNicPrivateIpResult',
    'GetVmsVmNicPrivateIpLinkPublicIpResult',
    'GetVmsVmNicSecurityGroupResult',
    'GetVmsVmSecurityGroupResult',
    'GetVmsVmTagResult',
    'GetVolumeFilterResult',
    'GetVolumeLinkedVolumeResult',
    'GetVolumeTagResult',
    'GetVolumesFilterResult',
    'GetVolumesVolumeResult',
    'GetVolumesVolumeLinkedVolumeResult',
    'GetVolumesVolumeTagResult',
    'GetVpnConnectionFilterResult',
    'GetVpnConnectionRouteResult',
    'GetVpnConnectionTagResult',
    'GetVpnConnectionVgwTelemetryResult',
    'GetVpnConnectionsFilterResult',
    'GetVpnConnectionsVpnConnectionResult',
    'GetVpnConnectionsVpnConnectionRouteResult',
    'GetVpnConnectionsVpnConnectionTagResult',
    'GetVpnConnectionsVpnConnectionVgwTelemetryResult',
]

@pulumi.output_type
class ClientGatewayTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DhcpOptionTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ImageBlockDeviceMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceName":
            suggest = "device_name"
        elif key == "virtualDeviceName":
            suggest = "virtual_device_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageBlockDeviceMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageBlockDeviceMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageBlockDeviceMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bsus: Optional[Sequence['outputs.ImageBlockDeviceMappingBsus']] = None,
                 device_name: Optional[str] = None,
                 virtual_device_name: Optional[str] = None):
        if bsus is not None:
            pulumi.set(__self__, "bsus", bsus)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if virtual_device_name is not None:
            pulumi.set(__self__, "virtual_device_name", virtual_device_name)

    @property
    @pulumi.getter
    def bsus(self) -> Optional[Sequence['outputs.ImageBlockDeviceMappingBsus']]:
        return pulumi.get(self, "bsus")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="virtualDeviceName")
    def virtual_device_name(self) -> Optional[str]:
        return pulumi.get(self, "virtual_device_name")


@pulumi.output_type
class ImageBlockDeviceMappingBsus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "snapshotId":
            suggest = "snapshot_id"
        elif key == "volumeSize":
            suggest = "volume_size"
        elif key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageBlockDeviceMappingBsus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageBlockDeviceMappingBsus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageBlockDeviceMappingBsus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[bool] = None,
                 iops: Optional[int] = None,
                 snapshot_id: Optional[str] = None,
                 volume_size: Optional[int] = None,
                 volume_type: Optional[str] = None):
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[bool]:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter
    def iops(self) -> Optional[int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[int]:
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class ImageExportTaskOsuExport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskImageFormat":
            suggest = "disk_image_format"
        elif key == "osuBucket":
            suggest = "osu_bucket"
        elif key == "osuApiKeys":
            suggest = "osu_api_keys"
        elif key == "osuManifestUrl":
            suggest = "osu_manifest_url"
        elif key == "osuPrefix":
            suggest = "osu_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageExportTaskOsuExport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageExportTaskOsuExport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageExportTaskOsuExport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_image_format: str,
                 osu_bucket: str,
                 osu_api_keys: Optional[Sequence['outputs.ImageExportTaskOsuExportOsuApiKey']] = None,
                 osu_manifest_url: Optional[str] = None,
                 osu_prefix: Optional[str] = None):
        pulumi.set(__self__, "disk_image_format", disk_image_format)
        pulumi.set(__self__, "osu_bucket", osu_bucket)
        if osu_api_keys is not None:
            pulumi.set(__self__, "osu_api_keys", osu_api_keys)
        if osu_manifest_url is not None:
            pulumi.set(__self__, "osu_manifest_url", osu_manifest_url)
        if osu_prefix is not None:
            pulumi.set(__self__, "osu_prefix", osu_prefix)

    @property
    @pulumi.getter(name="diskImageFormat")
    def disk_image_format(self) -> str:
        return pulumi.get(self, "disk_image_format")

    @property
    @pulumi.getter(name="osuBucket")
    def osu_bucket(self) -> str:
        return pulumi.get(self, "osu_bucket")

    @property
    @pulumi.getter(name="osuApiKeys")
    def osu_api_keys(self) -> Optional[Sequence['outputs.ImageExportTaskOsuExportOsuApiKey']]:
        return pulumi.get(self, "osu_api_keys")

    @property
    @pulumi.getter(name="osuManifestUrl")
    def osu_manifest_url(self) -> Optional[str]:
        return pulumi.get(self, "osu_manifest_url")

    @property
    @pulumi.getter(name="osuPrefix")
    def osu_prefix(self) -> Optional[str]:
        return pulumi.get(self, "osu_prefix")


@pulumi.output_type
class ImageExportTaskOsuExportOsuApiKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKeyId":
            suggest = "api_key_id"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageExportTaskOsuExportOsuApiKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageExportTaskOsuExportOsuApiKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageExportTaskOsuExportOsuApiKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key_id: str,
                 secret_key: str):
        pulumi.set(__self__, "api_key_id", api_key_id)
        pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> str:
        return pulumi.get(self, "api_key_id")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class ImageExportTaskTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ImageLaunchPermissionPermissionAdditions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountIds":
            suggest = "account_ids"
        elif key == "globalPermission":
            suggest = "global_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageLaunchPermissionPermissionAdditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageLaunchPermissionPermissionAdditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageLaunchPermissionPermissionAdditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_ids: Optional[Sequence[str]] = None,
                 global_permission: Optional[str] = None):
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[str]:
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class ImageLaunchPermissionPermissionRemovals(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountIds":
            suggest = "account_ids"
        elif key == "globalPermission":
            suggest = "global_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageLaunchPermissionPermissionRemovals. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageLaunchPermissionPermissionRemovals.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageLaunchPermissionPermissionRemovals.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_ids: Optional[Sequence[str]] = None,
                 global_permission: Optional[str] = None):
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[str]:
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class ImageLaunchPermissionPermissionsToLaunch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountIds":
            suggest = "account_ids"
        elif key == "globalPermission":
            suggest = "global_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageLaunchPermissionPermissionsToLaunch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageLaunchPermissionPermissionsToLaunch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageLaunchPermissionPermissionsToLaunch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_ids: Optional[Sequence[str]] = None,
                 global_permission: Optional[str] = None):
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[str]:
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class ImagePermissionsToLaunch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountIds":
            suggest = "account_ids"
        elif key == "globalPermission":
            suggest = "global_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImagePermissionsToLaunch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImagePermissionsToLaunch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImagePermissionsToLaunch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_ids: Optional[Sequence[str]] = None,
                 global_permission: Optional[bool] = None):
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[bool]:
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class ImageStateComment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stateCode":
            suggest = "state_code"
        elif key == "stateMessage":
            suggest = "state_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageStateComment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageStateComment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageStateComment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 state_code: Optional[str] = None,
                 state_message: Optional[str] = None):
        if state_code is not None:
            pulumi.set(__self__, "state_code", state_code)
        if state_message is not None:
            pulumi.set(__self__, "state_message", state_message)

    @property
    @pulumi.getter(name="stateCode")
    def state_code(self) -> Optional[str]:
        return pulumi.get(self, "state_code")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> Optional[str]:
        return pulumi.get(self, "state_message")


@pulumi.output_type
class ImageTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class InternetServiceLinkTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class InternetServiceTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LoadBalancerAccessLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "osuBucketName":
            suggest = "osu_bucket_name"
        elif key == "osuBucketPrefix":
            suggest = "osu_bucket_prefix"
        elif key == "publicationInterval":
            suggest = "publication_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAccessLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAccessLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAccessLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 osu_bucket_name: Optional[str] = None,
                 osu_bucket_prefix: Optional[str] = None,
                 publication_interval: Optional[int] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if osu_bucket_name is not None:
            pulumi.set(__self__, "osu_bucket_name", osu_bucket_name)
        if osu_bucket_prefix is not None:
            pulumi.set(__self__, "osu_bucket_prefix", osu_bucket_prefix)
        if publication_interval is not None:
            pulumi.set(__self__, "publication_interval", publication_interval)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="osuBucketName")
    def osu_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "osu_bucket_name")

    @property
    @pulumi.getter(name="osuBucketPrefix")
    def osu_bucket_prefix(self) -> Optional[str]:
        return pulumi.get(self, "osu_bucket_prefix")

    @property
    @pulumi.getter(name="publicationInterval")
    def publication_interval(self) -> Optional[int]:
        return pulumi.get(self, "publication_interval")


@pulumi.output_type
class LoadBalancerApplicationStickyCookiePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerApplicationStickyCookiePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerApplicationStickyCookiePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerApplicationStickyCookiePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 policy_name: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class LoadBalancerAttributesAccessLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "osuBucketName":
            suggest = "osu_bucket_name"
        elif key == "osuBucketPrefix":
            suggest = "osu_bucket_prefix"
        elif key == "publicationInterval":
            suggest = "publication_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAttributesAccessLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAttributesAccessLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAttributesAccessLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 osu_bucket_name: Optional[str] = None,
                 osu_bucket_prefix: Optional[str] = None,
                 publication_interval: Optional[int] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if osu_bucket_name is not None:
            pulumi.set(__self__, "osu_bucket_name", osu_bucket_name)
        if osu_bucket_prefix is not None:
            pulumi.set(__self__, "osu_bucket_prefix", osu_bucket_prefix)
        if publication_interval is not None:
            pulumi.set(__self__, "publication_interval", publication_interval)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="osuBucketName")
    def osu_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "osu_bucket_name")

    @property
    @pulumi.getter(name="osuBucketPrefix")
    def osu_bucket_prefix(self) -> Optional[str]:
        return pulumi.get(self, "osu_bucket_prefix")

    @property
    @pulumi.getter(name="publicationInterval")
    def publication_interval(self) -> Optional[int]:
        return pulumi.get(self, "publication_interval")


@pulumi.output_type
class LoadBalancerAttributesApplicationStickyCookiePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAttributesApplicationStickyCookiePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAttributesApplicationStickyCookiePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAttributesApplicationStickyCookiePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 policy_name: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class LoadBalancerAttributesHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkInterval":
            suggest = "check_interval"
        elif key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAttributesHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAttributesHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAttributesHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_interval: int,
                 healthy_threshold: int,
                 port: int,
                 protocol: str,
                 timeout: int,
                 unhealthy_threshold: int,
                 path: Optional[str] = None):
        pulumi.set(__self__, "check_interval", check_interval)
        pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> int:
        return pulumi.get(self, "check_interval")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> int:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> int:
        return pulumi.get(self, "unhealthy_threshold")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")


@pulumi.output_type
class LoadBalancerAttributesListener(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendPort":
            suggest = "backend_port"
        elif key == "backendProtocol":
            suggest = "backend_protocol"
        elif key == "loadBalancerPort":
            suggest = "load_balancer_port"
        elif key == "loadBalancerProtocol":
            suggest = "load_balancer_protocol"
        elif key == "policyNames":
            suggest = "policy_names"
        elif key == "serverCertificateId":
            suggest = "server_certificate_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAttributesListener. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAttributesListener.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAttributesListener.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_port: Optional[int] = None,
                 backend_protocol: Optional[str] = None,
                 load_balancer_port: Optional[int] = None,
                 load_balancer_protocol: Optional[str] = None,
                 policy_names: Optional[Sequence[str]] = None,
                 server_certificate_id: Optional[str] = None):
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if backend_protocol is not None:
            pulumi.set(__self__, "backend_protocol", backend_protocol)
        if load_balancer_port is not None:
            pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        if load_balancer_protocol is not None:
            pulumi.set(__self__, "load_balancer_protocol", load_balancer_protocol)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if server_certificate_id is not None:
            pulumi.set(__self__, "server_certificate_id", server_certificate_id)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[int]:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="backendProtocol")
    def backend_protocol(self) -> Optional[str]:
        return pulumi.get(self, "backend_protocol")

    @property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> Optional[int]:
        return pulumi.get(self, "load_balancer_port")

    @property
    @pulumi.getter(name="loadBalancerProtocol")
    def load_balancer_protocol(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_protocol")

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")

    @property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_id")


@pulumi.output_type
class LoadBalancerAttributesLoadBalancerStickyCookiePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAttributesLoadBalancerStickyCookiePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAttributesLoadBalancerStickyCookiePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAttributesLoadBalancerStickyCookiePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_name: Optional[str] = None):
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class LoadBalancerAttributesSourceSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupAccountId":
            suggest = "security_group_account_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAttributesSourceSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAttributesSourceSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAttributesSourceSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_account_id: Optional[str] = None,
                 security_group_name: Optional[str] = None):
        if security_group_account_id is not None:
            pulumi.set(__self__, "security_group_account_id", security_group_account_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupAccountId")
    def security_group_account_id(self) -> Optional[str]:
        return pulumi.get(self, "security_group_account_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[str]:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class LoadBalancerAttributesTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LoadBalancerHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkInterval":
            suggest = "check_interval"
        elif key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_interval: Optional[str] = None,
                 healthy_threshold: Optional[str] = None,
                 path: Optional[str] = None,
                 port: Optional[str] = None,
                 protocol: Optional[str] = None,
                 timeout: Optional[str] = None,
                 unhealthy_threshold: Optional[str] = None):
        if check_interval is not None:
            pulumi.set(__self__, "check_interval", check_interval)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> Optional[str]:
        return pulumi.get(self, "check_interval")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[str]:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[str]:
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class LoadBalancerListener(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendPort":
            suggest = "backend_port"
        elif key == "backendProtocol":
            suggest = "backend_protocol"
        elif key == "loadBalancerPort":
            suggest = "load_balancer_port"
        elif key == "loadBalancerProtocol":
            suggest = "load_balancer_protocol"
        elif key == "policyNames":
            suggest = "policy_names"
        elif key == "serverCertificateId":
            suggest = "server_certificate_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerListener. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerListener.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerListener.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_port: int,
                 backend_protocol: str,
                 load_balancer_port: int,
                 load_balancer_protocol: str,
                 policy_names: Optional[Sequence[str]] = None,
                 server_certificate_id: Optional[str] = None):
        pulumi.set(__self__, "backend_port", backend_port)
        pulumi.set(__self__, "backend_protocol", backend_protocol)
        pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        pulumi.set(__self__, "load_balancer_protocol", load_balancer_protocol)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if server_certificate_id is not None:
            pulumi.set(__self__, "server_certificate_id", server_certificate_id)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> int:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="backendProtocol")
    def backend_protocol(self) -> str:
        return pulumi.get(self, "backend_protocol")

    @property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> int:
        return pulumi.get(self, "load_balancer_port")

    @property
    @pulumi.getter(name="loadBalancerProtocol")
    def load_balancer_protocol(self) -> str:
        return pulumi.get(self, "load_balancer_protocol")

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")

    @property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_id")


@pulumi.output_type
class LoadBalancerLoadBalancerStickyCookiePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerLoadBalancerStickyCookiePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerLoadBalancerStickyCookiePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerLoadBalancerStickyCookiePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_name: Optional[str] = None):
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class LoadBalancerPolicyAccessLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isEnabled":
            suggest = "is_enabled"
        elif key == "osuBucketName":
            suggest = "osu_bucket_name"
        elif key == "osuBucketPrefix":
            suggest = "osu_bucket_prefix"
        elif key == "publicationInterval":
            suggest = "publication_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerPolicyAccessLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerPolicyAccessLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerPolicyAccessLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_enabled: Optional[bool] = None,
                 osu_bucket_name: Optional[str] = None,
                 osu_bucket_prefix: Optional[str] = None,
                 publication_interval: Optional[int] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if osu_bucket_name is not None:
            pulumi.set(__self__, "osu_bucket_name", osu_bucket_name)
        if osu_bucket_prefix is not None:
            pulumi.set(__self__, "osu_bucket_prefix", osu_bucket_prefix)
        if publication_interval is not None:
            pulumi.set(__self__, "publication_interval", publication_interval)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="osuBucketName")
    def osu_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "osu_bucket_name")

    @property
    @pulumi.getter(name="osuBucketPrefix")
    def osu_bucket_prefix(self) -> Optional[str]:
        return pulumi.get(self, "osu_bucket_prefix")

    @property
    @pulumi.getter(name="publicationInterval")
    def publication_interval(self) -> Optional[int]:
        return pulumi.get(self, "publication_interval")


@pulumi.output_type
class LoadBalancerPolicyApplicationStickyCookiePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerPolicyApplicationStickyCookiePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerPolicyApplicationStickyCookiePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerPolicyApplicationStickyCookiePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cookie_name: Optional[str] = None,
                 policy_name: Optional[str] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[str]:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class LoadBalancerPolicyHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkInterval":
            suggest = "check_interval"
        elif key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerPolicyHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerPolicyHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerPolicyHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_interval: Optional[str] = None,
                 healthy_threshold: Optional[str] = None,
                 path: Optional[str] = None,
                 port: Optional[str] = None,
                 protocol: Optional[str] = None,
                 timeout: Optional[str] = None,
                 unhealthy_threshold: Optional[str] = None):
        if check_interval is not None:
            pulumi.set(__self__, "check_interval", check_interval)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> Optional[str]:
        return pulumi.get(self, "check_interval")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[str]:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[str]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[str]:
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class LoadBalancerPolicyListener(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendPort":
            suggest = "backend_port"
        elif key == "backendProtocol":
            suggest = "backend_protocol"
        elif key == "loadBalancerPort":
            suggest = "load_balancer_port"
        elif key == "loadBalancerProtocol":
            suggest = "load_balancer_protocol"
        elif key == "policyNames":
            suggest = "policy_names"
        elif key == "serverCertificateId":
            suggest = "server_certificate_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerPolicyListener. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerPolicyListener.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerPolicyListener.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_port: Optional[int] = None,
                 backend_protocol: Optional[str] = None,
                 load_balancer_port: Optional[int] = None,
                 load_balancer_protocol: Optional[str] = None,
                 policy_names: Optional[Sequence[str]] = None,
                 server_certificate_id: Optional[str] = None):
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if backend_protocol is not None:
            pulumi.set(__self__, "backend_protocol", backend_protocol)
        if load_balancer_port is not None:
            pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        if load_balancer_protocol is not None:
            pulumi.set(__self__, "load_balancer_protocol", load_balancer_protocol)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if server_certificate_id is not None:
            pulumi.set(__self__, "server_certificate_id", server_certificate_id)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[int]:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="backendProtocol")
    def backend_protocol(self) -> Optional[str]:
        return pulumi.get(self, "backend_protocol")

    @property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> Optional[int]:
        return pulumi.get(self, "load_balancer_port")

    @property
    @pulumi.getter(name="loadBalancerProtocol")
    def load_balancer_protocol(self) -> Optional[str]:
        return pulumi.get(self, "load_balancer_protocol")

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")

    @property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "server_certificate_id")


@pulumi.output_type
class LoadBalancerPolicyLoadBalancerStickyCookiePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerPolicyLoadBalancerStickyCookiePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerPolicyLoadBalancerStickyCookiePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerPolicyLoadBalancerStickyCookiePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_name: Optional[str] = None):
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class LoadBalancerPolicySourceSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupAccountId":
            suggest = "security_group_account_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerPolicySourceSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerPolicySourceSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerPolicySourceSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_account_id: Optional[str] = None,
                 security_group_name: Optional[str] = None):
        if security_group_account_id is not None:
            pulumi.set(__self__, "security_group_account_id", security_group_account_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupAccountId")
    def security_group_account_id(self) -> Optional[str]:
        return pulumi.get(self, "security_group_account_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[str]:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class LoadBalancerPolicyTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class LoadBalancerSourceSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupAccountId":
            suggest = "security_group_account_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerSourceSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerSourceSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerSourceSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_account_id: Optional[str] = None,
                 security_group_name: Optional[str] = None):
        if security_group_account_id is not None:
            pulumi.set(__self__, "security_group_account_id", security_group_account_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupAccountId")
    def security_group_account_id(self) -> Optional[str]:
        return pulumi.get(self, "security_group_account_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[str]:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class LoadBalancerTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NatServicePublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicIp":
            suggest = "public_ip"
        elif key == "publicIpId":
            suggest = "public_ip_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NatServicePublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NatServicePublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NatServicePublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_ip: Optional[str] = None,
                 public_ip_id: Optional[str] = None):
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_id is not None:
            pulumi.set(__self__, "public_ip_id", public_ip_id)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> Optional[str]:
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class NatServiceTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetAccessPointTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetAttributesTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetPeeringAccepterNet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "ipRange":
            suggest = "ip_range"
        elif key == "netId":
            suggest = "net_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetPeeringAccepterNet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetPeeringAccepterNet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetPeeringAccepterNet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 ip_range: Optional[str] = None,
                 net_id: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if ip_range is not None:
            pulumi.set(__self__, "ip_range", ip_range)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> Optional[str]:
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[str]:
        return pulumi.get(self, "net_id")


@pulumi.output_type
class NetPeeringAcceptionAccepterNet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "ipRange":
            suggest = "ip_range"
        elif key == "netId":
            suggest = "net_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetPeeringAcceptionAccepterNet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetPeeringAcceptionAccepterNet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetPeeringAcceptionAccepterNet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 ip_range: Optional[str] = None,
                 net_id: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if ip_range is not None:
            pulumi.set(__self__, "ip_range", ip_range)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> Optional[str]:
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[str]:
        return pulumi.get(self, "net_id")


@pulumi.output_type
class NetPeeringAcceptionSourceNet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "ipRange":
            suggest = "ip_range"
        elif key == "netId":
            suggest = "net_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetPeeringAcceptionSourceNet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetPeeringAcceptionSourceNet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetPeeringAcceptionSourceNet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 ip_range: Optional[str] = None,
                 net_id: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if ip_range is not None:
            pulumi.set(__self__, "ip_range", ip_range)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> Optional[str]:
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[str]:
        return pulumi.get(self, "net_id")


@pulumi.output_type
class NetPeeringAcceptionState(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 name: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class NetPeeringAcceptionTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetPeeringSourceNet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "ipRange":
            suggest = "ip_range"
        elif key == "netId":
            suggest = "net_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetPeeringSourceNet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetPeeringSourceNet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetPeeringSourceNet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 ip_range: Optional[str] = None,
                 net_id: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if ip_range is not None:
            pulumi.set(__self__, "ip_range", ip_range)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> Optional[str]:
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[str]:
        return pulumi.get(self, "net_id")


@pulumi.output_type
class NetPeeringState(dict):
    def __init__(__self__, *,
                 message: Optional[str] = None,
                 name: Optional[str] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class NetPeeringTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NetTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class NicLinkNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "deviceNumber":
            suggest = "device_number"
        elif key == "linkNicId":
            suggest = "link_nic_id"
        elif key == "vmAccountId":
            suggest = "vm_account_id"
        elif key == "vmId":
            suggest = "vm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicLinkNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicLinkNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicLinkNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[str] = None,
                 device_number: Optional[int] = None,
                 link_nic_id: Optional[str] = None,
                 state: Optional[str] = None,
                 vm_account_id: Optional[str] = None,
                 vm_id: Optional[str] = None):
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if device_number is not None:
            pulumi.set(__self__, "device_number", device_number)
        if link_nic_id is not None:
            pulumi.set(__self__, "link_nic_id", link_nic_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vm_account_id is not None:
            pulumi.set(__self__, "vm_account_id", vm_account_id)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[str]:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> Optional[int]:
        return pulumi.get(self, "device_number")

    @property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> Optional[str]:
        return pulumi.get(self, "link_nic_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> Optional[str]:
        return pulumi.get(self, "vm_account_id")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[str]:
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class NicLinkPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkPublicIpId":
            suggest = "link_public_ip_id"
        elif key == "publicDnsName":
            suggest = "public_dns_name"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "publicIpAccountId":
            suggest = "public_ip_account_id"
        elif key == "publicIpId":
            suggest = "public_ip_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicLinkPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicLinkPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicLinkPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_public_ip_id: Optional[str] = None,
                 public_dns_name: Optional[str] = None,
                 public_ip: Optional[str] = None,
                 public_ip_account_id: Optional[str] = None,
                 public_ip_id: Optional[str] = None):
        if link_public_ip_id is not None:
            pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_account_id is not None:
            pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)
        if public_ip_id is not None:
            pulumi.set(__self__, "public_ip_id", public_ip_id)

    @property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> Optional[str]:
        return pulumi.get(self, "link_public_ip_id")

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[str]:
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> Optional[str]:
        return pulumi.get(self, "public_ip_account_id")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> Optional[str]:
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class NicPrivateIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isPrimary":
            suggest = "is_primary"
        elif key == "linkPublicIp":
            suggest = "link_public_ip"
        elif key == "privateDnsName":
            suggest = "private_dns_name"
        elif key == "privateIp":
            suggest = "private_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicPrivateIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicPrivateIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicPrivateIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_primary: Optional[bool] = None,
                 link_public_ip: Optional['outputs.NicPrivateIpLinkPublicIp'] = None,
                 private_dns_name: Optional[str] = None,
                 private_ip: Optional[str] = None):
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if link_public_ip is not None:
            pulumi.set(__self__, "link_public_ip", link_public_ip)
        if private_dns_name is not None:
            pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[bool]:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter(name="linkPublicIp")
    def link_public_ip(self) -> Optional['outputs.NicPrivateIpLinkPublicIp']:
        return pulumi.get(self, "link_public_ip")

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> Optional[str]:
        return pulumi.get(self, "private_dns_name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class NicPrivateIpLinkPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkPublicIpId":
            suggest = "link_public_ip_id"
        elif key == "publicDnsName":
            suggest = "public_dns_name"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "publicIpAccountId":
            suggest = "public_ip_account_id"
        elif key == "publicIpId":
            suggest = "public_ip_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicPrivateIpLinkPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicPrivateIpLinkPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicPrivateIpLinkPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_public_ip_id: Optional[str] = None,
                 public_dns_name: Optional[str] = None,
                 public_ip: Optional[str] = None,
                 public_ip_account_id: Optional[str] = None,
                 public_ip_id: Optional[str] = None):
        if link_public_ip_id is not None:
            pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_account_id is not None:
            pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)
        if public_ip_id is not None:
            pulumi.set(__self__, "public_ip_id", public_ip_id)

    @property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> Optional[str]:
        return pulumi.get(self, "link_public_ip_id")

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[str]:
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> Optional[str]:
        return pulumi.get(self, "public_ip_account_id")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> Optional[str]:
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class NicSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NicSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NicSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NicSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_id: Optional[str] = None,
                 security_group_name: Optional[str] = None):
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[str]:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[str]:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class NicTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class OutboundRuleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPortRange":
            suggest = "from_port_range"
        elif key == "ipProtocol":
            suggest = "ip_protocol"
        elif key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "securityGroupsMembers":
            suggest = "security_groups_members"
        elif key == "serviceIds":
            suggest = "service_ids"
        elif key == "toPortRange":
            suggest = "to_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutboundRuleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutboundRuleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutboundRuleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_port_range: Optional[int] = None,
                 ip_protocol: Optional[str] = None,
                 ip_ranges: Optional[Sequence[str]] = None,
                 security_groups_members: Optional[Sequence['outputs.OutboundRuleRuleSecurityGroupsMember']] = None,
                 service_ids: Optional[Sequence[str]] = None,
                 to_port_range: Optional[int] = None):
        if from_port_range is not None:
            pulumi.set(__self__, "from_port_range", from_port_range)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if security_groups_members is not None:
            pulumi.set(__self__, "security_groups_members", security_groups_members)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if to_port_range is not None:
            pulumi.set(__self__, "to_port_range", to_port_range)

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> Optional[int]:
        return pulumi.get(self, "from_port_range")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[str]:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Optional[Sequence['outputs.OutboundRuleRuleSecurityGroupsMember']]:
        return pulumi.get(self, "security_groups_members")

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "service_ids")

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> Optional[int]:
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class OutboundRuleRuleSecurityGroupsMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OutboundRuleRuleSecurityGroupsMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OutboundRuleRuleSecurityGroupsMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OutboundRuleRuleSecurityGroupsMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 security_group_id: Optional[str] = None,
                 security_group_name: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[str]:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[str]:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class PublicIpLinkTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class PublicIpTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class RouteTableLinkRouteTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkRouteTableId":
            suggest = "link_route_table_id"
        elif key == "routeTableId":
            suggest = "route_table_id"
        elif key == "routeTableToSubnetLinkId":
            suggest = "route_table_to_subnet_link_id"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteTableLinkRouteTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteTableLinkRouteTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteTableLinkRouteTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 link_route_table_id: Optional[str] = None,
                 main: Optional[bool] = None,
                 route_table_id: Optional[str] = None,
                 route_table_to_subnet_link_id: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        if link_route_table_id is not None:
            pulumi.set(__self__, "link_route_table_id", link_route_table_id)
        if main is not None:
            pulumi.set(__self__, "main", main)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if route_table_to_subnet_link_id is not None:
            pulumi.set(__self__, "route_table_to_subnet_link_id", route_table_to_subnet_link_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="linkRouteTableId")
    def link_route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "link_route_table_id")

    @property
    @pulumi.getter
    def main(self) -> Optional[bool]:
        return pulumi.get(self, "main")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter(name="routeTableToSubnetLinkId")
    def route_table_to_subnet_link_id(self) -> Optional[str]:
        return pulumi.get(self, "route_table_to_subnet_link_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class RouteTableRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationMethod":
            suggest = "creation_method"
        elif key == "destinationIpRange":
            suggest = "destination_ip_range"
        elif key == "destinationServiceId":
            suggest = "destination_service_id"
        elif key == "gatewayId":
            suggest = "gateway_id"
        elif key == "natServiceId":
            suggest = "nat_service_id"
        elif key == "netAccessPointId":
            suggest = "net_access_point_id"
        elif key == "netPeeringId":
            suggest = "net_peering_id"
        elif key == "nicId":
            suggest = "nic_id"
        elif key == "vmAccountId":
            suggest = "vm_account_id"
        elif key == "vmId":
            suggest = "vm_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteTableRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteTableRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteTableRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_method: Optional[str] = None,
                 destination_ip_range: Optional[str] = None,
                 destination_service_id: Optional[str] = None,
                 gateway_id: Optional[str] = None,
                 nat_service_id: Optional[str] = None,
                 net_access_point_id: Optional[str] = None,
                 net_peering_id: Optional[str] = None,
                 nic_id: Optional[str] = None,
                 state: Optional[str] = None,
                 vm_account_id: Optional[str] = None,
                 vm_id: Optional[str] = None):
        if creation_method is not None:
            pulumi.set(__self__, "creation_method", creation_method)
        if destination_ip_range is not None:
            pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        if destination_service_id is not None:
            pulumi.set(__self__, "destination_service_id", destination_service_id)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if nat_service_id is not None:
            pulumi.set(__self__, "nat_service_id", nat_service_id)
        if net_access_point_id is not None:
            pulumi.set(__self__, "net_access_point_id", net_access_point_id)
        if net_peering_id is not None:
            pulumi.set(__self__, "net_peering_id", net_peering_id)
        if nic_id is not None:
            pulumi.set(__self__, "nic_id", nic_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vm_account_id is not None:
            pulumi.set(__self__, "vm_account_id", vm_account_id)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="creationMethod")
    def creation_method(self) -> Optional[str]:
        return pulumi.get(self, "creation_method")

    @property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> Optional[str]:
        return pulumi.get(self, "destination_ip_range")

    @property
    @pulumi.getter(name="destinationServiceId")
    def destination_service_id(self) -> Optional[str]:
        return pulumi.get(self, "destination_service_id")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> Optional[str]:
        return pulumi.get(self, "nat_service_id")

    @property
    @pulumi.getter(name="netAccessPointId")
    def net_access_point_id(self) -> Optional[str]:
        return pulumi.get(self, "net_access_point_id")

    @property
    @pulumi.getter(name="netPeeringId")
    def net_peering_id(self) -> Optional[str]:
        return pulumi.get(self, "net_peering_id")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> Optional[str]:
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> Optional[str]:
        return pulumi.get(self, "vm_account_id")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[str]:
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class RouteTableRoutePropagatingVirtualGateway(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "virtualGatewayId":
            suggest = "virtual_gateway_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteTableRoutePropagatingVirtualGateway. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteTableRoutePropagatingVirtualGateway.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteTableRoutePropagatingVirtualGateway.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 virtual_gateway_id: Optional[str] = None):
        if virtual_gateway_id is not None:
            pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)

    @property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "virtual_gateway_id")


@pulumi.output_type
class RouteTableTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SecurityGroupInboundRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPortRange":
            suggest = "from_port_range"
        elif key == "ipProtocol":
            suggest = "ip_protocol"
        elif key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "securityGroupsMembers":
            suggest = "security_groups_members"
        elif key == "toPortRange":
            suggest = "to_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityGroupInboundRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityGroupInboundRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityGroupInboundRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_port_range: Optional[int] = None,
                 ip_protocol: Optional[str] = None,
                 ip_ranges: Optional[Sequence[str]] = None,
                 security_groups_members: Optional[Sequence[Mapping[str, Any]]] = None,
                 to_port_range: Optional[int] = None):
        if from_port_range is not None:
            pulumi.set(__self__, "from_port_range", from_port_range)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if security_groups_members is not None:
            pulumi.set(__self__, "security_groups_members", security_groups_members)
        if to_port_range is not None:
            pulumi.set(__self__, "to_port_range", to_port_range)

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> Optional[int]:
        return pulumi.get(self, "from_port_range")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[str]:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Optional[Sequence[Mapping[str, Any]]]:
        return pulumi.get(self, "security_groups_members")

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> Optional[int]:
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class SecurityGroupOutboundRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPortRange":
            suggest = "from_port_range"
        elif key == "ipProtocol":
            suggest = "ip_protocol"
        elif key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "securityGroupsMembers":
            suggest = "security_groups_members"
        elif key == "toPortRange":
            suggest = "to_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityGroupOutboundRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityGroupOutboundRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityGroupOutboundRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_port_range: Optional[int] = None,
                 ip_protocol: Optional[str] = None,
                 ip_ranges: Optional[Sequence[str]] = None,
                 security_groups_members: Optional[Sequence[Mapping[str, Any]]] = None,
                 to_port_range: Optional[int] = None):
        if from_port_range is not None:
            pulumi.set(__self__, "from_port_range", from_port_range)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if security_groups_members is not None:
            pulumi.set(__self__, "security_groups_members", security_groups_members)
        if to_port_range is not None:
            pulumi.set(__self__, "to_port_range", to_port_range)

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> Optional[int]:
        return pulumi.get(self, "from_port_range")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[str]:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Optional[Sequence[Mapping[str, Any]]]:
        return pulumi.get(self, "security_groups_members")

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> Optional[int]:
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class SecurityGroupRuleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPortRange":
            suggest = "from_port_range"
        elif key == "ipProtocol":
            suggest = "ip_protocol"
        elif key == "ipRanges":
            suggest = "ip_ranges"
        elif key == "securityGroupsMembers":
            suggest = "security_groups_members"
        elif key == "serviceIds":
            suggest = "service_ids"
        elif key == "toPortRange":
            suggest = "to_port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityGroupRuleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityGroupRuleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityGroupRuleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_port_range: Optional[int] = None,
                 ip_protocol: Optional[str] = None,
                 ip_ranges: Optional[Sequence[str]] = None,
                 security_groups_members: Optional[Sequence['outputs.SecurityGroupRuleRuleSecurityGroupsMember']] = None,
                 service_ids: Optional[Sequence[str]] = None,
                 to_port_range: Optional[int] = None):
        if from_port_range is not None:
            pulumi.set(__self__, "from_port_range", from_port_range)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if security_groups_members is not None:
            pulumi.set(__self__, "security_groups_members", security_groups_members)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if to_port_range is not None:
            pulumi.set(__self__, "to_port_range", to_port_range)

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> Optional[int]:
        return pulumi.get(self, "from_port_range")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[str]:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Optional[Sequence['outputs.SecurityGroupRuleRuleSecurityGroupsMember']]:
        return pulumi.get(self, "security_groups_members")

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "service_ids")

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> Optional[int]:
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class SecurityGroupRuleRuleSecurityGroupsMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityGroupRuleRuleSecurityGroupsMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityGroupRuleRuleSecurityGroupsMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityGroupRuleRuleSecurityGroupsMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 security_group_id: Optional[str] = None,
                 security_group_name: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[str]:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[str]:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class SecurityGroupTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SnapshotAttributesPermissionsToCreateVolumeAdditions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountIds":
            suggest = "account_ids"
        elif key == "globalPermission":
            suggest = "global_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnapshotAttributesPermissionsToCreateVolumeAdditions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnapshotAttributesPermissionsToCreateVolumeAdditions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnapshotAttributesPermissionsToCreateVolumeAdditions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_ids: Optional[Sequence[str]] = None,
                 global_permission: Optional[bool] = None):
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[bool]:
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class SnapshotAttributesPermissionsToCreateVolumeRemoval(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountIds":
            suggest = "account_ids"
        elif key == "globalPermission":
            suggest = "global_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnapshotAttributesPermissionsToCreateVolumeRemoval. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnapshotAttributesPermissionsToCreateVolumeRemoval.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnapshotAttributesPermissionsToCreateVolumeRemoval.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_ids: Optional[Sequence[str]] = None,
                 global_permission: Optional[bool] = None):
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[bool]:
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class SnapshotExportTaskOsuExport(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskImageFormat":
            suggest = "disk_image_format"
        elif key == "osuBucket":
            suggest = "osu_bucket"
        elif key == "osuApiKeys":
            suggest = "osu_api_keys"
        elif key == "osuPrefix":
            suggest = "osu_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnapshotExportTaskOsuExport. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnapshotExportTaskOsuExport.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnapshotExportTaskOsuExport.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_image_format: str,
                 osu_bucket: str,
                 osu_api_keys: Optional[Sequence['outputs.SnapshotExportTaskOsuExportOsuApiKey']] = None,
                 osu_prefix: Optional[str] = None):
        pulumi.set(__self__, "disk_image_format", disk_image_format)
        pulumi.set(__self__, "osu_bucket", osu_bucket)
        if osu_api_keys is not None:
            pulumi.set(__self__, "osu_api_keys", osu_api_keys)
        if osu_prefix is not None:
            pulumi.set(__self__, "osu_prefix", osu_prefix)

    @property
    @pulumi.getter(name="diskImageFormat")
    def disk_image_format(self) -> str:
        return pulumi.get(self, "disk_image_format")

    @property
    @pulumi.getter(name="osuBucket")
    def osu_bucket(self) -> str:
        return pulumi.get(self, "osu_bucket")

    @property
    @pulumi.getter(name="osuApiKeys")
    def osu_api_keys(self) -> Optional[Sequence['outputs.SnapshotExportTaskOsuExportOsuApiKey']]:
        return pulumi.get(self, "osu_api_keys")

    @property
    @pulumi.getter(name="osuPrefix")
    def osu_prefix(self) -> Optional[str]:
        return pulumi.get(self, "osu_prefix")


@pulumi.output_type
class SnapshotExportTaskOsuExportOsuApiKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiKeyId":
            suggest = "api_key_id"
        elif key == "secretKey":
            suggest = "secret_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnapshotExportTaskOsuExportOsuApiKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnapshotExportTaskOsuExportOsuApiKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnapshotExportTaskOsuExportOsuApiKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_key_id: str,
                 secret_key: str):
        pulumi.set(__self__, "api_key_id", api_key_id)
        pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> str:
        return pulumi.get(self, "api_key_id")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> str:
        return pulumi.get(self, "secret_key")


@pulumi.output_type
class SnapshotExportTaskTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SnapshotPermissionsToCreateVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "globalPermission":
            suggest = "global_permission"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnapshotPermissionsToCreateVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnapshotPermissionsToCreateVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnapshotPermissionsToCreateVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 global_permission: Optional[bool] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[bool]:
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class SnapshotTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class SubnetTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class TagTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TagTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TagTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TagTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: Optional[str] = None,
                 resource_id: Optional[str] = None,
                 resource_type: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VirtualGatewayLinkNetToVirtualGatewayLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "netId":
            suggest = "net_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualGatewayLinkNetToVirtualGatewayLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualGatewayLinkNetToVirtualGatewayLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualGatewayLinkNetToVirtualGatewayLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 net_id: Optional[str] = None,
                 state: Optional[str] = None):
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[str]:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class VirtualGatewayNetToVirtualGatewayLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "netId":
            suggest = "net_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VirtualGatewayNetToVirtualGatewayLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VirtualGatewayNetToVirtualGatewayLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VirtualGatewayNetToVirtualGatewayLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 net_id: Optional[str] = None,
                 state: Optional[str] = None):
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[str]:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class VirtualGatewayTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VmBlockDeviceMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceName":
            suggest = "device_name"
        elif key == "noDevice":
            suggest = "no_device"
        elif key == "virtualDeviceName":
            suggest = "virtual_device_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmBlockDeviceMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmBlockDeviceMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmBlockDeviceMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bsu: Optional['outputs.VmBlockDeviceMappingBsu'] = None,
                 device_name: Optional[str] = None,
                 no_device: Optional[str] = None,
                 virtual_device_name: Optional[str] = None):
        if bsu is not None:
            pulumi.set(__self__, "bsu", bsu)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if no_device is not None:
            pulumi.set(__self__, "no_device", no_device)
        if virtual_device_name is not None:
            pulumi.set(__self__, "virtual_device_name", virtual_device_name)

    @property
    @pulumi.getter
    def bsu(self) -> Optional['outputs.VmBlockDeviceMappingBsu']:
        return pulumi.get(self, "bsu")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="noDevice")
    def no_device(self) -> Optional[str]:
        return pulumi.get(self, "no_device")

    @property
    @pulumi.getter(name="virtualDeviceName")
    def virtual_device_name(self) -> Optional[str]:
        return pulumi.get(self, "virtual_device_name")


@pulumi.output_type
class VmBlockDeviceMappingBsu(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "snapshotId":
            suggest = "snapshot_id"
        elif key == "volumeSize":
            suggest = "volume_size"
        elif key == "volumeType":
            suggest = "volume_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmBlockDeviceMappingBsu. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmBlockDeviceMappingBsu.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmBlockDeviceMappingBsu.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[bool] = None,
                 iops: Optional[int] = None,
                 snapshot_id: Optional[str] = None,
                 volume_size: Optional[int] = None,
                 volume_type: Optional[str] = None):
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[bool]:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter
    def iops(self) -> Optional[int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[int]:
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[str]:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class VmBlockDeviceMappingsCreated(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceName":
            suggest = "device_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmBlockDeviceMappingsCreated. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmBlockDeviceMappingsCreated.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmBlockDeviceMappingsCreated.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bsu: Optional['outputs.VmBlockDeviceMappingsCreatedBsu'] = None,
                 device_name: Optional[str] = None):
        if bsu is not None:
            pulumi.set(__self__, "bsu", bsu)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)

    @property
    @pulumi.getter
    def bsu(self) -> Optional['outputs.VmBlockDeviceMappingsCreatedBsu']:
        return pulumi.get(self, "bsu")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        return pulumi.get(self, "device_name")


@pulumi.output_type
class VmBlockDeviceMappingsCreatedBsu(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "linkDate":
            suggest = "link_date"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmBlockDeviceMappingsCreatedBsu. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmBlockDeviceMappingsCreatedBsu.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmBlockDeviceMappingsCreatedBsu.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[bool] = None,
                 link_date: Optional[str] = None,
                 state: Optional[int] = None,
                 volume_id: Optional[float] = None):
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if link_date is not None:
            pulumi.set(__self__, "link_date", link_date)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[bool]:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter(name="linkDate")
    def link_date(self) -> Optional[str]:
        return pulumi.get(self, "link_date")

    @property
    @pulumi.getter
    def state(self) -> Optional[int]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[float]:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class VmNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceNumber":
            suggest = "device_number"
        elif key == "accountId":
            suggest = "account_id"
        elif key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "isSourceDestChecked":
            suggest = "is_source_dest_checked"
        elif key == "linkNic":
            suggest = "link_nic"
        elif key == "linkPublicIps":
            suggest = "link_public_ips"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "netId":
            suggest = "net_id"
        elif key == "nicId":
            suggest = "nic_id"
        elif key == "privateDnsName":
            suggest = "private_dns_name"
        elif key == "privateIps":
            suggest = "private_ips"
        elif key == "secondaryPrivateIpCount":
            suggest = "secondary_private_ip_count"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_number: int,
                 account_id: Optional[str] = None,
                 delete_on_vm_deletion: Optional[bool] = None,
                 description: Optional[str] = None,
                 is_source_dest_checked: Optional[bool] = None,
                 link_nic: Optional['outputs.VmNicLinkNic'] = None,
                 link_public_ips: Optional[Sequence['outputs.VmNicLinkPublicIp']] = None,
                 mac_address: Optional[str] = None,
                 net_id: Optional[str] = None,
                 nic_id: Optional[str] = None,
                 private_dns_name: Optional[str] = None,
                 private_ips: Optional[Sequence['outputs.VmNicPrivateIp']] = None,
                 secondary_private_ip_count: Optional[int] = None,
                 security_group_ids: Optional[Sequence[str]] = None,
                 security_groups: Optional[Sequence['outputs.VmNicSecurityGroup']] = None,
                 state: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        pulumi.set(__self__, "device_number", device_number)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_source_dest_checked is not None:
            pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        if link_nic is not None:
            pulumi.set(__self__, "link_nic", link_nic)
        if link_public_ips is not None:
            pulumi.set(__self__, "link_public_ips", link_public_ips)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if nic_id is not None:
            pulumi.set(__self__, "nic_id", nic_id)
        if private_dns_name is not None:
            pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)
        if secondary_private_ip_count is not None:
            pulumi.set(__self__, "secondary_private_ip_count", secondary_private_ip_count)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> int:
        return pulumi.get(self, "device_number")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[bool]:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> Optional[bool]:
        return pulumi.get(self, "is_source_dest_checked")

    @property
    @pulumi.getter(name="linkNic")
    def link_nic(self) -> Optional['outputs.VmNicLinkNic']:
        return pulumi.get(self, "link_nic")

    @property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Optional[Sequence['outputs.VmNicLinkPublicIp']]:
        return pulumi.get(self, "link_public_ips")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[str]:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> Optional[str]:
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> Optional[str]:
        return pulumi.get(self, "private_dns_name")

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[Sequence['outputs.VmNicPrivateIp']]:
        return pulumi.get(self, "private_ips")

    @property
    @pulumi.getter(name="secondaryPrivateIpCount")
    def secondary_private_ip_count(self) -> Optional[int]:
        return pulumi.get(self, "secondary_private_ip_count")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence['outputs.VmNicSecurityGroup']]:
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class VmNicLinkNic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "deviceNumber":
            suggest = "device_number"
        elif key == "linkNicId":
            suggest = "link_nic_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmNicLinkNic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmNicLinkNic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmNicLinkNic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[bool] = None,
                 device_number: Optional[str] = None,
                 link_nic_id: Optional[str] = None,
                 state: Optional[str] = None):
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if device_number is not None:
            pulumi.set(__self__, "device_number", device_number)
        if link_nic_id is not None:
            pulumi.set(__self__, "link_nic_id", link_nic_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[bool]:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> Optional[str]:
        return pulumi.get(self, "device_number")

    @property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> Optional[str]:
        return pulumi.get(self, "link_nic_id")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class VmNicLinkPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicDnsName":
            suggest = "public_dns_name"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "publicIpAccountId":
            suggest = "public_ip_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmNicLinkPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmNicLinkPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmNicLinkPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_dns_name: Optional[str] = None,
                 public_ip: Optional[str] = None,
                 public_ip_account_id: Optional[str] = None):
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_account_id is not None:
            pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[str]:
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> Optional[str]:
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class VmNicPrivateIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isPrimary":
            suggest = "is_primary"
        elif key == "linkPublicIps":
            suggest = "link_public_ips"
        elif key == "privateDnsName":
            suggest = "private_dns_name"
        elif key == "privateIp":
            suggest = "private_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmNicPrivateIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmNicPrivateIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmNicPrivateIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 is_primary: Optional[bool] = None,
                 link_public_ips: Optional[Sequence['outputs.VmNicPrivateIpLinkPublicIp']] = None,
                 private_dns_name: Optional[str] = None,
                 private_ip: Optional[str] = None):
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if link_public_ips is not None:
            pulumi.set(__self__, "link_public_ips", link_public_ips)
        if private_dns_name is not None:
            pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[bool]:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Optional[Sequence['outputs.VmNicPrivateIpLinkPublicIp']]:
        return pulumi.get(self, "link_public_ips")

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> Optional[str]:
        return pulumi.get(self, "private_dns_name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class VmNicPrivateIpLinkPublicIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicDnsName":
            suggest = "public_dns_name"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "publicIpAccountId":
            suggest = "public_ip_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmNicPrivateIpLinkPublicIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmNicPrivateIpLinkPublicIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmNicPrivateIpLinkPublicIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_dns_name: Optional[str] = None,
                 public_ip: Optional[str] = None,
                 public_ip_account_id: Optional[str] = None):
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_account_id is not None:
            pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[str]:
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> Optional[str]:
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class VmNicSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmNicSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmNicSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmNicSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_id: Optional[str] = None,
                 security_group_name: Optional[str] = None):
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[str]:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[str]:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class VmSecurityGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "securityGroupName":
            suggest = "security_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmSecurityGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmSecurityGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmSecurityGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_id: Optional[str] = None,
                 security_group_name: Optional[str] = None):
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[str]:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[str]:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class VmTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VolumeLinkedVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deleteOnVmDeletion":
            suggest = "delete_on_vm_deletion"
        elif key == "deviceName":
            suggest = "device_name"
        elif key == "vmId":
            suggest = "vm_id"
        elif key == "volumeId":
            suggest = "volume_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VolumeLinkedVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VolumeLinkedVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VolumeLinkedVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[bool] = None,
                 device_name: Optional[str] = None,
                 state: Optional[str] = None,
                 vm_id: Optional[str] = None,
                 volume_id: Optional[str] = None):
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[bool]:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[str]:
        return pulumi.get(self, "vm_id")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class VolumeTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VpnConnectionRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationIpRange":
            suggest = "destination_ip_range"
        elif key == "routeType":
            suggest = "route_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnConnectionRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnConnectionRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnConnectionRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_ip_range: Optional[str] = None,
                 route_type: Optional[str] = None,
                 state: Optional[str] = None):
        if destination_ip_range is not None:
            pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        if route_type is not None:
            pulumi.set(__self__, "route_type", route_type)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> Optional[str]:
        return pulumi.get(self, "destination_ip_range")

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> Optional[str]:
        return pulumi.get(self, "route_type")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")


@pulumi.output_type
class VpnConnectionTag(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class VpnConnectionVgwTelemetry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptedRouteCount":
            suggest = "accepted_route_count"
        elif key == "lastStateChangeDate":
            suggest = "last_state_change_date"
        elif key == "outsideIpAddress":
            suggest = "outside_ip_address"
        elif key == "stateDescription":
            suggest = "state_description"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpnConnectionVgwTelemetry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpnConnectionVgwTelemetry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpnConnectionVgwTelemetry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accepted_route_count: Optional[int] = None,
                 last_state_change_date: Optional[str] = None,
                 outside_ip_address: Optional[str] = None,
                 state: Optional[str] = None,
                 state_description: Optional[str] = None):
        if accepted_route_count is not None:
            pulumi.set(__self__, "accepted_route_count", accepted_route_count)
        if last_state_change_date is not None:
            pulumi.set(__self__, "last_state_change_date", last_state_change_date)
        if outside_ip_address is not None:
            pulumi.set(__self__, "outside_ip_address", outside_ip_address)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_description is not None:
            pulumi.set(__self__, "state_description", state_description)

    @property
    @pulumi.getter(name="acceptedRouteCount")
    def accepted_route_count(self) -> Optional[int]:
        return pulumi.get(self, "accepted_route_count")

    @property
    @pulumi.getter(name="lastStateChangeDate")
    def last_state_change_date(self) -> Optional[str]:
        return pulumi.get(self, "last_state_change_date")

    @property
    @pulumi.getter(name="outsideIpAddress")
    def outside_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "outside_ip_address")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateDescription")
    def state_description(self) -> Optional[str]:
        return pulumi.get(self, "state_description")


@pulumi.output_type
class GetAccessKeyFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAccessKeysAccessKeyResult(dict):
    def __init__(__self__, *,
                 access_key_id: str,
                 creation_date: str,
                 expiration_date: str,
                 last_modification_date: str,
                 state: str):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "expiration_date", expiration_date)
        pulumi.set(__self__, "last_modification_date", last_modification_date)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> str:
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> str:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> str:
        return pulumi.get(self, "last_modification_date")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetAccessKeysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAccountsAccountResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 additional_emails: Sequence[str],
                 city: str,
                 company_name: str,
                 country: str,
                 customer_id: str,
                 email: str,
                 first_name: str,
                 job_title: str,
                 last_name: str,
                 mobile_number: str,
                 phone_number: str,
                 state_province: str,
                 vat_number: str,
                 zip_code: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "additional_emails", additional_emails)
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "company_name", company_name)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "first_name", first_name)
        pulumi.set(__self__, "job_title", job_title)
        pulumi.set(__self__, "last_name", last_name)
        pulumi.set(__self__, "mobile_number", mobile_number)
        pulumi.set(__self__, "phone_number", phone_number)
        pulumi.set(__self__, "state_province", state_province)
        pulumi.set(__self__, "vat_number", vat_number)
        pulumi.set(__self__, "zip_code", zip_code)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="additionalEmails")
    def additional_emails(self) -> Sequence[str]:
        return pulumi.get(self, "additional_emails")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> str:
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> str:
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="jobTitle")
    def job_title(self) -> str:
        return pulumi.get(self, "job_title")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="mobileNumber")
    def mobile_number(self) -> str:
        return pulumi.get(self, "mobile_number")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter(name="stateProvince")
    def state_province(self) -> str:
        return pulumi.get(self, "state_province")

    @property
    @pulumi.getter(name="vatNumber")
    def vat_number(self) -> str:
        return pulumi.get(self, "vat_number")

    @property
    @pulumi.getter(name="zipCode")
    def zip_code(self) -> str:
        return pulumi.get(self, "zip_code")


@pulumi.output_type
class GetApiAccessRuleFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApiAccessRulesApiAccessRuleResult(dict):
    def __init__(__self__, *,
                 api_access_rule_id: str,
                 ca_ids: Sequence[str],
                 cns: Sequence[str],
                 description: str,
                 ip_ranges: Sequence[str]):
        pulumi.set(__self__, "api_access_rule_id", api_access_rule_id)
        pulumi.set(__self__, "ca_ids", ca_ids)
        pulumi.set(__self__, "cns", cns)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ip_ranges", ip_ranges)

    @property
    @pulumi.getter(name="apiAccessRuleId")
    def api_access_rule_id(self) -> str:
        return pulumi.get(self, "api_access_rule_id")

    @property
    @pulumi.getter(name="caIds")
    def ca_ids(self) -> Sequence[str]:
        return pulumi.get(self, "ca_ids")

    @property
    @pulumi.getter
    def cns(self) -> Sequence[str]:
        return pulumi.get(self, "cns")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")


@pulumi.output_type
class GetApiAccessRulesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCaFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetCasCaResult(dict):
    def __init__(__self__, *,
                 ca_fingerprint: str,
                 ca_id: str,
                 description: str):
        pulumi.set(__self__, "ca_fingerprint", ca_fingerprint)
        pulumi.set(__self__, "ca_id", ca_id)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="caFingerprint")
    def ca_fingerprint(self) -> str:
        return pulumi.get(self, "ca_fingerprint")

    @property
    @pulumi.getter(name="caId")
    def ca_id(self) -> str:
        return pulumi.get(self, "ca_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")


@pulumi.output_type
class GetCasFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetClientGatewayFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetClientGatewayTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClientGatewaysClientGatewayResult(dict):
    def __init__(__self__, *,
                 bgp_asn: int,
                 connection_type: str,
                 public_ip: str,
                 state: str,
                 tags: Sequence['outputs.GetClientGatewaysClientGatewayTagResult'],
                 client_gateway_id: Optional[str] = None):
        pulumi.set(__self__, "bgp_asn", bgp_asn)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        if client_gateway_id is not None:
            pulumi.set(__self__, "client_gateway_id", client_gateway_id)

    @property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> int:
        return pulumi.get(self, "bgp_asn")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetClientGatewaysClientGatewayTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="clientGatewayId")
    def client_gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "client_gateway_id")


@pulumi.output_type
class GetClientGatewaysClientGatewayTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetClientGatewaysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDhcpOptionFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetDhcpOptionTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDhcpOptionsDhcpOptionResult(dict):
    def __init__(__self__, *,
                 default: bool,
                 dhcp_options_set_id: str,
                 domain_name: str,
                 domain_name_servers: Sequence[str],
                 log_servers: Sequence[str],
                 ntp_servers: Sequence[str],
                 tags: Sequence['outputs.GetDhcpOptionsDhcpOptionTagResult']):
        pulumi.set(__self__, "default", default)
        pulumi.set(__self__, "dhcp_options_set_id", dhcp_options_set_id)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "domain_name_servers", domain_name_servers)
        pulumi.set(__self__, "log_servers", log_servers)
        pulumi.set(__self__, "ntp_servers", ntp_servers)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def default(self) -> bool:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="dhcpOptionsSetId")
    def dhcp_options_set_id(self) -> str:
        return pulumi.get(self, "dhcp_options_set_id")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="domainNameServers")
    def domain_name_servers(self) -> Sequence[str]:
        return pulumi.get(self, "domain_name_servers")

    @property
    @pulumi.getter(name="logServers")
    def log_servers(self) -> Sequence[str]:
        return pulumi.get(self, "log_servers")

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Sequence[str]:
        return pulumi.get(self, "ntp_servers")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDhcpOptionsDhcpOptionTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetDhcpOptionsDhcpOptionTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDhcpOptionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetFlexibleGpuCatalogFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetFlexibleGpuCatalogFlexibleGpuCatalogResult(dict):
    def __init__(__self__, *,
                 generations: Sequence[str],
                 max_cpu: int,
                 max_ram: int,
                 model_name: str,
                 v_ram: int):
        pulumi.set(__self__, "generations", generations)
        pulumi.set(__self__, "max_cpu", max_cpu)
        pulumi.set(__self__, "max_ram", max_ram)
        pulumi.set(__self__, "model_name", model_name)
        pulumi.set(__self__, "v_ram", v_ram)

    @property
    @pulumi.getter
    def generations(self) -> Sequence[str]:
        return pulumi.get(self, "generations")

    @property
    @pulumi.getter(name="maxCpu")
    def max_cpu(self) -> int:
        return pulumi.get(self, "max_cpu")

    @property
    @pulumi.getter(name="maxRam")
    def max_ram(self) -> int:
        return pulumi.get(self, "max_ram")

    @property
    @pulumi.getter(name="modelName")
    def model_name(self) -> str:
        return pulumi.get(self, "model_name")

    @property
    @pulumi.getter(name="vRam")
    def v_ram(self) -> int:
        return pulumi.get(self, "v_ram")


@pulumi.output_type
class GetFlexibleGpuFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetFlexibleGpusFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetFlexibleGpusFlexibleGpusResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: bool,
                 flexible_gpu_id: str,
                 generation: str,
                 model_name: str,
                 state: str,
                 subregion_name: str,
                 vm_id: str):
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "flexible_gpu_id", flexible_gpu_id)
        pulumi.set(__self__, "generation", generation)
        pulumi.set(__self__, "model_name", model_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subregion_name", subregion_name)
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter(name="flexibleGpuId")
    def flexible_gpu_id(self) -> str:
        return pulumi.get(self, "flexible_gpu_id")

    @property
    @pulumi.getter
    def generation(self) -> str:
        return pulumi.get(self, "generation")

    @property
    @pulumi.getter(name="modelName")
    def model_name(self) -> str:
        return pulumi.get(self, "model_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> str:
        return pulumi.get(self, "subregion_name")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetImageBlockDeviceMappingResult(dict):
    def __init__(__self__, *,
                 bsus: Sequence['outputs.GetImageBlockDeviceMappingBsusResult'],
                 device_name: str,
                 virtual_device_name: str):
        pulumi.set(__self__, "bsus", bsus)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "virtual_device_name", virtual_device_name)

    @property
    @pulumi.getter
    def bsus(self) -> Sequence['outputs.GetImageBlockDeviceMappingBsusResult']:
        return pulumi.get(self, "bsus")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="virtualDeviceName")
    def virtual_device_name(self) -> str:
        return pulumi.get(self, "virtual_device_name")


@pulumi.output_type
class GetImageBlockDeviceMappingBsusResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: bool,
                 iops: int,
                 snapshot_id: str,
                 volume_size: int,
                 volume_type: str):
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter
    def iops(self) -> int:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> int:
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetImageExportTaskFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetImageExportTaskOsuExportResult(dict):
    def __init__(__self__, *,
                 disk_image_format: str,
                 osu_bucket: str,
                 osu_manifest_url: str,
                 osu_prefix: str):
        pulumi.set(__self__, "disk_image_format", disk_image_format)
        pulumi.set(__self__, "osu_bucket", osu_bucket)
        pulumi.set(__self__, "osu_manifest_url", osu_manifest_url)
        pulumi.set(__self__, "osu_prefix", osu_prefix)

    @property
    @pulumi.getter(name="diskImageFormat")
    def disk_image_format(self) -> str:
        return pulumi.get(self, "disk_image_format")

    @property
    @pulumi.getter(name="osuBucket")
    def osu_bucket(self) -> str:
        return pulumi.get(self, "osu_bucket")

    @property
    @pulumi.getter(name="osuManifestUrl")
    def osu_manifest_url(self) -> str:
        return pulumi.get(self, "osu_manifest_url")

    @property
    @pulumi.getter(name="osuPrefix")
    def osu_prefix(self) -> str:
        return pulumi.get(self, "osu_prefix")


@pulumi.output_type
class GetImageExportTaskTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageExportTasksFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetImageExportTasksImageExportTaskResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 image_id: str,
                 osu_exports: Sequence['outputs.GetImageExportTasksImageExportTaskOsuExportResult'],
                 progress: int,
                 state: str,
                 tags: Sequence['outputs.GetImageExportTasksImageExportTaskTagResult'],
                 task_id: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "osu_exports", osu_exports)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "task_id", task_id)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="osuExports")
    def osu_exports(self) -> Sequence['outputs.GetImageExportTasksImageExportTaskOsuExportResult']:
        return pulumi.get(self, "osu_exports")

    @property
    @pulumi.getter
    def progress(self) -> int:
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetImageExportTasksImageExportTaskTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> str:
        return pulumi.get(self, "task_id")


@pulumi.output_type
class GetImageExportTasksImageExportTaskOsuExportResult(dict):
    def __init__(__self__, *,
                 disk_image_format: str,
                 osu_bucket: str,
                 osu_manifest_url: str,
                 osu_prefix: str):
        pulumi.set(__self__, "disk_image_format", disk_image_format)
        pulumi.set(__self__, "osu_bucket", osu_bucket)
        pulumi.set(__self__, "osu_manifest_url", osu_manifest_url)
        pulumi.set(__self__, "osu_prefix", osu_prefix)

    @property
    @pulumi.getter(name="diskImageFormat")
    def disk_image_format(self) -> str:
        return pulumi.get(self, "disk_image_format")

    @property
    @pulumi.getter(name="osuBucket")
    def osu_bucket(self) -> str:
        return pulumi.get(self, "osu_bucket")

    @property
    @pulumi.getter(name="osuManifestUrl")
    def osu_manifest_url(self) -> str:
        return pulumi.get(self, "osu_manifest_url")

    @property
    @pulumi.getter(name="osuPrefix")
    def osu_prefix(self) -> str:
        return pulumi.get(self, "osu_prefix")


@pulumi.output_type
class GetImageExportTasksImageExportTaskTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetImagePermissionsToLaunchResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 global_permission: bool):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> bool:
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class GetImageStateCommentResult(dict):
    def __init__(__self__, *,
                 state_code: str,
                 state_message: str):
        pulumi.set(__self__, "state_code", state_code)
        pulumi.set(__self__, "state_message", state_message)

    @property
    @pulumi.getter(name="stateCode")
    def state_code(self) -> str:
        return pulumi.get(self, "state_code")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> str:
        return pulumi.get(self, "state_message")


@pulumi.output_type
class GetImageTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImagesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetImagesImageResult(dict):
    def __init__(__self__, *,
                 account_alias: str,
                 account_id: str,
                 architecture: str,
                 block_device_mappings: Sequence['outputs.GetImagesImageBlockDeviceMappingResult'],
                 creation_date: str,
                 description: str,
                 file_location: str,
                 image_id: str,
                 image_name: str,
                 image_type: str,
                 permissions_to_launches: Sequence['outputs.GetImagesImagePermissionsToLaunchResult'],
                 product_codes: Sequence[str],
                 root_device_name: str,
                 root_device_type: str,
                 state: str,
                 state_comments: Sequence['outputs.GetImagesImageStateCommentResult'],
                 tags: Sequence['outputs.GetImagesImageTagResult']):
        pulumi.set(__self__, "account_alias", account_alias)
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "block_device_mappings", block_device_mappings)
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "file_location", file_location)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "image_type", image_type)
        pulumi.set(__self__, "permissions_to_launches", permissions_to_launches)
        pulumi.set(__self__, "product_codes", product_codes)
        pulumi.set(__self__, "root_device_name", root_device_name)
        pulumi.set(__self__, "root_device_type", root_device_type)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "state_comments", state_comments)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accountAlias")
    def account_alias(self) -> str:
        return pulumi.get(self, "account_alias")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def architecture(self) -> str:
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="blockDeviceMappings")
    def block_device_mappings(self) -> Sequence['outputs.GetImagesImageBlockDeviceMappingResult']:
        return pulumi.get(self, "block_device_mappings")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> str:
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fileLocation")
    def file_location(self) -> str:
        return pulumi.get(self, "file_location")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> str:
        return pulumi.get(self, "image_type")

    @property
    @pulumi.getter(name="permissionsToLaunches")
    def permissions_to_launches(self) -> Sequence['outputs.GetImagesImagePermissionsToLaunchResult']:
        return pulumi.get(self, "permissions_to_launches")

    @property
    @pulumi.getter(name="productCodes")
    def product_codes(self) -> Sequence[str]:
        return pulumi.get(self, "product_codes")

    @property
    @pulumi.getter(name="rootDeviceName")
    def root_device_name(self) -> str:
        return pulumi.get(self, "root_device_name")

    @property
    @pulumi.getter(name="rootDeviceType")
    def root_device_type(self) -> str:
        return pulumi.get(self, "root_device_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateComments")
    def state_comments(self) -> Sequence['outputs.GetImagesImageStateCommentResult']:
        return pulumi.get(self, "state_comments")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetImagesImageTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetImagesImageBlockDeviceMappingResult(dict):
    def __init__(__self__, *,
                 bsus: Sequence['outputs.GetImagesImageBlockDeviceMappingBsusResult'],
                 device_name: str,
                 virtual_device_name: str):
        pulumi.set(__self__, "bsus", bsus)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "virtual_device_name", virtual_device_name)

    @property
    @pulumi.getter
    def bsus(self) -> Sequence['outputs.GetImagesImageBlockDeviceMappingBsusResult']:
        return pulumi.get(self, "bsus")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="virtualDeviceName")
    def virtual_device_name(self) -> str:
        return pulumi.get(self, "virtual_device_name")


@pulumi.output_type
class GetImagesImageBlockDeviceMappingBsusResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: bool,
                 iops: int,
                 snapshot_id: str,
                 volume_size: int,
                 volume_type: str):
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter
    def iops(self) -> int:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> int:
        return pulumi.get(self, "volume_size")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetImagesImagePermissionsToLaunchResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 global_permission: bool):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> bool:
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class GetImagesImageStateCommentResult(dict):
    def __init__(__self__, *,
                 state_code: str,
                 state_message: str):
        pulumi.set(__self__, "state_code", state_code)
        pulumi.set(__self__, "state_message", state_message)

    @property
    @pulumi.getter(name="stateCode")
    def state_code(self) -> str:
        return pulumi.get(self, "state_code")

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> str:
        return pulumi.get(self, "state_message")


@pulumi.output_type
class GetImagesImageTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInternetServiceFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetInternetServiceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInternetServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetInternetServicesInternetServiceResult(dict):
    def __init__(__self__, *,
                 internet_service_id: str,
                 net_id: str,
                 state: str,
                 tags: Sequence['outputs.GetInternetServicesInternetServiceTagResult']):
        pulumi.set(__self__, "internet_service_id", internet_service_id)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="internetServiceId")
    def internet_service_id(self) -> str:
        return pulumi.get(self, "internet_service_id")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetInternetServicesInternetServiceTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetInternetServicesInternetServiceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetKeypairFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetKeypairsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetKeypairsKeypairResult(dict):
    def __init__(__self__, *,
                 keypair_fingerprint: str,
                 keypair_name: str):
        pulumi.set(__self__, "keypair_fingerprint", keypair_fingerprint)
        pulumi.set(__self__, "keypair_name", keypair_name)

    @property
    @pulumi.getter(name="keypairFingerprint")
    def keypair_fingerprint(self) -> str:
        return pulumi.get(self, "keypair_fingerprint")

    @property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> str:
        return pulumi.get(self, "keypair_name")


@pulumi.output_type
class GetLoadBalancerAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 osu_bucket_name: str,
                 osu_bucket_prefix: str,
                 publication_interval: int):
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "osu_bucket_name", osu_bucket_name)
        pulumi.set(__self__, "osu_bucket_prefix", osu_bucket_prefix)
        pulumi.set(__self__, "publication_interval", publication_interval)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="osuBucketName")
    def osu_bucket_name(self) -> str:
        return pulumi.get(self, "osu_bucket_name")

    @property
    @pulumi.getter(name="osuBucketPrefix")
    def osu_bucket_prefix(self) -> str:
        return pulumi.get(self, "osu_bucket_prefix")

    @property
    @pulumi.getter(name="publicationInterval")
    def publication_interval(self) -> int:
        return pulumi.get(self, "publication_interval")


@pulumi.output_type
class GetLoadBalancerApplicationStickyCookiePolicyResult(dict):
    def __init__(__self__, *,
                 cookie_name: str,
                 policy_name: str):
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> str:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class GetLoadBalancerFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetLoadBalancerHealthCheckResult(dict):
    def __init__(__self__, *,
                 check_interval: str,
                 checked_vm: str,
                 healthy_threshold: str,
                 timeout: str,
                 unhealthy_threshold: str):
        pulumi.set(__self__, "check_interval", check_interval)
        pulumi.set(__self__, "checked_vm", checked_vm)
        pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> str:
        return pulumi.get(self, "check_interval")

    @property
    @pulumi.getter(name="checkedVm")
    def checked_vm(self) -> str:
        return pulumi.get(self, "checked_vm")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> str:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> str:
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class GetLoadBalancerListenerResult(dict):
    def __init__(__self__, *,
                 backend_port: int,
                 backend_protocol: str,
                 load_balancer_port: int,
                 load_balancer_protocol: str,
                 policy_names: Sequence[str],
                 server_certificate_id: str):
        pulumi.set(__self__, "backend_port", backend_port)
        pulumi.set(__self__, "backend_protocol", backend_protocol)
        pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        pulumi.set(__self__, "load_balancer_protocol", load_balancer_protocol)
        pulumi.set(__self__, "policy_names", policy_names)
        pulumi.set(__self__, "server_certificate_id", server_certificate_id)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> int:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="backendProtocol")
    def backend_protocol(self) -> str:
        return pulumi.get(self, "backend_protocol")

    @property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> int:
        return pulumi.get(self, "load_balancer_port")

    @property
    @pulumi.getter(name="loadBalancerProtocol")
    def load_balancer_protocol(self) -> str:
        return pulumi.get(self, "load_balancer_protocol")

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Sequence[str]:
        return pulumi.get(self, "policy_names")

    @property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> str:
        return pulumi.get(self, "server_certificate_id")


@pulumi.output_type
class GetLoadBalancerLoadBalancerStickyCookiePolicyResult(dict):
    def __init__(__self__, *,
                 policy_name: str):
        pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class GetLoadBalancerSourceSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_account_id: str,
                 security_group_name: str):
        pulumi.set(__self__, "security_group_account_id", security_group_account_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupAccountId")
    def security_group_account_id(self) -> str:
        return pulumi.get(self, "security_group_account_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetLoadBalancerTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetLoadBalancerTagsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetLoadBalancerTagsTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 load_balancer_name: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> str:
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetLoadBalancerVmHealthBackendVmHealthResult(dict):
    def __init__(__self__, *,
                 description: str,
                 state: str,
                 state_reason: str,
                 vm_id: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "state_reason", state_reason)
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateReason")
    def state_reason(self) -> str:
        return pulumi.get(self, "state_reason")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetLoadBalancerVmHealthFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetLoadBalancersFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetLoadBalancersLoadBalancerResult(dict):
    def __init__(__self__, *,
                 access_log: 'outputs.GetLoadBalancersLoadBalancerAccessLogResult',
                 application_sticky_cookie_policies: Sequence['outputs.GetLoadBalancersLoadBalancerApplicationStickyCookiePolicyResult'],
                 backend_vm_ids: Sequence['outputs.GetLoadBalancersLoadBalancerBackendVmIdResult'],
                 dns_name: str,
                 health_check: 'outputs.GetLoadBalancersLoadBalancerHealthCheckResult',
                 listeners: Sequence['outputs.GetLoadBalancersLoadBalancerListenerResult'],
                 load_balancer_name: str,
                 load_balancer_sticky_cookie_policies: Sequence['outputs.GetLoadBalancersLoadBalancerLoadBalancerStickyCookiePolicyResult'],
                 load_balancer_type: str,
                 net_id: str,
                 public_ip: str,
                 secured_cookies: bool,
                 security_groups: Sequence[str],
                 source_security_group: 'outputs.GetLoadBalancersLoadBalancerSourceSecurityGroupResult',
                 subnet_ids: Sequence[str],
                 subregion_names: Sequence[str],
                 tags: Sequence['outputs.GetLoadBalancersLoadBalancerTagResult']):
        pulumi.set(__self__, "access_log", access_log)
        pulumi.set(__self__, "application_sticky_cookie_policies", application_sticky_cookie_policies)
        pulumi.set(__self__, "backend_vm_ids", backend_vm_ids)
        pulumi.set(__self__, "dns_name", dns_name)
        pulumi.set(__self__, "health_check", health_check)
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        pulumi.set(__self__, "load_balancer_sticky_cookie_policies", load_balancer_sticky_cookie_policies)
        pulumi.set(__self__, "load_balancer_type", load_balancer_type)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "secured_cookies", secured_cookies)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "source_security_group", source_security_group)
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        pulumi.set(__self__, "subregion_names", subregion_names)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> 'outputs.GetLoadBalancersLoadBalancerAccessLogResult':
        return pulumi.get(self, "access_log")

    @property
    @pulumi.getter(name="applicationStickyCookiePolicies")
    def application_sticky_cookie_policies(self) -> Sequence['outputs.GetLoadBalancersLoadBalancerApplicationStickyCookiePolicyResult']:
        return pulumi.get(self, "application_sticky_cookie_policies")

    @property
    @pulumi.getter(name="backendVmIds")
    def backend_vm_ids(self) -> Sequence['outputs.GetLoadBalancersLoadBalancerBackendVmIdResult']:
        return pulumi.get(self, "backend_vm_ids")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> str:
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> 'outputs.GetLoadBalancersLoadBalancerHealthCheckResult':
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def listeners(self) -> Sequence['outputs.GetLoadBalancersLoadBalancerListenerResult']:
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> str:
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter(name="loadBalancerStickyCookiePolicies")
    def load_balancer_sticky_cookie_policies(self) -> Sequence['outputs.GetLoadBalancersLoadBalancerLoadBalancerStickyCookiePolicyResult']:
        return pulumi.get(self, "load_balancer_sticky_cookie_policies")

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> str:
        return pulumi.get(self, "load_balancer_type")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="securedCookies")
    def secured_cookies(self) -> bool:
        return pulumi.get(self, "secured_cookies")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence[str]:
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="sourceSecurityGroup")
    def source_security_group(self) -> 'outputs.GetLoadBalancersLoadBalancerSourceSecurityGroupResult':
        return pulumi.get(self, "source_security_group")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="subregionNames")
    def subregion_names(self) -> Sequence[str]:
        return pulumi.get(self, "subregion_names")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetLoadBalancersLoadBalancerTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetLoadBalancersLoadBalancerAccessLogResult(dict):
    def __init__(__self__, *,
                 is_enabled: bool,
                 osu_bucket_name: str,
                 osu_bucket_prefix: str,
                 publication_interval: int):
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "osu_bucket_name", osu_bucket_name)
        pulumi.set(__self__, "osu_bucket_prefix", osu_bucket_prefix)
        pulumi.set(__self__, "publication_interval", publication_interval)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @property
    @pulumi.getter(name="osuBucketName")
    def osu_bucket_name(self) -> str:
        return pulumi.get(self, "osu_bucket_name")

    @property
    @pulumi.getter(name="osuBucketPrefix")
    def osu_bucket_prefix(self) -> str:
        return pulumi.get(self, "osu_bucket_prefix")

    @property
    @pulumi.getter(name="publicationInterval")
    def publication_interval(self) -> int:
        return pulumi.get(self, "publication_interval")


@pulumi.output_type
class GetLoadBalancersLoadBalancerApplicationStickyCookiePolicyResult(dict):
    def __init__(__self__, *,
                 cookie_name: str,
                 policy_name: str):
        pulumi.set(__self__, "cookie_name", cookie_name)
        pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> str:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class GetLoadBalancersLoadBalancerBackendVmIdResult(dict):
    def __init__(__self__, *,
                 vm_id: str):
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetLoadBalancersLoadBalancerHealthCheckResult(dict):
    def __init__(__self__, *,
                 check_interval: str,
                 checked_vm: str,
                 healthy_threshold: str,
                 port: int,
                 protocol: str,
                 timeout: str,
                 unhealthy_threshold: str):
        pulumi.set(__self__, "check_interval", check_interval)
        pulumi.set(__self__, "checked_vm", checked_vm)
        pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> str:
        return pulumi.get(self, "check_interval")

    @property
    @pulumi.getter(name="checkedVm")
    def checked_vm(self) -> str:
        return pulumi.get(self, "checked_vm")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> str:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> str:
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class GetLoadBalancersLoadBalancerListenerResult(dict):
    def __init__(__self__, *,
                 backend_port: int,
                 backend_protocol: str,
                 load_balancer_port: int,
                 load_balancer_protocol: str,
                 policy_names: Sequence[str],
                 server_certificate_id: str):
        pulumi.set(__self__, "backend_port", backend_port)
        pulumi.set(__self__, "backend_protocol", backend_protocol)
        pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        pulumi.set(__self__, "load_balancer_protocol", load_balancer_protocol)
        pulumi.set(__self__, "policy_names", policy_names)
        pulumi.set(__self__, "server_certificate_id", server_certificate_id)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> int:
        return pulumi.get(self, "backend_port")

    @property
    @pulumi.getter(name="backendProtocol")
    def backend_protocol(self) -> str:
        return pulumi.get(self, "backend_protocol")

    @property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> int:
        return pulumi.get(self, "load_balancer_port")

    @property
    @pulumi.getter(name="loadBalancerProtocol")
    def load_balancer_protocol(self) -> str:
        return pulumi.get(self, "load_balancer_protocol")

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Sequence[str]:
        return pulumi.get(self, "policy_names")

    @property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> str:
        return pulumi.get(self, "server_certificate_id")


@pulumi.output_type
class GetLoadBalancersLoadBalancerLoadBalancerStickyCookiePolicyResult(dict):
    def __init__(__self__, *,
                 policy_name: str):
        pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class GetLoadBalancersLoadBalancerSourceSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_account_id: str,
                 security_group_name: str):
        pulumi.set(__self__, "security_group_account_id", security_group_account_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupAccountId")
    def security_group_account_id(self) -> str:
        return pulumi.get(self, "security_group_account_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetLoadBalancersLoadBalancerTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNatServiceFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNatServicePublicIpResult(dict):
    def __init__(__self__, *,
                 public_ip: str,
                 public_ip_id: str):
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_id", public_ip_id)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> str:
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class GetNatServiceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNatServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNatServicesNatServiceResult(dict):
    def __init__(__self__, *,
                 nat_service_id: str,
                 net_id: str,
                 public_ips: Sequence['outputs.GetNatServicesNatServicePublicIpResult'],
                 state: str,
                 subnet_id: str,
                 tags: Sequence['outputs.GetNatServicesNatServiceTagResult']):
        pulumi.set(__self__, "nat_service_id", nat_service_id)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "public_ips", public_ips)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> str:
        return pulumi.get(self, "nat_service_id")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Sequence['outputs.GetNatServicesNatServicePublicIpResult']:
        return pulumi.get(self, "public_ips")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNatServicesNatServiceTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNatServicesNatServicePublicIpResult(dict):
    def __init__(__self__, *,
                 public_ip: str,
                 public_ip_id: str):
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_id", public_ip_id)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> str:
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class GetNatServicesNatServiceTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetAccessPointFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetAccessPointServicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetAccessPointServicesServiceResult(dict):
    def __init__(__self__, *,
                 ip_ranges: Sequence[str],
                 service_id: str,
                 service_name: str):
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetNetAccessPointTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetAccessPointsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetAccessPointsNetAccessPointResult(dict):
    def __init__(__self__, *,
                 net_access_point_id: str,
                 net_id: str,
                 route_table_ids: Sequence[str],
                 service_name: str,
                 state: str,
                 tags: Sequence['outputs.GetNetAccessPointsNetAccessPointTagResult']):
        pulumi.set(__self__, "net_access_point_id", net_access_point_id)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "route_table_ids", route_table_ids)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="netAccessPointId")
    def net_access_point_id(self) -> str:
        return pulumi.get(self, "net_access_point_id")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="routeTableIds")
    def route_table_ids(self) -> Sequence[str]:
        return pulumi.get(self, "route_table_ids")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNetAccessPointsNetAccessPointTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNetAccessPointsNetAccessPointTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetAttributesTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetPeeringAccepterNetResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 ip_range: str,
                 net_id: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "net_id", net_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> str:
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")


@pulumi.output_type
class GetNetPeeringFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetPeeringSourceNetResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 ip_range: str,
                 net_id: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "net_id", net_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> str:
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")


@pulumi.output_type
class GetNetPeeringStateResult(dict):
    def __init__(__self__, *,
                 message: str,
                 name: str):
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNetPeeringTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetPeeringsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetPeeringsNetPeeringResult(dict):
    def __init__(__self__, *,
                 accepter_net: 'outputs.GetNetPeeringsNetPeeringAccepterNetResult',
                 net_peering_id: str,
                 source_net: 'outputs.GetNetPeeringsNetPeeringSourceNetResult',
                 state: 'outputs.GetNetPeeringsNetPeeringStateResult',
                 tags: Sequence['outputs.GetNetPeeringsNetPeeringTagResult']):
        pulumi.set(__self__, "accepter_net", accepter_net)
        pulumi.set(__self__, "net_peering_id", net_peering_id)
        pulumi.set(__self__, "source_net", source_net)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accepterNet")
    def accepter_net(self) -> 'outputs.GetNetPeeringsNetPeeringAccepterNetResult':
        return pulumi.get(self, "accepter_net")

    @property
    @pulumi.getter(name="netPeeringId")
    def net_peering_id(self) -> str:
        return pulumi.get(self, "net_peering_id")

    @property
    @pulumi.getter(name="sourceNet")
    def source_net(self) -> 'outputs.GetNetPeeringsNetPeeringSourceNetResult':
        return pulumi.get(self, "source_net")

    @property
    @pulumi.getter
    def state(self) -> 'outputs.GetNetPeeringsNetPeeringStateResult':
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNetPeeringsNetPeeringTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNetPeeringsNetPeeringAccepterNetResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 ip_range: str,
                 net_id: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "net_id", net_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> str:
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")


@pulumi.output_type
class GetNetPeeringsNetPeeringSourceNetResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 ip_range: str,
                 net_id: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "net_id", net_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> str:
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")


@pulumi.output_type
class GetNetPeeringsNetPeeringStateResult(dict):
    def __init__(__self__, *,
                 code: str,
                 message: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")


@pulumi.output_type
class GetNetPeeringsNetPeeringTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNetsNetResult(dict):
    def __init__(__self__, *,
                 dhcp_options_set_id: str,
                 ip_range: str,
                 net_id: str,
                 state: str,
                 tags: Sequence['outputs.GetNetsNetTagResult'],
                 tenancy: str):
        pulumi.set(__self__, "dhcp_options_set_id", dhcp_options_set_id)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenancy", tenancy)

    @property
    @pulumi.getter(name="dhcpOptionsSetId")
    def dhcp_options_set_id(self) -> str:
        return pulumi.get(self, "dhcp_options_set_id")

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> str:
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNetsNetTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def tenancy(self) -> str:
        return pulumi.get(self, "tenancy")


@pulumi.output_type
class GetNetsNetTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNicFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNicLinkNicResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: str,
                 device_number: int,
                 link_nic_id: str,
                 state: str,
                 vm_account_id: str,
                 vm_id: str):
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "link_nic_id", link_nic_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_account_id", vm_account_id)
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> str:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> int:
        return pulumi.get(self, "device_number")

    @property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> str:
        return pulumi.get(self, "link_nic_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> str:
        return pulumi.get(self, "vm_account_id")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetNicLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 link_public_ip_id: str,
                 public_dns_name: str,
                 public_ip_account_id: str,
                 public_ip_id: str):
        pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)
        pulumi.set(__self__, "public_ip_id", public_ip_id)

    @property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> str:
        return pulumi.get(self, "link_public_ip_id")

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> str:
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> str:
        return pulumi.get(self, "public_ip_account_id")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> str:
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class GetNicPrivateIpResult(dict):
    def __init__(__self__, *,
                 is_primary: bool,
                 link_public_ip: 'outputs.GetNicPrivateIpLinkPublicIpResult',
                 private_dns_name: str,
                 private_ip: str):
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "link_public_ip", link_public_ip)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> bool:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter(name="linkPublicIp")
    def link_public_ip(self) -> 'outputs.GetNicPrivateIpLinkPublicIpResult':
        return pulumi.get(self, "link_public_ip")

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> str:
        return pulumi.get(self, "private_dns_name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetNicPrivateIpLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 link_public_ip_id: str,
                 public_dns_name: str,
                 public_ip: str,
                 public_ip_account_id: str,
                 public_ip_id: str):
        pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)
        pulumi.set(__self__, "public_ip_id", public_ip_id)

    @property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> str:
        return pulumi.get(self, "link_public_ip_id")

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> str:
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> str:
        return pulumi.get(self, "public_ip_account_id")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> str:
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class GetNicSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_id: str,
                 security_group_name: str):
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetNicTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetNicsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetNicsNicResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 description: str,
                 is_source_dest_checked: bool,
                 link_nic: 'outputs.GetNicsNicLinkNicResult',
                 link_public_ip: 'outputs.GetNicsNicLinkPublicIpResult',
                 mac_address: str,
                 net_id: str,
                 nic_id: str,
                 private_dns_name: str,
                 private_ips: Sequence['outputs.GetNicsNicPrivateIpResult'],
                 security_groups: Sequence['outputs.GetNicsNicSecurityGroupResult'],
                 state: str,
                 subnet_id: str,
                 subregion_name: str,
                 tags: Sequence['outputs.GetNicsNicTagResult']):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        pulumi.set(__self__, "link_nic", link_nic)
        pulumi.set(__self__, "link_public_ip", link_public_ip)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "subregion_name", subregion_name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> bool:
        return pulumi.get(self, "is_source_dest_checked")

    @property
    @pulumi.getter(name="linkNic")
    def link_nic(self) -> 'outputs.GetNicsNicLinkNicResult':
        return pulumi.get(self, "link_nic")

    @property
    @pulumi.getter(name="linkPublicIp")
    def link_public_ip(self) -> 'outputs.GetNicsNicLinkPublicIpResult':
        return pulumi.get(self, "link_public_ip")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> str:
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> str:
        return pulumi.get(self, "private_dns_name")

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence['outputs.GetNicsNicPrivateIpResult']:
        return pulumi.get(self, "private_ips")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetNicsNicSecurityGroupResult']:
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> str:
        return pulumi.get(self, "subregion_name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNicsNicTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetNicsNicLinkNicResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: bool,
                 device_number: int,
                 nic_link_id: str,
                 state: str,
                 vm_account_id: str,
                 vm_id: str):
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "nic_link_id", nic_link_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_account_id", vm_account_id)
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> int:
        return pulumi.get(self, "device_number")

    @property
    @pulumi.getter(name="nicLinkId")
    def nic_link_id(self) -> str:
        return pulumi.get(self, "nic_link_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> str:
        return pulumi.get(self, "vm_account_id")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetNicsNicLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 link_public_ip_id: str,
                 public_dns_name: str,
                 public_ip: str,
                 public_ip_account_id: str,
                 public_ip_id: str):
        pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)
        pulumi.set(__self__, "public_ip_id", public_ip_id)

    @property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> str:
        return pulumi.get(self, "link_public_ip_id")

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> str:
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> str:
        return pulumi.get(self, "public_ip_account_id")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> str:
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class GetNicsNicPrivateIpResult(dict):
    def __init__(__self__, *,
                 is_primary: bool,
                 link_public_ip: 'outputs.GetNicsNicPrivateIpLinkPublicIpResult',
                 private_dns_name: str,
                 private_ip: str):
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "link_public_ip", link_public_ip)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> bool:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter(name="linkPublicIp")
    def link_public_ip(self) -> 'outputs.GetNicsNicPrivateIpLinkPublicIpResult':
        return pulumi.get(self, "link_public_ip")

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> str:
        return pulumi.get(self, "private_dns_name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetNicsNicPrivateIpLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 link_public_ip_id: str,
                 public_dns_name: str,
                 public_ip: str,
                 public_ip_account_id: str,
                 public_ip_id: str):
        pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)
        pulumi.set(__self__, "public_ip_id", public_ip_id)

    @property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> str:
        return pulumi.get(self, "link_public_ip_id")

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> str:
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> str:
        return pulumi.get(self, "public_ip_account_id")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> str:
        return pulumi.get(self, "public_ip_id")


@pulumi.output_type
class GetNicsNicSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_id: str,
                 security_group_name: str):
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetNicsNicTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetProductTypeFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProductTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetProductTypesProductTypeResult(dict):
    def __init__(__self__, *,
                 description: str,
                 product_type_id: str,
                 vendor: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "product_type_id", product_type_id)
        pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="productTypeId")
    def product_type_id(self) -> str:
        return pulumi.get(self, "product_type_id")

    @property
    @pulumi.getter
    def vendor(self) -> str:
        return pulumi.get(self, "vendor")


@pulumi.output_type
class GetPublicIpFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPublicIpTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPublicIpsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetPublicIpsPublicIpResult(dict):
    def __init__(__self__, *,
                 link_public_ip_id: str,
                 nic_account_id: str,
                 nic_id: str,
                 private_ip: str,
                 public_ip: str,
                 public_ip_id: str,
                 tags: Sequence['outputs.GetPublicIpsPublicIpTagResult'],
                 vm_id: str):
        pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        pulumi.set(__self__, "nic_account_id", nic_account_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_id", public_ip_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> str:
        return pulumi.get(self, "link_public_ip_id")

    @property
    @pulumi.getter(name="nicAccountId")
    def nic_account_id(self) -> str:
        return pulumi.get(self, "nic_account_id")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> str:
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> str:
        return pulumi.get(self, "public_ip_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetPublicIpsPublicIpTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetPublicIpsPublicIpTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPulicCatalogCatalogResult(dict):
    def __init__(__self__, *,
                 entries: Sequence['outputs.GetPulicCatalogCatalogEntryResult']):
        pulumi.set(__self__, "entries", entries)

    @property
    @pulumi.getter
    def entries(self) -> Sequence['outputs.GetPulicCatalogCatalogEntryResult']:
        return pulumi.get(self, "entries")


@pulumi.output_type
class GetPulicCatalogCatalogEntryResult(dict):
    def __init__(__self__, *,
                 category: str,
                 flags: str,
                 operation: str,
                 service: str,
                 subregion_name: str,
                 title: str,
                 type: str,
                 unit_price: float):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "flags", flags)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "subregion_name", subregion_name)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unit_price", unit_price)

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def flags(self) -> str:
        return pulumi.get(self, "flags")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> str:
        return pulumi.get(self, "subregion_name")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="unitPrice")
    def unit_price(self) -> float:
        return pulumi.get(self, "unit_price")


@pulumi.output_type
class GetQuotaFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetQuotasFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetQuotasQuotaResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 description: str,
                 max_value: int,
                 name: str,
                 quota_collection: str,
                 quota_type: str,
                 short_description: str,
                 used_value: int):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "quota_collection", quota_collection)
        pulumi.set(__self__, "quota_type", quota_type)
        pulumi.set(__self__, "short_description", short_description)
        pulumi.set(__self__, "used_value", used_value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> int:
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="quotaCollection")
    def quota_collection(self) -> str:
        return pulumi.get(self, "quota_collection")

    @property
    @pulumi.getter(name="quotaType")
    def quota_type(self) -> str:
        return pulumi.get(self, "quota_type")

    @property
    @pulumi.getter(name="shortDescription")
    def short_description(self) -> str:
        return pulumi.get(self, "short_description")

    @property
    @pulumi.getter(name="usedValue")
    def used_value(self) -> int:
        return pulumi.get(self, "used_value")


@pulumi.output_type
class GetRegionsRegionResult(dict):
    def __init__(__self__, *,
                 endpoint: str,
                 region_name: str):
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "region_name", region_name)

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")


@pulumi.output_type
class GetRouteTableFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetRouteTableLinkRouteTableResult(dict):
    def __init__(__self__, *,
                 link_route_table_id: str,
                 main: bool,
                 route_table_id: str,
                 route_table_to_subnet_link_id: str,
                 subnet_id: str):
        pulumi.set(__self__, "link_route_table_id", link_route_table_id)
        pulumi.set(__self__, "main", main)
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "route_table_to_subnet_link_id", route_table_to_subnet_link_id)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="linkRouteTableId")
    def link_route_table_id(self) -> str:
        return pulumi.get(self, "link_route_table_id")

    @property
    @pulumi.getter
    def main(self) -> bool:
        return pulumi.get(self, "main")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> str:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter(name="routeTableToSubnetLinkId")
    def route_table_to_subnet_link_id(self) -> str:
        return pulumi.get(self, "route_table_to_subnet_link_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetRouteTableRouteResult(dict):
    def __init__(__self__, *,
                 creation_method: str,
                 destination_ip_range: str,
                 destination_service_id: str,
                 gateway_id: str,
                 nat_service_id: str,
                 net_access_point_id: str,
                 net_peering_id: str,
                 nic_id: str,
                 state: str,
                 vm_account_id: str,
                 vm_id: str):
        pulumi.set(__self__, "creation_method", creation_method)
        pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        pulumi.set(__self__, "destination_service_id", destination_service_id)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "nat_service_id", nat_service_id)
        pulumi.set(__self__, "net_access_point_id", net_access_point_id)
        pulumi.set(__self__, "net_peering_id", net_peering_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_account_id", vm_account_id)
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="creationMethod")
    def creation_method(self) -> str:
        return pulumi.get(self, "creation_method")

    @property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> str:
        return pulumi.get(self, "destination_ip_range")

    @property
    @pulumi.getter(name="destinationServiceId")
    def destination_service_id(self) -> str:
        return pulumi.get(self, "destination_service_id")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> str:
        return pulumi.get(self, "nat_service_id")

    @property
    @pulumi.getter(name="netAccessPointId")
    def net_access_point_id(self) -> str:
        return pulumi.get(self, "net_access_point_id")

    @property
    @pulumi.getter(name="netPeeringId")
    def net_peering_id(self) -> str:
        return pulumi.get(self, "net_peering_id")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> str:
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> str:
        return pulumi.get(self, "vm_account_id")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetRouteTableRoutePropagatingVirtualGatewayResult(dict):
    def __init__(__self__, *,
                 virtual_gateway_id: str):
        pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)

    @property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> str:
        return pulumi.get(self, "virtual_gateway_id")


@pulumi.output_type
class GetRouteTableTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRouteTablesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetRouteTablesRouteTableResult(dict):
    def __init__(__self__, *,
                 link_route_tables: Sequence['outputs.GetRouteTablesRouteTableLinkRouteTableResult'],
                 net_id: str,
                 route_propagating_virtual_gateways: Sequence['outputs.GetRouteTablesRouteTableRoutePropagatingVirtualGatewayResult'],
                 route_table_id: str,
                 routes: Sequence['outputs.GetRouteTablesRouteTableRouteResult'],
                 tags: Sequence['outputs.GetRouteTablesRouteTableTagResult']):
        pulumi.set(__self__, "link_route_tables", link_route_tables)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "route_propagating_virtual_gateways", route_propagating_virtual_gateways)
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "routes", routes)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="linkRouteTables")
    def link_route_tables(self) -> Sequence['outputs.GetRouteTablesRouteTableLinkRouteTableResult']:
        return pulumi.get(self, "link_route_tables")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="routePropagatingVirtualGateways")
    def route_propagating_virtual_gateways(self) -> Sequence['outputs.GetRouteTablesRouteTableRoutePropagatingVirtualGatewayResult']:
        return pulumi.get(self, "route_propagating_virtual_gateways")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> str:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetRouteTablesRouteTableRouteResult']:
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetRouteTablesRouteTableTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetRouteTablesRouteTableLinkRouteTableResult(dict):
    def __init__(__self__, *,
                 link_route_table_id: str,
                 main: bool,
                 route_table_id: str,
                 route_table_to_subnet_link_id: str,
                 subnet_id: str):
        pulumi.set(__self__, "link_route_table_id", link_route_table_id)
        pulumi.set(__self__, "main", main)
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "route_table_to_subnet_link_id", route_table_to_subnet_link_id)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="linkRouteTableId")
    def link_route_table_id(self) -> str:
        return pulumi.get(self, "link_route_table_id")

    @property
    @pulumi.getter
    def main(self) -> bool:
        return pulumi.get(self, "main")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> str:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter(name="routeTableToSubnetLinkId")
    def route_table_to_subnet_link_id(self) -> str:
        return pulumi.get(self, "route_table_to_subnet_link_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetRouteTablesRouteTableRouteResult(dict):
    def __init__(__self__, *,
                 creation_method: str,
                 destination_ip_range: str,
                 destination_service_id: str,
                 gateway_id: str,
                 nat_service_id: str,
                 net_access_point_id: str,
                 net_peering_id: str,
                 nic_id: str,
                 state: str,
                 vm_account_id: str,
                 vm_id: str):
        pulumi.set(__self__, "creation_method", creation_method)
        pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        pulumi.set(__self__, "destination_service_id", destination_service_id)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "nat_service_id", nat_service_id)
        pulumi.set(__self__, "net_access_point_id", net_access_point_id)
        pulumi.set(__self__, "net_peering_id", net_peering_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_account_id", vm_account_id)
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="creationMethod")
    def creation_method(self) -> str:
        return pulumi.get(self, "creation_method")

    @property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> str:
        return pulumi.get(self, "destination_ip_range")

    @property
    @pulumi.getter(name="destinationServiceId")
    def destination_service_id(self) -> str:
        return pulumi.get(self, "destination_service_id")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> str:
        return pulumi.get(self, "nat_service_id")

    @property
    @pulumi.getter(name="netAccessPointId")
    def net_access_point_id(self) -> str:
        return pulumi.get(self, "net_access_point_id")

    @property
    @pulumi.getter(name="netPeeringId")
    def net_peering_id(self) -> str:
        return pulumi.get(self, "net_peering_id")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> str:
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> str:
        return pulumi.get(self, "vm_account_id")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetRouteTablesRouteTableRoutePropagatingVirtualGatewayResult(dict):
    def __init__(__self__, *,
                 virtual_gateway_id: str):
        pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)

    @property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> str:
        return pulumi.get(self, "virtual_gateway_id")


@pulumi.output_type
class GetRouteTablesRouteTableTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityGroupFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSecurityGroupInboundRuleResult(dict):
    def __init__(__self__, *,
                 from_port_range: int,
                 ip_protocol: str,
                 ip_ranges: Sequence[str],
                 prefix_list_ids: Sequence[str],
                 security_groups_members: Sequence['outputs.GetSecurityGroupInboundRuleSecurityGroupsMemberResult'],
                 to_port_range: int):
        pulumi.set(__self__, "from_port_range", from_port_range)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "prefix_list_ids", prefix_list_ids)
        pulumi.set(__self__, "security_groups_members", security_groups_members)
        pulumi.set(__self__, "to_port_range", to_port_range)

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> int:
        return pulumi.get(self, "from_port_range")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="prefixListIds")
    def prefix_list_ids(self) -> Sequence[str]:
        return pulumi.get(self, "prefix_list_ids")

    @property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Sequence['outputs.GetSecurityGroupInboundRuleSecurityGroupsMemberResult']:
        return pulumi.get(self, "security_groups_members")

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> int:
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class GetSecurityGroupInboundRuleSecurityGroupsMemberResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 security_group_id: str,
                 security_group_name: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetSecurityGroupOutboundRuleResult(dict):
    def __init__(__self__, *,
                 from_port_range: int,
                 ip_protocol: str,
                 ip_ranges: Sequence[str],
                 prefix_list_ids: Sequence[str],
                 security_groups_members: Sequence['outputs.GetSecurityGroupOutboundRuleSecurityGroupsMemberResult'],
                 to_port_range: int):
        pulumi.set(__self__, "from_port_range", from_port_range)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "prefix_list_ids", prefix_list_ids)
        pulumi.set(__self__, "security_groups_members", security_groups_members)
        pulumi.set(__self__, "to_port_range", to_port_range)

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> int:
        return pulumi.get(self, "from_port_range")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="prefixListIds")
    def prefix_list_ids(self) -> Sequence[str]:
        return pulumi.get(self, "prefix_list_ids")

    @property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Sequence['outputs.GetSecurityGroupOutboundRuleSecurityGroupsMemberResult']:
        return pulumi.get(self, "security_groups_members")

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> int:
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class GetSecurityGroupOutboundRuleSecurityGroupsMemberResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 security_group_id: str,
                 security_group_name: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetSecurityGroupTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSecurityGroupsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSecurityGroupsSecurityGroupResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 description: str,
                 inbound_rules: Sequence['outputs.GetSecurityGroupsSecurityGroupInboundRuleResult'],
                 net_id: str,
                 outbound_rules: Sequence['outputs.GetSecurityGroupsSecurityGroupOutboundRuleResult'],
                 security_group_id: str,
                 security_group_name: str,
                 tags: Sequence['outputs.GetSecurityGroupsSecurityGroupTagResult']):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "inbound_rules", inbound_rules)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "outbound_rules", outbound_rules)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="inboundRules")
    def inbound_rules(self) -> Sequence['outputs.GetSecurityGroupsSecurityGroupInboundRuleResult']:
        return pulumi.get(self, "inbound_rules")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="outboundRules")
    def outbound_rules(self) -> Sequence['outputs.GetSecurityGroupsSecurityGroupOutboundRuleResult']:
        return pulumi.get(self, "outbound_rules")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetSecurityGroupsSecurityGroupTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSecurityGroupsSecurityGroupInboundRuleResult(dict):
    def __init__(__self__, *,
                 from_port_range: int,
                 ip_protocol: str,
                 ip_ranges: Sequence[str],
                 prefix_list_ids: Sequence[str],
                 security_groups_members: Sequence['outputs.GetSecurityGroupsSecurityGroupInboundRuleSecurityGroupsMemberResult'],
                 to_port_range: int):
        pulumi.set(__self__, "from_port_range", from_port_range)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "prefix_list_ids", prefix_list_ids)
        pulumi.set(__self__, "security_groups_members", security_groups_members)
        pulumi.set(__self__, "to_port_range", to_port_range)

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> int:
        return pulumi.get(self, "from_port_range")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="prefixListIds")
    def prefix_list_ids(self) -> Sequence[str]:
        return pulumi.get(self, "prefix_list_ids")

    @property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Sequence['outputs.GetSecurityGroupsSecurityGroupInboundRuleSecurityGroupsMemberResult']:
        return pulumi.get(self, "security_groups_members")

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> int:
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class GetSecurityGroupsSecurityGroupInboundRuleSecurityGroupsMemberResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 security_group_id: str,
                 security_group_name: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetSecurityGroupsSecurityGroupOutboundRuleResult(dict):
    def __init__(__self__, *,
                 from_port_range: int,
                 ip_protocol: str,
                 ip_ranges: Sequence[str],
                 prefix_list_ids: Sequence[str],
                 security_groups_members: Sequence['outputs.GetSecurityGroupsSecurityGroupOutboundRuleSecurityGroupsMemberResult'],
                 to_port_range: int):
        pulumi.set(__self__, "from_port_range", from_port_range)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        pulumi.set(__self__, "prefix_list_ids", prefix_list_ids)
        pulumi.set(__self__, "security_groups_members", security_groups_members)
        pulumi.set(__self__, "to_port_range", to_port_range)

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> int:
        return pulumi.get(self, "from_port_range")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="prefixListIds")
    def prefix_list_ids(self) -> Sequence[str]:
        return pulumi.get(self, "prefix_list_ids")

    @property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Sequence['outputs.GetSecurityGroupsSecurityGroupOutboundRuleSecurityGroupsMemberResult']:
        return pulumi.get(self, "security_groups_members")

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> int:
        return pulumi.get(self, "to_port_range")


@pulumi.output_type
class GetSecurityGroupsSecurityGroupOutboundRuleSecurityGroupsMemberResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 security_group_id: str,
                 security_group_name: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetSecurityGroupsSecurityGroupTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetServerCertificateFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetServerCertificatesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetServerCertificatesServerCertificateResult(dict):
    def __init__(__self__, *,
                 expiration_date: str,
                 id: str,
                 name: str,
                 orn: str,
                 path: str,
                 upload_date: str):
        pulumi.set(__self__, "expiration_date", expiration_date)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "orn", orn)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "upload_date", upload_date)

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> str:
        return pulumi.get(self, "expiration_date")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def orn(self) -> str:
        return pulumi.get(self, "orn")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="uploadDate")
    def upload_date(self) -> str:
        return pulumi.get(self, "upload_date")


@pulumi.output_type
class GetSnapshotExportTaskFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSnapshotExportTaskOsuExportResult(dict):
    def __init__(__self__, *,
                 disk_image_format: str,
                 osu_bucket: str,
                 osu_prefix: str):
        pulumi.set(__self__, "disk_image_format", disk_image_format)
        pulumi.set(__self__, "osu_bucket", osu_bucket)
        pulumi.set(__self__, "osu_prefix", osu_prefix)

    @property
    @pulumi.getter(name="diskImageFormat")
    def disk_image_format(self) -> str:
        return pulumi.get(self, "disk_image_format")

    @property
    @pulumi.getter(name="osuBucket")
    def osu_bucket(self) -> str:
        return pulumi.get(self, "osu_bucket")

    @property
    @pulumi.getter(name="osuPrefix")
    def osu_prefix(self) -> str:
        return pulumi.get(self, "osu_prefix")


@pulumi.output_type
class GetSnapshotExportTaskTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSnapshotExportTasksFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSnapshotExportTasksSnapshotExportTaskResult(dict):
    def __init__(__self__, *,
                 comment: str,
                 osu_exports: Sequence['outputs.GetSnapshotExportTasksSnapshotExportTaskOsuExportResult'],
                 progress: int,
                 snapshot_id: str,
                 state: str,
                 tags: Sequence['outputs.GetSnapshotExportTasksSnapshotExportTaskTagResult'],
                 task_id: str):
        pulumi.set(__self__, "comment", comment)
        pulumi.set(__self__, "osu_exports", osu_exports)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "task_id", task_id)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="osuExports")
    def osu_exports(self) -> Sequence['outputs.GetSnapshotExportTasksSnapshotExportTaskOsuExportResult']:
        return pulumi.get(self, "osu_exports")

    @property
    @pulumi.getter
    def progress(self) -> int:
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetSnapshotExportTasksSnapshotExportTaskTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> str:
        return pulumi.get(self, "task_id")


@pulumi.output_type
class GetSnapshotExportTasksSnapshotExportTaskOsuExportResult(dict):
    def __init__(__self__, *,
                 disk_image_format: str,
                 osu_bucket: str,
                 osu_prefix: str):
        pulumi.set(__self__, "disk_image_format", disk_image_format)
        pulumi.set(__self__, "osu_bucket", osu_bucket)
        pulumi.set(__self__, "osu_prefix", osu_prefix)

    @property
    @pulumi.getter(name="diskImageFormat")
    def disk_image_format(self) -> str:
        return pulumi.get(self, "disk_image_format")

    @property
    @pulumi.getter(name="osuBucket")
    def osu_bucket(self) -> str:
        return pulumi.get(self, "osu_bucket")

    @property
    @pulumi.getter(name="osuPrefix")
    def osu_prefix(self) -> str:
        return pulumi.get(self, "osu_prefix")


@pulumi.output_type
class GetSnapshotExportTasksSnapshotExportTaskTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSnapshotFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSnapshotPermissionsToCreateVolumeResult(dict):
    def __init__(__self__, *,
                 account_ids: Sequence[str],
                 global_permission: bool):
        pulumi.set(__self__, "account_ids", account_ids)
        pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Sequence[str]:
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> bool:
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class GetSnapshotTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSnapshotsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSnapshotsSnapshotResult(dict):
    def __init__(__self__, *,
                 account_alias: str,
                 account_id: str,
                 creation_date: str,
                 description: str,
                 permissions_to_create_volumes: Sequence['outputs.GetSnapshotsSnapshotPermissionsToCreateVolumeResult'],
                 progress: int,
                 snapshot_id: str,
                 state: str,
                 tags: Sequence['outputs.GetSnapshotsSnapshotTagResult'],
                 volume_id: str,
                 volume_size: int):
        pulumi.set(__self__, "account_alias", account_alias)
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "permissions_to_create_volumes", permissions_to_create_volumes)
        pulumi.set(__self__, "progress", progress)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "volume_id", volume_id)
        pulumi.set(__self__, "volume_size", volume_size)

    @property
    @pulumi.getter(name="accountAlias")
    def account_alias(self) -> str:
        return pulumi.get(self, "account_alias")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> str:
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="permissionsToCreateVolumes")
    def permissions_to_create_volumes(self) -> Sequence['outputs.GetSnapshotsSnapshotPermissionsToCreateVolumeResult']:
        return pulumi.get(self, "permissions_to_create_volumes")

    @property
    @pulumi.getter
    def progress(self) -> int:
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetSnapshotsSnapshotTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> int:
        return pulumi.get(self, "volume_size")


@pulumi.output_type
class GetSnapshotsSnapshotPermissionsToCreateVolumeResult(dict):
    def __init__(__self__, *,
                 account_ids: Sequence[str],
                 global_permission: bool):
        pulumi.set(__self__, "account_ids", account_ids)
        pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Sequence[str]:
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> bool:
        return pulumi.get(self, "global_permission")


@pulumi.output_type
class GetSnapshotsSnapshotTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSubnetFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSubnetTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSubnetsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSubnetsSubnetResult(dict):
    def __init__(__self__, *,
                 available_ips_count: int,
                 ip_range: str,
                 map_public_ip_on_launch: bool,
                 net_id: str,
                 state: str,
                 subnet_id: str,
                 subregion_name: str,
                 tags: Sequence['outputs.GetSubnetsSubnetTagResult']):
        pulumi.set(__self__, "available_ips_count", available_ips_count)
        pulumi.set(__self__, "ip_range", ip_range)
        pulumi.set(__self__, "map_public_ip_on_launch", map_public_ip_on_launch)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "subregion_name", subregion_name)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="availableIpsCount")
    def available_ips_count(self) -> int:
        return pulumi.get(self, "available_ips_count")

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> str:
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter(name="mapPublicIpOnLaunch")
    def map_public_ip_on_launch(self) -> bool:
        return pulumi.get(self, "map_public_ip_on_launch")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> str:
        return pulumi.get(self, "subregion_name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetSubnetsSubnetTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSubnetsSubnetTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSubregionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSubregionsSubregionResult(dict):
    def __init__(__self__, *,
                 location_code: str,
                 region_name: str,
                 state: str,
                 subregion_name: str):
        pulumi.set(__self__, "location_code", location_code)
        pulumi.set(__self__, "region_name", region_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subregion_name", subregion_name)

    @property
    @pulumi.getter(name="locationCode")
    def location_code(self) -> str:
        return pulumi.get(self, "location_code")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> str:
        return pulumi.get(self, "subregion_name")


@pulumi.output_type
class GetTagFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVirtualGatewayFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVirtualGatewayNetToVirtualGatewayLinkResult(dict):
    def __init__(__self__, *,
                 net_id: str,
                 state: str):
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVirtualGatewayTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVirtualGatewaysFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVirtualGatewaysVirtualGatewayResult(dict):
    def __init__(__self__, *,
                 connection_type: str,
                 net_to_virtual_gateway_links: Sequence['outputs.GetVirtualGatewaysVirtualGatewayNetToVirtualGatewayLinkResult'],
                 state: str,
                 tags: Sequence['outputs.GetVirtualGatewaysVirtualGatewayTagResult'],
                 virtual_gateway_id: str):
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "net_to_virtual_gateway_links", net_to_virtual_gateway_links)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter(name="netToVirtualGatewayLinks")
    def net_to_virtual_gateway_links(self) -> Sequence['outputs.GetVirtualGatewaysVirtualGatewayNetToVirtualGatewayLinkResult']:
        return pulumi.get(self, "net_to_virtual_gateway_links")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVirtualGatewaysVirtualGatewayTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> str:
        return pulumi.get(self, "virtual_gateway_id")


@pulumi.output_type
class GetVirtualGatewaysVirtualGatewayNetToVirtualGatewayLinkResult(dict):
    def __init__(__self__, *,
                 net_id: str,
                 state: str):
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVirtualGatewaysVirtualGatewayTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVmBlockDeviceMappingsCreatedResult(dict):
    def __init__(__self__, *,
                 bsu: 'outputs.GetVmBlockDeviceMappingsCreatedBsuResult',
                 device_name: Optional[str] = None):
        pulumi.set(__self__, "bsu", bsu)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)

    @property
    @pulumi.getter
    def bsu(self) -> 'outputs.GetVmBlockDeviceMappingsCreatedBsuResult':
        return pulumi.get(self, "bsu")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        return pulumi.get(self, "device_name")


@pulumi.output_type
class GetVmBlockDeviceMappingsCreatedBsuResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: bool,
                 link_date: str,
                 state: int,
                 volume_id: float):
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "link_date", link_date)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter(name="linkDate")
    def link_date(self) -> str:
        return pulumi.get(self, "link_date")

    @property
    @pulumi.getter
    def state(self) -> int:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> float:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVmFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVmNicResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 delete_on_vm_deletion: bool,
                 description: str,
                 device_number: int,
                 is_source_dest_checked: bool,
                 link_nic: 'outputs.GetVmNicLinkNicResult',
                 link_public_ips: Sequence['outputs.GetVmNicLinkPublicIpResult'],
                 mac_address: str,
                 net_id: str,
                 nic_id: str,
                 private_dns_name: str,
                 private_ips: Sequence['outputs.GetVmNicPrivateIpResult'],
                 secondary_private_ip_count: int,
                 security_group_ids: Sequence[str],
                 security_groups: Sequence['outputs.GetVmNicSecurityGroupResult'],
                 security_groups_names: Sequence[str],
                 state: str,
                 subnet_id: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        pulumi.set(__self__, "link_nic", link_nic)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "secondary_private_ip_count", secondary_private_ip_count)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "security_groups_names", security_groups_names)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> int:
        return pulumi.get(self, "device_number")

    @property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> bool:
        return pulumi.get(self, "is_source_dest_checked")

    @property
    @pulumi.getter(name="linkNic")
    def link_nic(self) -> 'outputs.GetVmNicLinkNicResult':
        return pulumi.get(self, "link_nic")

    @property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetVmNicLinkPublicIpResult']:
        return pulumi.get(self, "link_public_ips")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> str:
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> str:
        return pulumi.get(self, "private_dns_name")

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence['outputs.GetVmNicPrivateIpResult']:
        return pulumi.get(self, "private_ips")

    @property
    @pulumi.getter(name="secondaryPrivateIpCount")
    def secondary_private_ip_count(self) -> int:
        return pulumi.get(self, "secondary_private_ip_count")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetVmNicSecurityGroupResult']:
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="securityGroupsNames")
    def security_groups_names(self) -> Sequence[str]:
        return pulumi.get(self, "security_groups_names")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetVmNicLinkNicResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: bool,
                 device_number: str,
                 link_nic_id: str,
                 state: str):
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "link_nic_id", link_nic_id)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> str:
        return pulumi.get(self, "device_number")

    @property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> str:
        return pulumi.get(self, "link_nic_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVmNicLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 public_dns_name: str,
                 public_ip: str,
                 public_ip_account_id: str):
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> str:
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> str:
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class GetVmNicPrivateIpResult(dict):
    def __init__(__self__, *,
                 is_primary: bool,
                 link_public_ips: Sequence['outputs.GetVmNicPrivateIpLinkPublicIpResult'],
                 private_dns_name: str,
                 private_ip: str):
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> bool:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetVmNicPrivateIpLinkPublicIpResult']:
        return pulumi.get(self, "link_public_ips")

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> str:
        return pulumi.get(self, "private_dns_name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetVmNicPrivateIpLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 public_dns_name: str,
                 public_ip: str,
                 public_ip_account_id: str):
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> str:
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> str:
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class GetVmNicSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_id: str,
                 security_group_name: str):
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetVmSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_id: str,
                 security_group_name: str):
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetVmStateFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVmStateMaintenanceEventResult(dict):
    def __init__(__self__, *,
                 code: str,
                 description: str,
                 not_after: str,
                 not_before: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "not_after", not_after)
        pulumi.set(__self__, "not_before", not_before)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> str:
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> str:
        return pulumi.get(self, "not_before")


@pulumi.output_type
class GetVmStatesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVmStatesVmStateResult(dict):
    def __init__(__self__, *,
                 maintenance_events: Sequence['outputs.GetVmStatesVmStateMaintenanceEventResult'],
                 subregion_name: str,
                 vm_state: str,
                 all_vms: Optional[bool] = None,
                 vm_id: Optional[str] = None):
        pulumi.set(__self__, "maintenance_events", maintenance_events)
        pulumi.set(__self__, "subregion_name", subregion_name)
        pulumi.set(__self__, "vm_state", vm_state)
        if all_vms is not None:
            pulumi.set(__self__, "all_vms", all_vms)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="maintenanceEvents")
    def maintenance_events(self) -> Sequence['outputs.GetVmStatesVmStateMaintenanceEventResult']:
        return pulumi.get(self, "maintenance_events")

    @property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> str:
        return pulumi.get(self, "subregion_name")

    @property
    @pulumi.getter(name="vmState")
    def vm_state(self) -> str:
        return pulumi.get(self, "vm_state")

    @property
    @pulumi.getter(name="allVms")
    def all_vms(self) -> Optional[bool]:
        return pulumi.get(self, "all_vms")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[str]:
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetVmStatesVmStateMaintenanceEventResult(dict):
    def __init__(__self__, *,
                 code: str,
                 description: str,
                 not_after: str,
                 not_before: str):
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "not_after", not_after)
        pulumi.set(__self__, "not_before", not_before)

    @property
    @pulumi.getter
    def code(self) -> str:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> str:
        return pulumi.get(self, "not_after")

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> str:
        return pulumi.get(self, "not_before")


@pulumi.output_type
class GetVmTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVmTypesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVmTypesVmTypeResult(dict):
    def __init__(__self__, *,
                 bsu_optimized: bool,
                 max_private_ips: int,
                 memory_size: int,
                 vcore_count: int,
                 vm_type_name: str,
                 volume_count: int,
                 volume_size: int):
        pulumi.set(__self__, "bsu_optimized", bsu_optimized)
        pulumi.set(__self__, "max_private_ips", max_private_ips)
        pulumi.set(__self__, "memory_size", memory_size)
        pulumi.set(__self__, "vcore_count", vcore_count)
        pulumi.set(__self__, "vm_type_name", vm_type_name)
        pulumi.set(__self__, "volume_count", volume_count)
        pulumi.set(__self__, "volume_size", volume_size)

    @property
    @pulumi.getter(name="bsuOptimized")
    def bsu_optimized(self) -> bool:
        return pulumi.get(self, "bsu_optimized")

    @property
    @pulumi.getter(name="maxPrivateIps")
    def max_private_ips(self) -> int:
        return pulumi.get(self, "max_private_ips")

    @property
    @pulumi.getter(name="memorySize")
    def memory_size(self) -> int:
        return pulumi.get(self, "memory_size")

    @property
    @pulumi.getter(name="vcoreCount")
    def vcore_count(self) -> int:
        return pulumi.get(self, "vcore_count")

    @property
    @pulumi.getter(name="vmTypeName")
    def vm_type_name(self) -> str:
        return pulumi.get(self, "vm_type_name")

    @property
    @pulumi.getter(name="volumeCount")
    def volume_count(self) -> int:
        return pulumi.get(self, "volume_count")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> int:
        return pulumi.get(self, "volume_size")


@pulumi.output_type
class GetVmsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVmsVmResult(dict):
    def __init__(__self__, *,
                 architecture: str,
                 block_device_mappings_createds: Sequence['outputs.GetVmsVmBlockDeviceMappingsCreatedResult'],
                 bsu_optimized: bool,
                 client_token: str,
                 creation_date: str,
                 deletion_protection: bool,
                 hypervisor: str,
                 image_id: str,
                 is_source_dest_checked: bool,
                 keypair_name: str,
                 launch_number: int,
                 nested_virtualization: bool,
                 net_id: str,
                 nics: Sequence['outputs.GetVmsVmNicResult'],
                 os_family: str,
                 performance: str,
                 placement_subregion_name: str,
                 placement_tenancy: str,
                 private_dns_name: str,
                 private_ip: str,
                 product_codes: Sequence[str],
                 public_dns_name: str,
                 public_ip: str,
                 request_id: str,
                 reservation_id: str,
                 root_device_name: str,
                 root_device_type: str,
                 security_groups: Sequence['outputs.GetVmsVmSecurityGroupResult'],
                 state: str,
                 state_reason: str,
                 subnet_id: str,
                 tags: Sequence['outputs.GetVmsVmTagResult'],
                 user_data: str,
                 vm_id: str,
                 vm_initiated_shutdown_behavior: str,
                 vm_type: str,
                 private_ips: Optional[Sequence[str]] = None,
                 security_group_ids: Optional[Sequence[str]] = None,
                 security_group_names: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "architecture", architecture)
        pulumi.set(__self__, "block_device_mappings_createds", block_device_mappings_createds)
        pulumi.set(__self__, "bsu_optimized", bsu_optimized)
        pulumi.set(__self__, "client_token", client_token)
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "deletion_protection", deletion_protection)
        pulumi.set(__self__, "hypervisor", hypervisor)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        pulumi.set(__self__, "keypair_name", keypair_name)
        pulumi.set(__self__, "launch_number", launch_number)
        pulumi.set(__self__, "nested_virtualization", nested_virtualization)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "nics", nics)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "performance", performance)
        pulumi.set(__self__, "placement_subregion_name", placement_subregion_name)
        pulumi.set(__self__, "placement_tenancy", placement_tenancy)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ip", private_ip)
        pulumi.set(__self__, "product_codes", product_codes)
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "request_id", request_id)
        pulumi.set(__self__, "reservation_id", reservation_id)
        pulumi.set(__self__, "root_device_name", root_device_name)
        pulumi.set(__self__, "root_device_type", root_device_type)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "state_reason", state_reason)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "user_data", user_data)
        pulumi.set(__self__, "vm_id", vm_id)
        pulumi.set(__self__, "vm_initiated_shutdown_behavior", vm_initiated_shutdown_behavior)
        pulumi.set(__self__, "vm_type", vm_type)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_group_names is not None:
            pulumi.set(__self__, "security_group_names", security_group_names)

    @property
    @pulumi.getter
    def architecture(self) -> str:
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="blockDeviceMappingsCreateds")
    def block_device_mappings_createds(self) -> Sequence['outputs.GetVmsVmBlockDeviceMappingsCreatedResult']:
        return pulumi.get(self, "block_device_mappings_createds")

    @property
    @pulumi.getter(name="bsuOptimized")
    def bsu_optimized(self) -> bool:
        return pulumi.get(self, "bsu_optimized")

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> str:
        return pulumi.get(self, "client_token")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> str:
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> bool:
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter
    def hypervisor(self) -> str:
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> bool:
        return pulumi.get(self, "is_source_dest_checked")

    @property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> str:
        return pulumi.get(self, "keypair_name")

    @property
    @pulumi.getter(name="launchNumber")
    def launch_number(self) -> int:
        return pulumi.get(self, "launch_number")

    @property
    @pulumi.getter(name="nestedVirtualization")
    def nested_virtualization(self) -> bool:
        return pulumi.get(self, "nested_virtualization")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter
    def nics(self) -> Sequence['outputs.GetVmsVmNicResult']:
        return pulumi.get(self, "nics")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> str:
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def performance(self) -> str:
        return pulumi.get(self, "performance")

    @property
    @pulumi.getter(name="placementSubregionName")
    def placement_subregion_name(self) -> str:
        return pulumi.get(self, "placement_subregion_name")

    @property
    @pulumi.getter(name="placementTenancy")
    def placement_tenancy(self) -> str:
        return pulumi.get(self, "placement_tenancy")

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> str:
        return pulumi.get(self, "private_dns_name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="productCodes")
    def product_codes(self) -> Sequence[str]:
        return pulumi.get(self, "product_codes")

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> str:
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="reservationId")
    def reservation_id(self) -> str:
        return pulumi.get(self, "reservation_id")

    @property
    @pulumi.getter(name="rootDeviceName")
    def root_device_name(self) -> str:
        return pulumi.get(self, "root_device_name")

    @property
    @pulumi.getter(name="rootDeviceType")
    def root_device_type(self) -> str:
        return pulumi.get(self, "root_device_type")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetVmsVmSecurityGroupResult']:
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateReason")
    def state_reason(self) -> str:
        return pulumi.get(self, "state_reason")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVmsVmTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> str:
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")

    @property
    @pulumi.getter(name="vmInitiatedShutdownBehavior")
    def vm_initiated_shutdown_behavior(self) -> str:
        return pulumi.get(self, "vm_initiated_shutdown_behavior")

    @property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> str:
        return pulumi.get(self, "vm_type")

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "private_ips")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="securityGroupNames")
    def security_group_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_group_names")


@pulumi.output_type
class GetVmsVmBlockDeviceMappingsCreatedResult(dict):
    def __init__(__self__, *,
                 bsu: 'outputs.GetVmsVmBlockDeviceMappingsCreatedBsuResult',
                 device_name: Optional[str] = None):
        pulumi.set(__self__, "bsu", bsu)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)

    @property
    @pulumi.getter
    def bsu(self) -> 'outputs.GetVmsVmBlockDeviceMappingsCreatedBsuResult':
        return pulumi.get(self, "bsu")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        return pulumi.get(self, "device_name")


@pulumi.output_type
class GetVmsVmBlockDeviceMappingsCreatedBsuResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: bool,
                 link_date: str,
                 state: int,
                 volume_id: float):
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "link_date", link_date)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter(name="linkDate")
    def link_date(self) -> str:
        return pulumi.get(self, "link_date")

    @property
    @pulumi.getter
    def state(self) -> int:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> float:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVmsVmNicResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 delete_on_vm_deletion: bool,
                 description: str,
                 device_number: int,
                 is_source_dest_checked: bool,
                 link_nic: 'outputs.GetVmsVmNicLinkNicResult',
                 link_public_ips: Sequence['outputs.GetVmsVmNicLinkPublicIpResult'],
                 mac_address: str,
                 net_id: str,
                 nic_id: str,
                 private_dns_name: str,
                 private_ips: Sequence['outputs.GetVmsVmNicPrivateIpResult'],
                 secondary_private_ip_count: int,
                 security_group_ids: Sequence[str],
                 security_groups: Sequence['outputs.GetVmsVmNicSecurityGroupResult'],
                 security_groups_names: Sequence[str],
                 state: str,
                 subnet_id: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        pulumi.set(__self__, "link_nic", link_nic)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "secondary_private_ip_count", secondary_private_ip_count)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "security_groups_names", security_groups_names)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> int:
        return pulumi.get(self, "device_number")

    @property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> bool:
        return pulumi.get(self, "is_source_dest_checked")

    @property
    @pulumi.getter(name="linkNic")
    def link_nic(self) -> 'outputs.GetVmsVmNicLinkNicResult':
        return pulumi.get(self, "link_nic")

    @property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetVmsVmNicLinkPublicIpResult']:
        return pulumi.get(self, "link_public_ips")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> str:
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> str:
        return pulumi.get(self, "private_dns_name")

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence['outputs.GetVmsVmNicPrivateIpResult']:
        return pulumi.get(self, "private_ips")

    @property
    @pulumi.getter(name="secondaryPrivateIpCount")
    def secondary_private_ip_count(self) -> int:
        return pulumi.get(self, "secondary_private_ip_count")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetVmsVmNicSecurityGroupResult']:
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="securityGroupsNames")
    def security_groups_names(self) -> Sequence[str]:
        return pulumi.get(self, "security_groups_names")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetVmsVmNicLinkNicResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: bool,
                 device_number: str,
                 link_nic_id: str,
                 state: str):
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "link_nic_id", link_nic_id)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> str:
        return pulumi.get(self, "device_number")

    @property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> str:
        return pulumi.get(self, "link_nic_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVmsVmNicLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 public_dns_name: str,
                 public_ip: str,
                 public_ip_account_id: str):
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> str:
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> str:
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class GetVmsVmNicPrivateIpResult(dict):
    def __init__(__self__, *,
                 is_primary: bool,
                 link_public_ips: Sequence['outputs.GetVmsVmNicPrivateIpLinkPublicIpResult'],
                 private_dns_name: str,
                 private_ip: str):
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> bool:
        return pulumi.get(self, "is_primary")

    @property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetVmsVmNicPrivateIpLinkPublicIpResult']:
        return pulumi.get(self, "link_public_ips")

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> str:
        return pulumi.get(self, "private_dns_name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")


@pulumi.output_type
class GetVmsVmNicPrivateIpLinkPublicIpResult(dict):
    def __init__(__self__, *,
                 public_dns_name: str,
                 public_ip: str,
                 public_ip_account_id: str):
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> str:
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> str:
        return pulumi.get(self, "public_ip_account_id")


@pulumi.output_type
class GetVmsVmNicSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_id: str,
                 security_group_name: str):
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetVmsVmSecurityGroupResult(dict):
    def __init__(__self__, *,
                 security_group_id: str,
                 security_group_name: str):
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")


@pulumi.output_type
class GetVmsVmTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVolumeFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVolumeLinkedVolumeResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: bool,
                 device_name: str,
                 state: str,
                 vm_id: str,
                 volume_id: str):
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_id", vm_id)
        pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumeTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVolumesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVolumesVolumeResult(dict):
    def __init__(__self__, *,
                 creation_date: str,
                 iops: int,
                 linked_volumes: Sequence['outputs.GetVolumesVolumeLinkedVolumeResult'],
                 size: int,
                 snapshot_id: str,
                 state: str,
                 subregion_name: str,
                 tags: Sequence['outputs.GetVolumesVolumeTagResult'],
                 volume_id: str,
                 volume_type: str):
        pulumi.set(__self__, "creation_date", creation_date)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "linked_volumes", linked_volumes)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subregion_name", subregion_name)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "volume_id", volume_id)
        pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> str:
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def iops(self) -> int:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="linkedVolumes")
    def linked_volumes(self) -> Sequence['outputs.GetVolumesVolumeLinkedVolumeResult']:
        return pulumi.get(self, "linked_volumes")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> str:
        return pulumi.get(self, "subregion_name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVolumesVolumeTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        return pulumi.get(self, "volume_type")


@pulumi.output_type
class GetVolumesVolumeLinkedVolumeResult(dict):
    def __init__(__self__, *,
                 delete_on_vm_deletion: bool,
                 device_name: str,
                 state: str,
                 vm_id: str,
                 volume_id: str):
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "vm_id", vm_id)
        pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> str:
        return pulumi.get(self, "volume_id")


@pulumi.output_type
class GetVolumesVolumeTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVpnConnectionFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVpnConnectionRouteResult(dict):
    def __init__(__self__, *,
                 destination_ip_range: str,
                 route_type: str,
                 state: str):
        pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        pulumi.set(__self__, "route_type", route_type)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> str:
        return pulumi.get(self, "destination_ip_range")

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> str:
        return pulumi.get(self, "route_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVpnConnectionTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVpnConnectionVgwTelemetryResult(dict):
    def __init__(__self__, *,
                 accepted_route_count: int,
                 last_state_change_date: str,
                 outside_ip_address: str,
                 state: str,
                 state_description: str):
        pulumi.set(__self__, "accepted_route_count", accepted_route_count)
        pulumi.set(__self__, "last_state_change_date", last_state_change_date)
        pulumi.set(__self__, "outside_ip_address", outside_ip_address)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "state_description", state_description)

    @property
    @pulumi.getter(name="acceptedRouteCount")
    def accepted_route_count(self) -> int:
        return pulumi.get(self, "accepted_route_count")

    @property
    @pulumi.getter(name="lastStateChangeDate")
    def last_state_change_date(self) -> str:
        return pulumi.get(self, "last_state_change_date")

    @property
    @pulumi.getter(name="outsideIpAddress")
    def outside_ip_address(self) -> str:
        return pulumi.get(self, "outside_ip_address")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateDescription")
    def state_description(self) -> str:
        return pulumi.get(self, "state_description")


@pulumi.output_type
class GetVpnConnectionsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetVpnConnectionsVpnConnectionResult(dict):
    def __init__(__self__, *,
                 client_gateway_configuration: str,
                 client_gateway_id: str,
                 connection_type: str,
                 routes: Sequence['outputs.GetVpnConnectionsVpnConnectionRouteResult'],
                 state: str,
                 tags: Sequence['outputs.GetVpnConnectionsVpnConnectionTagResult'],
                 vgw_telemetries: Sequence['outputs.GetVpnConnectionsVpnConnectionVgwTelemetryResult'],
                 virtual_gateway_id: str,
                 vpn_connection_id: str,
                 static_routes_only: Optional[bool] = None):
        pulumi.set(__self__, "client_gateway_configuration", client_gateway_configuration)
        pulumi.set(__self__, "client_gateway_id", client_gateway_id)
        pulumi.set(__self__, "connection_type", connection_type)
        pulumi.set(__self__, "routes", routes)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vgw_telemetries", vgw_telemetries)
        pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)
        pulumi.set(__self__, "vpn_connection_id", vpn_connection_id)
        if static_routes_only is not None:
            pulumi.set(__self__, "static_routes_only", static_routes_only)

    @property
    @pulumi.getter(name="clientGatewayConfiguration")
    def client_gateway_configuration(self) -> str:
        return pulumi.get(self, "client_gateway_configuration")

    @property
    @pulumi.getter(name="clientGatewayId")
    def client_gateway_id(self) -> str:
        return pulumi.get(self, "client_gateway_id")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetVpnConnectionsVpnConnectionRouteResult']:
        return pulumi.get(self, "routes")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVpnConnectionsVpnConnectionTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vgwTelemetries")
    def vgw_telemetries(self) -> Sequence['outputs.GetVpnConnectionsVpnConnectionVgwTelemetryResult']:
        return pulumi.get(self, "vgw_telemetries")

    @property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> str:
        return pulumi.get(self, "virtual_gateway_id")

    @property
    @pulumi.getter(name="vpnConnectionId")
    def vpn_connection_id(self) -> str:
        return pulumi.get(self, "vpn_connection_id")

    @property
    @pulumi.getter(name="staticRoutesOnly")
    def static_routes_only(self) -> Optional[bool]:
        return pulumi.get(self, "static_routes_only")


@pulumi.output_type
class GetVpnConnectionsVpnConnectionRouteResult(dict):
    def __init__(__self__, *,
                 destination_ip_range: str,
                 route_type: str,
                 state: str):
        pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        pulumi.set(__self__, "route_type", route_type)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> str:
        return pulumi.get(self, "destination_ip_range")

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> str:
        return pulumi.get(self, "route_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")


@pulumi.output_type
class GetVpnConnectionsVpnConnectionTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVpnConnectionsVpnConnectionVgwTelemetryResult(dict):
    def __init__(__self__, *,
                 accepted_route_count: int,
                 last_state_change_date: str,
                 outside_ip_address: str,
                 state: str,
                 state_description: str):
        pulumi.set(__self__, "accepted_route_count", accepted_route_count)
        pulumi.set(__self__, "last_state_change_date", last_state_change_date)
        pulumi.set(__self__, "outside_ip_address", outside_ip_address)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "state_description", state_description)

    @property
    @pulumi.getter(name="acceptedRouteCount")
    def accepted_route_count(self) -> int:
        return pulumi.get(self, "accepted_route_count")

    @property
    @pulumi.getter(name="lastStateChangeDate")
    def last_state_change_date(self) -> str:
        return pulumi.get(self, "last_state_change_date")

    @property
    @pulumi.getter(name="outsideIpAddress")
    def outside_ip_address(self) -> str:
        return pulumi.get(self, "outside_ip_address")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateDescription")
    def state_description(self) -> str:
        return pulumi.get(self, "state_description")


