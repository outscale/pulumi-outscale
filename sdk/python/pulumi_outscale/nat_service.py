# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NatServiceArgs', 'NatService']

@pulumi.input_type
class NatServiceArgs:
    def __init__(__self__, *,
                 public_ip_id: pulumi.Input[str],
                 subnet_id: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NatServiceTagArgs']]]] = None):
        """
        The set of arguments for constructing a NatService resource.
        :param pulumi.Input[str] public_ip_id: The allocation ID of the public IP to associate with the NAT service.<br />
               If the public IP is already associated with another resource, you must first disassociate it.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet in which you want to create the NAT service.
        :param pulumi.Input[Sequence[pulumi.Input['NatServiceTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        pulumi.set(__self__, "public_ip_id", public_ip_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> pulumi.Input[str]:
        """
        The allocation ID of the public IP to associate with the NAT service.<br />
        If the public IP is already associated with another resource, you must first disassociate it.
        """
        return pulumi.get(self, "public_ip_id")

    @public_ip_id.setter
    def public_ip_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_ip_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        The ID of the Subnet in which you want to create the NAT service.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NatServiceTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NatServiceTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _NatServiceState:
    def __init__(__self__, *,
                 nat_service_id: Optional[pulumi.Input[str]] = None,
                 net_id: Optional[pulumi.Input[str]] = None,
                 public_ip_id: Optional[pulumi.Input[str]] = None,
                 public_ips: Optional[pulumi.Input[Sequence[pulumi.Input['NatServicePublicIpArgs']]]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NatServiceTagArgs']]]] = None):
        """
        Input properties used for looking up and filtering NatService resources.
        :param pulumi.Input[str] nat_service_id: The ID of the NAT service.
        :param pulumi.Input[str] net_id: The ID of the Net in which the NAT service is.
        :param pulumi.Input[str] public_ip_id: The allocation ID of the public IP to associate with the NAT service.<br />
               If the public IP is already associated with another resource, you must first disassociate it.
        :param pulumi.Input[Sequence[pulumi.Input['NatServicePublicIpArgs']]] public_ips: Information about the public IP or IPs associated with the NAT service.
        :param pulumi.Input[str] state: The state of the NAT service (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        :param pulumi.Input[str] subnet_id: The ID of the Subnet in which you want to create the NAT service.
        :param pulumi.Input[Sequence[pulumi.Input['NatServiceTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        if nat_service_id is not None:
            pulumi.set(__self__, "nat_service_id", nat_service_id)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if public_ip_id is not None:
            pulumi.set(__self__, "public_ip_id", public_ip_id)
        if public_ips is not None:
            pulumi.set(__self__, "public_ips", public_ips)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the NAT service.
        """
        return pulumi.get(self, "nat_service_id")

    @nat_service_id.setter
    def nat_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_service_id", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Net in which the NAT service is.
        """
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> Optional[pulumi.Input[str]]:
        """
        The allocation ID of the public IP to associate with the NAT service.<br />
        If the public IP is already associated with another resource, you must first disassociate it.
        """
        return pulumi.get(self, "public_ip_id")

    @public_ip_id.setter
    def public_ip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip_id", value)

    @property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NatServicePublicIpArgs']]]]:
        """
        Information about the public IP or IPs associated with the NAT service.
        """
        return pulumi.get(self, "public_ips")

    @public_ips.setter
    def public_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NatServicePublicIpArgs']]]]):
        pulumi.set(self, "public_ips", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of the NAT service (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Subnet in which you want to create the NAT service.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NatServiceTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NatServiceTagArgs']]]]):
        pulumi.set(self, "tags", value)


class NatService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 public_ip_id: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NatServiceTagArgs']]]]] = None,
                 __props__=None):
        """
        Manages a NAT service.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-NAT-Gateways.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-natservice).

        ## Example Usage
        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net01 = outscale.Net("net01", ip_range="10.0.0.0/16")
        subnet01 = outscale.Subnet("subnet01",
            net_id=net01.net_id,
            ip_range="10.0.0.0/18")
        route_table01 = outscale.RouteTable("routeTable01", net_id=net01.net_id)
        outscale_route_table_link01 = outscale.RouteTableLink("outscaleRouteTableLink01",
            subnet_id=subnet01.subnet_id,
            route_table_id=route_table01.route_table_id)
        internet_service01 = outscale.InternetService("internetService01")
        internet_service_link01 = outscale.InternetServiceLink("internetServiceLink01",
            net_id=net01.net_id,
            internet_service_id=internet_service01.internet_service_id)
        route01 = outscale.Route("route01",
            destination_ip_range="0.0.0.0/0",
            gateway_id=internet_service01.internet_service_id,
            route_table_id=route_table01.route_table_id,
            opts=pulumi.ResourceOptions(depends_on=[internet_service_link01]))
        public_ip01 = outscale.PublicIp("publicIp01")
        ```
        ### Create a NAT service

        ```python
        import pulumi
        import pulumi_outscale as outscale

        nat_service01 = outscale.NatService("natService01",
            subnet_id=outscale_subnet["subnet01"]["subnet_id"],
            public_ip_id=outscale_public_ip["public_ip01"]["public_ip_id"],
            opts=pulumi.ResourceOptions(depends_on=[outscale_route["route01"]]))
        ```

        ## Import

        A NAT service can be imported using its ID. For exampleconsole

        ```sh
         $ pulumi import outscale:index/natService:NatService ImportedNatService nat-87654321
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] public_ip_id: The allocation ID of the public IP to associate with the NAT service.<br />
               If the public IP is already associated with another resource, you must first disassociate it.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet in which you want to create the NAT service.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NatServiceTagArgs']]]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NatServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a NAT service.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-NAT-Gateways.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-natservice).

        ## Example Usage
        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net01 = outscale.Net("net01", ip_range="10.0.0.0/16")
        subnet01 = outscale.Subnet("subnet01",
            net_id=net01.net_id,
            ip_range="10.0.0.0/18")
        route_table01 = outscale.RouteTable("routeTable01", net_id=net01.net_id)
        outscale_route_table_link01 = outscale.RouteTableLink("outscaleRouteTableLink01",
            subnet_id=subnet01.subnet_id,
            route_table_id=route_table01.route_table_id)
        internet_service01 = outscale.InternetService("internetService01")
        internet_service_link01 = outscale.InternetServiceLink("internetServiceLink01",
            net_id=net01.net_id,
            internet_service_id=internet_service01.internet_service_id)
        route01 = outscale.Route("route01",
            destination_ip_range="0.0.0.0/0",
            gateway_id=internet_service01.internet_service_id,
            route_table_id=route_table01.route_table_id,
            opts=pulumi.ResourceOptions(depends_on=[internet_service_link01]))
        public_ip01 = outscale.PublicIp("publicIp01")
        ```
        ### Create a NAT service

        ```python
        import pulumi
        import pulumi_outscale as outscale

        nat_service01 = outscale.NatService("natService01",
            subnet_id=outscale_subnet["subnet01"]["subnet_id"],
            public_ip_id=outscale_public_ip["public_ip01"]["public_ip_id"],
            opts=pulumi.ResourceOptions(depends_on=[outscale_route["route01"]]))
        ```

        ## Import

        A NAT service can be imported using its ID. For exampleconsole

        ```sh
         $ pulumi import outscale:index/natService:NatService ImportedNatService nat-87654321
        ```

        :param str resource_name: The name of the resource.
        :param NatServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NatServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 public_ip_id: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NatServiceTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NatServiceArgs.__new__(NatServiceArgs)

            if public_ip_id is None and not opts.urn:
                raise TypeError("Missing required property 'public_ip_id'")
            __props__.__dict__["public_ip_id"] = public_ip_id
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["nat_service_id"] = None
            __props__.__dict__["net_id"] = None
            __props__.__dict__["public_ips"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["state"] = None
        super(NatService, __self__).__init__(
            'outscale:index/natService:NatService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            nat_service_id: Optional[pulumi.Input[str]] = None,
            net_id: Optional[pulumi.Input[str]] = None,
            public_ip_id: Optional[pulumi.Input[str]] = None,
            public_ips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NatServicePublicIpArgs']]]]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NatServiceTagArgs']]]]] = None) -> 'NatService':
        """
        Get an existing NatService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] nat_service_id: The ID of the NAT service.
        :param pulumi.Input[str] net_id: The ID of the Net in which the NAT service is.
        :param pulumi.Input[str] public_ip_id: The allocation ID of the public IP to associate with the NAT service.<br />
               If the public IP is already associated with another resource, you must first disassociate it.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NatServicePublicIpArgs']]]] public_ips: Information about the public IP or IPs associated with the NAT service.
        :param pulumi.Input[str] state: The state of the NAT service (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        :param pulumi.Input[str] subnet_id: The ID of the Subnet in which you want to create the NAT service.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NatServiceTagArgs']]]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NatServiceState.__new__(_NatServiceState)

        __props__.__dict__["nat_service_id"] = nat_service_id
        __props__.__dict__["net_id"] = net_id
        __props__.__dict__["public_ip_id"] = public_ip_id
        __props__.__dict__["public_ips"] = public_ips
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["state"] = state
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        return NatService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> pulumi.Output[str]:
        """
        The ID of the NAT service.
        """
        return pulumi.get(self, "nat_service_id")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> pulumi.Output[str]:
        """
        The ID of the Net in which the NAT service is.
        """
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> pulumi.Output[str]:
        """
        The allocation ID of the public IP to associate with the NAT service.<br />
        If the public IP is already associated with another resource, you must first disassociate it.
        """
        return pulumi.get(self, "public_ip_id")

    @property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> pulumi.Output[Sequence['outputs.NatServicePublicIp']]:
        """
        Information about the public IP or IPs associated with the NAT service.
        """
        return pulumi.get(self, "public_ips")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The state of the NAT service (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        The ID of the Subnet in which you want to create the NAT service.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.NatServiceTag']]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

