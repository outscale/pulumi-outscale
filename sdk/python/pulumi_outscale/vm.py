# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VmArgs', 'Vm']

@pulumi.input_type
class VmArgs:
    def __init__(__self__, *,
                 image_id: pulumi.Input[str],
                 block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['VmBlockDeviceMappingArgs']]]] = None,
                 bsu_optimized: Optional[pulumi.Input[bool]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 get_admin_password: Optional[pulumi.Input[bool]] = None,
                 is_source_dest_checked: Optional[pulumi.Input[bool]] = None,
                 keypair_name: Optional[pulumi.Input[str]] = None,
                 nested_virtualization: Optional[pulumi.Input[bool]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input['VmNicArgs']]]] = None,
                 performance: Optional[pulumi.Input[str]] = None,
                 placement_subregion_name: Optional[pulumi.Input[str]] = None,
                 placement_tenancy: Optional[pulumi.Input[str]] = None,
                 primary_nics: Optional[pulumi.Input[Sequence[pulumi.Input['VmPrimaryNicArgs']]]] = None,
                 private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['VmTagArgs']]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 vm_initiated_shutdown_behavior: Optional[pulumi.Input[str]] = None,
                 vm_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Vm resource.
        :param pulumi.Input[str] image_id: The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
        :param pulumi.Input[Sequence[pulumi.Input['VmBlockDeviceMappingArgs']]] block_device_mappings: One or more block device mappings.
        :param pulumi.Input[bool] deletion_protection: If true, you cannot delete the VM unless you change this parameter back to false.
        :param pulumi.Input[bool] get_admin_password: (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `admin_password` attribute.
        :param pulumi.Input[bool] is_source_dest_checked: (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
        :param pulumi.Input[str] keypair_name: The name of the keypair.
        :param pulumi.Input[bool] nested_virtualization: (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
        :param pulumi.Input[Sequence[pulumi.Input['VmNicArgs']]] nics: One or more NICs. If you specify this parameter, you must not specify the `subnet_id` and `subregion_name` parameters. To define a NIC as the primary network interface of the VM, use the `primary_nic` argument.
        :param pulumi.Input[str] performance: The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
        :param pulumi.Input[str] placement_subregion_name: The name of the Subregion where the VM is placed.
        :param pulumi.Input[str] placement_tenancy: The tenancy of the VM (`default` | `dedicated`).
        :param pulumi.Input[Sequence[pulumi.Input['VmPrimaryNicArgs']]] primary_nics: The primary network interface of the VM.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_ips: One or more private IPs of the VM.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: One or more IDs of security group for the VMs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_names: One or more names of security groups for the VMs.
        :param pulumi.Input[str] state: The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
        :param pulumi.Input[Sequence[pulumi.Input['VmTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[str] user_data: Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
        :param pulumi.Input[str] vm_id: The ID of the VM.
        :param pulumi.Input[str] vm_initiated_shutdown_behavior: The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
        :param pulumi.Input[str] vm_type: The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.<br /> For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
        """
        pulumi.set(__self__, "image_id", image_id)
        if block_device_mappings is not None:
            pulumi.set(__self__, "block_device_mappings", block_device_mappings)
        if bsu_optimized is not None:
            pulumi.set(__self__, "bsu_optimized", bsu_optimized)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if get_admin_password is not None:
            pulumi.set(__self__, "get_admin_password", get_admin_password)
        if is_source_dest_checked is not None:
            pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        if keypair_name is not None:
            pulumi.set(__self__, "keypair_name", keypair_name)
        if nested_virtualization is not None:
            pulumi.set(__self__, "nested_virtualization", nested_virtualization)
        if nics is not None:
            pulumi.set(__self__, "nics", nics)
        if performance is not None:
            pulumi.set(__self__, "performance", performance)
        if placement_subregion_name is not None:
            pulumi.set(__self__, "placement_subregion_name", placement_subregion_name)
        if placement_tenancy is not None:
            pulumi.set(__self__, "placement_tenancy", placement_tenancy)
        if primary_nics is not None:
            pulumi.set(__self__, "primary_nics", primary_nics)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_group_names is not None:
            pulumi.set(__self__, "security_group_names", security_group_names)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)
        if vm_initiated_shutdown_behavior is not None:
            pulumi.set(__self__, "vm_initiated_shutdown_behavior", vm_initiated_shutdown_behavior)
        if vm_type is not None:
            pulumi.set(__self__, "vm_type", vm_type)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Input[str]:
        """
        The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="blockDeviceMappings")
    def block_device_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmBlockDeviceMappingArgs']]]]:
        """
        One or more block device mappings.
        """
        return pulumi.get(self, "block_device_mappings")

    @block_device_mappings.setter
    def block_device_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmBlockDeviceMappingArgs']]]]):
        pulumi.set(self, "block_device_mappings", value)

    @property
    @pulumi.getter(name="bsuOptimized")
    def bsu_optimized(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bsu_optimized")

    @bsu_optimized.setter
    def bsu_optimized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bsu_optimized", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, you cannot delete the VM unless you change this parameter back to false.
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter(name="getAdminPassword")
    def get_admin_password(self) -> Optional[pulumi.Input[bool]]:
        """
        (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `admin_password` attribute.
        """
        return pulumi.get(self, "get_admin_password")

    @get_admin_password.setter
    def get_admin_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "get_admin_password", value)

    @property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> Optional[pulumi.Input[bool]]:
        """
        (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
        """
        return pulumi.get(self, "is_source_dest_checked")

    @is_source_dest_checked.setter
    def is_source_dest_checked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_source_dest_checked", value)

    @property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the keypair.
        """
        return pulumi.get(self, "keypair_name")

    @keypair_name.setter
    def keypair_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_name", value)

    @property
    @pulumi.getter(name="nestedVirtualization")
    def nested_virtualization(self) -> Optional[pulumi.Input[bool]]:
        """
        (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
        """
        return pulumi.get(self, "nested_virtualization")

    @nested_virtualization.setter
    def nested_virtualization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nested_virtualization", value)

    @property
    @pulumi.getter
    def nics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmNicArgs']]]]:
        """
        One or more NICs. If you specify this parameter, you must not specify the `subnet_id` and `subregion_name` parameters. To define a NIC as the primary network interface of the VM, use the `primary_nic` argument.
        """
        return pulumi.get(self, "nics")

    @nics.setter
    def nics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmNicArgs']]]]):
        pulumi.set(self, "nics", value)

    @property
    @pulumi.getter
    def performance(self) -> Optional[pulumi.Input[str]]:
        """
        The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
        """
        return pulumi.get(self, "performance")

    @performance.setter
    def performance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "performance", value)

    @property
    @pulumi.getter(name="placementSubregionName")
    def placement_subregion_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Subregion where the VM is placed.
        """
        return pulumi.get(self, "placement_subregion_name")

    @placement_subregion_name.setter
    def placement_subregion_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_subregion_name", value)

    @property
    @pulumi.getter(name="placementTenancy")
    def placement_tenancy(self) -> Optional[pulumi.Input[str]]:
        """
        The tenancy of the VM (`default` | `dedicated`).
        """
        return pulumi.get(self, "placement_tenancy")

    @placement_tenancy.setter
    def placement_tenancy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_tenancy", value)

    @property
    @pulumi.getter(name="primaryNics")
    def primary_nics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmPrimaryNicArgs']]]]:
        """
        The primary network interface of the VM.
        """
        return pulumi.get(self, "primary_nics")

    @primary_nics.setter
    def primary_nics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmPrimaryNicArgs']]]]):
        pulumi.set(self, "primary_nics", value)

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        One or more private IPs of the VM.
        """
        return pulumi.get(self, "private_ips")

    @private_ips.setter
    def private_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_ips", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        One or more IDs of security group for the VMs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="securityGroupNames")
    def security_group_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        One or more names of security groups for the VMs.
        """
        return pulumi.get(self, "security_group_names")

    @security_group_names.setter
    def security_group_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_names", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the VM.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_id", value)

    @property
    @pulumi.getter(name="vmInitiatedShutdownBehavior")
    def vm_initiated_shutdown_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
        """
        return pulumi.get(self, "vm_initiated_shutdown_behavior")

    @vm_initiated_shutdown_behavior.setter
    def vm_initiated_shutdown_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_initiated_shutdown_behavior", value)

    @property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.<br /> For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
        """
        return pulumi.get(self, "vm_type")

    @vm_type.setter
    def vm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_type", value)


@pulumi.input_type
class _VmState:
    def __init__(__self__, *,
                 admin_password: Optional[pulumi.Input[str]] = None,
                 architecture: Optional[pulumi.Input[str]] = None,
                 block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['VmBlockDeviceMappingArgs']]]] = None,
                 block_device_mappings_createds: Optional[pulumi.Input[Sequence[pulumi.Input['VmBlockDeviceMappingsCreatedArgs']]]] = None,
                 bsu_optimized: Optional[pulumi.Input[bool]] = None,
                 client_token: Optional[pulumi.Input[str]] = None,
                 creation_date: Optional[pulumi.Input[str]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 get_admin_password: Optional[pulumi.Input[bool]] = None,
                 hypervisor: Optional[pulumi.Input[str]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 is_source_dest_checked: Optional[pulumi.Input[bool]] = None,
                 keypair_name: Optional[pulumi.Input[str]] = None,
                 launch_number: Optional[pulumi.Input[int]] = None,
                 nested_virtualization: Optional[pulumi.Input[bool]] = None,
                 net_id: Optional[pulumi.Input[str]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input['VmNicArgs']]]] = None,
                 os_family: Optional[pulumi.Input[str]] = None,
                 performance: Optional[pulumi.Input[str]] = None,
                 placement_subregion_name: Optional[pulumi.Input[str]] = None,
                 placement_tenancy: Optional[pulumi.Input[str]] = None,
                 primary_nics: Optional[pulumi.Input[Sequence[pulumi.Input['VmPrimaryNicArgs']]]] = None,
                 private_dns_name: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None,
                 private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 product_codes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 public_dns_name: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 reservation_id: Optional[pulumi.Input[str]] = None,
                 root_device_name: Optional[pulumi.Input[str]] = None,
                 root_device_type: Optional[pulumi.Input[str]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input['VmSecurityGroupArgs']]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 state_reason: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['VmTagArgs']]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 vm_initiated_shutdown_behavior: Optional[pulumi.Input[str]] = None,
                 vm_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Vm resources.
        :param pulumi.Input[str] architecture: The architecture of the VM (`i386` \\| `x86_64`).
        :param pulumi.Input[Sequence[pulumi.Input['VmBlockDeviceMappingArgs']]] block_device_mappings: One or more block device mappings.
        :param pulumi.Input[Sequence[pulumi.Input['VmBlockDeviceMappingsCreatedArgs']]] block_device_mappings_createds: The block device mapping of the VM.
        :param pulumi.Input[str] client_token: A unique identifier which enables you to manage the idempotency.
        :param pulumi.Input[str] creation_date: The date and time of creation of the VM.
        :param pulumi.Input[bool] deletion_protection: If true, you cannot delete the VM unless you change this parameter back to false.
        :param pulumi.Input[bool] get_admin_password: (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `admin_password` attribute.
        :param pulumi.Input[str] hypervisor: The hypervisor type of the VMs (`ovm` \\| `xen`).
        :param pulumi.Input[str] image_id: The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
        :param pulumi.Input[bool] is_source_dest_checked: (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
        :param pulumi.Input[str] keypair_name: The name of the keypair.
        :param pulumi.Input[int] launch_number: The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
        :param pulumi.Input[bool] nested_virtualization: (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
        :param pulumi.Input[str] net_id: The ID of the Net for the NIC.
        :param pulumi.Input[Sequence[pulumi.Input['VmNicArgs']]] nics: One or more NICs. If you specify this parameter, you must not specify the `subnet_id` and `subregion_name` parameters. To define a NIC as the primary network interface of the VM, use the `primary_nic` argument.
        :param pulumi.Input[str] os_family: Indicates the operating system (OS) of the VM.
        :param pulumi.Input[str] performance: The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
        :param pulumi.Input[str] placement_subregion_name: The name of the Subregion where the VM is placed.
        :param pulumi.Input[str] placement_tenancy: The tenancy of the VM (`default` | `dedicated`).
        :param pulumi.Input[Sequence[pulumi.Input['VmPrimaryNicArgs']]] primary_nics: The primary network interface of the VM.
        :param pulumi.Input[str] private_dns_name: The name of the private DNS.
        :param pulumi.Input[str] private_ip: The private IP of the NIC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_ips: One or more private IPs of the VM.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] product_codes: The product codes associated with the OMI used to create the VM.
        :param pulumi.Input[str] public_dns_name: The name of the public DNS.
        :param pulumi.Input[str] public_ip: The public IP of the VM.
        :param pulumi.Input[str] reservation_id: The reservation ID of the VM.
        :param pulumi.Input[str] root_device_name: The name of the root device for the VM (for example, `/dev/vda1`).
        :param pulumi.Input[str] root_device_type: The type of root device used by the VM (always `bsu`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: One or more IDs of security group for the VMs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_names: One or more names of security groups for the VMs.
        :param pulumi.Input[Sequence[pulumi.Input['VmSecurityGroupArgs']]] security_groups: One or more security groups associated with the VM.
        :param pulumi.Input[str] state: The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        :param pulumi.Input[str] state_reason: The reason explaining the current state of the VM.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
        :param pulumi.Input[Sequence[pulumi.Input['VmTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[str] user_data: Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
        :param pulumi.Input[str] vm_id: The ID of the VM.
        :param pulumi.Input[str] vm_initiated_shutdown_behavior: The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
        :param pulumi.Input[str] vm_type: The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.<br /> For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
        """
        if admin_password is not None:
            pulumi.set(__self__, "admin_password", admin_password)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if block_device_mappings is not None:
            pulumi.set(__self__, "block_device_mappings", block_device_mappings)
        if block_device_mappings_createds is not None:
            pulumi.set(__self__, "block_device_mappings_createds", block_device_mappings_createds)
        if bsu_optimized is not None:
            pulumi.set(__self__, "bsu_optimized", bsu_optimized)
        if client_token is not None:
            pulumi.set(__self__, "client_token", client_token)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if get_admin_password is not None:
            pulumi.set(__self__, "get_admin_password", get_admin_password)
        if hypervisor is not None:
            pulumi.set(__self__, "hypervisor", hypervisor)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if is_source_dest_checked is not None:
            pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        if keypair_name is not None:
            pulumi.set(__self__, "keypair_name", keypair_name)
        if launch_number is not None:
            pulumi.set(__self__, "launch_number", launch_number)
        if nested_virtualization is not None:
            pulumi.set(__self__, "nested_virtualization", nested_virtualization)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if nics is not None:
            pulumi.set(__self__, "nics", nics)
        if os_family is not None:
            pulumi.set(__self__, "os_family", os_family)
        if performance is not None:
            pulumi.set(__self__, "performance", performance)
        if placement_subregion_name is not None:
            pulumi.set(__self__, "placement_subregion_name", placement_subregion_name)
        if placement_tenancy is not None:
            pulumi.set(__self__, "placement_tenancy", placement_tenancy)
        if primary_nics is not None:
            pulumi.set(__self__, "primary_nics", primary_nics)
        if private_dns_name is not None:
            pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)
        if product_codes is not None:
            pulumi.set(__self__, "product_codes", product_codes)
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if reservation_id is not None:
            pulumi.set(__self__, "reservation_id", reservation_id)
        if root_device_name is not None:
            pulumi.set(__self__, "root_device_name", root_device_name)
        if root_device_type is not None:
            pulumi.set(__self__, "root_device_type", root_device_type)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_group_names is not None:
            pulumi.set(__self__, "security_group_names", security_group_names)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_reason is not None:
            pulumi.set(__self__, "state_reason", state_reason)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_data is not None:
            pulumi.set(__self__, "user_data", user_data)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)
        if vm_initiated_shutdown_behavior is not None:
            pulumi.set(__self__, "vm_initiated_shutdown_behavior", vm_initiated_shutdown_behavior)
        if vm_type is not None:
            pulumi.set(__self__, "vm_type", vm_type)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "admin_password")

    @admin_password.setter
    def admin_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_password", value)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[str]]:
        """
        The architecture of the VM (`i386` \\| `x86_64`).
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "architecture", value)

    @property
    @pulumi.getter(name="blockDeviceMappings")
    def block_device_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmBlockDeviceMappingArgs']]]]:
        """
        One or more block device mappings.
        """
        return pulumi.get(self, "block_device_mappings")

    @block_device_mappings.setter
    def block_device_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmBlockDeviceMappingArgs']]]]):
        pulumi.set(self, "block_device_mappings", value)

    @property
    @pulumi.getter(name="blockDeviceMappingsCreateds")
    def block_device_mappings_createds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmBlockDeviceMappingsCreatedArgs']]]]:
        """
        The block device mapping of the VM.
        """
        return pulumi.get(self, "block_device_mappings_createds")

    @block_device_mappings_createds.setter
    def block_device_mappings_createds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmBlockDeviceMappingsCreatedArgs']]]]):
        pulumi.set(self, "block_device_mappings_createds", value)

    @property
    @pulumi.getter(name="bsuOptimized")
    def bsu_optimized(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bsu_optimized")

    @bsu_optimized.setter
    def bsu_optimized(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bsu_optimized", value)

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier which enables you to manage the idempotency.
        """
        return pulumi.get(self, "client_token")

    @client_token.setter
    def client_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_token", value)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time of creation of the VM.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_date", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, you cannot delete the VM unless you change this parameter back to false.
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter(name="getAdminPassword")
    def get_admin_password(self) -> Optional[pulumi.Input[bool]]:
        """
        (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `admin_password` attribute.
        """
        return pulumi.get(self, "get_admin_password")

    @get_admin_password.setter
    def get_admin_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "get_admin_password", value)

    @property
    @pulumi.getter
    def hypervisor(self) -> Optional[pulumi.Input[str]]:
        """
        The hypervisor type of the VMs (`ovm` \\| `xen`).
        """
        return pulumi.get(self, "hypervisor")

    @hypervisor.setter
    def hypervisor(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hypervisor", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> Optional[pulumi.Input[bool]]:
        """
        (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
        """
        return pulumi.get(self, "is_source_dest_checked")

    @is_source_dest_checked.setter
    def is_source_dest_checked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_source_dest_checked", value)

    @property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the keypair.
        """
        return pulumi.get(self, "keypair_name")

    @keypair_name.setter
    def keypair_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keypair_name", value)

    @property
    @pulumi.getter(name="launchNumber")
    def launch_number(self) -> Optional[pulumi.Input[int]]:
        """
        The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
        """
        return pulumi.get(self, "launch_number")

    @launch_number.setter
    def launch_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "launch_number", value)

    @property
    @pulumi.getter(name="nestedVirtualization")
    def nested_virtualization(self) -> Optional[pulumi.Input[bool]]:
        """
        (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
        """
        return pulumi.get(self, "nested_virtualization")

    @nested_virtualization.setter
    def nested_virtualization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nested_virtualization", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Net for the NIC.
        """
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)

    @property
    @pulumi.getter
    def nics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmNicArgs']]]]:
        """
        One or more NICs. If you specify this parameter, you must not specify the `subnet_id` and `subregion_name` parameters. To define a NIC as the primary network interface of the VM, use the `primary_nic` argument.
        """
        return pulumi.get(self, "nics")

    @nics.setter
    def nics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmNicArgs']]]]):
        pulumi.set(self, "nics", value)

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the operating system (OS) of the VM.
        """
        return pulumi.get(self, "os_family")

    @os_family.setter
    def os_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os_family", value)

    @property
    @pulumi.getter
    def performance(self) -> Optional[pulumi.Input[str]]:
        """
        The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
        """
        return pulumi.get(self, "performance")

    @performance.setter
    def performance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "performance", value)

    @property
    @pulumi.getter(name="placementSubregionName")
    def placement_subregion_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Subregion where the VM is placed.
        """
        return pulumi.get(self, "placement_subregion_name")

    @placement_subregion_name.setter
    def placement_subregion_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_subregion_name", value)

    @property
    @pulumi.getter(name="placementTenancy")
    def placement_tenancy(self) -> Optional[pulumi.Input[str]]:
        """
        The tenancy of the VM (`default` | `dedicated`).
        """
        return pulumi.get(self, "placement_tenancy")

    @placement_tenancy.setter
    def placement_tenancy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placement_tenancy", value)

    @property
    @pulumi.getter(name="primaryNics")
    def primary_nics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmPrimaryNicArgs']]]]:
        """
        The primary network interface of the VM.
        """
        return pulumi.get(self, "primary_nics")

    @primary_nics.setter
    def primary_nics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmPrimaryNicArgs']]]]):
        pulumi.set(self, "primary_nics", value)

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @private_dns_name.setter
    def private_dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_dns_name", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The private IP of the NIC.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        One or more private IPs of the VM.
        """
        return pulumi.get(self, "private_ips")

    @private_ips.setter
    def private_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_ips", value)

    @property
    @pulumi.getter(name="productCodes")
    def product_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The product codes associated with the OMI used to create the VM.
        """
        return pulumi.get(self, "product_codes")

    @product_codes.setter
    def product_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "product_codes", value)

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @public_dns_name.setter
    def public_dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_dns_name", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="reservationId")
    def reservation_id(self) -> Optional[pulumi.Input[str]]:
        """
        The reservation ID of the VM.
        """
        return pulumi.get(self, "reservation_id")

    @reservation_id.setter
    def reservation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reservation_id", value)

    @property
    @pulumi.getter(name="rootDeviceName")
    def root_device_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the root device for the VM (for example, `/dev/vda1`).
        """
        return pulumi.get(self, "root_device_name")

    @root_device_name.setter
    def root_device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_device_name", value)

    @property
    @pulumi.getter(name="rootDeviceType")
    def root_device_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of root device used by the VM (always `bsu`).
        """
        return pulumi.get(self, "root_device_type")

    @root_device_type.setter
    def root_device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_device_type", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        One or more IDs of security group for the VMs.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="securityGroupNames")
    def security_group_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        One or more names of security groups for the VMs.
        """
        return pulumi.get(self, "security_group_names")

    @security_group_names.setter
    def security_group_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_names", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmSecurityGroupArgs']]]]:
        """
        One or more security groups associated with the VM.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmSecurityGroupArgs']]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="stateReason")
    def state_reason(self) -> Optional[pulumi.Input[str]]:
        """
        The reason explaining the current state of the VM.
        """
        return pulumi.get(self, "state_reason")

    @state_reason.setter
    def state_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state_reason", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[pulumi.Input[str]]:
        """
        Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
        """
        return pulumi.get(self, "user_data")

    @user_data.setter
    def user_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_data", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the VM.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_id", value)

    @property
    @pulumi.getter(name="vmInitiatedShutdownBehavior")
    def vm_initiated_shutdown_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
        """
        return pulumi.get(self, "vm_initiated_shutdown_behavior")

    @vm_initiated_shutdown_behavior.setter
    def vm_initiated_shutdown_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_initiated_shutdown_behavior", value)

    @property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.<br /> For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
        """
        return pulumi.get(self, "vm_type")

    @vm_type.setter
    def vm_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_type", value)


class Vm(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmBlockDeviceMappingArgs']]]]] = None,
                 bsu_optimized: Optional[pulumi.Input[bool]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 get_admin_password: Optional[pulumi.Input[bool]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 is_source_dest_checked: Optional[pulumi.Input[bool]] = None,
                 keypair_name: Optional[pulumi.Input[str]] = None,
                 nested_virtualization: Optional[pulumi.Input[bool]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmNicArgs']]]]] = None,
                 performance: Optional[pulumi.Input[str]] = None,
                 placement_subregion_name: Optional[pulumi.Input[str]] = None,
                 placement_tenancy: Optional[pulumi.Input[str]] = None,
                 primary_nics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmPrimaryNicArgs']]]]] = None,
                 private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmTagArgs']]]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 vm_initiated_shutdown_behavior: Optional[pulumi.Input[str]] = None,
                 vm_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a virtual machine (VM).

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Instances.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vm).

        ## Example Usage
        ### Optional resource

        ```python
        import pulumi
        import pulumi_outscale as outscale

        keypair01 = outscale.Keypair("keypair01", keypair_name="terraform-keypair-for-vm")
        ```
        ### Create a VM with block device mappings

        ```python
        import pulumi
        import pulumi_outscale as outscale

        vm02 = outscale.Vm("vm02",
            image_id=var["image_id"],
            vm_type=var["vm_type"],
            keypair_name=var["keypair_name"],
            block_device_mappings=[
                outscale.VmBlockDeviceMappingArgs(
                    device_name="/dev/sda1",
                    bsu=outscale.VmBlockDeviceMappingBsuArgs(
                        volume_size=15,
                        volume_type="gp2",
                        snapshot_id=var["snapshot_id"],
                    ),
                ),
                outscale.VmBlockDeviceMappingArgs(
                    device_name="/dev/sdb",
                    bsu=outscale.VmBlockDeviceMappingBsuArgs(
                        volume_size=22,
                        volume_type="io1",
                        iops=150,
                        delete_on_vm_deletion=True,
                    ),
                ),
            ])
        ```
        ### Create a VM in a Net with a network

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net01 = outscale.Net("net01",
            ip_range="10.0.0.0/16",
            tags=[outscale.NetTagArgs(
                key="name",
                value="terraform-net-for-vm",
            )])
        subnet01 = outscale.Subnet("subnet01",
            net_id=net01.net_id,
            ip_range="10.0.0.0/24",
            subregion_name="eu-west-2b",
            tags=[outscale.SubnetTagArgs(
                key="name",
                value="terraform-subnet-for-vm",
            )])
        security_group01 = outscale.SecurityGroup("securityGroup01",
            description="Terraform security group for VM",
            security_group_name="terraform-security-group-for-vm",
            net_id=net01.net_id)
        internet_service01 = outscale.InternetService("internetService01")
        route_table01 = outscale.RouteTable("routeTable01",
            net_id=net01.net_id,
            tags=[outscale.RouteTableTagArgs(
                key="name",
                value="terraform-route-table-for-vm",
            )])
        route_table_link01 = outscale.RouteTableLink("routeTableLink01",
            route_table_id=route_table01.route_table_id,
            subnet_id=subnet01.subnet_id)
        internet_service_link01 = outscale.InternetServiceLink("internetServiceLink01",
            internet_service_id=internet_service01.internet_service_id,
            net_id=net01.net_id)
        route01 = outscale.Route("route01",
            gateway_id=internet_service01.internet_service_id,
            destination_ip_range="0.0.0.0/0",
            route_table_id=route_table01.route_table_id)
        vm03 = outscale.Vm("vm03",
            image_id=var["image_id"],
            vm_type=var["vm_type"],
            keypair_name=var["keypair_name"],
            security_group_ids=[security_group01.security_group_id],
            subnet_id=subnet01.subnet_id)
        ```
        ### Create a VM with a NIC

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net02 = outscale.Net("net02",
            ip_range="10.0.0.0/16",
            tags=[outscale.NetTagArgs(
                key="name",
                value="terraform-net-for-vm-with-nic",
            )])
        subnet02 = outscale.Subnet("subnet02",
            net_id=net02.net_id,
            ip_range="10.0.0.0/24",
            subregion_name="eu-west-2a",
            tags=[outscale.SubnetTagArgs(
                key="name",
                value="terraform-subnet-for-vm-with-nic",
            )])
        nic01 = outscale.Nic("nic01", subnet_id=subnet02.subnet_id)
        vm04 = outscale.Vm("vm04",
            image_id=var["image_id"],
            vm_type="c4.large",
            keypair_name=var["keypair_name"],
            primary_nics=[outscale.VmPrimaryNicArgs(
                nic_id=nic01.nic_id,
                device_number=0,
            )])
        ```

        ## Import

        A VM can be imported using its ID. For exampleconsole

        ```sh
         $ pulumi import outscale:index/vm:Vm ImportedVm i-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmBlockDeviceMappingArgs']]]] block_device_mappings: One or more block device mappings.
        :param pulumi.Input[bool] deletion_protection: If true, you cannot delete the VM unless you change this parameter back to false.
        :param pulumi.Input[bool] get_admin_password: (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `admin_password` attribute.
        :param pulumi.Input[str] image_id: The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
        :param pulumi.Input[bool] is_source_dest_checked: (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
        :param pulumi.Input[str] keypair_name: The name of the keypair.
        :param pulumi.Input[bool] nested_virtualization: (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmNicArgs']]]] nics: One or more NICs. If you specify this parameter, you must not specify the `subnet_id` and `subregion_name` parameters. To define a NIC as the primary network interface of the VM, use the `primary_nic` argument.
        :param pulumi.Input[str] performance: The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
        :param pulumi.Input[str] placement_subregion_name: The name of the Subregion where the VM is placed.
        :param pulumi.Input[str] placement_tenancy: The tenancy of the VM (`default` | `dedicated`).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmPrimaryNicArgs']]]] primary_nics: The primary network interface of the VM.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_ips: One or more private IPs of the VM.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: One or more IDs of security group for the VMs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_names: One or more names of security groups for the VMs.
        :param pulumi.Input[str] state: The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmTagArgs']]]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[str] user_data: Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
        :param pulumi.Input[str] vm_id: The ID of the VM.
        :param pulumi.Input[str] vm_initiated_shutdown_behavior: The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
        :param pulumi.Input[str] vm_type: The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.<br /> For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VmArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a virtual machine (VM).

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Instances.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vm).

        ## Example Usage
        ### Optional resource

        ```python
        import pulumi
        import pulumi_outscale as outscale

        keypair01 = outscale.Keypair("keypair01", keypair_name="terraform-keypair-for-vm")
        ```
        ### Create a VM with block device mappings

        ```python
        import pulumi
        import pulumi_outscale as outscale

        vm02 = outscale.Vm("vm02",
            image_id=var["image_id"],
            vm_type=var["vm_type"],
            keypair_name=var["keypair_name"],
            block_device_mappings=[
                outscale.VmBlockDeviceMappingArgs(
                    device_name="/dev/sda1",
                    bsu=outscale.VmBlockDeviceMappingBsuArgs(
                        volume_size=15,
                        volume_type="gp2",
                        snapshot_id=var["snapshot_id"],
                    ),
                ),
                outscale.VmBlockDeviceMappingArgs(
                    device_name="/dev/sdb",
                    bsu=outscale.VmBlockDeviceMappingBsuArgs(
                        volume_size=22,
                        volume_type="io1",
                        iops=150,
                        delete_on_vm_deletion=True,
                    ),
                ),
            ])
        ```
        ### Create a VM in a Net with a network

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net01 = outscale.Net("net01",
            ip_range="10.0.0.0/16",
            tags=[outscale.NetTagArgs(
                key="name",
                value="terraform-net-for-vm",
            )])
        subnet01 = outscale.Subnet("subnet01",
            net_id=net01.net_id,
            ip_range="10.0.0.0/24",
            subregion_name="eu-west-2b",
            tags=[outscale.SubnetTagArgs(
                key="name",
                value="terraform-subnet-for-vm",
            )])
        security_group01 = outscale.SecurityGroup("securityGroup01",
            description="Terraform security group for VM",
            security_group_name="terraform-security-group-for-vm",
            net_id=net01.net_id)
        internet_service01 = outscale.InternetService("internetService01")
        route_table01 = outscale.RouteTable("routeTable01",
            net_id=net01.net_id,
            tags=[outscale.RouteTableTagArgs(
                key="name",
                value="terraform-route-table-for-vm",
            )])
        route_table_link01 = outscale.RouteTableLink("routeTableLink01",
            route_table_id=route_table01.route_table_id,
            subnet_id=subnet01.subnet_id)
        internet_service_link01 = outscale.InternetServiceLink("internetServiceLink01",
            internet_service_id=internet_service01.internet_service_id,
            net_id=net01.net_id)
        route01 = outscale.Route("route01",
            gateway_id=internet_service01.internet_service_id,
            destination_ip_range="0.0.0.0/0",
            route_table_id=route_table01.route_table_id)
        vm03 = outscale.Vm("vm03",
            image_id=var["image_id"],
            vm_type=var["vm_type"],
            keypair_name=var["keypair_name"],
            security_group_ids=[security_group01.security_group_id],
            subnet_id=subnet01.subnet_id)
        ```
        ### Create a VM with a NIC

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net02 = outscale.Net("net02",
            ip_range="10.0.0.0/16",
            tags=[outscale.NetTagArgs(
                key="name",
                value="terraform-net-for-vm-with-nic",
            )])
        subnet02 = outscale.Subnet("subnet02",
            net_id=net02.net_id,
            ip_range="10.0.0.0/24",
            subregion_name="eu-west-2a",
            tags=[outscale.SubnetTagArgs(
                key="name",
                value="terraform-subnet-for-vm-with-nic",
            )])
        nic01 = outscale.Nic("nic01", subnet_id=subnet02.subnet_id)
        vm04 = outscale.Vm("vm04",
            image_id=var["image_id"],
            vm_type="c4.large",
            keypair_name=var["keypair_name"],
            primary_nics=[outscale.VmPrimaryNicArgs(
                nic_id=nic01.nic_id,
                device_number=0,
            )])
        ```

        ## Import

        A VM can be imported using its ID. For exampleconsole

        ```sh
         $ pulumi import outscale:index/vm:Vm ImportedVm i-12345678
        ```

        :param str resource_name: The name of the resource.
        :param VmArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VmArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmBlockDeviceMappingArgs']]]]] = None,
                 bsu_optimized: Optional[pulumi.Input[bool]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 get_admin_password: Optional[pulumi.Input[bool]] = None,
                 image_id: Optional[pulumi.Input[str]] = None,
                 is_source_dest_checked: Optional[pulumi.Input[bool]] = None,
                 keypair_name: Optional[pulumi.Input[str]] = None,
                 nested_virtualization: Optional[pulumi.Input[bool]] = None,
                 nics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmNicArgs']]]]] = None,
                 performance: Optional[pulumi.Input[str]] = None,
                 placement_subregion_name: Optional[pulumi.Input[str]] = None,
                 placement_tenancy: Optional[pulumi.Input[str]] = None,
                 primary_nics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmPrimaryNicArgs']]]]] = None,
                 private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmTagArgs']]]]] = None,
                 user_data: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 vm_initiated_shutdown_behavior: Optional[pulumi.Input[str]] = None,
                 vm_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VmArgs.__new__(VmArgs)

            __props__.__dict__["block_device_mappings"] = block_device_mappings
            __props__.__dict__["bsu_optimized"] = bsu_optimized
            __props__.__dict__["deletion_protection"] = deletion_protection
            __props__.__dict__["get_admin_password"] = get_admin_password
            if image_id is None and not opts.urn:
                raise TypeError("Missing required property 'image_id'")
            __props__.__dict__["image_id"] = image_id
            __props__.__dict__["is_source_dest_checked"] = is_source_dest_checked
            __props__.__dict__["keypair_name"] = keypair_name
            __props__.__dict__["nested_virtualization"] = nested_virtualization
            __props__.__dict__["nics"] = nics
            __props__.__dict__["performance"] = performance
            __props__.__dict__["placement_subregion_name"] = placement_subregion_name
            __props__.__dict__["placement_tenancy"] = placement_tenancy
            __props__.__dict__["primary_nics"] = primary_nics
            __props__.__dict__["private_ips"] = private_ips
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["security_group_names"] = security_group_names
            __props__.__dict__["state"] = state
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["user_data"] = user_data
            __props__.__dict__["vm_id"] = vm_id
            __props__.__dict__["vm_initiated_shutdown_behavior"] = vm_initiated_shutdown_behavior
            __props__.__dict__["vm_type"] = vm_type
            __props__.__dict__["admin_password"] = None
            __props__.__dict__["architecture"] = None
            __props__.__dict__["block_device_mappings_createds"] = None
            __props__.__dict__["client_token"] = None
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["hypervisor"] = None
            __props__.__dict__["launch_number"] = None
            __props__.__dict__["net_id"] = None
            __props__.__dict__["os_family"] = None
            __props__.__dict__["private_dns_name"] = None
            __props__.__dict__["private_ip"] = None
            __props__.__dict__["product_codes"] = None
            __props__.__dict__["public_dns_name"] = None
            __props__.__dict__["public_ip"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["reservation_id"] = None
            __props__.__dict__["root_device_name"] = None
            __props__.__dict__["root_device_type"] = None
            __props__.__dict__["security_groups"] = None
            __props__.__dict__["state_reason"] = None
        super(Vm, __self__).__init__(
            'outscale:index/vm:Vm',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_password: Optional[pulumi.Input[str]] = None,
            architecture: Optional[pulumi.Input[str]] = None,
            block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmBlockDeviceMappingArgs']]]]] = None,
            block_device_mappings_createds: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmBlockDeviceMappingsCreatedArgs']]]]] = None,
            bsu_optimized: Optional[pulumi.Input[bool]] = None,
            client_token: Optional[pulumi.Input[str]] = None,
            creation_date: Optional[pulumi.Input[str]] = None,
            deletion_protection: Optional[pulumi.Input[bool]] = None,
            get_admin_password: Optional[pulumi.Input[bool]] = None,
            hypervisor: Optional[pulumi.Input[str]] = None,
            image_id: Optional[pulumi.Input[str]] = None,
            is_source_dest_checked: Optional[pulumi.Input[bool]] = None,
            keypair_name: Optional[pulumi.Input[str]] = None,
            launch_number: Optional[pulumi.Input[int]] = None,
            nested_virtualization: Optional[pulumi.Input[bool]] = None,
            net_id: Optional[pulumi.Input[str]] = None,
            nics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmNicArgs']]]]] = None,
            os_family: Optional[pulumi.Input[str]] = None,
            performance: Optional[pulumi.Input[str]] = None,
            placement_subregion_name: Optional[pulumi.Input[str]] = None,
            placement_tenancy: Optional[pulumi.Input[str]] = None,
            primary_nics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmPrimaryNicArgs']]]]] = None,
            private_dns_name: Optional[pulumi.Input[str]] = None,
            private_ip: Optional[pulumi.Input[str]] = None,
            private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            product_codes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            public_dns_name: Optional[pulumi.Input[str]] = None,
            public_ip: Optional[pulumi.Input[str]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            reservation_id: Optional[pulumi.Input[str]] = None,
            root_device_name: Optional[pulumi.Input[str]] = None,
            root_device_type: Optional[pulumi.Input[str]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            security_group_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmSecurityGroupArgs']]]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            state_reason: Optional[pulumi.Input[str]] = None,
            subnet_id: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmTagArgs']]]]] = None,
            user_data: Optional[pulumi.Input[str]] = None,
            vm_id: Optional[pulumi.Input[str]] = None,
            vm_initiated_shutdown_behavior: Optional[pulumi.Input[str]] = None,
            vm_type: Optional[pulumi.Input[str]] = None) -> 'Vm':
        """
        Get an existing Vm resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] architecture: The architecture of the VM (`i386` \\| `x86_64`).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmBlockDeviceMappingArgs']]]] block_device_mappings: One or more block device mappings.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmBlockDeviceMappingsCreatedArgs']]]] block_device_mappings_createds: The block device mapping of the VM.
        :param pulumi.Input[str] client_token: A unique identifier which enables you to manage the idempotency.
        :param pulumi.Input[str] creation_date: The date and time of creation of the VM.
        :param pulumi.Input[bool] deletion_protection: If true, you cannot delete the VM unless you change this parameter back to false.
        :param pulumi.Input[bool] get_admin_password: (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `admin_password` attribute.
        :param pulumi.Input[str] hypervisor: The hypervisor type of the VMs (`ovm` \\| `xen`).
        :param pulumi.Input[str] image_id: The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
        :param pulumi.Input[bool] is_source_dest_checked: (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
        :param pulumi.Input[str] keypair_name: The name of the keypair.
        :param pulumi.Input[int] launch_number: The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
        :param pulumi.Input[bool] nested_virtualization: (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
        :param pulumi.Input[str] net_id: The ID of the Net for the NIC.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmNicArgs']]]] nics: One or more NICs. If you specify this parameter, you must not specify the `subnet_id` and `subregion_name` parameters. To define a NIC as the primary network interface of the VM, use the `primary_nic` argument.
        :param pulumi.Input[str] os_family: Indicates the operating system (OS) of the VM.
        :param pulumi.Input[str] performance: The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
        :param pulumi.Input[str] placement_subregion_name: The name of the Subregion where the VM is placed.
        :param pulumi.Input[str] placement_tenancy: The tenancy of the VM (`default` | `dedicated`).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmPrimaryNicArgs']]]] primary_nics: The primary network interface of the VM.
        :param pulumi.Input[str] private_dns_name: The name of the private DNS.
        :param pulumi.Input[str] private_ip: The private IP of the NIC.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_ips: One or more private IPs of the VM.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] product_codes: The product codes associated with the OMI used to create the VM.
        :param pulumi.Input[str] public_dns_name: The name of the public DNS.
        :param pulumi.Input[str] public_ip: The public IP of the VM.
        :param pulumi.Input[str] reservation_id: The reservation ID of the VM.
        :param pulumi.Input[str] root_device_name: The name of the root device for the VM (for example, `/dev/vda1`).
        :param pulumi.Input[str] root_device_type: The type of root device used by the VM (always `bsu`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: One or more IDs of security group for the VMs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_names: One or more names of security groups for the VMs.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmSecurityGroupArgs']]]] security_groups: One or more security groups associated with the VM.
        :param pulumi.Input[str] state: The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        :param pulumi.Input[str] state_reason: The reason explaining the current state of the VM.
        :param pulumi.Input[str] subnet_id: The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VmTagArgs']]]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[str] user_data: Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
        :param pulumi.Input[str] vm_id: The ID of the VM.
        :param pulumi.Input[str] vm_initiated_shutdown_behavior: The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
        :param pulumi.Input[str] vm_type: The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.<br /> For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VmState.__new__(_VmState)

        __props__.__dict__["admin_password"] = admin_password
        __props__.__dict__["architecture"] = architecture
        __props__.__dict__["block_device_mappings"] = block_device_mappings
        __props__.__dict__["block_device_mappings_createds"] = block_device_mappings_createds
        __props__.__dict__["bsu_optimized"] = bsu_optimized
        __props__.__dict__["client_token"] = client_token
        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["deletion_protection"] = deletion_protection
        __props__.__dict__["get_admin_password"] = get_admin_password
        __props__.__dict__["hypervisor"] = hypervisor
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["is_source_dest_checked"] = is_source_dest_checked
        __props__.__dict__["keypair_name"] = keypair_name
        __props__.__dict__["launch_number"] = launch_number
        __props__.__dict__["nested_virtualization"] = nested_virtualization
        __props__.__dict__["net_id"] = net_id
        __props__.__dict__["nics"] = nics
        __props__.__dict__["os_family"] = os_family
        __props__.__dict__["performance"] = performance
        __props__.__dict__["placement_subregion_name"] = placement_subregion_name
        __props__.__dict__["placement_tenancy"] = placement_tenancy
        __props__.__dict__["primary_nics"] = primary_nics
        __props__.__dict__["private_dns_name"] = private_dns_name
        __props__.__dict__["private_ip"] = private_ip
        __props__.__dict__["private_ips"] = private_ips
        __props__.__dict__["product_codes"] = product_codes
        __props__.__dict__["public_dns_name"] = public_dns_name
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["reservation_id"] = reservation_id
        __props__.__dict__["root_device_name"] = root_device_name
        __props__.__dict__["root_device_type"] = root_device_type
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["security_group_names"] = security_group_names
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["state"] = state
        __props__.__dict__["state_reason"] = state_reason
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["user_data"] = user_data
        __props__.__dict__["vm_id"] = vm_id
        __props__.__dict__["vm_initiated_shutdown_behavior"] = vm_initiated_shutdown_behavior
        __props__.__dict__["vm_type"] = vm_type
        return Vm(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> pulumi.Output[str]:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter
    def architecture(self) -> pulumi.Output[str]:
        """
        The architecture of the VM (`i386` \\| `x86_64`).
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="blockDeviceMappings")
    def block_device_mappings(self) -> pulumi.Output[Optional[Sequence['outputs.VmBlockDeviceMapping']]]:
        """
        One or more block device mappings.
        """
        return pulumi.get(self, "block_device_mappings")

    @property
    @pulumi.getter(name="blockDeviceMappingsCreateds")
    def block_device_mappings_createds(self) -> pulumi.Output[Sequence['outputs.VmBlockDeviceMappingsCreated']]:
        """
        The block device mapping of the VM.
        """
        return pulumi.get(self, "block_device_mappings_createds")

    @property
    @pulumi.getter(name="bsuOptimized")
    def bsu_optimized(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "bsu_optimized")

    @property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> pulumi.Output[str]:
        """
        A unique identifier which enables you to manage the idempotency.
        """
        return pulumi.get(self, "client_token")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[str]:
        """
        The date and time of creation of the VM.
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> pulumi.Output[bool]:
        """
        If true, you cannot delete the VM unless you change this parameter back to false.
        """
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter(name="getAdminPassword")
    def get_admin_password(self) -> pulumi.Output[Optional[bool]]:
        """
        (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `admin_password` attribute.
        """
        return pulumi.get(self, "get_admin_password")

    @property
    @pulumi.getter
    def hypervisor(self) -> pulumi.Output[str]:
        """
        The hypervisor type of the VMs (`ovm` \\| `xen`).
        """
        return pulumi.get(self, "hypervisor")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[str]:
        """
        The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> pulumi.Output[bool]:
        """
        (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
        """
        return pulumi.get(self, "is_source_dest_checked")

    @property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> pulumi.Output[str]:
        """
        The name of the keypair.
        """
        return pulumi.get(self, "keypair_name")

    @property
    @pulumi.getter(name="launchNumber")
    def launch_number(self) -> pulumi.Output[int]:
        """
        The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
        """
        return pulumi.get(self, "launch_number")

    @property
    @pulumi.getter(name="nestedVirtualization")
    def nested_virtualization(self) -> pulumi.Output[Optional[bool]]:
        """
        (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
        """
        return pulumi.get(self, "nested_virtualization")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> pulumi.Output[str]:
        """
        The ID of the Net for the NIC.
        """
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter
    def nics(self) -> pulumi.Output[Sequence['outputs.VmNic']]:
        """
        One or more NICs. If you specify this parameter, you must not specify the `subnet_id` and `subregion_name` parameters. To define a NIC as the primary network interface of the VM, use the `primary_nic` argument.
        """
        return pulumi.get(self, "nics")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> pulumi.Output[str]:
        """
        Indicates the operating system (OS) of the VM.
        """
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter
    def performance(self) -> pulumi.Output[str]:
        """
        The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
        """
        return pulumi.get(self, "performance")

    @property
    @pulumi.getter(name="placementSubregionName")
    def placement_subregion_name(self) -> pulumi.Output[str]:
        """
        The name of the Subregion where the VM is placed.
        """
        return pulumi.get(self, "placement_subregion_name")

    @property
    @pulumi.getter(name="placementTenancy")
    def placement_tenancy(self) -> pulumi.Output[str]:
        """
        The tenancy of the VM (`default` | `dedicated`).
        """
        return pulumi.get(self, "placement_tenancy")

    @property
    @pulumi.getter(name="primaryNics")
    def primary_nics(self) -> pulumi.Output[Sequence['outputs.VmPrimaryNic']]:
        """
        The primary network interface of the VM.
        """
        return pulumi.get(self, "primary_nics")

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> pulumi.Output[str]:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[str]:
        """
        The private IP of the NIC.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        One or more private IPs of the VM.
        """
        return pulumi.get(self, "private_ips")

    @property
    @pulumi.getter(name="productCodes")
    def product_codes(self) -> pulumi.Output[Sequence[str]]:
        """
        The product codes associated with the OMI used to create the VM.
        """
        return pulumi.get(self, "product_codes")

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> pulumi.Output[str]:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[str]:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="reservationId")
    def reservation_id(self) -> pulumi.Output[str]:
        """
        The reservation ID of the VM.
        """
        return pulumi.get(self, "reservation_id")

    @property
    @pulumi.getter(name="rootDeviceName")
    def root_device_name(self) -> pulumi.Output[str]:
        """
        The name of the root device for the VM (for example, `/dev/vda1`).
        """
        return pulumi.get(self, "root_device_name")

    @property
    @pulumi.getter(name="rootDeviceType")
    def root_device_type(self) -> pulumi.Output[str]:
        """
        The type of root device used by the VM (always `bsu`).
        """
        return pulumi.get(self, "root_device_type")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        One or more IDs of security group for the VMs.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="securityGroupNames")
    def security_group_names(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        One or more names of security groups for the VMs.
        """
        return pulumi.get(self, "security_group_names")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence['outputs.VmSecurityGroup']]:
        """
        One or more security groups associated with the VM.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        """
        The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateReason")
    def state_reason(self) -> pulumi.Output[str]:
        """
        The reason explaining the current state of the VM.
        """
        return pulumi.get(self, "state_reason")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[str]:
        """
        The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.VmTag']]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> pulumi.Output[Optional[str]]:
        """
        Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
        """
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Output[str]:
        """
        The ID of the VM.
        """
        return pulumi.get(self, "vm_id")

    @property
    @pulumi.getter(name="vmInitiatedShutdownBehavior")
    def vm_initiated_shutdown_behavior(self) -> pulumi.Output[str]:
        """
        The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
        """
        return pulumi.get(self, "vm_initiated_shutdown_behavior")

    @property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> pulumi.Output[str]:
        """
        The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.<br /> For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
        """
        return pulumi.get(self, "vm_type")

