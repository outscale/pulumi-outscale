# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserGroupArgs', 'UserGroup']

@pulumi.input_type
class UserGroupArgs:
    def __init__(__self__, *,
                 user_group_name: pulumi.Input[_builtins.str],
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupPolicyArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupUserArgs']]]] = None):
        """
        The set of arguments for constructing a UserGroup resource.
        :param pulumi.Input[_builtins.str] user_group_name: The name of the group.
        :param pulumi.Input[_builtins.str] path: The path to the group. If not specified, it is set to a slash (`/`).
        """
        pulumi.set(__self__, "user_group_name", user_group_name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="userGroupName")
    def user_group_name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the group.
        """
        return pulumi.get(self, "user_group_name")

    @user_group_name.setter
    def user_group_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "user_group_name", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The path to the group. If not specified, it is set to a slash (`/`).
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupPolicyArgs']]]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupPolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class _UserGroupState:
    def __init__(__self__, *,
                 creation_date: Optional[pulumi.Input[_builtins.str]] = None,
                 last_modification_date: Optional[pulumi.Input[_builtins.str]] = None,
                 orn: Optional[pulumi.Input[_builtins.str]] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupPolicyArgs']]]] = None,
                 user_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 user_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupUserArgs']]]] = None):
        """
        Input properties used for looking up and filtering UserGroup resources.
        :param pulumi.Input[_builtins.str] creation_date: The date and time (UTC) of creation of the user group.
        :param pulumi.Input[_builtins.str] last_modification_date: The date and time (UTC) of the last modification of the user group.
        :param pulumi.Input[_builtins.str] orn: The Outscale Resource Name (ORN) of the user group. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        :param pulumi.Input[_builtins.str] path: The path to the group. If not specified, it is set to a slash (`/`).
        :param pulumi.Input[_builtins.str] user_group_id: The ID of the user group.
        :param pulumi.Input[_builtins.str] user_group_name: The name of the group.
        """
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if last_modification_date is not None:
            pulumi.set(__self__, "last_modification_date", last_modification_date)
        if orn is not None:
            pulumi.set(__self__, "orn", orn)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if user_group_id is not None:
            pulumi.set(__self__, "user_group_id", user_group_id)
        if user_group_name is not None:
            pulumi.set(__self__, "user_group_name", user_group_name)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time (UTC) of creation of the user group.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creation_date", value)

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time (UTC) of the last modification of the user group.
        """
        return pulumi.get(self, "last_modification_date")

    @last_modification_date.setter
    def last_modification_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "last_modification_date", value)

    @_builtins.property
    @pulumi.getter
    def orn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The Outscale Resource Name (ORN) of the user group. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        """
        return pulumi.get(self, "orn")

    @orn.setter
    def orn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "orn", value)

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The path to the group. If not specified, it is set to a slash (`/`).
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "path", value)

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupPolicyArgs']]]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupPolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @_builtins.property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the user group.
        """
        return pulumi.get(self, "user_group_id")

    @user_group_id.setter
    def user_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_group_id", value)

    @_builtins.property
    @pulumi.getter(name="userGroupName")
    def user_group_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the group.
        """
        return pulumi.get(self, "user_group_name")

    @user_group_name.setter
    def user_group_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "user_group_name", value)

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserGroupUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.type_token("outscale:index/userGroup:UserGroup")
class UserGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserGroupPolicyArgs', 'UserGroupPolicyArgsDict']]]]] = None,
                 user_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserGroupUserArgs', 'UserGroupUserArgsDict']]]]] = None,
                 __props__=None):
        """
        Manages a user group.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-EIM-Groups.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#createusergroup).

        ## Example Usage

        ### Create a user group

        ```python
        import pulumi
        import pulumi_outscale as outscale

        group_1 = outscale.UserGroup("group-1",
            user_group_name="Group-TF-test-1",
            path="/terraform/")
        ```

        ### Link a policy to a user group

        ```python
        import pulumi
        import pulumi_outscale as outscale

        group_1 = outscale.UserGroup("group-1",
            user_group_name="Group-TF-test-1",
            policies=[{
                "policy_orn": policy_2["orn"],
                "default_version_id": "V2",
            }])
        ```

        ### Add a user to a user group

        ```python
        import pulumi
        import pulumi_outscale as outscale

        group_1 = outscale.UserGroup("group-1",
            user_group_name="Group-TF-test-1",
            users=[
                {
                    "user_name": "user-name-1",
                    "path": "/terraform/",
                },
                {
                    "user_name": "user-name-2",
                },
            ])
        ```

        ## Import

        A user group can be imported using its group ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/userGroup:UserGroup group1 user_group_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] path: The path to the group. If not specified, it is set to a slash (`/`).
        :param pulumi.Input[_builtins.str] user_group_name: The name of the group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a user group.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-EIM-Groups.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#createusergroup).

        ## Example Usage

        ### Create a user group

        ```python
        import pulumi
        import pulumi_outscale as outscale

        group_1 = outscale.UserGroup("group-1",
            user_group_name="Group-TF-test-1",
            path="/terraform/")
        ```

        ### Link a policy to a user group

        ```python
        import pulumi
        import pulumi_outscale as outscale

        group_1 = outscale.UserGroup("group-1",
            user_group_name="Group-TF-test-1",
            policies=[{
                "policy_orn": policy_2["orn"],
                "default_version_id": "V2",
            }])
        ```

        ### Add a user to a user group

        ```python
        import pulumi
        import pulumi_outscale as outscale

        group_1 = outscale.UserGroup("group-1",
            user_group_name="Group-TF-test-1",
            users=[
                {
                    "user_name": "user-name-1",
                    "path": "/terraform/",
                },
                {
                    "user_name": "user-name-2",
                },
            ])
        ```

        ## Import

        A user group can be imported using its group ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/userGroup:UserGroup group1 user_group_id
        ```

        :param str resource_name: The name of the resource.
        :param UserGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 path: Optional[pulumi.Input[_builtins.str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserGroupPolicyArgs', 'UserGroupPolicyArgsDict']]]]] = None,
                 user_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserGroupUserArgs', 'UserGroupUserArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserGroupArgs.__new__(UserGroupArgs)

            __props__.__dict__["path"] = path
            __props__.__dict__["policies"] = policies
            if user_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_group_name'")
            __props__.__dict__["user_group_name"] = user_group_name
            __props__.__dict__["users"] = users
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["last_modification_date"] = None
            __props__.__dict__["orn"] = None
            __props__.__dict__["user_group_id"] = None
        super(UserGroup, __self__).__init__(
            'outscale:index/userGroup:UserGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            creation_date: Optional[pulumi.Input[_builtins.str]] = None,
            last_modification_date: Optional[pulumi.Input[_builtins.str]] = None,
            orn: Optional[pulumi.Input[_builtins.str]] = None,
            path: Optional[pulumi.Input[_builtins.str]] = None,
            policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserGroupPolicyArgs', 'UserGroupPolicyArgsDict']]]]] = None,
            user_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            user_group_name: Optional[pulumi.Input[_builtins.str]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserGroupUserArgs', 'UserGroupUserArgsDict']]]]] = None) -> 'UserGroup':
        """
        Get an existing UserGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] creation_date: The date and time (UTC) of creation of the user group.
        :param pulumi.Input[_builtins.str] last_modification_date: The date and time (UTC) of the last modification of the user group.
        :param pulumi.Input[_builtins.str] orn: The Outscale Resource Name (ORN) of the user group. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        :param pulumi.Input[_builtins.str] path: The path to the group. If not specified, it is set to a slash (`/`).
        :param pulumi.Input[_builtins.str] user_group_id: The ID of the user group.
        :param pulumi.Input[_builtins.str] user_group_name: The name of the group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserGroupState.__new__(_UserGroupState)

        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["last_modification_date"] = last_modification_date
        __props__.__dict__["orn"] = orn
        __props__.__dict__["path"] = path
        __props__.__dict__["policies"] = policies
        __props__.__dict__["user_group_id"] = user_group_id
        __props__.__dict__["user_group_name"] = user_group_name
        __props__.__dict__["users"] = users
        return UserGroup(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time (UTC) of creation of the user group.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time (UTC) of the last modification of the user group.
        """
        return pulumi.get(self, "last_modification_date")

    @_builtins.property
    @pulumi.getter
    def orn(self) -> pulumi.Output[_builtins.str]:
        """
        The Outscale Resource Name (ORN) of the user group. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        """
        return pulumi.get(self, "orn")

    @_builtins.property
    @pulumi.getter
    def path(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The path to the group. If not specified, it is set to a slash (`/`).
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> pulumi.Output[Optional[Sequence['outputs.UserGroupPolicy']]]:
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the user group.
        """
        return pulumi.get(self, "user_group_id")

    @_builtins.property
    @pulumi.getter(name="userGroupName")
    def user_group_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the group.
        """
        return pulumi.get(self, "user_group_name")

    @_builtins.property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence['outputs.UserGroupUser']]]:
        return pulumi.get(self, "users")

