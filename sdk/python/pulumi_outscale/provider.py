# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderEndpointArgs']]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key_id: Optional[pulumi.Input[str]] = None,
                 x509_cert_path: Optional[pulumi.Input[str]] = None,
                 x509_key_path: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] access_key_id: The Access Key ID for API operations
        :param pulumi.Input[str] region: The Region for API operations.
        :param pulumi.Input[str] secret_key_id: The Secret Key ID for API operations.
        :param pulumi.Input[str] x509_cert_path: The path to your x509 cert
        :param pulumi.Input[str] x509_key_path: The path to your x509 key
        """
        if access_key_id is None:
            access_key_id = _utilities.get_env('OUTSCALE_ACCESSKEYID')
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if region is None:
            region = _utilities.get_env('OUTSCALE_REGION')
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_key_id is None:
            secret_key_id = _utilities.get_env('OUTSCALE_SECRETKEYID')
        if secret_key_id is not None:
            pulumi.set(__self__, "secret_key_id", secret_key_id)
        if x509_cert_path is not None:
            pulumi.set(__self__, "x509_cert_path", x509_cert_path)
        if x509_key_path is not None:
            pulumi.set(__self__, "x509_key_path", x509_key_path)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Access Key ID for API operations
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProviderEndpointArgs']]]]:
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProviderEndpointArgs']]]]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The Region for API operations.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="secretKeyId")
    def secret_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Secret Key ID for API operations.
        """
        return pulumi.get(self, "secret_key_id")

    @secret_key_id.setter
    def secret_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key_id", value)

    @property
    @pulumi.getter(name="x509CertPath")
    def x509_cert_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to your x509 cert
        """
        return pulumi.get(self, "x509_cert_path")

    @x509_cert_path.setter
    def x509_cert_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x509_cert_path", value)

    @property
    @pulumi.getter(name="x509KeyPath")
    def x509_key_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to your x509 key
        """
        return pulumi.get(self, "x509_key_path")

    @x509_key_path.setter
    def x509_key_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x509_key_path", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProviderEndpointArgs']]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key_id: Optional[pulumi.Input[str]] = None,
                 x509_cert_path: Optional[pulumi.Input[str]] = None,
                 x509_key_path: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the outscale package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_key_id: The Access Key ID for API operations
        :param pulumi.Input[str] region: The Region for API operations.
        :param pulumi.Input[str] secret_key_id: The Secret Key ID for API operations.
        :param pulumi.Input[str] x509_cert_path: The path to your x509 cert
        :param pulumi.Input[str] x509_key_path: The path to your x509 key
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the outscale package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ProviderEndpointArgs']]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 secret_key_id: Optional[pulumi.Input[str]] = None,
                 x509_cert_path: Optional[pulumi.Input[str]] = None,
                 x509_key_path: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if access_key_id is None:
                access_key_id = _utilities.get_env('OUTSCALE_ACCESSKEYID')
            __props__.__dict__["access_key_id"] = access_key_id
            __props__.__dict__["endpoints"] = pulumi.Output.from_input(endpoints).apply(pulumi.runtime.to_json) if endpoints is not None else None
            if region is None:
                region = _utilities.get_env('OUTSCALE_REGION')
            __props__.__dict__["region"] = region
            if secret_key_id is None:
                secret_key_id = _utilities.get_env('OUTSCALE_SECRETKEYID')
            __props__.__dict__["secret_key_id"] = secret_key_id
            __props__.__dict__["x509_cert_path"] = x509_cert_path
            __props__.__dict__["x509_key_path"] = x509_key_path
        super(Provider, __self__).__init__(
            'outscale',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Output[Optional[str]]:
        """
        The Access Key ID for API operations
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[Optional[str]]:
        """
        The Region for API operations.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretKeyId")
    def secret_key_id(self) -> pulumi.Output[Optional[str]]:
        """
        The Secret Key ID for API operations.
        """
        return pulumi.get(self, "secret_key_id")

    @property
    @pulumi.getter(name="x509CertPath")
    def x509_cert_path(self) -> pulumi.Output[Optional[str]]:
        """
        The path to your x509 cert
        """
        return pulumi.get(self, "x509_cert_path")

    @property
    @pulumi.getter(name="x509KeyPath")
    def x509_key_path(self) -> pulumi.Output[Optional[str]]:
        """
        The path to your x509 key
        """
        return pulumi.get(self, "x509_key_path")

