# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetApiAccessRuleResult',
    'AwaitableGetApiAccessRuleResult',
    'get_api_access_rule',
    'get_api_access_rule_output',
]

@pulumi.output_type
class GetApiAccessRuleResult:
    """
    A collection of values returned by getApiAccessRule.
    """
    def __init__(__self__, api_access_rule_id=None, ca_ids=None, cns=None, description=None, filters=None, id=None, ip_ranges=None, request_id=None):
        if api_access_rule_id and not isinstance(api_access_rule_id, str):
            raise TypeError("Expected argument 'api_access_rule_id' to be a str")
        pulumi.set(__self__, "api_access_rule_id", api_access_rule_id)
        if ca_ids and not isinstance(ca_ids, list):
            raise TypeError("Expected argument 'ca_ids' to be a list")
        pulumi.set(__self__, "ca_ids", ca_ids)
        if cns and not isinstance(cns, list):
            raise TypeError("Expected argument 'cns' to be a list")
        pulumi.set(__self__, "cns", cns)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_ranges and not isinstance(ip_ranges, list):
            raise TypeError("Expected argument 'ip_ranges' to be a list")
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)

    @property
    @pulumi.getter(name="apiAccessRuleId")
    def api_access_rule_id(self) -> str:
        return pulumi.get(self, "api_access_rule_id")

    @property
    @pulumi.getter(name="caIds")
    def ca_ids(self) -> Sequence[str]:
        return pulumi.get(self, "ca_ids")

    @property
    @pulumi.getter
    def cns(self) -> Sequence[str]:
        return pulumi.get(self, "cns")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetApiAccessRuleFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")


class AwaitableGetApiAccessRuleResult(GetApiAccessRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiAccessRuleResult(
            api_access_rule_id=self.api_access_rule_id,
            ca_ids=self.ca_ids,
            cns=self.cns,
            description=self.description,
            filters=self.filters,
            id=self.id,
            ip_ranges=self.ip_ranges,
            request_id=self.request_id)


def get_api_access_rule(filters: Optional[Sequence[pulumi.InputType['GetApiAccessRuleFilterArgs']]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiAccessRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getApiAccessRule:getApiAccessRule', __args__, opts=opts, typ=GetApiAccessRuleResult).value

    return AwaitableGetApiAccessRuleResult(
        api_access_rule_id=pulumi.get(__ret__, 'api_access_rule_id'),
        ca_ids=pulumi.get(__ret__, 'ca_ids'),
        cns=pulumi.get(__ret__, 'cns'),
        description=pulumi.get(__ret__, 'description'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        ip_ranges=pulumi.get(__ret__, 'ip_ranges'),
        request_id=pulumi.get(__ret__, 'request_id'))


@_utilities.lift_output_func(get_api_access_rule)
def get_api_access_rule_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetApiAccessRuleFilterArgs']]]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApiAccessRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
