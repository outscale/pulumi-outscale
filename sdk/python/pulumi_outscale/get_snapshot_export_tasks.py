# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSnapshotExportTasksResult',
    'AwaitableGetSnapshotExportTasksResult',
    'get_snapshot_export_tasks',
    'get_snapshot_export_tasks_output',
]

@pulumi.output_type
class GetSnapshotExportTasksResult:
    """
    A collection of values returned by getSnapshotExportTasks.
    """
    def __init__(__self__, dry_run=None, filters=None, id=None, request_id=None, snapshot_export_tasks=None):
        if dry_run and not isinstance(dry_run, bool):
            raise TypeError("Expected argument 'dry_run' to be a bool")
        pulumi.set(__self__, "dry_run", dry_run)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if snapshot_export_tasks and not isinstance(snapshot_export_tasks, list):
            raise TypeError("Expected argument 'snapshot_export_tasks' to be a list")
        pulumi.set(__self__, "snapshot_export_tasks", snapshot_export_tasks)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> bool:
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSnapshotExportTasksFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="snapshotExportTasks")
    def snapshot_export_tasks(self) -> Sequence['outputs.GetSnapshotExportTasksSnapshotExportTaskResult']:
        return pulumi.get(self, "snapshot_export_tasks")


class AwaitableGetSnapshotExportTasksResult(GetSnapshotExportTasksResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnapshotExportTasksResult(
            dry_run=self.dry_run,
            filters=self.filters,
            id=self.id,
            request_id=self.request_id,
            snapshot_export_tasks=self.snapshot_export_tasks)


def get_snapshot_export_tasks(dry_run: Optional[bool] = None,
                              filters: Optional[Sequence[pulumi.InputType['GetSnapshotExportTasksFilterArgs']]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSnapshotExportTasksResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['dryRun'] = dry_run
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getSnapshotExportTasks:getSnapshotExportTasks', __args__, opts=opts, typ=GetSnapshotExportTasksResult).value

    return AwaitableGetSnapshotExportTasksResult(
        dry_run=pulumi.get(__ret__, 'dry_run'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        request_id=pulumi.get(__ret__, 'request_id'),
        snapshot_export_tasks=pulumi.get(__ret__, 'snapshot_export_tasks'))


@_utilities.lift_output_func(get_snapshot_export_tasks)
def get_snapshot_export_tasks_output(dry_run: Optional[pulumi.Input[Optional[bool]]] = None,
                                     filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetSnapshotExportTasksFilterArgs']]]]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSnapshotExportTasksResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
