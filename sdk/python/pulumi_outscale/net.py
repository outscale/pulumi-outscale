# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetArgs', 'Net']

@pulumi.input_type
class NetArgs:
    def __init__(__self__, *,
                 ip_range: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NetTagArgs']]]] = None,
                 tenancy: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Net resource.
        :param pulumi.Input[str] ip_range: The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
        :param pulumi.Input[Sequence[pulumi.Input['NetTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[str] tenancy: The tenancy options for the VMs (`default` if a VM created in a Net can be launched with any tenancy, `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware).
        """
        pulumi.set(__self__, "ip_range", ip_range)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy is not None:
            pulumi.set(__self__, "tenancy", tenancy)

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> pulumi.Input[str]:
        """
        The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_range")

    @ip_range.setter
    def ip_range(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_range", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def tenancy(self) -> Optional[pulumi.Input[str]]:
        """
        The tenancy options for the VMs (`default` if a VM created in a Net can be launched with any tenancy, `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware).
        """
        return pulumi.get(self, "tenancy")

    @tenancy.setter
    def tenancy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenancy", value)


@pulumi.input_type
class _NetState:
    def __init__(__self__, *,
                 dhcp_options_set_id: Optional[pulumi.Input[str]] = None,
                 ip_range: Optional[pulumi.Input[str]] = None,
                 net_id: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NetTagArgs']]]] = None,
                 tenancy: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Net resources.
        :param pulumi.Input[str] dhcp_options_set_id: The ID of the DHCP options set (or `default` if you want to associate the default one).
        :param pulumi.Input[str] ip_range: The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
        :param pulumi.Input[str] net_id: The ID of the Net.
        :param pulumi.Input[str] state: The state of the Net (`pending` \\| `available` \\| `deleted`).
        :param pulumi.Input[Sequence[pulumi.Input['NetTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[str] tenancy: The tenancy options for the VMs (`default` if a VM created in a Net can be launched with any tenancy, `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware).
        """
        if dhcp_options_set_id is not None:
            pulumi.set(__self__, "dhcp_options_set_id", dhcp_options_set_id)
        if ip_range is not None:
            pulumi.set(__self__, "ip_range", ip_range)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenancy is not None:
            pulumi.set(__self__, "tenancy", tenancy)

    @property
    @pulumi.getter(name="dhcpOptionsSetId")
    def dhcp_options_set_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the DHCP options set (or `default` if you want to associate the default one).
        """
        return pulumi.get(self, "dhcp_options_set_id")

    @dhcp_options_set_id.setter
    def dhcp_options_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dhcp_options_set_id", value)

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> Optional[pulumi.Input[str]]:
        """
        The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_range")

    @ip_range.setter
    def ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Net.
        """
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of the Net (`pending` \\| `available` \\| `deleted`).
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def tenancy(self) -> Optional[pulumi.Input[str]]:
        """
        The tenancy options for the VMs (`default` if a VM created in a Net can be launched with any tenancy, `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware).
        """
        return pulumi.get(self, "tenancy")

    @tenancy.setter
    def tenancy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenancy", value)


class Net(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ip_range: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetTagArgs']]]]] = None,
                 tenancy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Net.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPCs.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-net).

        ## Example Usage
        ### Create a Net

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net01 = outscale.Net("net01",
            ip_range="10.10.0.0/16",
            tenancy="default")
        ```
        ### Create a Net with a network

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net02 = outscale.Net("net02", ip_range="10.0.0.0/16")
        subnet01 = outscale.Subnet("subnet01",
            net_id=net02.net_id,
            ip_range="10.0.0.0/18")
        public_ip01 = outscale.PublicIp("publicIp01")
        nat_service01 = outscale.NatService("natService01",
            subnet_id=subnet01.subnet_id,
            public_ip_id=public_ip01.public_ip_id)
        route_table01 = outscale.RouteTable("routeTable01", net_id=net02.net_id)
        internet_service01 = outscale.InternetService("internetService01")
        route01 = outscale.Route("route01",
            destination_ip_range="0.0.0.0/0",
            gateway_id=internet_service01.internet_service_id,
            route_table_id=route_table01.route_table_id)
        route_table_link01 = outscale.RouteTableLink("routeTableLink01",
            subnet_id=subnet01.subnet_id,
            route_table_id=route_table01.id)
        internet_service_link01 = outscale.InternetServiceLink("internetServiceLink01",
            net_id=net02.net_id,
            internet_service_id=internet_service01.id)
        ```

        ## Import

        A Net can be imported using its ID. For exampleconsole

        ```sh
         $ pulumi import outscale:index/net:Net ImportedNet vpc-87654321
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ip_range: The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetTagArgs']]]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[str] tenancy: The tenancy options for the VMs (`default` if a VM created in a Net can be launched with any tenancy, `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Net.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPCs.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-net).

        ## Example Usage
        ### Create a Net

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net01 = outscale.Net("net01",
            ip_range="10.10.0.0/16",
            tenancy="default")
        ```
        ### Create a Net with a network

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net02 = outscale.Net("net02", ip_range="10.0.0.0/16")
        subnet01 = outscale.Subnet("subnet01",
            net_id=net02.net_id,
            ip_range="10.0.0.0/18")
        public_ip01 = outscale.PublicIp("publicIp01")
        nat_service01 = outscale.NatService("natService01",
            subnet_id=subnet01.subnet_id,
            public_ip_id=public_ip01.public_ip_id)
        route_table01 = outscale.RouteTable("routeTable01", net_id=net02.net_id)
        internet_service01 = outscale.InternetService("internetService01")
        route01 = outscale.Route("route01",
            destination_ip_range="0.0.0.0/0",
            gateway_id=internet_service01.internet_service_id,
            route_table_id=route_table01.route_table_id)
        route_table_link01 = outscale.RouteTableLink("routeTableLink01",
            subnet_id=subnet01.subnet_id,
            route_table_id=route_table01.id)
        internet_service_link01 = outscale.InternetServiceLink("internetServiceLink01",
            net_id=net02.net_id,
            internet_service_id=internet_service01.id)
        ```

        ## Import

        A Net can be imported using its ID. For exampleconsole

        ```sh
         $ pulumi import outscale:index/net:Net ImportedNet vpc-87654321
        ```

        :param str resource_name: The name of the resource.
        :param NetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ip_range: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetTagArgs']]]]] = None,
                 tenancy: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetArgs.__new__(NetArgs)

            if ip_range is None and not opts.urn:
                raise TypeError("Missing required property 'ip_range'")
            __props__.__dict__["ip_range"] = ip_range
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tenancy"] = tenancy
            __props__.__dict__["dhcp_options_set_id"] = None
            __props__.__dict__["net_id"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["state"] = None
        super(Net, __self__).__init__(
            'outscale:index/net:Net',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dhcp_options_set_id: Optional[pulumi.Input[str]] = None,
            ip_range: Optional[pulumi.Input[str]] = None,
            net_id: Optional[pulumi.Input[str]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetTagArgs']]]]] = None,
            tenancy: Optional[pulumi.Input[str]] = None) -> 'Net':
        """
        Get an existing Net resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dhcp_options_set_id: The ID of the DHCP options set (or `default` if you want to associate the default one).
        :param pulumi.Input[str] ip_range: The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
        :param pulumi.Input[str] net_id: The ID of the Net.
        :param pulumi.Input[str] state: The state of the Net (`pending` \\| `available` \\| `deleted`).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetTagArgs']]]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[str] tenancy: The tenancy options for the VMs (`default` if a VM created in a Net can be launched with any tenancy, `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetState.__new__(_NetState)

        __props__.__dict__["dhcp_options_set_id"] = dhcp_options_set_id
        __props__.__dict__["ip_range"] = ip_range
        __props__.__dict__["net_id"] = net_id
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tenancy"] = tenancy
        return Net(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dhcpOptionsSetId")
    def dhcp_options_set_id(self) -> pulumi.Output[str]:
        """
        The ID of the DHCP options set (or `default` if you want to associate the default one).
        """
        return pulumi.get(self, "dhcp_options_set_id")

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> pulumi.Output[str]:
        """
        The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> pulumi.Output[str]:
        """
        The ID of the Net.
        """
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The state of the Net (`pending` \\| `available` \\| `deleted`).
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.NetTag']]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def tenancy(self) -> pulumi.Output[str]:
        """
        The tenancy options for the VMs (`default` if a VM created in a Net can be launched with any tenancy, `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware).
        """
        return pulumi.get(self, "tenancy")

