# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetPublicCatalogResult',
    'AwaitableGetPublicCatalogResult',
    'get_public_catalog',
    'get_public_catalog_output',
]

@pulumi.output_type
class GetPublicCatalogResult:
    """
    A collection of values returned by getPublicCatalog.
    """
    def __init__(__self__, catalogs=None, id=None, request_id=None):
        if catalogs and not isinstance(catalogs, list):
            raise TypeError("Expected argument 'catalogs' to be a list")
        pulumi.set(__self__, "catalogs", catalogs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)

    @_builtins.property
    @pulumi.getter
    def catalogs(self) -> Sequence['outputs.GetPublicCatalogCatalogResult']:
        return pulumi.get(self, "catalogs")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        return pulumi.get(self, "request_id")


class AwaitableGetPublicCatalogResult(GetPublicCatalogResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPublicCatalogResult(
            catalogs=self.catalogs,
            id=self.id,
            request_id=self.request_id)


def get_public_catalog(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPublicCatalogResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getPublicCatalog:getPublicCatalog', __args__, opts=opts, typ=GetPublicCatalogResult).value

    return AwaitableGetPublicCatalogResult(
        catalogs=pulumi.get(__ret__, 'catalogs'),
        id=pulumi.get(__ret__, 'id'),
        request_id=pulumi.get(__ret__, 'request_id'))
def get_public_catalog_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPublicCatalogResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getPublicCatalog:getPublicCatalog', __args__, opts=opts, typ=GetPublicCatalogResult)
    return __ret__.apply(lambda __response__: GetPublicCatalogResult(
        catalogs=pulumi.get(__response__, 'catalogs'),
        id=pulumi.get(__response__, 'id'),
        request_id=pulumi.get(__response__, 'request_id')))
