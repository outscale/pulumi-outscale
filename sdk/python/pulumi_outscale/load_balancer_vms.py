# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LoadBalancerVmsArgs', 'LoadBalancerVms']

@pulumi.input_type
class LoadBalancerVmsArgs:
    def __init__(__self__, *,
                 load_balancer_name: pulumi.Input[_builtins.str],
                 backend_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 backend_vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 timeouts: Optional[pulumi.Input['LoadBalancerVmsTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a LoadBalancerVms resource.
        :param pulumi.Input[_builtins.str] load_balancer_name: The name of the load balancer.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] backend_vm_ids: One or more IDs of backend VMs.<br />
               Specifying the same ID several times has no effect as each backend VM has equal weight.
        """
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        if backend_ips is not None:
            pulumi.set(__self__, "backend_ips", backend_ips)
        if backend_vm_ids is not None:
            pulumi.set(__self__, "backend_vm_ids", backend_vm_ids)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the load balancer.
        """
        return pulumi.get(self, "load_balancer_name")

    @load_balancer_name.setter
    def load_balancer_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "load_balancer_name", value)

    @_builtins.property
    @pulumi.getter(name="backendIps")
    def backend_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "backend_ips")

    @backend_ips.setter
    def backend_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "backend_ips", value)

    @_builtins.property
    @pulumi.getter(name="backendVmIds")
    def backend_vm_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        One or more IDs of backend VMs.<br />
        Specifying the same ID several times has no effect as each backend VM has equal weight.
        """
        return pulumi.get(self, "backend_vm_ids")

    @backend_vm_ids.setter
    def backend_vm_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "backend_vm_ids", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['LoadBalancerVmsTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['LoadBalancerVmsTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _LoadBalancerVmsState:
    def __init__(__self__, *,
                 backend_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 backend_vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 load_balancer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 request_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['LoadBalancerVmsTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering LoadBalancerVms resources.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] backend_vm_ids: One or more IDs of backend VMs.<br />
               Specifying the same ID several times has no effect as each backend VM has equal weight.
        :param pulumi.Input[_builtins.str] load_balancer_name: The name of the load balancer.
        """
        if backend_ips is not None:
            pulumi.set(__self__, "backend_ips", backend_ips)
        if backend_vm_ids is not None:
            pulumi.set(__self__, "backend_vm_ids", backend_vm_ids)
        if load_balancer_name is not None:
            pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="backendIps")
    def backend_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "backend_ips")

    @backend_ips.setter
    def backend_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "backend_ips", value)

    @_builtins.property
    @pulumi.getter(name="backendVmIds")
    def backend_vm_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        One or more IDs of backend VMs.<br />
        Specifying the same ID several times has no effect as each backend VM has equal weight.
        """
        return pulumi.get(self, "backend_vm_ids")

    @backend_vm_ids.setter
    def backend_vm_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "backend_vm_ids", value)

    @_builtins.property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the load balancer.
        """
        return pulumi.get(self, "load_balancer_name")

    @load_balancer_name.setter
    def load_balancer_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "load_balancer_name", value)

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['LoadBalancerVmsTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['LoadBalancerVmsTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("outscale:index/loadBalancerVms:LoadBalancerVms")
class LoadBalancerVms(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backend_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 backend_vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 load_balancer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['LoadBalancerVmsTimeoutsArgs', 'LoadBalancerVmsTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Manages load balancer VMs.

        > **Note:** Use only one `LoadBalancerVms` resource per load balancer, to avoid a conflict between the different lists of backend VMs.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-loadbalancer).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        outscale_vm01 = outscale.Vm("outscale_vm01",
            image_id="ami-12345678",
            vm_type="tinav5.c1r1p2",
            keypair_name=keypair_name)
        outscale_vm02 = outscale.Vm("outscale_vm02",
            image_id=image_id,
            vm_type=vm_type,
            keypair_name=keypair_name)
        load_balancer01 = outscale.LoadBalancer("load_balancer01",
            load_balancer_name="load-balancer-for-backend-vms",
            subregion_names=[f"{region}a"],
            listeners=[{
                "backend_port": 80,
                "backend_protocol": "TCP",
                "load_balancer_protocol": "TCP",
                "load_balancer_port": 80,
            }],
            tags=[{
                "key": "name",
                "value": "outscale_load_balancer01",
            }])
        ```

        ### Register VMs with a load balancer

        ```python
        import pulumi
        import pulumi_outscale as outscale

        outscale_load_balancer_vms01 = outscale.LoadBalancerVms("outscale_load_balancer_vms01",
            load_balancer_name="load-balancer-for-backend-vms",
            backend_vm_ids=[
                outscale_vm01["vmId"],
                outscale_vm02["vmId"],
            ])
        ```

        ### Register IPs with a load balancer

        ```python
        import pulumi
        import pulumi_outscale as outscale

        outscale_load_balancer_vms01 = outscale.LoadBalancerVms("outscale_load_balancer_vms01",
            load_balancer_name="load-balancer-for-backend-vms",
            backend_ips=[
                outscale_vm01["publicIp"],
                outscale_vm02["publicIp"],
            ])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] backend_vm_ids: One or more IDs of backend VMs.<br />
               Specifying the same ID several times has no effect as each backend VM has equal weight.
        :param pulumi.Input[_builtins.str] load_balancer_name: The name of the load balancer.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LoadBalancerVmsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages load balancer VMs.

        > **Note:** Use only one `LoadBalancerVms` resource per load balancer, to avoid a conflict between the different lists of backend VMs.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-loadbalancer).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        outscale_vm01 = outscale.Vm("outscale_vm01",
            image_id="ami-12345678",
            vm_type="tinav5.c1r1p2",
            keypair_name=keypair_name)
        outscale_vm02 = outscale.Vm("outscale_vm02",
            image_id=image_id,
            vm_type=vm_type,
            keypair_name=keypair_name)
        load_balancer01 = outscale.LoadBalancer("load_balancer01",
            load_balancer_name="load-balancer-for-backend-vms",
            subregion_names=[f"{region}a"],
            listeners=[{
                "backend_port": 80,
                "backend_protocol": "TCP",
                "load_balancer_protocol": "TCP",
                "load_balancer_port": 80,
            }],
            tags=[{
                "key": "name",
                "value": "outscale_load_balancer01",
            }])
        ```

        ### Register VMs with a load balancer

        ```python
        import pulumi
        import pulumi_outscale as outscale

        outscale_load_balancer_vms01 = outscale.LoadBalancerVms("outscale_load_balancer_vms01",
            load_balancer_name="load-balancer-for-backend-vms",
            backend_vm_ids=[
                outscale_vm01["vmId"],
                outscale_vm02["vmId"],
            ])
        ```

        ### Register IPs with a load balancer

        ```python
        import pulumi
        import pulumi_outscale as outscale

        outscale_load_balancer_vms01 = outscale.LoadBalancerVms("outscale_load_balancer_vms01",
            load_balancer_name="load-balancer-for-backend-vms",
            backend_ips=[
                outscale_vm01["publicIp"],
                outscale_vm02["publicIp"],
            ])
        ```

        :param str resource_name: The name of the resource.
        :param LoadBalancerVmsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoadBalancerVmsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 backend_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 backend_vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 load_balancer_name: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['LoadBalancerVmsTimeoutsArgs', 'LoadBalancerVmsTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoadBalancerVmsArgs.__new__(LoadBalancerVmsArgs)

            __props__.__dict__["backend_ips"] = backend_ips
            __props__.__dict__["backend_vm_ids"] = backend_vm_ids
            if load_balancer_name is None and not opts.urn:
                raise TypeError("Missing required property 'load_balancer_name'")
            __props__.__dict__["load_balancer_name"] = load_balancer_name
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["request_id"] = None
        super(LoadBalancerVms, __self__).__init__(
            'outscale:index/loadBalancerVms:LoadBalancerVms',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            backend_ips: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            backend_vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            load_balancer_name: Optional[pulumi.Input[_builtins.str]] = None,
            request_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['LoadBalancerVmsTimeoutsArgs', 'LoadBalancerVmsTimeoutsArgsDict']]] = None) -> 'LoadBalancerVms':
        """
        Get an existing LoadBalancerVms resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] backend_vm_ids: One or more IDs of backend VMs.<br />
               Specifying the same ID several times has no effect as each backend VM has equal weight.
        :param pulumi.Input[_builtins.str] load_balancer_name: The name of the load balancer.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoadBalancerVmsState.__new__(_LoadBalancerVmsState)

        __props__.__dict__["backend_ips"] = backend_ips
        __props__.__dict__["backend_vm_ids"] = backend_vm_ids
        __props__.__dict__["load_balancer_name"] = load_balancer_name
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["timeouts"] = timeouts
        return LoadBalancerVms(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="backendIps")
    def backend_ips(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        return pulumi.get(self, "backend_ips")

    @_builtins.property
    @pulumi.getter(name="backendVmIds")
    def backend_vm_ids(self) -> pulumi.Output[Optional[Sequence[_builtins.str]]]:
        """
        One or more IDs of backend VMs.<br />
        Specifying the same ID several times has no effect as each backend VM has equal weight.
        """
        return pulumi.get(self, "backend_vm_ids")

    @_builtins.property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the load balancer.
        """
        return pulumi.get(self, "load_balancer_name")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.LoadBalancerVmsTimeouts']]:
        return pulumi.get(self, "timeouts")

