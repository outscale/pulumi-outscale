# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetImageResult',
    'AwaitableGetImageResult',
    'get_image',
    'get_image_output',
]

@pulumi.output_type
class GetImageResult:
    """
    A collection of values returned by getImage.
    """
    def __init__(__self__, account_alias=None, account_id=None, architecture=None, block_device_mappings=None, creation_date=None, description=None, file_location=None, filters=None, id=None, image_id=None, image_name=None, image_type=None, is_public=None, permissions=None, permissions_to_launches=None, product_codes=None, request_id=None, root_device_name=None, root_device_type=None, state=None, state_comments=None, tags=None):
        if account_alias and not isinstance(account_alias, str):
            raise TypeError("Expected argument 'account_alias' to be a str")
        pulumi.set(__self__, "account_alias", account_alias)
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if architecture and not isinstance(architecture, str):
            raise TypeError("Expected argument 'architecture' to be a str")
        pulumi.set(__self__, "architecture", architecture)
        if block_device_mappings and not isinstance(block_device_mappings, list):
            raise TypeError("Expected argument 'block_device_mappings' to be a list")
        pulumi.set(__self__, "block_device_mappings", block_device_mappings)
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if file_location and not isinstance(file_location, str):
            raise TypeError("Expected argument 'file_location' to be a str")
        pulumi.set(__self__, "file_location", file_location)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_id and not isinstance(image_id, str):
            raise TypeError("Expected argument 'image_id' to be a str")
        pulumi.set(__self__, "image_id", image_id)
        if image_name and not isinstance(image_name, str):
            raise TypeError("Expected argument 'image_name' to be a str")
        pulumi.set(__self__, "image_name", image_name)
        if image_type and not isinstance(image_type, str):
            raise TypeError("Expected argument 'image_type' to be a str")
        pulumi.set(__self__, "image_type", image_type)
        if is_public and not isinstance(is_public, bool):
            raise TypeError("Expected argument 'is_public' to be a bool")
        pulumi.set(__self__, "is_public", is_public)
        if permissions and not isinstance(permissions, list):
            raise TypeError("Expected argument 'permissions' to be a list")
        pulumi.set(__self__, "permissions", permissions)
        if permissions_to_launches and not isinstance(permissions_to_launches, list):
            raise TypeError("Expected argument 'permissions_to_launches' to be a list")
        pulumi.set(__self__, "permissions_to_launches", permissions_to_launches)
        if product_codes and not isinstance(product_codes, list):
            raise TypeError("Expected argument 'product_codes' to be a list")
        pulumi.set(__self__, "product_codes", product_codes)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if root_device_name and not isinstance(root_device_name, str):
            raise TypeError("Expected argument 'root_device_name' to be a str")
        pulumi.set(__self__, "root_device_name", root_device_name)
        if root_device_type and not isinstance(root_device_type, str):
            raise TypeError("Expected argument 'root_device_type' to be a str")
        pulumi.set(__self__, "root_device_type", root_device_type)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_comments and not isinstance(state_comments, list):
            raise TypeError("Expected argument 'state_comments' to be a list")
        pulumi.set(__self__, "state_comments", state_comments)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accountAlias")
    def account_alias(self) -> str:
        return pulumi.get(self, "account_alias")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def architecture(self) -> str:
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="blockDeviceMappings")
    def block_device_mappings(self) -> Sequence['outputs.GetImageBlockDeviceMappingResult']:
        return pulumi.get(self, "block_device_mappings")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> str:
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fileLocation")
    def file_location(self) -> str:
        return pulumi.get(self, "file_location")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetImageFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageType")
    def image_type(self) -> str:
        return pulumi.get(self, "image_type")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> bool:
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="permissionsToLaunches")
    def permissions_to_launches(self) -> Sequence['outputs.GetImagePermissionsToLaunchResult']:
        return pulumi.get(self, "permissions_to_launches")

    @property
    @pulumi.getter(name="productCodes")
    def product_codes(self) -> Sequence[str]:
        return pulumi.get(self, "product_codes")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="rootDeviceName")
    def root_device_name(self) -> str:
        return pulumi.get(self, "root_device_name")

    @property
    @pulumi.getter(name="rootDeviceType")
    def root_device_type(self) -> str:
        return pulumi.get(self, "root_device_type")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateComments")
    def state_comments(self) -> Sequence['outputs.GetImageStateCommentResult']:
        return pulumi.get(self, "state_comments")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetImageTagResult']:
        return pulumi.get(self, "tags")


class AwaitableGetImageResult(GetImageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImageResult(
            account_alias=self.account_alias,
            account_id=self.account_id,
            architecture=self.architecture,
            block_device_mappings=self.block_device_mappings,
            creation_date=self.creation_date,
            description=self.description,
            file_location=self.file_location,
            filters=self.filters,
            id=self.id,
            image_id=self.image_id,
            image_name=self.image_name,
            image_type=self.image_type,
            is_public=self.is_public,
            permissions=self.permissions,
            permissions_to_launches=self.permissions_to_launches,
            product_codes=self.product_codes,
            request_id=self.request_id,
            root_device_name=self.root_device_name,
            root_device_type=self.root_device_type,
            state=self.state,
            state_comments=self.state_comments,
            tags=self.tags)


def get_image(block_device_mappings: Optional[Sequence[pulumi.InputType['GetImageBlockDeviceMappingArgs']]] = None,
              filters: Optional[Sequence[pulumi.InputType['GetImageFilterArgs']]] = None,
              image_id: Optional[str] = None,
              permissions: Optional[Sequence[str]] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImageResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['blockDeviceMappings'] = block_device_mappings
    __args__['filters'] = filters
    __args__['imageId'] = image_id
    __args__['permissions'] = permissions
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getImage:getImage', __args__, opts=opts, typ=GetImageResult).value

    return AwaitableGetImageResult(
        account_alias=pulumi.get(__ret__, 'account_alias'),
        account_id=pulumi.get(__ret__, 'account_id'),
        architecture=pulumi.get(__ret__, 'architecture'),
        block_device_mappings=pulumi.get(__ret__, 'block_device_mappings'),
        creation_date=pulumi.get(__ret__, 'creation_date'),
        description=pulumi.get(__ret__, 'description'),
        file_location=pulumi.get(__ret__, 'file_location'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        image_id=pulumi.get(__ret__, 'image_id'),
        image_name=pulumi.get(__ret__, 'image_name'),
        image_type=pulumi.get(__ret__, 'image_type'),
        is_public=pulumi.get(__ret__, 'is_public'),
        permissions=pulumi.get(__ret__, 'permissions'),
        permissions_to_launches=pulumi.get(__ret__, 'permissions_to_launches'),
        product_codes=pulumi.get(__ret__, 'product_codes'),
        request_id=pulumi.get(__ret__, 'request_id'),
        root_device_name=pulumi.get(__ret__, 'root_device_name'),
        root_device_type=pulumi.get(__ret__, 'root_device_type'),
        state=pulumi.get(__ret__, 'state'),
        state_comments=pulumi.get(__ret__, 'state_comments'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_image)
def get_image_output(block_device_mappings: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetImageBlockDeviceMappingArgs']]]]] = None,
                     filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetImageFilterArgs']]]]] = None,
                     image_id: Optional[pulumi.Input[Optional[str]]] = None,
                     permissions: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImageResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
