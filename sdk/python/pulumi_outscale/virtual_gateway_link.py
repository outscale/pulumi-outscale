# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VirtualGatewayLinkArgs', 'VirtualGatewayLink']

@pulumi.input_type
class VirtualGatewayLinkArgs:
    def __init__(__self__, *,
                 net_id: pulumi.Input[_builtins.str],
                 virtual_gateway_id: pulumi.Input[_builtins.str],
                 dry_run: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VirtualGatewayLink resource.
        :param pulumi.Input[_builtins.str] net_id: The ID of the Net to which you want to attach the virtual gateway.
        :param pulumi.Input[_builtins.str] virtual_gateway_id: The ID of the virtual gateway.
        """
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Net to which you want to attach the virtual gateway.
        """
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "net_id", value)

    @_builtins.property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the virtual gateway.
        """
        return pulumi.get(self, "virtual_gateway_id")

    @virtual_gateway_id.setter
    def virtual_gateway_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "virtual_gateway_id", value)

    @_builtins.property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dry_run", value)


@pulumi.input_type
class _VirtualGatewayLinkState:
    def __init__(__self__, *,
                 dry_run: Optional[pulumi.Input[_builtins.str]] = None,
                 net_id: Optional[pulumi.Input[_builtins.str]] = None,
                 net_to_virtual_gateway_links: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualGatewayLinkNetToVirtualGatewayLinkArgs']]]] = None,
                 request_id: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_gateway_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VirtualGatewayLink resources.
        :param pulumi.Input[_builtins.str] net_id: The ID of the Net to which you want to attach the virtual gateway.
        :param pulumi.Input[_builtins.str] virtual_gateway_id: The ID of the virtual gateway.
        """
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if net_to_virtual_gateway_links is not None:
            pulumi.set(__self__, "net_to_virtual_gateway_links", net_to_virtual_gateway_links)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if virtual_gateway_id is not None:
            pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)

    @_builtins.property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "dry_run", value)

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Net to which you want to attach the virtual gateway.
        """
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "net_id", value)

    @_builtins.property
    @pulumi.getter(name="netToVirtualGatewayLinks")
    def net_to_virtual_gateway_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VirtualGatewayLinkNetToVirtualGatewayLinkArgs']]]]:
        return pulumi.get(self, "net_to_virtual_gateway_links")

    @net_to_virtual_gateway_links.setter
    def net_to_virtual_gateway_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VirtualGatewayLinkNetToVirtualGatewayLinkArgs']]]]):
        pulumi.set(self, "net_to_virtual_gateway_links", value)

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_id", value)

    @_builtins.property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the virtual gateway.
        """
        return pulumi.get(self, "virtual_gateway_id")

    @virtual_gateway_id.setter
    def virtual_gateway_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "virtual_gateway_id", value)


@pulumi.type_token("outscale:index/virtualGatewayLink:VirtualGatewayLink")
class VirtualGatewayLink(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dry_run: Optional[pulumi.Input[_builtins.str]] = None,
                 net_id: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a virtual gateway link.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Virtual-Gateways.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-virtualgateway).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        virtual_gateway01 = outscale.VirtualGateway("virtual_gateway01", connection_type="ipsec.1")
        net01 = outscale.Net("net01", ip_range="10.0.0.0/16")
        ```

        ### Link a virtual gateway to a Net

        ```python
        import pulumi
        import pulumi_outscale as outscale

        virtual_gateway_link01 = outscale.VirtualGatewayLink("virtual_gateway_link01",
            virtual_gateway_id=virtual_gateway01["virtualGatewayId"],
            net_id=net01["netId"])
        ```

        ## Import

        A virtual gateway link can be imported using its virtual gateway ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/virtualGatewayLink:VirtualGatewayLink ImportedVirtualGatewayLink vgw-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] net_id: The ID of the Net to which you want to attach the virtual gateway.
        :param pulumi.Input[_builtins.str] virtual_gateway_id: The ID of the virtual gateway.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VirtualGatewayLinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a virtual gateway link.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Virtual-Gateways.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-virtualgateway).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        virtual_gateway01 = outscale.VirtualGateway("virtual_gateway01", connection_type="ipsec.1")
        net01 = outscale.Net("net01", ip_range="10.0.0.0/16")
        ```

        ### Link a virtual gateway to a Net

        ```python
        import pulumi
        import pulumi_outscale as outscale

        virtual_gateway_link01 = outscale.VirtualGatewayLink("virtual_gateway_link01",
            virtual_gateway_id=virtual_gateway01["virtualGatewayId"],
            net_id=net01["netId"])
        ```

        ## Import

        A virtual gateway link can be imported using its virtual gateway ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/virtualGatewayLink:VirtualGatewayLink ImportedVirtualGatewayLink vgw-12345678
        ```

        :param str resource_name: The name of the resource.
        :param VirtualGatewayLinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualGatewayLinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dry_run: Optional[pulumi.Input[_builtins.str]] = None,
                 net_id: Optional[pulumi.Input[_builtins.str]] = None,
                 virtual_gateway_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualGatewayLinkArgs.__new__(VirtualGatewayLinkArgs)

            __props__.__dict__["dry_run"] = dry_run
            if net_id is None and not opts.urn:
                raise TypeError("Missing required property 'net_id'")
            __props__.__dict__["net_id"] = net_id
            if virtual_gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'virtual_gateway_id'")
            __props__.__dict__["virtual_gateway_id"] = virtual_gateway_id
            __props__.__dict__["net_to_virtual_gateway_links"] = None
            __props__.__dict__["request_id"] = None
        super(VirtualGatewayLink, __self__).__init__(
            'outscale:index/virtualGatewayLink:VirtualGatewayLink',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dry_run: Optional[pulumi.Input[_builtins.str]] = None,
            net_id: Optional[pulumi.Input[_builtins.str]] = None,
            net_to_virtual_gateway_links: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VirtualGatewayLinkNetToVirtualGatewayLinkArgs', 'VirtualGatewayLinkNetToVirtualGatewayLinkArgsDict']]]]] = None,
            request_id: Optional[pulumi.Input[_builtins.str]] = None,
            virtual_gateway_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'VirtualGatewayLink':
        """
        Get an existing VirtualGatewayLink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] net_id: The ID of the Net to which you want to attach the virtual gateway.
        :param pulumi.Input[_builtins.str] virtual_gateway_id: The ID of the virtual gateway.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VirtualGatewayLinkState.__new__(_VirtualGatewayLinkState)

        __props__.__dict__["dry_run"] = dry_run
        __props__.__dict__["net_id"] = net_id
        __props__.__dict__["net_to_virtual_gateway_links"] = net_to_virtual_gateway_links
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["virtual_gateway_id"] = virtual_gateway_id
        return VirtualGatewayLink(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "dry_run")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Net to which you want to attach the virtual gateway.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="netToVirtualGatewayLinks")
    def net_to_virtual_gateway_links(self) -> pulumi.Output[Sequence['outputs.VirtualGatewayLinkNetToVirtualGatewayLink']]:
        return pulumi.get(self, "net_to_virtual_gateway_links")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the virtual gateway.
        """
        return pulumi.get(self, "virtual_gateway_id")

