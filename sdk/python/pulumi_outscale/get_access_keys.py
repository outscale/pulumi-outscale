# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAccessKeysResult',
    'AwaitableGetAccessKeysResult',
    'get_access_keys',
    'get_access_keys_output',
]

@pulumi.output_type
class GetAccessKeysResult:
    """
    A collection of values returned by getAccessKeys.
    """
    def __init__(__self__, access_key_ids=None, access_keys=None, filters=None, id=None, request_id=None, states=None, user_name=None):
        if access_key_ids and not isinstance(access_key_ids, list):
            raise TypeError("Expected argument 'access_key_ids' to be a list")
        pulumi.set(__self__, "access_key_ids", access_key_ids)
        if access_keys and not isinstance(access_keys, list):
            raise TypeError("Expected argument 'access_keys' to be a list")
        pulumi.set(__self__, "access_keys", access_keys)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if states and not isinstance(states, list):
            raise TypeError("Expected argument 'states' to be a list")
        pulumi.set(__self__, "states", states)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="accessKeyIds")
    def access_key_ids(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "access_key_ids")

    @_builtins.property
    @pulumi.getter(name="accessKeys")
    def access_keys(self) -> Sequence['outputs.GetAccessKeysAccessKeyResult']:
        """
        A list of access keys.
        """
        return pulumi.get(self, "access_keys")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetAccessKeysFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter
    def states(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "states")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_name")


class AwaitableGetAccessKeysResult(GetAccessKeysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccessKeysResult(
            access_key_ids=self.access_key_ids,
            access_keys=self.access_keys,
            filters=self.filters,
            id=self.id,
            request_id=self.request_id,
            states=self.states,
            user_name=self.user_name)


def get_access_keys(access_key_ids: Optional[Sequence[_builtins.str]] = None,
                    filters: Optional[Sequence[Union['GetAccessKeysFilterArgs', 'GetAccessKeysFilterArgsDict']]] = None,
                    states: Optional[Sequence[_builtins.str]] = None,
                    user_name: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccessKeysResult:
    """
    Provides information about access keys.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Access-Keys.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-accesskey).

    ## Example Usage

    ### Get your own access keys (root account or user)

    ```python
    import pulumi
    import pulumi_outscale as outscale

    access_keys01 = outscale.get_access_keys(filters=[{
        "name": "access_key_ids",
        "values": [
            "ABCDEFGHIJ0123456789",
            "0123456789ABCDEFGHIJ",
        ],
    }])
    ```

    ### Get the access keys of another user

    ```python
    import pulumi
    import pulumi_outscale as outscale

    access_keys = outscale.get_access_keys(user_name="user_name",
        filters=[
            {
                "name": "access_key_ids",
                "values": [
                    "XXXXXXXXX",
                    "YYYYYYYYYY",
                ],
            },
            {
                "name": "states",
                "values": ["ACTIVE"],
            },
        ])
    ```


    :param Sequence[Union['GetAccessKeysFilterArgs', 'GetAccessKeysFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    :param _builtins.str user_name: The name of the EIM user. By default, the user who sends the request (which can be the root account).
    """
    __args__ = dict()
    __args__['accessKeyIds'] = access_key_ids
    __args__['filters'] = filters
    __args__['states'] = states
    __args__['userName'] = user_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getAccessKeys:getAccessKeys', __args__, opts=opts, typ=GetAccessKeysResult).value

    return AwaitableGetAccessKeysResult(
        access_key_ids=pulumi.get(__ret__, 'access_key_ids'),
        access_keys=pulumi.get(__ret__, 'access_keys'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        request_id=pulumi.get(__ret__, 'request_id'),
        states=pulumi.get(__ret__, 'states'),
        user_name=pulumi.get(__ret__, 'user_name'))
def get_access_keys_output(access_key_ids: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                           filters: Optional[pulumi.Input[Optional[Sequence[Union['GetAccessKeysFilterArgs', 'GetAccessKeysFilterArgsDict']]]]] = None,
                           states: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                           user_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAccessKeysResult]:
    """
    Provides information about access keys.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Access-Keys.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-accesskey).

    ## Example Usage

    ### Get your own access keys (root account or user)

    ```python
    import pulumi
    import pulumi_outscale as outscale

    access_keys01 = outscale.get_access_keys(filters=[{
        "name": "access_key_ids",
        "values": [
            "ABCDEFGHIJ0123456789",
            "0123456789ABCDEFGHIJ",
        ],
    }])
    ```

    ### Get the access keys of another user

    ```python
    import pulumi
    import pulumi_outscale as outscale

    access_keys = outscale.get_access_keys(user_name="user_name",
        filters=[
            {
                "name": "access_key_ids",
                "values": [
                    "XXXXXXXXX",
                    "YYYYYYYYYY",
                ],
            },
            {
                "name": "states",
                "values": ["ACTIVE"],
            },
        ])
    ```


    :param Sequence[Union['GetAccessKeysFilterArgs', 'GetAccessKeysFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    :param _builtins.str user_name: The name of the EIM user. By default, the user who sends the request (which can be the root account).
    """
    __args__ = dict()
    __args__['accessKeyIds'] = access_key_ids
    __args__['filters'] = filters
    __args__['states'] = states
    __args__['userName'] = user_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getAccessKeys:getAccessKeys', __args__, opts=opts, typ=GetAccessKeysResult)
    return __ret__.apply(lambda __response__: GetAccessKeysResult(
        access_key_ids=pulumi.get(__response__, 'access_key_ids'),
        access_keys=pulumi.get(__response__, 'access_keys'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        request_id=pulumi.get(__response__, 'request_id'),
        states=pulumi.get(__response__, 'states'),
        user_name=pulumi.get(__response__, 'user_name')))
