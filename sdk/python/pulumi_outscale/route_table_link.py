# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RouteTableLinkArgs', 'RouteTableLink']

@pulumi.input_type
class RouteTableLinkArgs:
    def __init__(__self__, *,
                 route_table_id: pulumi.Input[_builtins.str],
                 subnet_id: pulumi.Input[_builtins.str],
                 timeouts: Optional[pulumi.Input['RouteTableLinkTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a RouteTableLink resource.
        :param pulumi.Input[_builtins.str] route_table_id: The ID of the route table.
        :param pulumi.Input[_builtins.str] subnet_id: The ID of the Net.
        """
        pulumi.set(__self__, "route_table_id", route_table_id)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the route table.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "route_table_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Net.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['RouteTableLinkTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['RouteTableLinkTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _RouteTableLinkState:
    def __init__(__self__, *,
                 link_route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 main: Optional[pulumi.Input[_builtins.bool]] = None,
                 net_id: Optional[pulumi.Input[_builtins.str]] = None,
                 request_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['RouteTableLinkTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering RouteTableLink resources.
        :param pulumi.Input[_builtins.str] link_route_table_id: The ID of the association between the route table and the Subnet.
        :param pulumi.Input[_builtins.bool] main: If true, the route table is the main one.
        :param pulumi.Input[_builtins.str] route_table_id: The ID of the route table.
        :param pulumi.Input[_builtins.str] subnet_id: The ID of the Net.
        """
        if link_route_table_id is not None:
            pulumi.set(__self__, "link_route_table_id", link_route_table_id)
        if main is not None:
            pulumi.set(__self__, "main", main)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="linkRouteTableId")
    def link_route_table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the association between the route table and the Subnet.
        """
        return pulumi.get(self, "link_route_table_id")

    @link_route_table_id.setter
    def link_route_table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "link_route_table_id", value)

    @_builtins.property
    @pulumi.getter
    def main(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, the route table is the main one.
        """
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "main", value)

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "net_id", value)

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_id", value)

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the route table.
        """
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "route_table_id", value)

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Net.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['RouteTableLinkTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['RouteTableLinkTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("outscale:index/routeTableLink:RouteTableLink")
class RouteTableLink(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['RouteTableLinkTimeoutsArgs', 'RouteTableLinkTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Manages a route table link.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Route-Tables.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-routetable).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net01 = outscale.Net("net01", ip_range="10.0.0.0/16")
        subnet01 = outscale.Subnet("subnet01",
            net_id=net01.net_id,
            ip_range="10.0.0.0/18")
        route_table01 = outscale.RouteTable("route_table01", net_id=net01.net_id)
        ```

        ### Link a route table to a subnet

        ```python
        import pulumi
        import pulumi_outscale as outscale

        route_table_link01 = outscale.RouteTableLink("route_table_link01",
            subnet_id=subnet01["subnetId"],
            route_table_id=route_table01["routeTableId"])
        ```

        ## Import

        A route table link can be imported using the route table ID and the route table link ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/routeTableLink:RouteTableLink ImportedRouteTableLink rtb-12345678_rtbassoc-87654321
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] route_table_id: The ID of the route table.
        :param pulumi.Input[_builtins.str] subnet_id: The ID of the Net.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouteTableLinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a route table link.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Route-Tables.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-routetable).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net01 = outscale.Net("net01", ip_range="10.0.0.0/16")
        subnet01 = outscale.Subnet("subnet01",
            net_id=net01.net_id,
            ip_range="10.0.0.0/18")
        route_table01 = outscale.RouteTable("route_table01", net_id=net01.net_id)
        ```

        ### Link a route table to a subnet

        ```python
        import pulumi
        import pulumi_outscale as outscale

        route_table_link01 = outscale.RouteTableLink("route_table_link01",
            subnet_id=subnet01["subnetId"],
            route_table_id=route_table01["routeTableId"])
        ```

        ## Import

        A route table link can be imported using the route table ID and the route table link ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/routeTableLink:RouteTableLink ImportedRouteTableLink rtb-12345678_rtbassoc-87654321
        ```

        :param str resource_name: The name of the resource.
        :param RouteTableLinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouteTableLinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
                 subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['RouteTableLinkTimeoutsArgs', 'RouteTableLinkTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouteTableLinkArgs.__new__(RouteTableLinkArgs)

            if route_table_id is None and not opts.urn:
                raise TypeError("Missing required property 'route_table_id'")
            __props__.__dict__["route_table_id"] = route_table_id
            if subnet_id is None and not opts.urn:
                raise TypeError("Missing required property 'subnet_id'")
            __props__.__dict__["subnet_id"] = subnet_id
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["link_route_table_id"] = None
            __props__.__dict__["main"] = None
            __props__.__dict__["net_id"] = None
            __props__.__dict__["request_id"] = None
        super(RouteTableLink, __self__).__init__(
            'outscale:index/routeTableLink:RouteTableLink',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            link_route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
            main: Optional[pulumi.Input[_builtins.bool]] = None,
            net_id: Optional[pulumi.Input[_builtins.str]] = None,
            request_id: Optional[pulumi.Input[_builtins.str]] = None,
            route_table_id: Optional[pulumi.Input[_builtins.str]] = None,
            subnet_id: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['RouteTableLinkTimeoutsArgs', 'RouteTableLinkTimeoutsArgsDict']]] = None) -> 'RouteTableLink':
        """
        Get an existing RouteTableLink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] link_route_table_id: The ID of the association between the route table and the Subnet.
        :param pulumi.Input[_builtins.bool] main: If true, the route table is the main one.
        :param pulumi.Input[_builtins.str] route_table_id: The ID of the route table.
        :param pulumi.Input[_builtins.str] subnet_id: The ID of the Net.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouteTableLinkState.__new__(_RouteTableLinkState)

        __props__.__dict__["link_route_table_id"] = link_route_table_id
        __props__.__dict__["main"] = main
        __props__.__dict__["net_id"] = net_id
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["route_table_id"] = route_table_id
        __props__.__dict__["subnet_id"] = subnet_id
        __props__.__dict__["timeouts"] = timeouts
        return RouteTableLink(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="linkRouteTableId")
    def link_route_table_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the association between the route table and the Subnet.
        """
        return pulumi.get(self, "link_route_table_id")

    @_builtins.property
    @pulumi.getter
    def main(self) -> pulumi.Output[_builtins.bool]:
        """
        If true, the route table is the main one.
        """
        return pulumi.get(self, "main")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the route table.
        """
        return pulumi.get(self, "route_table_id")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Net.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.RouteTableLinkTimeouts']]:
        return pulumi.get(self, "timeouts")

