# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SnapshotArgs', 'Snapshot']

@pulumi.input_type
class SnapshotArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 file_location: Optional[pulumi.Input[str]] = None,
                 snapshot_size: Optional[pulumi.Input[int]] = None,
                 source_region_name: Optional[pulumi.Input[str]] = None,
                 source_snapshot_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotTagArgs']]]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Snapshot resource.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if file_location is not None:
            pulumi.set(__self__, "file_location", file_location)
        if snapshot_size is not None:
            pulumi.set(__self__, "snapshot_size", snapshot_size)
        if source_region_name is not None:
            pulumi.set(__self__, "source_region_name", source_region_name)
        if source_snapshot_id is not None:
            pulumi.set(__self__, "source_snapshot_id", source_snapshot_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fileLocation")
    def file_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_location")

    @file_location.setter
    def file_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_location", value)

    @property
    @pulumi.getter(name="snapshotSize")
    def snapshot_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "snapshot_size")

    @snapshot_size.setter
    def snapshot_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "snapshot_size", value)

    @property
    @pulumi.getter(name="sourceRegionName")
    def source_region_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_region_name")

    @source_region_name.setter
    def source_region_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_region_name", value)

    @property
    @pulumi.getter(name="sourceSnapshotId")
    def source_snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_snapshot_id")

    @source_snapshot_id.setter
    def source_snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_snapshot_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_id", value)


@pulumi.input_type
class _SnapshotState:
    def __init__(__self__, *,
                 account_alias: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 creation_date: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 file_location: Optional[pulumi.Input[str]] = None,
                 permissions_to_create_volumes: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotPermissionsToCreateVolumeArgs']]]] = None,
                 progress: Optional[pulumi.Input[int]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 snapshot_size: Optional[pulumi.Input[int]] = None,
                 source_region_name: Optional[pulumi.Input[str]] = None,
                 source_snapshot_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotTagArgs']]]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Snapshot resources.
        """
        if account_alias is not None:
            pulumi.set(__self__, "account_alias", account_alias)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if file_location is not None:
            pulumi.set(__self__, "file_location", file_location)
        if permissions_to_create_volumes is not None:
            pulumi.set(__self__, "permissions_to_create_volumes", permissions_to_create_volumes)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if snapshot_size is not None:
            pulumi.set(__self__, "snapshot_size", snapshot_size)
        if source_region_name is not None:
            pulumi.set(__self__, "source_region_name", source_region_name)
        if source_snapshot_id is not None:
            pulumi.set(__self__, "source_snapshot_id", source_snapshot_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)

    @property
    @pulumi.getter(name="accountAlias")
    def account_alias(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_alias")

    @account_alias.setter
    def account_alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_alias", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fileLocation")
    def file_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_location")

    @file_location.setter
    def file_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_location", value)

    @property
    @pulumi.getter(name="permissionsToCreateVolumes")
    def permissions_to_create_volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotPermissionsToCreateVolumeArgs']]]]:
        return pulumi.get(self, "permissions_to_create_volumes")

    @permissions_to_create_volumes.setter
    def permissions_to_create_volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotPermissionsToCreateVolumeArgs']]]]):
        pulumi.set(self, "permissions_to_create_volumes", value)

    @property
    @pulumi.getter
    def progress(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "progress", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter(name="snapshotSize")
    def snapshot_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "snapshot_size")

    @snapshot_size.setter
    def snapshot_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "snapshot_size", value)

    @property
    @pulumi.getter(name="sourceRegionName")
    def source_region_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_region_name")

    @source_region_name.setter
    def source_region_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_region_name", value)

    @property
    @pulumi.getter(name="sourceSnapshotId")
    def source_snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_snapshot_id")

    @source_snapshot_id.setter
    def source_snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_snapshot_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_size", value)


class Snapshot(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 file_location: Optional[pulumi.Input[str]] = None,
                 snapshot_size: Optional[pulumi.Input[int]] = None,
                 source_region_name: Optional[pulumi.Input[str]] = None,
                 source_snapshot_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnapshotTagArgs']]]]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Snapshot resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SnapshotArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Snapshot resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SnapshotArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnapshotArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 file_location: Optional[pulumi.Input[str]] = None,
                 snapshot_size: Optional[pulumi.Input[int]] = None,
                 source_region_name: Optional[pulumi.Input[str]] = None,
                 source_snapshot_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnapshotTagArgs']]]]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnapshotArgs.__new__(SnapshotArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["file_location"] = file_location
            __props__.__dict__["snapshot_size"] = snapshot_size
            __props__.__dict__["source_region_name"] = source_region_name
            __props__.__dict__["source_snapshot_id"] = source_snapshot_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["volume_id"] = volume_id
            __props__.__dict__["account_alias"] = None
            __props__.__dict__["account_id"] = None
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["permissions_to_create_volumes"] = None
            __props__.__dict__["progress"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["snapshot_id"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["volume_size"] = None
        super(Snapshot, __self__).__init__(
            'outscale:index/snapshot:Snapshot',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_alias: Optional[pulumi.Input[str]] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            creation_date: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            file_location: Optional[pulumi.Input[str]] = None,
            permissions_to_create_volumes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnapshotPermissionsToCreateVolumeArgs']]]]] = None,
            progress: Optional[pulumi.Input[int]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            snapshot_id: Optional[pulumi.Input[str]] = None,
            snapshot_size: Optional[pulumi.Input[int]] = None,
            source_region_name: Optional[pulumi.Input[str]] = None,
            source_snapshot_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnapshotTagArgs']]]]] = None,
            volume_id: Optional[pulumi.Input[str]] = None,
            volume_size: Optional[pulumi.Input[int]] = None) -> 'Snapshot':
        """
        Get an existing Snapshot resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnapshotState.__new__(_SnapshotState)

        __props__.__dict__["account_alias"] = account_alias
        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["description"] = description
        __props__.__dict__["file_location"] = file_location
        __props__.__dict__["permissions_to_create_volumes"] = permissions_to_create_volumes
        __props__.__dict__["progress"] = progress
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["snapshot_id"] = snapshot_id
        __props__.__dict__["snapshot_size"] = snapshot_size
        __props__.__dict__["source_region_name"] = source_region_name
        __props__.__dict__["source_snapshot_id"] = source_snapshot_id
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["volume_id"] = volume_id
        __props__.__dict__["volume_size"] = volume_size
        return Snapshot(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountAlias")
    def account_alias(self) -> pulumi.Output[str]:
        return pulumi.get(self, "account_alias")

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[str]:
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fileLocation")
    def file_location(self) -> pulumi.Output[str]:
        return pulumi.get(self, "file_location")

    @property
    @pulumi.getter(name="permissionsToCreateVolumes")
    def permissions_to_create_volumes(self) -> pulumi.Output[Sequence['outputs.SnapshotPermissionsToCreateVolume']]:
        return pulumi.get(self, "permissions_to_create_volumes")

    @property
    @pulumi.getter
    def progress(self) -> pulumi.Output[int]:
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="snapshotSize")
    def snapshot_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "snapshot_size")

    @property
    @pulumi.getter(name="sourceRegionName")
    def source_region_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_region_name")

    @property
    @pulumi.getter(name="sourceSnapshotId")
    def source_snapshot_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "source_snapshot_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.SnapshotTag']]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "volume_id")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> pulumi.Output[int]:
        return pulumi.get(self, "volume_size")

