# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetUserResult',
    'AwaitableGetUserResult',
    'get_user',
    'get_user_output',
]

@pulumi.output_type
class GetUserResult:
    """
    A collection of values returned by getUser.
    """
    def __init__(__self__, creation_date=None, filters=None, id=None, last_modification_date=None, path=None, user_email=None, user_id=None, user_name=None):
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_modification_date and not isinstance(last_modification_date, str):
            raise TypeError("Expected argument 'last_modification_date' to be a str")
        pulumi.set(__self__, "last_modification_date", last_modification_date)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if user_email and not isinstance(user_email, str):
            raise TypeError("Expected argument 'user_email' to be a str")
        pulumi.set(__self__, "user_email", user_email)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) of creation of the EIM user.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetUserFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> _builtins.str:
        """
        The date and time (UTC) of the last modification of the EIM user.
        """
        return pulumi.get(self, "last_modification_date")

    @_builtins.property
    @pulumi.getter
    def path(self) -> _builtins.str:
        """
        The path to the EIM user.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> _builtins.str:
        """
        The email address of the EIM user.
        """
        return pulumi.get(self, "user_email")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> _builtins.str:
        """
        The ID of the EIM user.
        """
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        """
        The name of the EIM user.
        """
        return pulumi.get(self, "user_name")


class AwaitableGetUserResult(GetUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserResult(
            creation_date=self.creation_date,
            filters=self.filters,
            id=self.id,
            last_modification_date=self.last_modification_date,
            path=self.path,
            user_email=self.user_email,
            user_id=self.user_id,
            user_name=self.user_name)


def get_user(filters: Optional[Sequence[Union['GetUserFilterArgs', 'GetUserFilterArgsDict']]] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserResult:
    """
    Provides information about a user.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-EIM-Users.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#createuser).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    user01 = outscale.get_user(filters=[{
        "name": "user_ids",
        "values": ["XXXXXXXXXXXXXXXX"],
    }])
    ```
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult).value

    return AwaitableGetUserResult(
        creation_date=pulumi.get(__ret__, 'creation_date'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        last_modification_date=pulumi.get(__ret__, 'last_modification_date'),
        path=pulumi.get(__ret__, 'path'),
        user_email=pulumi.get(__ret__, 'user_email'),
        user_id=pulumi.get(__ret__, 'user_id'),
        user_name=pulumi.get(__ret__, 'user_name'))
def get_user_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetUserFilterArgs', 'GetUserFilterArgsDict']]]]] = None,
                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUserResult]:
    """
    Provides information about a user.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-EIM-Users.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#createuser).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    user01 = outscale.get_user(filters=[{
        "name": "user_ids",
        "values": ["XXXXXXXXXXXXXXXX"],
    }])
    ```
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult)
    return __ret__.apply(lambda __response__: GetUserResult(
        creation_date=pulumi.get(__response__, 'creation_date'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        last_modification_date=pulumi.get(__response__, 'last_modification_date'),
        path=pulumi.get(__response__, 'path'),
        user_email=pulumi.get(__response__, 'user_email'),
        user_id=pulumi.get(__response__, 'user_id'),
        user_name=pulumi.get(__response__, 'user_name')))
