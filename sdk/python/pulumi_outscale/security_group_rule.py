# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SecurityGroupRuleArgs', 'SecurityGroupRule']

@pulumi.input_type
class SecurityGroupRuleArgs:
    def __init__(__self__, *,
                 flow: pulumi.Input[str],
                 security_group_id: pulumi.Input[str],
                 from_port_range: Optional[pulumi.Input[int]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 ip_range: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupRuleRuleArgs']]]] = None,
                 security_group_account_id_to_link: Optional[pulumi.Input[str]] = None,
                 security_group_name_to_link: Optional[pulumi.Input[str]] = None,
                 to_port_range: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a SecurityGroupRule resource.
        """
        pulumi.set(__self__, "flow", flow)
        pulumi.set(__self__, "security_group_id", security_group_id)
        if from_port_range is not None:
            pulumi.set(__self__, "from_port_range", from_port_range)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if ip_range is not None:
            pulumi.set(__self__, "ip_range", ip_range)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if security_group_account_id_to_link is not None:
            pulumi.set(__self__, "security_group_account_id_to_link", security_group_account_id_to_link)
        if security_group_name_to_link is not None:
            pulumi.set(__self__, "security_group_name_to_link", security_group_name_to_link)
        if to_port_range is not None:
            pulumi.set(__self__, "to_port_range", to_port_range)

    @property
    @pulumi.getter
    def flow(self) -> pulumi.Input[str]:
        return pulumi.get(self, "flow")

    @flow.setter
    def flow(self, value: pulumi.Input[str]):
        pulumi.set(self, "flow", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "from_port_range")

    @from_port_range.setter
    def from_port_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "from_port_range", value)

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_protocol")

    @ip_protocol.setter
    def ip_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_protocol", value)

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_range")

    @ip_range.setter
    def ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupRuleRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupRuleRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="securityGroupAccountIdToLink")
    def security_group_account_id_to_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_account_id_to_link")

    @security_group_account_id_to_link.setter
    def security_group_account_id_to_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_account_id_to_link", value)

    @property
    @pulumi.getter(name="securityGroupNameToLink")
    def security_group_name_to_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_name_to_link")

    @security_group_name_to_link.setter
    def security_group_name_to_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_name_to_link", value)

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "to_port_range")

    @to_port_range.setter
    def to_port_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "to_port_range", value)


@pulumi.input_type
class _SecurityGroupRuleState:
    def __init__(__self__, *,
                 flow: Optional[pulumi.Input[str]] = None,
                 from_port_range: Optional[pulumi.Input[int]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 ip_range: Optional[pulumi.Input[str]] = None,
                 net_id: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupRuleRuleArgs']]]] = None,
                 security_group_account_id_to_link: Optional[pulumi.Input[str]] = None,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 security_group_name: Optional[pulumi.Input[str]] = None,
                 security_group_name_to_link: Optional[pulumi.Input[str]] = None,
                 to_port_range: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering SecurityGroupRule resources.
        """
        if flow is not None:
            pulumi.set(__self__, "flow", flow)
        if from_port_range is not None:
            pulumi.set(__self__, "from_port_range", from_port_range)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if ip_range is not None:
            pulumi.set(__self__, "ip_range", ip_range)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)
        if security_group_account_id_to_link is not None:
            pulumi.set(__self__, "security_group_account_id_to_link", security_group_account_id_to_link)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)
        if security_group_name_to_link is not None:
            pulumi.set(__self__, "security_group_name_to_link", security_group_name_to_link)
        if to_port_range is not None:
            pulumi.set(__self__, "to_port_range", to_port_range)

    @property
    @pulumi.getter
    def flow(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flow")

    @flow.setter
    def flow(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flow", value)

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "from_port_range")

    @from_port_range.setter
    def from_port_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "from_port_range", value)

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_protocol")

    @ip_protocol.setter
    def ip_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_protocol", value)

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_range")

    @ip_range.setter
    def ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupRuleRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupRuleRuleArgs']]]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter(name="securityGroupAccountIdToLink")
    def security_group_account_id_to_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_account_id_to_link")

    @security_group_account_id_to_link.setter
    def security_group_account_id_to_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_account_id_to_link", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_name")

    @security_group_name.setter
    def security_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_name", value)

    @property
    @pulumi.getter(name="securityGroupNameToLink")
    def security_group_name_to_link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_name_to_link")

    @security_group_name_to_link.setter
    def security_group_name_to_link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_name_to_link", value)

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "to_port_range")

    @to_port_range.setter
    def to_port_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "to_port_range", value)


class SecurityGroupRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 flow: Optional[pulumi.Input[str]] = None,
                 from_port_range: Optional[pulumi.Input[int]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 ip_range: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecurityGroupRuleRuleArgs']]]]] = None,
                 security_group_account_id_to_link: Optional[pulumi.Input[str]] = None,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 security_group_name_to_link: Optional[pulumi.Input[str]] = None,
                 to_port_range: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a SecurityGroupRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecurityGroupRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SecurityGroupRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SecurityGroupRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecurityGroupRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 flow: Optional[pulumi.Input[str]] = None,
                 from_port_range: Optional[pulumi.Input[int]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 ip_range: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecurityGroupRuleRuleArgs']]]]] = None,
                 security_group_account_id_to_link: Optional[pulumi.Input[str]] = None,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 security_group_name_to_link: Optional[pulumi.Input[str]] = None,
                 to_port_range: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecurityGroupRuleArgs.__new__(SecurityGroupRuleArgs)

            if flow is None and not opts.urn:
                raise TypeError("Missing required property 'flow'")
            __props__.__dict__["flow"] = flow
            __props__.__dict__["from_port_range"] = from_port_range
            __props__.__dict__["ip_protocol"] = ip_protocol
            __props__.__dict__["ip_range"] = ip_range
            __props__.__dict__["rules"] = rules
            __props__.__dict__["security_group_account_id_to_link"] = security_group_account_id_to_link
            if security_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'security_group_id'")
            __props__.__dict__["security_group_id"] = security_group_id
            __props__.__dict__["security_group_name_to_link"] = security_group_name_to_link
            __props__.__dict__["to_port_range"] = to_port_range
            __props__.__dict__["net_id"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["security_group_name"] = None
        super(SecurityGroupRule, __self__).__init__(
            'outscale:index/securityGroupRule:SecurityGroupRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            flow: Optional[pulumi.Input[str]] = None,
            from_port_range: Optional[pulumi.Input[int]] = None,
            ip_protocol: Optional[pulumi.Input[str]] = None,
            ip_range: Optional[pulumi.Input[str]] = None,
            net_id: Optional[pulumi.Input[str]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecurityGroupRuleRuleArgs']]]]] = None,
            security_group_account_id_to_link: Optional[pulumi.Input[str]] = None,
            security_group_id: Optional[pulumi.Input[str]] = None,
            security_group_name: Optional[pulumi.Input[str]] = None,
            security_group_name_to_link: Optional[pulumi.Input[str]] = None,
            to_port_range: Optional[pulumi.Input[int]] = None) -> 'SecurityGroupRule':
        """
        Get an existing SecurityGroupRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SecurityGroupRuleState.__new__(_SecurityGroupRuleState)

        __props__.__dict__["flow"] = flow
        __props__.__dict__["from_port_range"] = from_port_range
        __props__.__dict__["ip_protocol"] = ip_protocol
        __props__.__dict__["ip_range"] = ip_range
        __props__.__dict__["net_id"] = net_id
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["rules"] = rules
        __props__.__dict__["security_group_account_id_to_link"] = security_group_account_id_to_link
        __props__.__dict__["security_group_id"] = security_group_id
        __props__.__dict__["security_group_name"] = security_group_name
        __props__.__dict__["security_group_name_to_link"] = security_group_name_to_link
        __props__.__dict__["to_port_range"] = to_port_range
        return SecurityGroupRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def flow(self) -> pulumi.Output[str]:
        return pulumi.get(self, "flow")

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "from_port_range")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ip_range")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Optional[Sequence['outputs.SecurityGroupRuleRule']]]:
        return pulumi.get(self, "rules")

    @property
    @pulumi.getter(name="securityGroupAccountIdToLink")
    def security_group_account_id_to_link(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "security_group_account_id_to_link")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "security_group_name")

    @property
    @pulumi.getter(name="securityGroupNameToLink")
    def security_group_name_to_link(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "security_group_name_to_link")

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "to_port_range")

