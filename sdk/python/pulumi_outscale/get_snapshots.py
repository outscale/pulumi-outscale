# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSnapshotsResult',
    'AwaitableGetSnapshotsResult',
    'get_snapshots',
    'get_snapshots_output',
]

@pulumi.output_type
class GetSnapshotsResult:
    """
    A collection of values returned by getSnapshots.
    """
    def __init__(__self__, account_ids=None, filters=None, id=None, permission_to_create_volumes=None, request_id=None, snapshot_ids=None, snapshots=None):
        if account_ids and not isinstance(account_ids, list):
            raise TypeError("Expected argument 'account_ids' to be a list")
        pulumi.set(__self__, "account_ids", account_ids)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if permission_to_create_volumes and not isinstance(permission_to_create_volumes, list):
            raise TypeError("Expected argument 'permission_to_create_volumes' to be a list")
        pulumi.set(__self__, "permission_to_create_volumes", permission_to_create_volumes)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if snapshot_ids and not isinstance(snapshot_ids, list):
            raise TypeError("Expected argument 'snapshot_ids' to be a list")
        pulumi.set(__self__, "snapshot_ids", snapshot_ids)
        if snapshots and not isinstance(snapshots, list):
            raise TypeError("Expected argument 'snapshots' to be a list")
        pulumi.set(__self__, "snapshots", snapshots)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "account_ids")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetSnapshotsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="permissionToCreateVolumes")
    def permission_to_create_volumes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "permission_to_create_volumes")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="snapshotIds")
    def snapshot_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "snapshot_ids")

    @property
    @pulumi.getter
    def snapshots(self) -> Sequence['outputs.GetSnapshotsSnapshotResult']:
        return pulumi.get(self, "snapshots")


class AwaitableGetSnapshotsResult(GetSnapshotsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnapshotsResult(
            account_ids=self.account_ids,
            filters=self.filters,
            id=self.id,
            permission_to_create_volumes=self.permission_to_create_volumes,
            request_id=self.request_id,
            snapshot_ids=self.snapshot_ids,
            snapshots=self.snapshots)


def get_snapshots(account_ids: Optional[Sequence[str]] = None,
                  filters: Optional[Sequence[pulumi.InputType['GetSnapshotsFilterArgs']]] = None,
                  permission_to_create_volumes: Optional[Sequence[str]] = None,
                  snapshot_ids: Optional[Sequence[str]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSnapshotsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['accountIds'] = account_ids
    __args__['filters'] = filters
    __args__['permissionToCreateVolumes'] = permission_to_create_volumes
    __args__['snapshotIds'] = snapshot_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getSnapshots:getSnapshots', __args__, opts=opts, typ=GetSnapshotsResult).value

    return AwaitableGetSnapshotsResult(
        account_ids=pulumi.get(__ret__, 'account_ids'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        permission_to_create_volumes=pulumi.get(__ret__, 'permission_to_create_volumes'),
        request_id=pulumi.get(__ret__, 'request_id'),
        snapshot_ids=pulumi.get(__ret__, 'snapshot_ids'),
        snapshots=pulumi.get(__ret__, 'snapshots'))


@_utilities.lift_output_func(get_snapshots)
def get_snapshots_output(account_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                         filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetSnapshotsFilterArgs']]]]] = None,
                         permission_to_create_volumes: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                         snapshot_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSnapshotsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
