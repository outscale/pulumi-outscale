# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetImageExportTaskResult',
    'AwaitableGetImageExportTaskResult',
    'get_image_export_task',
    'get_image_export_task_output',
]

@pulumi.output_type
class GetImageExportTaskResult:
    """
    A collection of values returned by getImageExportTask.
    """
    def __init__(__self__, comment=None, dry_run=None, filters=None, id=None, image_id=None, osu_exports=None, progress=None, request_id=None, state=None, tags=None, task_id=None):
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if dry_run and not isinstance(dry_run, bool):
            raise TypeError("Expected argument 'dry_run' to be a bool")
        pulumi.set(__self__, "dry_run", dry_run)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_id and not isinstance(image_id, str):
            raise TypeError("Expected argument 'image_id' to be a str")
        pulumi.set(__self__, "image_id", image_id)
        if osu_exports and not isinstance(osu_exports, list):
            raise TypeError("Expected argument 'osu_exports' to be a list")
        pulumi.set(__self__, "osu_exports", osu_exports)
        if progress and not isinstance(progress, int):
            raise TypeError("Expected argument 'progress' to be a int")
        pulumi.set(__self__, "progress", progress)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if task_id and not isinstance(task_id, str):
            raise TypeError("Expected argument 'task_id' to be a str")
        pulumi.set(__self__, "task_id", task_id)

    @property
    @pulumi.getter
    def comment(self) -> str:
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> bool:
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetImageExportTaskFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="osuExports")
    def osu_exports(self) -> Sequence['outputs.GetImageExportTaskOsuExportResult']:
        return pulumi.get(self, "osu_exports")

    @property
    @pulumi.getter
    def progress(self) -> int:
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetImageExportTaskTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> str:
        return pulumi.get(self, "task_id")


class AwaitableGetImageExportTaskResult(GetImageExportTaskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetImageExportTaskResult(
            comment=self.comment,
            dry_run=self.dry_run,
            filters=self.filters,
            id=self.id,
            image_id=self.image_id,
            osu_exports=self.osu_exports,
            progress=self.progress,
            request_id=self.request_id,
            state=self.state,
            tags=self.tags,
            task_id=self.task_id)


def get_image_export_task(dry_run: Optional[bool] = None,
                          filters: Optional[Sequence[pulumi.InputType['GetImageExportTaskFilterArgs']]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetImageExportTaskResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['dryRun'] = dry_run
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getImageExportTask:getImageExportTask', __args__, opts=opts, typ=GetImageExportTaskResult).value

    return AwaitableGetImageExportTaskResult(
        comment=pulumi.get(__ret__, 'comment'),
        dry_run=pulumi.get(__ret__, 'dry_run'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        image_id=pulumi.get(__ret__, 'image_id'),
        osu_exports=pulumi.get(__ret__, 'osu_exports'),
        progress=pulumi.get(__ret__, 'progress'),
        request_id=pulumi.get(__ret__, 'request_id'),
        state=pulumi.get(__ret__, 'state'),
        tags=pulumi.get(__ret__, 'tags'),
        task_id=pulumi.get(__ret__, 'task_id'))


@_utilities.lift_output_func(get_image_export_task)
def get_image_export_task_output(dry_run: Optional[pulumi.Input[Optional[bool]]] = None,
                                 filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetImageExportTaskFilterArgs']]]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetImageExportTaskResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
