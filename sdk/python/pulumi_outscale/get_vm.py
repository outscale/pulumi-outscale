# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetVmResult',
    'AwaitableGetVmResult',
    'get_vm',
    'get_vm_output',
]

@pulumi.output_type
class GetVmResult:
    """
    A collection of values returned by getVm.
    """
    def __init__(__self__, actions_on_next_boots=None, architecture=None, block_device_mappings_createds=None, boot_mode=None, bsu_optimized=None, client_token=None, creation_date=None, deletion_protection=None, filters=None, hypervisor=None, id=None, image_id=None, is_source_dest_checked=None, keypair_name=None, launch_number=None, nested_virtualization=None, net_id=None, nics=None, os_family=None, performance=None, placement_subregion_name=None, placement_tenancy=None, primary_nics=None, private_dns_name=None, private_ip=None, private_ips=None, product_codes=None, public_dns_name=None, public_ip=None, request_id=None, reservation_id=None, root_device_name=None, root_device_type=None, security_group_ids=None, security_group_names=None, security_groups=None, state=None, state_reason=None, subnet_id=None, tags=None, user_data=None, vm_id=None, vm_initiated_shutdown_behavior=None, vm_type=None):
        if actions_on_next_boots and not isinstance(actions_on_next_boots, list):
            raise TypeError("Expected argument 'actions_on_next_boots' to be a list")
        pulumi.set(__self__, "actions_on_next_boots", actions_on_next_boots)
        if architecture and not isinstance(architecture, str):
            raise TypeError("Expected argument 'architecture' to be a str")
        pulumi.set(__self__, "architecture", architecture)
        if block_device_mappings_createds and not isinstance(block_device_mappings_createds, list):
            raise TypeError("Expected argument 'block_device_mappings_createds' to be a list")
        pulumi.set(__self__, "block_device_mappings_createds", block_device_mappings_createds)
        if boot_mode and not isinstance(boot_mode, str):
            raise TypeError("Expected argument 'boot_mode' to be a str")
        pulumi.set(__self__, "boot_mode", boot_mode)
        if bsu_optimized and not isinstance(bsu_optimized, bool):
            raise TypeError("Expected argument 'bsu_optimized' to be a bool")
        pulumi.set(__self__, "bsu_optimized", bsu_optimized)
        if client_token and not isinstance(client_token, str):
            raise TypeError("Expected argument 'client_token' to be a str")
        pulumi.set(__self__, "client_token", client_token)
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if deletion_protection and not isinstance(deletion_protection, bool):
            raise TypeError("Expected argument 'deletion_protection' to be a bool")
        pulumi.set(__self__, "deletion_protection", deletion_protection)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if hypervisor and not isinstance(hypervisor, str):
            raise TypeError("Expected argument 'hypervisor' to be a str")
        pulumi.set(__self__, "hypervisor", hypervisor)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if image_id and not isinstance(image_id, str):
            raise TypeError("Expected argument 'image_id' to be a str")
        pulumi.set(__self__, "image_id", image_id)
        if is_source_dest_checked and not isinstance(is_source_dest_checked, bool):
            raise TypeError("Expected argument 'is_source_dest_checked' to be a bool")
        pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        if keypair_name and not isinstance(keypair_name, str):
            raise TypeError("Expected argument 'keypair_name' to be a str")
        pulumi.set(__self__, "keypair_name", keypair_name)
        if launch_number and not isinstance(launch_number, int):
            raise TypeError("Expected argument 'launch_number' to be a int")
        pulumi.set(__self__, "launch_number", launch_number)
        if nested_virtualization and not isinstance(nested_virtualization, bool):
            raise TypeError("Expected argument 'nested_virtualization' to be a bool")
        pulumi.set(__self__, "nested_virtualization", nested_virtualization)
        if net_id and not isinstance(net_id, str):
            raise TypeError("Expected argument 'net_id' to be a str")
        pulumi.set(__self__, "net_id", net_id)
        if nics and not isinstance(nics, list):
            raise TypeError("Expected argument 'nics' to be a list")
        pulumi.set(__self__, "nics", nics)
        if os_family and not isinstance(os_family, str):
            raise TypeError("Expected argument 'os_family' to be a str")
        pulumi.set(__self__, "os_family", os_family)
        if performance and not isinstance(performance, str):
            raise TypeError("Expected argument 'performance' to be a str")
        pulumi.set(__self__, "performance", performance)
        if placement_subregion_name and not isinstance(placement_subregion_name, str):
            raise TypeError("Expected argument 'placement_subregion_name' to be a str")
        pulumi.set(__self__, "placement_subregion_name", placement_subregion_name)
        if placement_tenancy and not isinstance(placement_tenancy, str):
            raise TypeError("Expected argument 'placement_tenancy' to be a str")
        pulumi.set(__self__, "placement_tenancy", placement_tenancy)
        if primary_nics and not isinstance(primary_nics, list):
            raise TypeError("Expected argument 'primary_nics' to be a list")
        pulumi.set(__self__, "primary_nics", primary_nics)
        if private_dns_name and not isinstance(private_dns_name, str):
            raise TypeError("Expected argument 'private_dns_name' to be a str")
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if private_ips and not isinstance(private_ips, list):
            raise TypeError("Expected argument 'private_ips' to be a list")
        pulumi.set(__self__, "private_ips", private_ips)
        if product_codes and not isinstance(product_codes, list):
            raise TypeError("Expected argument 'product_codes' to be a list")
        pulumi.set(__self__, "product_codes", product_codes)
        if public_dns_name and not isinstance(public_dns_name, str):
            raise TypeError("Expected argument 'public_dns_name' to be a str")
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if reservation_id and not isinstance(reservation_id, str):
            raise TypeError("Expected argument 'reservation_id' to be a str")
        pulumi.set(__self__, "reservation_id", reservation_id)
        if root_device_name and not isinstance(root_device_name, str):
            raise TypeError("Expected argument 'root_device_name' to be a str")
        pulumi.set(__self__, "root_device_name", root_device_name)
        if root_device_type and not isinstance(root_device_type, str):
            raise TypeError("Expected argument 'root_device_type' to be a str")
        pulumi.set(__self__, "root_device_type", root_device_type)
        if security_group_ids and not isinstance(security_group_ids, list):
            raise TypeError("Expected argument 'security_group_ids' to be a list")
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_group_names and not isinstance(security_group_names, list):
            raise TypeError("Expected argument 'security_group_names' to be a list")
        pulumi.set(__self__, "security_group_names", security_group_names)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_reason and not isinstance(state_reason, str):
            raise TypeError("Expected argument 'state_reason' to be a str")
        pulumi.set(__self__, "state_reason", state_reason)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if user_data and not isinstance(user_data, str):
            raise TypeError("Expected argument 'user_data' to be a str")
        pulumi.set(__self__, "user_data", user_data)
        if vm_id and not isinstance(vm_id, str):
            raise TypeError("Expected argument 'vm_id' to be a str")
        pulumi.set(__self__, "vm_id", vm_id)
        if vm_initiated_shutdown_behavior and not isinstance(vm_initiated_shutdown_behavior, str):
            raise TypeError("Expected argument 'vm_initiated_shutdown_behavior' to be a str")
        pulumi.set(__self__, "vm_initiated_shutdown_behavior", vm_initiated_shutdown_behavior)
        if vm_type and not isinstance(vm_type, str):
            raise TypeError("Expected argument 'vm_type' to be a str")
        pulumi.set(__self__, "vm_type", vm_type)

    @_builtins.property
    @pulumi.getter(name="actionsOnNextBoots")
    def actions_on_next_boots(self) -> Sequence['outputs.GetVmActionsOnNextBootResult']:
        return pulumi.get(self, "actions_on_next_boots")

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> _builtins.str:
        """
        The architecture of the VM (`i386` \\| `x86_64`).
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="blockDeviceMappingsCreateds")
    def block_device_mappings_createds(self) -> Sequence['outputs.GetVmBlockDeviceMappingsCreatedResult']:
        """
        The block device mapping of the VM.
        """
        return pulumi.get(self, "block_device_mappings_createds")

    @_builtins.property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> _builtins.str:
        return pulumi.get(self, "boot_mode")

    @_builtins.property
    @pulumi.getter(name="bsuOptimized")
    def bsu_optimized(self) -> _builtins.bool:
        return pulumi.get(self, "bsu_optimized")

    @_builtins.property
    @pulumi.getter(name="clientToken")
    def client_token(self) -> _builtins.str:
        """
        The idempotency token provided when launching the VM.
        """
        return pulumi.get(self, "client_token")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) at which the VM was created.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> _builtins.bool:
        """
        If true, you cannot delete the VM unless you change this parameter back to false.
        """
        return pulumi.get(self, "deletion_protection")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetVmFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def hypervisor(self) -> _builtins.str:
        """
        The hypervisor type of the VMs (`ovm` \\| `xen`).
        """
        return pulumi.get(self, "hypervisor")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> _builtins.str:
        """
        The ID of the OMI used to create the VM.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> _builtins.bool:
        """
        (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        """
        return pulumi.get(self, "is_source_dest_checked")

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> _builtins.str:
        """
        The name of the keypair used when launching the VM.
        """
        return pulumi.get(self, "keypair_name")

    @_builtins.property
    @pulumi.getter(name="launchNumber")
    def launch_number(self) -> _builtins.int:
        """
        The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
        """
        return pulumi.get(self, "launch_number")

    @_builtins.property
    @pulumi.getter(name="nestedVirtualization")
    def nested_virtualization(self) -> _builtins.bool:
        """
        If true, nested virtualization is enabled. If false, it is disabled.
        """
        return pulumi.get(self, "nested_virtualization")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net for the NIC.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter
    def nics(self) -> Sequence['outputs.GetVmNicResult']:
        """
        (Net only) The network interface cards (NICs) the VMs are attached to.
        """
        return pulumi.get(self, "nics")

    @_builtins.property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> _builtins.str:
        """
        Indicates the operating system (OS) of the VM.
        """
        return pulumi.get(self, "os_family")

    @_builtins.property
    @pulumi.getter
    def performance(self) -> _builtins.str:
        """
        The performance of the VM (`medium` \\| `high` \\|  `highest`).
        """
        return pulumi.get(self, "performance")

    @_builtins.property
    @pulumi.getter(name="placementSubregionName")
    def placement_subregion_name(self) -> _builtins.str:
        return pulumi.get(self, "placement_subregion_name")

    @_builtins.property
    @pulumi.getter(name="placementTenancy")
    def placement_tenancy(self) -> _builtins.str:
        return pulumi.get(self, "placement_tenancy")

    @_builtins.property
    @pulumi.getter(name="primaryNics")
    def primary_nics(self) -> Sequence['outputs.GetVmPrimaryNicResult']:
        return pulumi.get(self, "primary_nics")

    @_builtins.property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> _builtins.str:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> _builtins.str:
        """
        The primary private IP of the VM.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence[_builtins.str]:
        """
        The private IP or IPs of the NIC.
        """
        return pulumi.get(self, "private_ips")

    @_builtins.property
    @pulumi.getter(name="productCodes")
    def product_codes(self) -> Sequence[_builtins.str]:
        """
        The product codes associated with the OMI used to create the VM.
        """
        return pulumi.get(self, "product_codes")

    @_builtins.property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> _builtins.str:
        """
        The name of the public DNS.
        """
        return pulumi.get(self, "public_dns_name")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> _builtins.str:
        """
        The public IP of the VM.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="reservationId")
    def reservation_id(self) -> _builtins.str:
        """
        The reservation ID of the VM.
        """
        return pulumi.get(self, "reservation_id")

    @_builtins.property
    @pulumi.getter(name="rootDeviceName")
    def root_device_name(self) -> _builtins.str:
        """
        The name of the root device for the VM (for example, `/dev/sda1`).
        """
        return pulumi.get(self, "root_device_name")

    @_builtins.property
    @pulumi.getter(name="rootDeviceType")
    def root_device_type(self) -> _builtins.str:
        """
        The type of root device used by the VM (always `bsu`).
        """
        return pulumi.get(self, "root_device_type")

    @_builtins.property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_group_ids")

    @_builtins.property
    @pulumi.getter(name="securityGroupNames")
    def security_group_names(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "security_group_names")

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetVmSecurityGroupResult']:
        """
        One or more security groups associated with the VM.
        """
        return pulumi.get(self, "security_groups")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="stateReason")
    def state_reason(self) -> _builtins.str:
        """
        The reason explaining the current state of the VM.
        """
        return pulumi.get(self, "state_reason")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the Subnet for the VM.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVmTagResult']:
        """
        One or more tags associated with the VM.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="userData")
    def user_data(self) -> _builtins.str:
        """
        The Base64-encoded MIME user data.
        """
        return pulumi.get(self, "user_data")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> _builtins.str:
        """
        The ID of the VM.
        """
        return pulumi.get(self, "vm_id")

    @_builtins.property
    @pulumi.getter(name="vmInitiatedShutdownBehavior")
    def vm_initiated_shutdown_behavior(self) -> _builtins.str:
        """
        The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.
        """
        return pulumi.get(self, "vm_initiated_shutdown_behavior")

    @_builtins.property
    @pulumi.getter(name="vmType")
    def vm_type(self) -> _builtins.str:
        """
        The type of VM. For more information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
        """
        return pulumi.get(self, "vm_type")


class AwaitableGetVmResult(GetVmResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVmResult(
            actions_on_next_boots=self.actions_on_next_boots,
            architecture=self.architecture,
            block_device_mappings_createds=self.block_device_mappings_createds,
            boot_mode=self.boot_mode,
            bsu_optimized=self.bsu_optimized,
            client_token=self.client_token,
            creation_date=self.creation_date,
            deletion_protection=self.deletion_protection,
            filters=self.filters,
            hypervisor=self.hypervisor,
            id=self.id,
            image_id=self.image_id,
            is_source_dest_checked=self.is_source_dest_checked,
            keypair_name=self.keypair_name,
            launch_number=self.launch_number,
            nested_virtualization=self.nested_virtualization,
            net_id=self.net_id,
            nics=self.nics,
            os_family=self.os_family,
            performance=self.performance,
            placement_subregion_name=self.placement_subregion_name,
            placement_tenancy=self.placement_tenancy,
            primary_nics=self.primary_nics,
            private_dns_name=self.private_dns_name,
            private_ip=self.private_ip,
            private_ips=self.private_ips,
            product_codes=self.product_codes,
            public_dns_name=self.public_dns_name,
            public_ip=self.public_ip,
            request_id=self.request_id,
            reservation_id=self.reservation_id,
            root_device_name=self.root_device_name,
            root_device_type=self.root_device_type,
            security_group_ids=self.security_group_ids,
            security_group_names=self.security_group_names,
            security_groups=self.security_groups,
            state=self.state,
            state_reason=self.state_reason,
            subnet_id=self.subnet_id,
            tags=self.tags,
            user_data=self.user_data,
            vm_id=self.vm_id,
            vm_initiated_shutdown_behavior=self.vm_initiated_shutdown_behavior,
            vm_type=self.vm_type)


def get_vm(filters: Optional[Sequence[Union['GetVmFilterArgs', 'GetVmFilterArgsDict']]] = None,
           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVmResult:
    """
    Provides information about a virtual machine (VM).

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VMs.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vm).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    vm01 = outscale.get_vm(filters=[{
        "name": "vm_ids",
        "values": ["i-12345678"],
    }])
    ```


    :param Sequence[Union['GetVmFilterArgs', 'GetVmFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getVm:getVm', __args__, opts=opts, typ=GetVmResult).value

    return AwaitableGetVmResult(
        actions_on_next_boots=pulumi.get(__ret__, 'actions_on_next_boots'),
        architecture=pulumi.get(__ret__, 'architecture'),
        block_device_mappings_createds=pulumi.get(__ret__, 'block_device_mappings_createds'),
        boot_mode=pulumi.get(__ret__, 'boot_mode'),
        bsu_optimized=pulumi.get(__ret__, 'bsu_optimized'),
        client_token=pulumi.get(__ret__, 'client_token'),
        creation_date=pulumi.get(__ret__, 'creation_date'),
        deletion_protection=pulumi.get(__ret__, 'deletion_protection'),
        filters=pulumi.get(__ret__, 'filters'),
        hypervisor=pulumi.get(__ret__, 'hypervisor'),
        id=pulumi.get(__ret__, 'id'),
        image_id=pulumi.get(__ret__, 'image_id'),
        is_source_dest_checked=pulumi.get(__ret__, 'is_source_dest_checked'),
        keypair_name=pulumi.get(__ret__, 'keypair_name'),
        launch_number=pulumi.get(__ret__, 'launch_number'),
        nested_virtualization=pulumi.get(__ret__, 'nested_virtualization'),
        net_id=pulumi.get(__ret__, 'net_id'),
        nics=pulumi.get(__ret__, 'nics'),
        os_family=pulumi.get(__ret__, 'os_family'),
        performance=pulumi.get(__ret__, 'performance'),
        placement_subregion_name=pulumi.get(__ret__, 'placement_subregion_name'),
        placement_tenancy=pulumi.get(__ret__, 'placement_tenancy'),
        primary_nics=pulumi.get(__ret__, 'primary_nics'),
        private_dns_name=pulumi.get(__ret__, 'private_dns_name'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        private_ips=pulumi.get(__ret__, 'private_ips'),
        product_codes=pulumi.get(__ret__, 'product_codes'),
        public_dns_name=pulumi.get(__ret__, 'public_dns_name'),
        public_ip=pulumi.get(__ret__, 'public_ip'),
        request_id=pulumi.get(__ret__, 'request_id'),
        reservation_id=pulumi.get(__ret__, 'reservation_id'),
        root_device_name=pulumi.get(__ret__, 'root_device_name'),
        root_device_type=pulumi.get(__ret__, 'root_device_type'),
        security_group_ids=pulumi.get(__ret__, 'security_group_ids'),
        security_group_names=pulumi.get(__ret__, 'security_group_names'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        state=pulumi.get(__ret__, 'state'),
        state_reason=pulumi.get(__ret__, 'state_reason'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        tags=pulumi.get(__ret__, 'tags'),
        user_data=pulumi.get(__ret__, 'user_data'),
        vm_id=pulumi.get(__ret__, 'vm_id'),
        vm_initiated_shutdown_behavior=pulumi.get(__ret__, 'vm_initiated_shutdown_behavior'),
        vm_type=pulumi.get(__ret__, 'vm_type'))
def get_vm_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetVmFilterArgs', 'GetVmFilterArgsDict']]]]] = None,
                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVmResult]:
    """
    Provides information about a virtual machine (VM).

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VMs.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vm).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    vm01 = outscale.get_vm(filters=[{
        "name": "vm_ids",
        "values": ["i-12345678"],
    }])
    ```


    :param Sequence[Union['GetVmFilterArgs', 'GetVmFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getVm:getVm', __args__, opts=opts, typ=GetVmResult)
    return __ret__.apply(lambda __response__: GetVmResult(
        actions_on_next_boots=pulumi.get(__response__, 'actions_on_next_boots'),
        architecture=pulumi.get(__response__, 'architecture'),
        block_device_mappings_createds=pulumi.get(__response__, 'block_device_mappings_createds'),
        boot_mode=pulumi.get(__response__, 'boot_mode'),
        bsu_optimized=pulumi.get(__response__, 'bsu_optimized'),
        client_token=pulumi.get(__response__, 'client_token'),
        creation_date=pulumi.get(__response__, 'creation_date'),
        deletion_protection=pulumi.get(__response__, 'deletion_protection'),
        filters=pulumi.get(__response__, 'filters'),
        hypervisor=pulumi.get(__response__, 'hypervisor'),
        id=pulumi.get(__response__, 'id'),
        image_id=pulumi.get(__response__, 'image_id'),
        is_source_dest_checked=pulumi.get(__response__, 'is_source_dest_checked'),
        keypair_name=pulumi.get(__response__, 'keypair_name'),
        launch_number=pulumi.get(__response__, 'launch_number'),
        nested_virtualization=pulumi.get(__response__, 'nested_virtualization'),
        net_id=pulumi.get(__response__, 'net_id'),
        nics=pulumi.get(__response__, 'nics'),
        os_family=pulumi.get(__response__, 'os_family'),
        performance=pulumi.get(__response__, 'performance'),
        placement_subregion_name=pulumi.get(__response__, 'placement_subregion_name'),
        placement_tenancy=pulumi.get(__response__, 'placement_tenancy'),
        primary_nics=pulumi.get(__response__, 'primary_nics'),
        private_dns_name=pulumi.get(__response__, 'private_dns_name'),
        private_ip=pulumi.get(__response__, 'private_ip'),
        private_ips=pulumi.get(__response__, 'private_ips'),
        product_codes=pulumi.get(__response__, 'product_codes'),
        public_dns_name=pulumi.get(__response__, 'public_dns_name'),
        public_ip=pulumi.get(__response__, 'public_ip'),
        request_id=pulumi.get(__response__, 'request_id'),
        reservation_id=pulumi.get(__response__, 'reservation_id'),
        root_device_name=pulumi.get(__response__, 'root_device_name'),
        root_device_type=pulumi.get(__response__, 'root_device_type'),
        security_group_ids=pulumi.get(__response__, 'security_group_ids'),
        security_group_names=pulumi.get(__response__, 'security_group_names'),
        security_groups=pulumi.get(__response__, 'security_groups'),
        state=pulumi.get(__response__, 'state'),
        state_reason=pulumi.get(__response__, 'state_reason'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        tags=pulumi.get(__response__, 'tags'),
        user_data=pulumi.get(__response__, 'user_data'),
        vm_id=pulumi.get(__response__, 'vm_id'),
        vm_initiated_shutdown_behavior=pulumi.get(__response__, 'vm_initiated_shutdown_behavior'),
        vm_type=pulumi.get(__response__, 'vm_type')))
