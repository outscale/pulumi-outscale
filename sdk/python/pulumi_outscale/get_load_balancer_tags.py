# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetLoadBalancerTagsResult',
    'AwaitableGetLoadBalancerTagsResult',
    'get_load_balancer_tags',
    'get_load_balancer_tags_output',
]

@pulumi.output_type
class GetLoadBalancerTagsResult:
    """
    A collection of values returned by getLoadBalancerTags.
    """
    def __init__(__self__, filters=None, id=None, load_balancer_names=None, request_id=None, tags=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if load_balancer_names and not isinstance(load_balancer_names, list):
            raise TypeError("Expected argument 'load_balancer_names' to be a list")
        pulumi.set(__self__, "load_balancer_names", load_balancer_names)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetLoadBalancerTagsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="loadBalancerNames")
    def load_balancer_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_balancer_names")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetLoadBalancerTagsTagResult']:
        return pulumi.get(self, "tags")


class AwaitableGetLoadBalancerTagsResult(GetLoadBalancerTagsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLoadBalancerTagsResult(
            filters=self.filters,
            id=self.id,
            load_balancer_names=self.load_balancer_names,
            request_id=self.request_id,
            tags=self.tags)


def get_load_balancer_tags(filters: Optional[Sequence[pulumi.InputType['GetLoadBalancerTagsFilterArgs']]] = None,
                           load_balancer_names: Optional[Sequence[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLoadBalancerTagsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['loadBalancerNames'] = load_balancer_names
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getLoadBalancerTags:getLoadBalancerTags', __args__, opts=opts, typ=GetLoadBalancerTagsResult).value

    return AwaitableGetLoadBalancerTagsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        load_balancer_names=pulumi.get(__ret__, 'load_balancer_names'),
        request_id=pulumi.get(__ret__, 'request_id'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_load_balancer_tags)
def get_load_balancer_tags_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetLoadBalancerTagsFilterArgs']]]]] = None,
                                  load_balancer_names: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLoadBalancerTagsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
