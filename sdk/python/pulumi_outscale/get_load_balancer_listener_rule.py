# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetLoadBalancerListenerRuleResult',
    'AwaitableGetLoadBalancerListenerRuleResult',
    'get_load_balancer_listener_rule',
    'get_load_balancer_listener_rule_output',
]

@pulumi.output_type
class GetLoadBalancerListenerRuleResult:
    """
    A collection of values returned by getLoadBalancerListenerRule.
    """
    def __init__(__self__, action=None, filters=None, host_name_pattern=None, id=None, listener_id=None, listener_rule_id=None, listener_rule_name=None, path_pattern=None, priority=None, request_id=None, vm_ids=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if host_name_pattern and not isinstance(host_name_pattern, str):
            raise TypeError("Expected argument 'host_name_pattern' to be a str")
        pulumi.set(__self__, "host_name_pattern", host_name_pattern)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if listener_id and not isinstance(listener_id, int):
            raise TypeError("Expected argument 'listener_id' to be a int")
        pulumi.set(__self__, "listener_id", listener_id)
        if listener_rule_id and not isinstance(listener_rule_id, int):
            raise TypeError("Expected argument 'listener_rule_id' to be a int")
        pulumi.set(__self__, "listener_rule_id", listener_rule_id)
        if listener_rule_name and not isinstance(listener_rule_name, str):
            raise TypeError("Expected argument 'listener_rule_name' to be a str")
        pulumi.set(__self__, "listener_rule_name", listener_rule_name)
        if path_pattern and not isinstance(path_pattern, str):
            raise TypeError("Expected argument 'path_pattern' to be a str")
        pulumi.set(__self__, "path_pattern", path_pattern)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if vm_ids and not isinstance(vm_ids, list):
            raise TypeError("Expected argument 'vm_ids' to be a list")
        pulumi.set(__self__, "vm_ids", vm_ids)

    @_builtins.property
    @pulumi.getter
    def action(self) -> _builtins.str:
        """
        The type of action for the rule (always `forward`).
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetLoadBalancerListenerRuleFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter(name="hostNamePattern")
    def host_name_pattern(self) -> _builtins.str:
        """
        A host-name pattern for the rule, with a maximum length of 128 characters. This host-name pattern supports maximum three wildcards, and must not contain any special characters except `-.?`.
        """
        return pulumi.get(self, "host_name_pattern")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> _builtins.int:
        """
        The ID of the listener.
        """
        return pulumi.get(self, "listener_id")

    @_builtins.property
    @pulumi.getter(name="listenerRuleId")
    def listener_rule_id(self) -> _builtins.int:
        """
        The ID of the listener rule.
        """
        return pulumi.get(self, "listener_rule_id")

    @_builtins.property
    @pulumi.getter(name="listenerRuleName")
    def listener_rule_name(self) -> _builtins.str:
        """
        A human-readable name for the listener rule.
        """
        return pulumi.get(self, "listener_rule_name")

    @_builtins.property
    @pulumi.getter(name="pathPattern")
    def path_pattern(self) -> _builtins.str:
        """
        A path pattern for the rule, with a maximum length of 128 characters. This path pattern supports maximum three wildcards, and must not contain any special characters except `_-.$/~&quot;'@:+?`.
        """
        return pulumi.get(self, "path_pattern")

    @_builtins.property
    @pulumi.getter
    def priority(self) -> _builtins.int:
        """
        The priority level of the listener rule, between `1` and `19999` both included. Each rule must have a unique priority level. Otherwise, an error is returned.
        """
        return pulumi.get(self, "priority")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> Sequence[_builtins.str]:
        """
        The IDs of the backend VMs.
        """
        return pulumi.get(self, "vm_ids")


class AwaitableGetLoadBalancerListenerRuleResult(GetLoadBalancerListenerRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLoadBalancerListenerRuleResult(
            action=self.action,
            filters=self.filters,
            host_name_pattern=self.host_name_pattern,
            id=self.id,
            listener_id=self.listener_id,
            listener_rule_id=self.listener_rule_id,
            listener_rule_name=self.listener_rule_name,
            path_pattern=self.path_pattern,
            priority=self.priority,
            request_id=self.request_id,
            vm_ids=self.vm_ids)


def get_load_balancer_listener_rule(filters: Optional[Sequence[Union['GetLoadBalancerListenerRuleFilterArgs', 'GetLoadBalancerListenerRuleFilterArgsDict']]] = None,
                                    listener_rule_name: Optional[_builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLoadBalancerListenerRuleResult:
    """
    Provides information about a load balancer listener rule.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-listener).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    rule01 = outscale.get_load_balancer_listener_rule(filters=[{
        "name": "listener_rule_names",
        "values": ["terraform-listener-rule02"],
    }])
    ```


    :param Sequence[Union['GetLoadBalancerListenerRuleFilterArgs', 'GetLoadBalancerListenerRuleFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    :param _builtins.str listener_rule_name: A human-readable name for the listener rule.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['listenerRuleName'] = listener_rule_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getLoadBalancerListenerRule:getLoadBalancerListenerRule', __args__, opts=opts, typ=GetLoadBalancerListenerRuleResult).value

    return AwaitableGetLoadBalancerListenerRuleResult(
        action=pulumi.get(__ret__, 'action'),
        filters=pulumi.get(__ret__, 'filters'),
        host_name_pattern=pulumi.get(__ret__, 'host_name_pattern'),
        id=pulumi.get(__ret__, 'id'),
        listener_id=pulumi.get(__ret__, 'listener_id'),
        listener_rule_id=pulumi.get(__ret__, 'listener_rule_id'),
        listener_rule_name=pulumi.get(__ret__, 'listener_rule_name'),
        path_pattern=pulumi.get(__ret__, 'path_pattern'),
        priority=pulumi.get(__ret__, 'priority'),
        request_id=pulumi.get(__ret__, 'request_id'),
        vm_ids=pulumi.get(__ret__, 'vm_ids'))
def get_load_balancer_listener_rule_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetLoadBalancerListenerRuleFilterArgs', 'GetLoadBalancerListenerRuleFilterArgsDict']]]]] = None,
                                           listener_rule_name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLoadBalancerListenerRuleResult]:
    """
    Provides information about a load balancer listener rule.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-listener).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    rule01 = outscale.get_load_balancer_listener_rule(filters=[{
        "name": "listener_rule_names",
        "values": ["terraform-listener-rule02"],
    }])
    ```


    :param Sequence[Union['GetLoadBalancerListenerRuleFilterArgs', 'GetLoadBalancerListenerRuleFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    :param _builtins.str listener_rule_name: A human-readable name for the listener rule.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['listenerRuleName'] = listener_rule_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getLoadBalancerListenerRule:getLoadBalancerListenerRule', __args__, opts=opts, typ=GetLoadBalancerListenerRuleResult)
    return __ret__.apply(lambda __response__: GetLoadBalancerListenerRuleResult(
        action=pulumi.get(__response__, 'action'),
        filters=pulumi.get(__response__, 'filters'),
        host_name_pattern=pulumi.get(__response__, 'host_name_pattern'),
        id=pulumi.get(__response__, 'id'),
        listener_id=pulumi.get(__response__, 'listener_id'),
        listener_rule_id=pulumi.get(__response__, 'listener_rule_id'),
        listener_rule_name=pulumi.get(__response__, 'listener_rule_name'),
        path_pattern=pulumi.get(__response__, 'path_pattern'),
        priority=pulumi.get(__response__, 'priority'),
        request_id=pulumi.get(__response__, 'request_id'),
        vm_ids=pulumi.get(__response__, 'vm_ids')))
