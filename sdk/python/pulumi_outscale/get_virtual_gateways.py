# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetVirtualGatewaysResult',
    'AwaitableGetVirtualGatewaysResult',
    'get_virtual_gateways',
    'get_virtual_gateways_output',
]

@pulumi.output_type
class GetVirtualGatewaysResult:
    """
    A collection of values returned by getVirtualGateways.
    """
    def __init__(__self__, filters=None, id=None, request_id=None, virtual_gateway_ids=None, virtual_gateways=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if virtual_gateway_ids and not isinstance(virtual_gateway_ids, list):
            raise TypeError("Expected argument 'virtual_gateway_ids' to be a list")
        pulumi.set(__self__, "virtual_gateway_ids", virtual_gateway_ids)
        if virtual_gateways and not isinstance(virtual_gateways, list):
            raise TypeError("Expected argument 'virtual_gateways' to be a list")
        pulumi.set(__self__, "virtual_gateways", virtual_gateways)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetVirtualGatewaysFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="virtualGatewayIds")
    def virtual_gateway_ids(self) -> Sequence[str]:
        return pulumi.get(self, "virtual_gateway_ids")

    @property
    @pulumi.getter(name="virtualGateways")
    def virtual_gateways(self) -> Sequence['outputs.GetVirtualGatewaysVirtualGatewayResult']:
        return pulumi.get(self, "virtual_gateways")


class AwaitableGetVirtualGatewaysResult(GetVirtualGatewaysResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualGatewaysResult(
            filters=self.filters,
            id=self.id,
            request_id=self.request_id,
            virtual_gateway_ids=self.virtual_gateway_ids,
            virtual_gateways=self.virtual_gateways)


def get_virtual_gateways(filters: Optional[Sequence[pulumi.InputType['GetVirtualGatewaysFilterArgs']]] = None,
                         virtual_gateway_ids: Optional[Sequence[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVirtualGatewaysResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['virtualGatewayIds'] = virtual_gateway_ids
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getVirtualGateways:getVirtualGateways', __args__, opts=opts, typ=GetVirtualGatewaysResult).value

    return AwaitableGetVirtualGatewaysResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        request_id=pulumi.get(__ret__, 'request_id'),
        virtual_gateway_ids=pulumi.get(__ret__, 'virtual_gateway_ids'),
        virtual_gateways=pulumi.get(__ret__, 'virtual_gateways'))


@_utilities.lift_output_func(get_virtual_gateways)
def get_virtual_gateways_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetVirtualGatewaysFilterArgs']]]]] = None,
                                virtual_gateway_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVirtualGatewaysResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
