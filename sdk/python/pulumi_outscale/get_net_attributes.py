# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNetAttributesResult',
    'AwaitableGetNetAttributesResult',
    'get_net_attributes',
    'get_net_attributes_output',
]

@pulumi.output_type
class GetNetAttributesResult:
    """
    A collection of values returned by getNetAttributes.
    """
    def __init__(__self__, dhcp_options_set_id=None, id=None, ip_range=None, net_id=None, request_id=None, state=None, tags=None, tenancy=None):
        if dhcp_options_set_id and not isinstance(dhcp_options_set_id, str):
            raise TypeError("Expected argument 'dhcp_options_set_id' to be a str")
        pulumi.set(__self__, "dhcp_options_set_id", dhcp_options_set_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_range and not isinstance(ip_range, str):
            raise TypeError("Expected argument 'ip_range' to be a str")
        pulumi.set(__self__, "ip_range", ip_range)
        if net_id and not isinstance(net_id, str):
            raise TypeError("Expected argument 'net_id' to be a str")
        pulumi.set(__self__, "net_id", net_id)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenancy and not isinstance(tenancy, str):
            raise TypeError("Expected argument 'tenancy' to be a str")
        pulumi.set(__self__, "tenancy", tenancy)

    @_builtins.property
    @pulumi.getter(name="dhcpOptionsSetId")
    def dhcp_options_set_id(self) -> _builtins.str:
        """
        The ID of the DHCP options set (or `default` if you want to associate the default one).
        """
        return pulumi.get(self, "dhcp_options_set_id")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> _builtins.str:
        """
        The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
        """
        return pulumi.get(self, "ip_range")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the Net (`pending` \\| `available` \\| `deleting`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNetAttributesTagResult']:
        """
        One or more tags associated with the Net.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def tenancy(self) -> _builtins.str:
        """
        The VM tenancy in a Net.
        """
        return pulumi.get(self, "tenancy")


class AwaitableGetNetAttributesResult(GetNetAttributesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetAttributesResult(
            dhcp_options_set_id=self.dhcp_options_set_id,
            id=self.id,
            ip_range=self.ip_range,
            net_id=self.net_id,
            request_id=self.request_id,
            state=self.state,
            tags=self.tags,
            tenancy=self.tenancy)


def get_net_attributes(net_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetAttributesResult:
    """
    Provides information about the attributes of a Net.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-DHCP-Options.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#updatenet).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    net_attributes01 = outscale.get_net_attributes(net_id="vpc-12345678")
    ```


    :param _builtins.str net_id: The ID of the Net.
    """
    __args__ = dict()
    __args__['netId'] = net_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getNetAttributes:getNetAttributes', __args__, opts=opts, typ=GetNetAttributesResult).value

    return AwaitableGetNetAttributesResult(
        dhcp_options_set_id=pulumi.get(__ret__, 'dhcp_options_set_id'),
        id=pulumi.get(__ret__, 'id'),
        ip_range=pulumi.get(__ret__, 'ip_range'),
        net_id=pulumi.get(__ret__, 'net_id'),
        request_id=pulumi.get(__ret__, 'request_id'),
        state=pulumi.get(__ret__, 'state'),
        tags=pulumi.get(__ret__, 'tags'),
        tenancy=pulumi.get(__ret__, 'tenancy'))
def get_net_attributes_output(net_id: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetAttributesResult]:
    """
    Provides information about the attributes of a Net.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-DHCP-Options.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#updatenet).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    net_attributes01 = outscale.get_net_attributes(net_id="vpc-12345678")
    ```


    :param _builtins.str net_id: The ID of the Net.
    """
    __args__ = dict()
    __args__['netId'] = net_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getNetAttributes:getNetAttributes', __args__, opts=opts, typ=GetNetAttributesResult)
    return __ret__.apply(lambda __response__: GetNetAttributesResult(
        dhcp_options_set_id=pulumi.get(__response__, 'dhcp_options_set_id'),
        id=pulumi.get(__response__, 'id'),
        ip_range=pulumi.get(__response__, 'ip_range'),
        net_id=pulumi.get(__response__, 'net_id'),
        request_id=pulumi.get(__response__, 'request_id'),
        state=pulumi.get(__response__, 'state'),
        tags=pulumi.get(__response__, 'tags'),
        tenancy=pulumi.get(__response__, 'tenancy')))
