# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetVirtualGatewayResult',
    'AwaitableGetVirtualGatewayResult',
    'get_virtual_gateway',
    'get_virtual_gateway_output',
]

@pulumi.output_type
class GetVirtualGatewayResult:
    """
    A collection of values returned by getVirtualGateway.
    """
    def __init__(__self__, connection_type=None, filters=None, id=None, net_to_virtual_gateway_links=None, request_id=None, state=None, tags=None, virtual_gateway_id=None):
        if connection_type and not isinstance(connection_type, str):
            raise TypeError("Expected argument 'connection_type' to be a str")
        pulumi.set(__self__, "connection_type", connection_type)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if net_to_virtual_gateway_links and not isinstance(net_to_virtual_gateway_links, list):
            raise TypeError("Expected argument 'net_to_virtual_gateway_links' to be a list")
        pulumi.set(__self__, "net_to_virtual_gateway_links", net_to_virtual_gateway_links)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if virtual_gateway_id and not isinstance(virtual_gateway_id, str):
            raise TypeError("Expected argument 'virtual_gateway_id' to be a str")
        pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        The type of VPN connection supported by the virtual gateway (always `ipsec.1`).
        """
        return pulumi.get(self, "connection_type")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetVirtualGatewayFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="netToVirtualGatewayLinks")
    def net_to_virtual_gateway_links(self) -> Sequence['outputs.GetVirtualGatewayNetToVirtualGatewayLinkResult']:
        """
        The Net to which the virtual gateway is attached.
        """
        return pulumi.get(self, "net_to_virtual_gateway_links")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the virtual gateway (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVirtualGatewayTagResult']:
        """
        One or more tags associated with the virtual gateway.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> _builtins.str:
        """
        The ID of the virtual gateway.
        """
        return pulumi.get(self, "virtual_gateway_id")


class AwaitableGetVirtualGatewayResult(GetVirtualGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualGatewayResult(
            connection_type=self.connection_type,
            filters=self.filters,
            id=self.id,
            net_to_virtual_gateway_links=self.net_to_virtual_gateway_links,
            request_id=self.request_id,
            state=self.state,
            tags=self.tags,
            virtual_gateway_id=self.virtual_gateway_id)


def get_virtual_gateway(connection_type: Optional[_builtins.str] = None,
                        filters: Optional[Sequence[Union['GetVirtualGatewayFilterArgs', 'GetVirtualGatewayFilterArgsDict']]] = None,
                        state: Optional[_builtins.str] = None,
                        virtual_gateway_id: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVirtualGatewayResult:
    """
    Provides information about a virtual gateway.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Virtual-Gateways.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-virtualgateway).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    virtual_gateway01 = outscale.get_virtual_gateway(filters=[{
        "name": "virtual_gateway_ids",
        "values": ["vgw-12345678"],
    }])
    ```


    :param _builtins.str connection_type: The type of VPN connection supported by the virtual gateway (always `ipsec.1`).
    :param Sequence[Union['GetVirtualGatewayFilterArgs', 'GetVirtualGatewayFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    :param _builtins.str state: The state of the virtual gateway (`pending` \\| `available` \\| `deleting` \\| `deleted`).
    :param _builtins.str virtual_gateway_id: The ID of the virtual gateway.
    """
    __args__ = dict()
    __args__['connectionType'] = connection_type
    __args__['filters'] = filters
    __args__['state'] = state
    __args__['virtualGatewayId'] = virtual_gateway_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getVirtualGateway:getVirtualGateway', __args__, opts=opts, typ=GetVirtualGatewayResult).value

    return AwaitableGetVirtualGatewayResult(
        connection_type=pulumi.get(__ret__, 'connection_type'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        net_to_virtual_gateway_links=pulumi.get(__ret__, 'net_to_virtual_gateway_links'),
        request_id=pulumi.get(__ret__, 'request_id'),
        state=pulumi.get(__ret__, 'state'),
        tags=pulumi.get(__ret__, 'tags'),
        virtual_gateway_id=pulumi.get(__ret__, 'virtual_gateway_id'))
def get_virtual_gateway_output(connection_type: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               filters: Optional[pulumi.Input[Optional[Sequence[Union['GetVirtualGatewayFilterArgs', 'GetVirtualGatewayFilterArgsDict']]]]] = None,
                               state: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               virtual_gateway_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVirtualGatewayResult]:
    """
    Provides information about a virtual gateway.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Virtual-Gateways.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-virtualgateway).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    virtual_gateway01 = outscale.get_virtual_gateway(filters=[{
        "name": "virtual_gateway_ids",
        "values": ["vgw-12345678"],
    }])
    ```


    :param _builtins.str connection_type: The type of VPN connection supported by the virtual gateway (always `ipsec.1`).
    :param Sequence[Union['GetVirtualGatewayFilterArgs', 'GetVirtualGatewayFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    :param _builtins.str state: The state of the virtual gateway (`pending` \\| `available` \\| `deleting` \\| `deleted`).
    :param _builtins.str virtual_gateway_id: The ID of the virtual gateway.
    """
    __args__ = dict()
    __args__['connectionType'] = connection_type
    __args__['filters'] = filters
    __args__['state'] = state
    __args__['virtualGatewayId'] = virtual_gateway_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getVirtualGateway:getVirtualGateway', __args__, opts=opts, typ=GetVirtualGatewayResult)
    return __ret__.apply(lambda __response__: GetVirtualGatewayResult(
        connection_type=pulumi.get(__response__, 'connection_type'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        net_to_virtual_gateway_links=pulumi.get(__response__, 'net_to_virtual_gateway_links'),
        request_id=pulumi.get(__response__, 'request_id'),
        state=pulumi.get(__response__, 'state'),
        tags=pulumi.get(__response__, 'tags'),
        virtual_gateway_id=pulumi.get(__response__, 'virtual_gateway_id')))
