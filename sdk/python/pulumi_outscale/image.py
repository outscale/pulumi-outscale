# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ImageArgs', 'Image']

@pulumi.input_type
class ImageArgs:
    def __init__(__self__, *,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['ImageBlockDeviceMappingArgs']]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 file_location: Optional[pulumi.Input[_builtins.str]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_reboot: Optional[pulumi.Input[_builtins.bool]] = None,
                 root_device_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_region_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]] = None,
                 vm_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Image resource.
        :param pulumi.Input[_builtins.str] architecture: **When registering from a snapshot:** The architecture of the OMI (`i386` or `x86_64`).
        :param pulumi.Input[Sequence[pulumi.Input['ImageBlockDeviceMappingArgs']]] block_device_mappings: **(required) When registering from a snapshot:** One or more block device mappings.
        :param pulumi.Input[_builtins.str] description: A description for the new OMI.
        :param pulumi.Input[_builtins.str] file_location: **(required) When registering from a bucket by using a manifest file:** The pre-signed URL of the manifest file for the OMI you want to register. For more information, see [Creating a Pre-signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).
        :param pulumi.Input[_builtins.str] image_name: A unique name for the new OMI.<br />
               Constraints: 3-128 alphanumeric characters, underscores (`_`), spaces (` `), parentheses (`()`), slashes (`/`), periods (`.`), or dashes (`-`).
        :param pulumi.Input[_builtins.bool] no_reboot: **When creating from a VM:** If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
        :param pulumi.Input[_builtins.str] root_device_name: **(required) When registering from a snapshot:** The name of the root device for the new OMI.
        :param pulumi.Input[_builtins.str] source_image_id: **(required) When copying an OMI:** The ID of the OMI you want to copy.
        :param pulumi.Input[_builtins.str] source_region_name: **(required) When copying an OMI:** The name of the source Region (always the same as the Region of your account).
        :param pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[_builtins.str] vm_id: **(required) When creating from a VM:** The ID of the VM from which you want to create the OMI.
        """
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if block_device_mappings is not None:
            pulumi.set(__self__, "block_device_mappings", block_device_mappings)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if file_location is not None:
            pulumi.set(__self__, "file_location", file_location)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if no_reboot is not None:
            pulumi.set(__self__, "no_reboot", no_reboot)
        if root_device_name is not None:
            pulumi.set(__self__, "root_device_name", root_device_name)
        if source_image_id is not None:
            pulumi.set(__self__, "source_image_id", source_image_id)
        if source_region_name is not None:
            pulumi.set(__self__, "source_region_name", source_region_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        **When registering from a snapshot:** The architecture of the OMI (`i386` or `x86_64`).
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "architecture", value)

    @_builtins.property
    @pulumi.getter(name="blockDeviceMappings")
    def block_device_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageBlockDeviceMappingArgs']]]]:
        """
        **(required) When registering from a snapshot:** One or more block device mappings.
        """
        return pulumi.get(self, "block_device_mappings")

    @block_device_mappings.setter
    def block_device_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageBlockDeviceMappingArgs']]]]):
        pulumi.set(self, "block_device_mappings", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A description for the new OMI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="fileLocation")
    def file_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        **(required) When registering from a bucket by using a manifest file:** The pre-signed URL of the manifest file for the OMI you want to register. For more information, see [Creating a Pre-signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).
        """
        return pulumi.get(self, "file_location")

    @file_location.setter
    def file_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file_location", value)

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A unique name for the new OMI.<br />
        Constraints: 3-128 alphanumeric characters, underscores (`_`), spaces (` `), parentheses (`()`), slashes (`/`), periods (`.`), or dashes (`-`).
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_name", value)

    @_builtins.property
    @pulumi.getter(name="noReboot")
    def no_reboot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        **When creating from a VM:** If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
        """
        return pulumi.get(self, "no_reboot")

    @no_reboot.setter
    def no_reboot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_reboot", value)

    @_builtins.property
    @pulumi.getter(name="rootDeviceName")
    def root_device_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        **(required) When registering from a snapshot:** The name of the root device for the new OMI.
        """
        return pulumi.get(self, "root_device_name")

    @root_device_name.setter
    def root_device_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "root_device_name", value)

    @_builtins.property
    @pulumi.getter(name="sourceImageId")
    def source_image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        **(required) When copying an OMI:** The ID of the OMI you want to copy.
        """
        return pulumi.get(self, "source_image_id")

    @source_image_id.setter
    def source_image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_image_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceRegionName")
    def source_region_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        **(required) When copying an OMI:** The name of the source Region (always the same as the Region of your account).
        """
        return pulumi.get(self, "source_region_name")

    @source_region_name.setter
    def source_region_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_region_name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        **(required) When creating from a VM:** The ID of the VM from which you want to create the OMI.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vm_id", value)


@pulumi.input_type
class _ImageState:
    def __init__(__self__, *,
                 account_alias: Optional[pulumi.Input[_builtins.str]] = None,
                 account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input['ImageBlockDeviceMappingArgs']]]] = None,
                 creation_date: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 file_location: Optional[pulumi.Input[_builtins.str]] = None,
                 image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 image_type: Optional[pulumi.Input[_builtins.str]] = None,
                 is_public: Optional[pulumi.Input[_builtins.bool]] = None,
                 no_reboot: Optional[pulumi.Input[_builtins.bool]] = None,
                 permissions_to_launches: Optional[pulumi.Input[Sequence[pulumi.Input['ImagePermissionsToLaunchArgs']]]] = None,
                 product_codes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 request_id: Optional[pulumi.Input[_builtins.str]] = None,
                 root_device_name: Optional[pulumi.Input[_builtins.str]] = None,
                 root_device_type: Optional[pulumi.Input[_builtins.str]] = None,
                 source_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_region_name: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 state_comments: Optional[pulumi.Input[Sequence[pulumi.Input['ImageStateCommentArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]] = None,
                 vm_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Image resources.
        :param pulumi.Input[_builtins.str] account_alias: The account alias of the owner of the OMI.
        :param pulumi.Input[_builtins.str] account_id: The account ID of the owner of the OMI.
        :param pulumi.Input[_builtins.str] architecture: **When registering from a snapshot:** The architecture of the OMI (`i386` or `x86_64`).
        :param pulumi.Input[Sequence[pulumi.Input['ImageBlockDeviceMappingArgs']]] block_device_mappings: **(required) When registering from a snapshot:** One or more block device mappings.
        :param pulumi.Input[_builtins.str] creation_date: The date and time (UTC) at which the OMI was created.
        :param pulumi.Input[_builtins.str] description: A description for the new OMI.
        :param pulumi.Input[_builtins.str] file_location: **(required) When registering from a bucket by using a manifest file:** The pre-signed URL of the manifest file for the OMI you want to register. For more information, see [Creating a Pre-signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).
        :param pulumi.Input[_builtins.str] image_id: The ID of the OMI.
        :param pulumi.Input[_builtins.str] image_name: A unique name for the new OMI.<br />
               Constraints: 3-128 alphanumeric characters, underscores (`_`), spaces (` `), parentheses (`()`), slashes (`/`), periods (`.`), or dashes (`-`).
        :param pulumi.Input[_builtins.str] image_type: The type of the OMI.
        :param pulumi.Input[_builtins.bool] no_reboot: **When creating from a VM:** If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
        :param pulumi.Input[Sequence[pulumi.Input['ImagePermissionsToLaunchArgs']]] permissions_to_launches: Permissions for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] product_codes: The product codes associated with the OMI.
        :param pulumi.Input[_builtins.str] root_device_name: **(required) When registering from a snapshot:** The name of the root device for the new OMI.
        :param pulumi.Input[_builtins.str] root_device_type: The type of root device used by the OMI (always `bsu`).
        :param pulumi.Input[_builtins.str] source_image_id: **(required) When copying an OMI:** The ID of the OMI you want to copy.
        :param pulumi.Input[_builtins.str] source_region_name: **(required) When copying an OMI:** The name of the source Region (always the same as the Region of your account).
        :param pulumi.Input[_builtins.str] state: The state of the OMI (`pending` \\| `available` \\| `failed`).
        :param pulumi.Input[Sequence[pulumi.Input['ImageStateCommentArgs']]] state_comments: Information about the change of state.
        :param pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[_builtins.str] vm_id: **(required) When creating from a VM:** The ID of the VM from which you want to create the OMI.
        """
        if account_alias is not None:
            pulumi.set(__self__, "account_alias", account_alias)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if block_device_mappings is not None:
            pulumi.set(__self__, "block_device_mappings", block_device_mappings)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if file_location is not None:
            pulumi.set(__self__, "file_location", file_location)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_type is not None:
            pulumi.set(__self__, "image_type", image_type)
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if no_reboot is not None:
            pulumi.set(__self__, "no_reboot", no_reboot)
        if permissions_to_launches is not None:
            pulumi.set(__self__, "permissions_to_launches", permissions_to_launches)
        if product_codes is not None:
            pulumi.set(__self__, "product_codes", product_codes)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if root_device_name is not None:
            pulumi.set(__self__, "root_device_name", root_device_name)
        if root_device_type is not None:
            pulumi.set(__self__, "root_device_type", root_device_type)
        if source_image_id is not None:
            pulumi.set(__self__, "source_image_id", source_image_id)
        if source_region_name is not None:
            pulumi.set(__self__, "source_region_name", source_region_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_comments is not None:
            pulumi.set(__self__, "state_comments", state_comments)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter(name="accountAlias")
    def account_alias(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account alias of the owner of the OMI.
        """
        return pulumi.get(self, "account_alias")

    @account_alias.setter
    def account_alias(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_alias", value)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account ID of the owner of the OMI.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account_id", value)

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        **When registering from a snapshot:** The architecture of the OMI (`i386` or `x86_64`).
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "architecture", value)

    @_builtins.property
    @pulumi.getter(name="blockDeviceMappings")
    def block_device_mappings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageBlockDeviceMappingArgs']]]]:
        """
        **(required) When registering from a snapshot:** One or more block device mappings.
        """
        return pulumi.get(self, "block_device_mappings")

    @block_device_mappings.setter
    def block_device_mappings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageBlockDeviceMappingArgs']]]]):
        pulumi.set(self, "block_device_mappings", value)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time (UTC) at which the OMI was created.
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "creation_date", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A description for the new OMI.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="fileLocation")
    def file_location(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        **(required) When registering from a bucket by using a manifest file:** The pre-signed URL of the manifest file for the OMI you want to register. For more information, see [Creating a Pre-signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).
        """
        return pulumi.get(self, "file_location")

    @file_location.setter
    def file_location(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "file_location", value)

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the OMI.
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_id", value)

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A unique name for the new OMI.<br />
        Constraints: 3-128 alphanumeric characters, underscores (`_`), spaces (` `), parentheses (`()`), slashes (`/`), periods (`.`), or dashes (`-`).
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_name", value)

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the OMI.
        """
        return pulumi.get(self, "image_type")

    @image_type.setter
    def image_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "image_type", value)

    @_builtins.property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "is_public")

    @is_public.setter
    def is_public(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "is_public", value)

    @_builtins.property
    @pulumi.getter(name="noReboot")
    def no_reboot(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        **When creating from a VM:** If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
        """
        return pulumi.get(self, "no_reboot")

    @no_reboot.setter
    def no_reboot(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "no_reboot", value)

    @_builtins.property
    @pulumi.getter(name="permissionsToLaunches")
    def permissions_to_launches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImagePermissionsToLaunchArgs']]]]:
        """
        Permissions for the resource.
        """
        return pulumi.get(self, "permissions_to_launches")

    @permissions_to_launches.setter
    def permissions_to_launches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImagePermissionsToLaunchArgs']]]]):
        pulumi.set(self, "permissions_to_launches", value)

    @_builtins.property
    @pulumi.getter(name="productCodes")
    def product_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The product codes associated with the OMI.
        """
        return pulumi.get(self, "product_codes")

    @product_codes.setter
    def product_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "product_codes", value)

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_id", value)

    @_builtins.property
    @pulumi.getter(name="rootDeviceName")
    def root_device_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        **(required) When registering from a snapshot:** The name of the root device for the new OMI.
        """
        return pulumi.get(self, "root_device_name")

    @root_device_name.setter
    def root_device_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "root_device_name", value)

    @_builtins.property
    @pulumi.getter(name="rootDeviceType")
    def root_device_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of root device used by the OMI (always `bsu`).
        """
        return pulumi.get(self, "root_device_type")

    @root_device_type.setter
    def root_device_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "root_device_type", value)

    @_builtins.property
    @pulumi.getter(name="sourceImageId")
    def source_image_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        **(required) When copying an OMI:** The ID of the OMI you want to copy.
        """
        return pulumi.get(self, "source_image_id")

    @source_image_id.setter
    def source_image_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_image_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceRegionName")
    def source_region_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        **(required) When copying an OMI:** The name of the source Region (always the same as the Region of your account).
        """
        return pulumi.get(self, "source_region_name")

    @source_region_name.setter
    def source_region_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_region_name", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The state of the OMI (`pending` \\| `available` \\| `failed`).
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter(name="stateComments")
    def state_comments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageStateCommentArgs']]]]:
        """
        Information about the change of state.
        """
        return pulumi.get(self, "state_comments")

    @state_comments.setter
    def state_comments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageStateCommentArgs']]]]):
        pulumi.set(self, "state_comments", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        **(required) When creating from a VM:** The ID of the VM from which you want to create the OMI.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vm_id", value)


@pulumi.type_token("outscale:index/image:Image")
class Image(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageBlockDeviceMappingArgs', 'ImageBlockDeviceMappingArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 file_location: Optional[pulumi.Input[_builtins.str]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_reboot: Optional[pulumi.Input[_builtins.bool]] = None,
                 root_device_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_region_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageTagArgs', 'ImageTagArgsDict']]]]] = None,
                 vm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages an image.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-OMIs.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-image).

        ## Example Usage

        ### Create an image

        ```python
        import pulumi
        import pulumi_outscale as outscale

        image01 = outscale.Image("image01",
            image_name="terraform-omi-create",
            vm_id=vm_id,
            no_reboot=True)
        ```

        ### Import an image
        > **Important** Make sure the manifest file is still valid.

        ```python
        import pulumi
        import pulumi_outscale as outscale

        image02 = outscale.Image("image02",
            description="Terraform register OMI",
            image_name="terraform-omi-register",
            file_location="<URL>")
        ```

        ### Copy an image

        ```python
        import pulumi
        import pulumi_outscale as outscale

        image03 = outscale.Image("image03",
            description="Terraform copy OMI",
            image_name="terraform-omi-copy",
            source_image_id="ami-12345678",
            source_region_name="eu-west-2")
        ```

        ### Create an image with a Block Storage Unit (BSU) volume

        ```python
        import pulumi
        import pulumi_outscale as outscale

        image04 = outscale.Image("image04",
            image_name="terraform-omi-bsu",
            block_device_mappings=[{
                "device_name": "/dev/sda1",
                "bsus": [{
                    "snapshot_id": "snap-12345678",
                    "volume_size": 120,
                    "volume_type": "io1",
                    "iops": 150,
                    "delete_on_vm_deletion": True,
                }],
            }],
            root_device_name="/dev/sda1",
            description="Terraform OMI with BSU")
        ```

        ## Import

        An image can be imported using its ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/image:Image ImportedImage ami-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] architecture: **When registering from a snapshot:** The architecture of the OMI (`i386` or `x86_64`).
        :param pulumi.Input[Sequence[pulumi.Input[Union['ImageBlockDeviceMappingArgs', 'ImageBlockDeviceMappingArgsDict']]]] block_device_mappings: **(required) When registering from a snapshot:** One or more block device mappings.
        :param pulumi.Input[_builtins.str] description: A description for the new OMI.
        :param pulumi.Input[_builtins.str] file_location: **(required) When registering from a bucket by using a manifest file:** The pre-signed URL of the manifest file for the OMI you want to register. For more information, see [Creating a Pre-signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).
        :param pulumi.Input[_builtins.str] image_name: A unique name for the new OMI.<br />
               Constraints: 3-128 alphanumeric characters, underscores (`_`), spaces (` `), parentheses (`()`), slashes (`/`), periods (`.`), or dashes (`-`).
        :param pulumi.Input[_builtins.bool] no_reboot: **When creating from a VM:** If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
        :param pulumi.Input[_builtins.str] root_device_name: **(required) When registering from a snapshot:** The name of the root device for the new OMI.
        :param pulumi.Input[_builtins.str] source_image_id: **(required) When copying an OMI:** The ID of the OMI you want to copy.
        :param pulumi.Input[_builtins.str] source_region_name: **(required) When copying an OMI:** The name of the source Region (always the same as the Region of your account).
        :param pulumi.Input[Sequence[pulumi.Input[Union['ImageTagArgs', 'ImageTagArgsDict']]]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[_builtins.str] vm_id: **(required) When creating from a VM:** The ID of the VM from which you want to create the OMI.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ImageArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages an image.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-OMIs.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-image).

        ## Example Usage

        ### Create an image

        ```python
        import pulumi
        import pulumi_outscale as outscale

        image01 = outscale.Image("image01",
            image_name="terraform-omi-create",
            vm_id=vm_id,
            no_reboot=True)
        ```

        ### Import an image
        > **Important** Make sure the manifest file is still valid.

        ```python
        import pulumi
        import pulumi_outscale as outscale

        image02 = outscale.Image("image02",
            description="Terraform register OMI",
            image_name="terraform-omi-register",
            file_location="<URL>")
        ```

        ### Copy an image

        ```python
        import pulumi
        import pulumi_outscale as outscale

        image03 = outscale.Image("image03",
            description="Terraform copy OMI",
            image_name="terraform-omi-copy",
            source_image_id="ami-12345678",
            source_region_name="eu-west-2")
        ```

        ### Create an image with a Block Storage Unit (BSU) volume

        ```python
        import pulumi
        import pulumi_outscale as outscale

        image04 = outscale.Image("image04",
            image_name="terraform-omi-bsu",
            block_device_mappings=[{
                "device_name": "/dev/sda1",
                "bsus": [{
                    "snapshot_id": "snap-12345678",
                    "volume_size": 120,
                    "volume_type": "io1",
                    "iops": 150,
                    "delete_on_vm_deletion": True,
                }],
            }],
            root_device_name="/dev/sda1",
            description="Terraform OMI with BSU")
        ```

        ## Import

        An image can be imported using its ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/image:Image ImportedImage ami-12345678
        ```

        :param str resource_name: The name of the resource.
        :param ImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 architecture: Optional[pulumi.Input[_builtins.str]] = None,
                 block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageBlockDeviceMappingArgs', 'ImageBlockDeviceMappingArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 file_location: Optional[pulumi.Input[_builtins.str]] = None,
                 image_name: Optional[pulumi.Input[_builtins.str]] = None,
                 no_reboot: Optional[pulumi.Input[_builtins.bool]] = None,
                 root_device_name: Optional[pulumi.Input[_builtins.str]] = None,
                 source_image_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_region_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageTagArgs', 'ImageTagArgsDict']]]]] = None,
                 vm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageArgs.__new__(ImageArgs)

            __props__.__dict__["architecture"] = architecture
            __props__.__dict__["block_device_mappings"] = block_device_mappings
            __props__.__dict__["description"] = description
            __props__.__dict__["file_location"] = file_location
            __props__.__dict__["image_name"] = image_name
            __props__.__dict__["no_reboot"] = no_reboot
            __props__.__dict__["root_device_name"] = root_device_name
            __props__.__dict__["source_image_id"] = source_image_id
            __props__.__dict__["source_region_name"] = source_region_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["vm_id"] = vm_id
            __props__.__dict__["account_alias"] = None
            __props__.__dict__["account_id"] = None
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["image_id"] = None
            __props__.__dict__["image_type"] = None
            __props__.__dict__["is_public"] = None
            __props__.__dict__["permissions_to_launches"] = None
            __props__.__dict__["product_codes"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["root_device_type"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["state_comments"] = None
        super(Image, __self__).__init__(
            'outscale:index/image:Image',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_alias: Optional[pulumi.Input[_builtins.str]] = None,
            account_id: Optional[pulumi.Input[_builtins.str]] = None,
            architecture: Optional[pulumi.Input[_builtins.str]] = None,
            block_device_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageBlockDeviceMappingArgs', 'ImageBlockDeviceMappingArgsDict']]]]] = None,
            creation_date: Optional[pulumi.Input[_builtins.str]] = None,
            description: Optional[pulumi.Input[_builtins.str]] = None,
            file_location: Optional[pulumi.Input[_builtins.str]] = None,
            image_id: Optional[pulumi.Input[_builtins.str]] = None,
            image_name: Optional[pulumi.Input[_builtins.str]] = None,
            image_type: Optional[pulumi.Input[_builtins.str]] = None,
            is_public: Optional[pulumi.Input[_builtins.bool]] = None,
            no_reboot: Optional[pulumi.Input[_builtins.bool]] = None,
            permissions_to_launches: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImagePermissionsToLaunchArgs', 'ImagePermissionsToLaunchArgsDict']]]]] = None,
            product_codes: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            request_id: Optional[pulumi.Input[_builtins.str]] = None,
            root_device_name: Optional[pulumi.Input[_builtins.str]] = None,
            root_device_type: Optional[pulumi.Input[_builtins.str]] = None,
            source_image_id: Optional[pulumi.Input[_builtins.str]] = None,
            source_region_name: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            state_comments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageStateCommentArgs', 'ImageStateCommentArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageTagArgs', 'ImageTagArgsDict']]]]] = None,
            vm_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Image':
        """
        Get an existing Image resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] account_alias: The account alias of the owner of the OMI.
        :param pulumi.Input[_builtins.str] account_id: The account ID of the owner of the OMI.
        :param pulumi.Input[_builtins.str] architecture: **When registering from a snapshot:** The architecture of the OMI (`i386` or `x86_64`).
        :param pulumi.Input[Sequence[pulumi.Input[Union['ImageBlockDeviceMappingArgs', 'ImageBlockDeviceMappingArgsDict']]]] block_device_mappings: **(required) When registering from a snapshot:** One or more block device mappings.
        :param pulumi.Input[_builtins.str] creation_date: The date and time (UTC) at which the OMI was created.
        :param pulumi.Input[_builtins.str] description: A description for the new OMI.
        :param pulumi.Input[_builtins.str] file_location: **(required) When registering from a bucket by using a manifest file:** The pre-signed URL of the manifest file for the OMI you want to register. For more information, see [Creating a Pre-signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).
        :param pulumi.Input[_builtins.str] image_id: The ID of the OMI.
        :param pulumi.Input[_builtins.str] image_name: A unique name for the new OMI.<br />
               Constraints: 3-128 alphanumeric characters, underscores (`_`), spaces (` `), parentheses (`()`), slashes (`/`), periods (`.`), or dashes (`-`).
        :param pulumi.Input[_builtins.str] image_type: The type of the OMI.
        :param pulumi.Input[_builtins.bool] no_reboot: **When creating from a VM:** If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ImagePermissionsToLaunchArgs', 'ImagePermissionsToLaunchArgsDict']]]] permissions_to_launches: Permissions for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] product_codes: The product codes associated with the OMI.
        :param pulumi.Input[_builtins.str] root_device_name: **(required) When registering from a snapshot:** The name of the root device for the new OMI.
        :param pulumi.Input[_builtins.str] root_device_type: The type of root device used by the OMI (always `bsu`).
        :param pulumi.Input[_builtins.str] source_image_id: **(required) When copying an OMI:** The ID of the OMI you want to copy.
        :param pulumi.Input[_builtins.str] source_region_name: **(required) When copying an OMI:** The name of the source Region (always the same as the Region of your account).
        :param pulumi.Input[_builtins.str] state: The state of the OMI (`pending` \\| `available` \\| `failed`).
        :param pulumi.Input[Sequence[pulumi.Input[Union['ImageStateCommentArgs', 'ImageStateCommentArgsDict']]]] state_comments: Information about the change of state.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ImageTagArgs', 'ImageTagArgsDict']]]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[_builtins.str] vm_id: **(required) When creating from a VM:** The ID of the VM from which you want to create the OMI.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageState.__new__(_ImageState)

        __props__.__dict__["account_alias"] = account_alias
        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["architecture"] = architecture
        __props__.__dict__["block_device_mappings"] = block_device_mappings
        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["description"] = description
        __props__.__dict__["file_location"] = file_location
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["image_name"] = image_name
        __props__.__dict__["image_type"] = image_type
        __props__.__dict__["is_public"] = is_public
        __props__.__dict__["no_reboot"] = no_reboot
        __props__.__dict__["permissions_to_launches"] = permissions_to_launches
        __props__.__dict__["product_codes"] = product_codes
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["root_device_name"] = root_device_name
        __props__.__dict__["root_device_type"] = root_device_type
        __props__.__dict__["source_image_id"] = source_image_id
        __props__.__dict__["source_region_name"] = source_region_name
        __props__.__dict__["state"] = state
        __props__.__dict__["state_comments"] = state_comments
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vm_id"] = vm_id
        return Image(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountAlias")
    def account_alias(self) -> pulumi.Output[_builtins.str]:
        """
        The account alias of the owner of the OMI.
        """
        return pulumi.get(self, "account_alias")

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        """
        The account ID of the owner of the OMI.
        """
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter
    def architecture(self) -> pulumi.Output[_builtins.str]:
        """
        **When registering from a snapshot:** The architecture of the OMI (`i386` or `x86_64`).
        """
        return pulumi.get(self, "architecture")

    @_builtins.property
    @pulumi.getter(name="blockDeviceMappings")
    def block_device_mappings(self) -> pulumi.Output[Sequence['outputs.ImageBlockDeviceMapping']]:
        """
        **(required) When registering from a snapshot:** One or more block device mappings.
        """
        return pulumi.get(self, "block_device_mappings")

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time (UTC) at which the OMI was created.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[_builtins.str]:
        """
        A description for the new OMI.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="fileLocation")
    def file_location(self) -> pulumi.Output[_builtins.str]:
        """
        **(required) When registering from a bucket by using a manifest file:** The pre-signed URL of the manifest file for the OMI you want to register. For more information, see [Creating a Pre-signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).
        """
        return pulumi.get(self, "file_location")

    @_builtins.property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the OMI.
        """
        return pulumi.get(self, "image_id")

    @_builtins.property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[_builtins.str]:
        """
        A unique name for the new OMI.<br />
        Constraints: 3-128 alphanumeric characters, underscores (`_`), spaces (` `), parentheses (`()`), slashes (`/`), periods (`.`), or dashes (`-`).
        """
        return pulumi.get(self, "image_name")

    @_builtins.property
    @pulumi.getter(name="imageType")
    def image_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the OMI.
        """
        return pulumi.get(self, "image_type")

    @_builtins.property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "is_public")

    @_builtins.property
    @pulumi.getter(name="noReboot")
    def no_reboot(self) -> pulumi.Output[_builtins.bool]:
        """
        **When creating from a VM:** If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
        """
        return pulumi.get(self, "no_reboot")

    @_builtins.property
    @pulumi.getter(name="permissionsToLaunches")
    def permissions_to_launches(self) -> pulumi.Output[Sequence['outputs.ImagePermissionsToLaunch']]:
        """
        Permissions for the resource.
        """
        return pulumi.get(self, "permissions_to_launches")

    @_builtins.property
    @pulumi.getter(name="productCodes")
    def product_codes(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The product codes associated with the OMI.
        """
        return pulumi.get(self, "product_codes")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="rootDeviceName")
    def root_device_name(self) -> pulumi.Output[_builtins.str]:
        """
        **(required) When registering from a snapshot:** The name of the root device for the new OMI.
        """
        return pulumi.get(self, "root_device_name")

    @_builtins.property
    @pulumi.getter(name="rootDeviceType")
    def root_device_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of root device used by the OMI (always `bsu`).
        """
        return pulumi.get(self, "root_device_type")

    @_builtins.property
    @pulumi.getter(name="sourceImageId")
    def source_image_id(self) -> pulumi.Output[_builtins.str]:
        """
        **(required) When copying an OMI:** The ID of the OMI you want to copy.
        """
        return pulumi.get(self, "source_image_id")

    @_builtins.property
    @pulumi.getter(name="sourceRegionName")
    def source_region_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        **(required) When copying an OMI:** The name of the source Region (always the same as the Region of your account).
        """
        return pulumi.get(self, "source_region_name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The state of the OMI (`pending` \\| `available` \\| `failed`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="stateComments")
    def state_comments(self) -> pulumi.Output[Sequence['outputs.ImageStateComment']]:
        """
        Information about the change of state.
        """
        return pulumi.get(self, "state_comments")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.ImageTag']]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Output[_builtins.str]:
        """
        **(required) When creating from a VM:** The ID of the VM from which you want to create the OMI.
        """
        return pulumi.get(self, "vm_id")

