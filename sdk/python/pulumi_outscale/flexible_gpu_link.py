# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FlexibleGpuLinkArgs', 'FlexibleGpuLink']

@pulumi.input_type
class FlexibleGpuLinkArgs:
    def __init__(__self__, *,
                 flexible_gpu_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 vm_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a FlexibleGpuLink resource.
        :param pulumi.Input[str] vm_id: The ID of the VM you want to attach the fGPU to.
        """
        pulumi.set(__self__, "flexible_gpu_ids", flexible_gpu_ids)
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="flexibleGpuIds")
    def flexible_gpu_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "flexible_gpu_ids")

    @flexible_gpu_ids.setter
    def flexible_gpu_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "flexible_gpu_ids", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Input[str]:
        """
        The ID of the VM you want to attach the fGPU to.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_id", value)


@pulumi.input_type
class _FlexibleGpuLinkState:
    def __init__(__self__, *,
                 flexible_gpu_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FlexibleGpuLink resources.
        :param pulumi.Input[str] vm_id: The ID of the VM you want to attach the fGPU to.
        """
        if flexible_gpu_ids is not None:
            pulumi.set(__self__, "flexible_gpu_ids", flexible_gpu_ids)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="flexibleGpuIds")
    def flexible_gpu_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "flexible_gpu_ids")

    @flexible_gpu_ids.setter
    def flexible_gpu_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "flexible_gpu_ids", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the VM you want to attach the fGPU to.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_id", value)


class FlexibleGpuLink(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 flexible_gpu_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a flexible GPU link.

        When linking a flexible GPU to a VM, the VM will automatically be stopped and started again.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-flexiblegpu).

        ## Example Usage
        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        vm01 = outscale.Vm("vm01",
            image_id=ami_12345678,
            vm_type=t2["small"],
            keypair_name=var["keypair_name"],
            placement_subregion_name="eu-west-2a")
        flexible_gpu01 = outscale.FlexibleGpu("flexibleGpu01",
            model_name=var["model_name"],
            generation="v4",
            subregion_name="eu-west-2a",
            delete_on_vm_deletion=True)
        ```

        ## Import

        A flexible GPU link can be imported using the flexible GPU ID. For exampleconsole

        ```sh
         $ pulumi import outscale:index/flexibleGpuLink:FlexibleGpuLink imported_link_fgpu fgpu-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] vm_id: The ID of the VM you want to attach the fGPU to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FlexibleGpuLinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a flexible GPU link.

        When linking a flexible GPU to a VM, the VM will automatically be stopped and started again.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-flexiblegpu).

        ## Example Usage
        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        vm01 = outscale.Vm("vm01",
            image_id=ami_12345678,
            vm_type=t2["small"],
            keypair_name=var["keypair_name"],
            placement_subregion_name="eu-west-2a")
        flexible_gpu01 = outscale.FlexibleGpu("flexibleGpu01",
            model_name=var["model_name"],
            generation="v4",
            subregion_name="eu-west-2a",
            delete_on_vm_deletion=True)
        ```

        ## Import

        A flexible GPU link can be imported using the flexible GPU ID. For exampleconsole

        ```sh
         $ pulumi import outscale:index/flexibleGpuLink:FlexibleGpuLink imported_link_fgpu fgpu-12345678
        ```

        :param str resource_name: The name of the resource.
        :param FlexibleGpuLinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FlexibleGpuLinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 flexible_gpu_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FlexibleGpuLinkArgs.__new__(FlexibleGpuLinkArgs)

            if flexible_gpu_ids is None and not opts.urn:
                raise TypeError("Missing required property 'flexible_gpu_ids'")
            __props__.__dict__["flexible_gpu_ids"] = flexible_gpu_ids
            if vm_id is None and not opts.urn:
                raise TypeError("Missing required property 'vm_id'")
            __props__.__dict__["vm_id"] = vm_id
            __props__.__dict__["request_id"] = None
        super(FlexibleGpuLink, __self__).__init__(
            'outscale:index/flexibleGpuLink:FlexibleGpuLink',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            flexible_gpu_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            vm_id: Optional[pulumi.Input[str]] = None) -> 'FlexibleGpuLink':
        """
        Get an existing FlexibleGpuLink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] vm_id: The ID of the VM you want to attach the fGPU to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FlexibleGpuLinkState.__new__(_FlexibleGpuLinkState)

        __props__.__dict__["flexible_gpu_ids"] = flexible_gpu_ids
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["vm_id"] = vm_id
        return FlexibleGpuLink(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="flexibleGpuIds")
    def flexible_gpu_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "flexible_gpu_ids")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Output[str]:
        """
        The ID of the VM you want to attach the fGPU to.
        """
        return pulumi.get(self, "vm_id")

