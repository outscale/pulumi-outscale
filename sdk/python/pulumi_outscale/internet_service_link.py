# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InternetServiceLinkArgs', 'InternetServiceLink']

@pulumi.input_type
class InternetServiceLinkArgs:
    def __init__(__self__, *,
                 internet_service_id: pulumi.Input[str],
                 net_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a InternetServiceLink resource.
        """
        pulumi.set(__self__, "internet_service_id", internet_service_id)
        pulumi.set(__self__, "net_id", net_id)

    @property
    @pulumi.getter(name="internetServiceId")
    def internet_service_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "internet_service_id")

    @internet_service_id.setter
    def internet_service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "internet_service_id", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "net_id", value)


@pulumi.input_type
class _InternetServiceLinkState:
    def __init__(__self__, *,
                 internet_service_id: Optional[pulumi.Input[str]] = None,
                 net_id: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InternetServiceLinkTagArgs']]]] = None):
        """
        Input properties used for looking up and filtering InternetServiceLink resources.
        """
        if internet_service_id is not None:
            pulumi.set(__self__, "internet_service_id", internet_service_id)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="internetServiceId")
    def internet_service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "internet_service_id")

    @internet_service_id.setter
    def internet_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internet_service_id", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InternetServiceLinkTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InternetServiceLinkTagArgs']]]]):
        pulumi.set(self, "tags", value)


class InternetServiceLink(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 internet_service_id: Optional[pulumi.Input[str]] = None,
                 net_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a InternetServiceLink resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InternetServiceLinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a InternetServiceLink resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param InternetServiceLinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InternetServiceLinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 internet_service_id: Optional[pulumi.Input[str]] = None,
                 net_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InternetServiceLinkArgs.__new__(InternetServiceLinkArgs)

            if internet_service_id is None and not opts.urn:
                raise TypeError("Missing required property 'internet_service_id'")
            __props__.__dict__["internet_service_id"] = internet_service_id
            if net_id is None and not opts.urn:
                raise TypeError("Missing required property 'net_id'")
            __props__.__dict__["net_id"] = net_id
            __props__.__dict__["request_id"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["tags"] = None
        super(InternetServiceLink, __self__).__init__(
            'outscale:index/internetServiceLink:InternetServiceLink',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            internet_service_id: Optional[pulumi.Input[str]] = None,
            net_id: Optional[pulumi.Input[str]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InternetServiceLinkTagArgs']]]]] = None) -> 'InternetServiceLink':
        """
        Get an existing InternetServiceLink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InternetServiceLinkState.__new__(_InternetServiceLinkState)

        __props__.__dict__["internet_service_id"] = internet_service_id
        __props__.__dict__["net_id"] = net_id
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        return InternetServiceLink(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="internetServiceId")
    def internet_service_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "internet_service_id")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.InternetServiceLinkTag']]:
        return pulumi.get(self, "tags")

