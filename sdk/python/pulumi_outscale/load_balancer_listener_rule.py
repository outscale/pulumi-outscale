# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LoadBalancerListenerRuleArgs', 'LoadBalancerListenerRule']

@pulumi.input_type
class LoadBalancerListenerRuleArgs:
    def __init__(__self__, *,
                 listener: pulumi.Input['LoadBalancerListenerRuleListenerArgs'],
                 listener_rule: pulumi.Input['LoadBalancerListenerRuleListenerRuleArgs'],
                 vm_ids: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        The set of arguments for constructing a LoadBalancerListenerRule resource.
        :param pulumi.Input['LoadBalancerListenerRuleListenerArgs'] listener: Information about the load balancer.
        :param pulumi.Input['LoadBalancerListenerRuleListenerRuleArgs'] listener_rule: Information about the listener rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vm_ids: The IDs of the backend VMs.
        """
        pulumi.set(__self__, "listener", listener)
        pulumi.set(__self__, "listener_rule", listener_rule)
        pulumi.set(__self__, "vm_ids", vm_ids)

    @_builtins.property
    @pulumi.getter
    def listener(self) -> pulumi.Input['LoadBalancerListenerRuleListenerArgs']:
        """
        Information about the load balancer.
        """
        return pulumi.get(self, "listener")

    @listener.setter
    def listener(self, value: pulumi.Input['LoadBalancerListenerRuleListenerArgs']):
        pulumi.set(self, "listener", value)

    @_builtins.property
    @pulumi.getter(name="listenerRule")
    def listener_rule(self) -> pulumi.Input['LoadBalancerListenerRuleListenerRuleArgs']:
        """
        Information about the listener rule.
        """
        return pulumi.get(self, "listener_rule")

    @listener_rule.setter
    def listener_rule(self, value: pulumi.Input['LoadBalancerListenerRuleListenerRuleArgs']):
        pulumi.set(self, "listener_rule", value)

    @_builtins.property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The IDs of the backend VMs.
        """
        return pulumi.get(self, "vm_ids")

    @vm_ids.setter
    def vm_ids(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "vm_ids", value)


@pulumi.input_type
class _LoadBalancerListenerRuleState:
    def __init__(__self__, *,
                 listener: Optional[pulumi.Input['LoadBalancerListenerRuleListenerArgs']] = None,
                 listener_rule: Optional[pulumi.Input['LoadBalancerListenerRuleListenerRuleArgs']] = None,
                 request_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering LoadBalancerListenerRule resources.
        :param pulumi.Input['LoadBalancerListenerRuleListenerArgs'] listener: Information about the load balancer.
        :param pulumi.Input['LoadBalancerListenerRuleListenerRuleArgs'] listener_rule: Information about the listener rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vm_ids: The IDs of the backend VMs.
        """
        if listener is not None:
            pulumi.set(__self__, "listener", listener)
        if listener_rule is not None:
            pulumi.set(__self__, "listener_rule", listener_rule)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if vm_ids is not None:
            pulumi.set(__self__, "vm_ids", vm_ids)

    @_builtins.property
    @pulumi.getter
    def listener(self) -> Optional[pulumi.Input['LoadBalancerListenerRuleListenerArgs']]:
        """
        Information about the load balancer.
        """
        return pulumi.get(self, "listener")

    @listener.setter
    def listener(self, value: Optional[pulumi.Input['LoadBalancerListenerRuleListenerArgs']]):
        pulumi.set(self, "listener", value)

    @_builtins.property
    @pulumi.getter(name="listenerRule")
    def listener_rule(self) -> Optional[pulumi.Input['LoadBalancerListenerRuleListenerRuleArgs']]:
        """
        Information about the listener rule.
        """
        return pulumi.get(self, "listener_rule")

    @listener_rule.setter
    def listener_rule(self, value: Optional[pulumi.Input['LoadBalancerListenerRuleListenerRuleArgs']]):
        pulumi.set(self, "listener_rule", value)

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_id", value)

    @_builtins.property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The IDs of the backend VMs.
        """
        return pulumi.get(self, "vm_ids")

    @vm_ids.setter
    def vm_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "vm_ids", value)


@pulumi.type_token("outscale:index/loadBalancerListenerRule:LoadBalancerListenerRule")
class LoadBalancerListenerRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 listener: Optional[pulumi.Input[Union['LoadBalancerListenerRuleListenerArgs', 'LoadBalancerListenerRuleListenerArgsDict']]] = None,
                 listener_rule: Optional[pulumi.Input[Union['LoadBalancerListenerRuleListenerRuleArgs', 'LoadBalancerListenerRuleListenerRuleArgsDict']]] = None,
                 vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Manages a load balancer listener rule.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-listener).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        vm01 = outscale.Vm("vm01",
            image_id=image_id,
            vm_type=vm_type,
            keypair_name=keypair_name)
        load_balancer01 = outscale.LoadBalancer("load_balancer01",
            load_balancer_name="terraform-public-load-balancer",
            subregion_names=[f"{region}a"],
            listeners=[{
                "backend_port": 80,
                "backend_protocol": "TCP",
                "load_balancer_protocol": "TCP",
                "load_balancer_port": 80,
            }],
            tags=[{
                "key": "name",
                "value": "terraform-public-load-balancer",
            }])
        outscale_load_balancer_vms01 = outscale.LoadBalancerVms("outscale_load_balancer_vms01",
            load_balancer_name=load_balancer01.id,
            backend_vm_ids=[vm01.vm_id])
        ```

        ### Create a listener rule based on path pattern

        ```python
        import pulumi
        import pulumi_outscale as outscale

        rule01 = outscale.LoadBalancerListenerRule("rule01",
            listener={
                "load_balancer_name": load_balancer01["id"],
                "load_balancer_port": 80,
            },
            listener_rule={
                "action": "forward",
                "listener_rule_name": "terraform-listener-rule01",
                "path_pattern": "*.abc.*.abc.*.com",
                "priority": 10,
            },
            vm_ids=[vm01["vmId"]])
        ```

        ### Create a listener rule based on host pattern

        ```python
        import pulumi
        import pulumi_outscale as outscale

        rule02 = outscale.LoadBalancerListenerRule("rule02",
            listener={
                "load_balancer_name": load_balancer01["id"],
                "load_balancer_port": 80,
            },
            listener_rule={
                "action": "forward",
                "listener_rule_name": "terraform-listener-rule02",
                "host_name_pattern": "*.abc.-.abc.*.com",
                "priority": 1,
            },
            vm_ids=[vm01["vmId"]])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['LoadBalancerListenerRuleListenerArgs', 'LoadBalancerListenerRuleListenerArgsDict']] listener: Information about the load balancer.
        :param pulumi.Input[Union['LoadBalancerListenerRuleListenerRuleArgs', 'LoadBalancerListenerRuleListenerRuleArgsDict']] listener_rule: Information about the listener rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vm_ids: The IDs of the backend VMs.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LoadBalancerListenerRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a load balancer listener rule.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-listener).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        vm01 = outscale.Vm("vm01",
            image_id=image_id,
            vm_type=vm_type,
            keypair_name=keypair_name)
        load_balancer01 = outscale.LoadBalancer("load_balancer01",
            load_balancer_name="terraform-public-load-balancer",
            subregion_names=[f"{region}a"],
            listeners=[{
                "backend_port": 80,
                "backend_protocol": "TCP",
                "load_balancer_protocol": "TCP",
                "load_balancer_port": 80,
            }],
            tags=[{
                "key": "name",
                "value": "terraform-public-load-balancer",
            }])
        outscale_load_balancer_vms01 = outscale.LoadBalancerVms("outscale_load_balancer_vms01",
            load_balancer_name=load_balancer01.id,
            backend_vm_ids=[vm01.vm_id])
        ```

        ### Create a listener rule based on path pattern

        ```python
        import pulumi
        import pulumi_outscale as outscale

        rule01 = outscale.LoadBalancerListenerRule("rule01",
            listener={
                "load_balancer_name": load_balancer01["id"],
                "load_balancer_port": 80,
            },
            listener_rule={
                "action": "forward",
                "listener_rule_name": "terraform-listener-rule01",
                "path_pattern": "*.abc.*.abc.*.com",
                "priority": 10,
            },
            vm_ids=[vm01["vmId"]])
        ```

        ### Create a listener rule based on host pattern

        ```python
        import pulumi
        import pulumi_outscale as outscale

        rule02 = outscale.LoadBalancerListenerRule("rule02",
            listener={
                "load_balancer_name": load_balancer01["id"],
                "load_balancer_port": 80,
            },
            listener_rule={
                "action": "forward",
                "listener_rule_name": "terraform-listener-rule02",
                "host_name_pattern": "*.abc.-.abc.*.com",
                "priority": 1,
            },
            vm_ids=[vm01["vmId"]])
        ```

        :param str resource_name: The name of the resource.
        :param LoadBalancerListenerRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoadBalancerListenerRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 listener: Optional[pulumi.Input[Union['LoadBalancerListenerRuleListenerArgs', 'LoadBalancerListenerRuleListenerArgsDict']]] = None,
                 listener_rule: Optional[pulumi.Input[Union['LoadBalancerListenerRuleListenerRuleArgs', 'LoadBalancerListenerRuleListenerRuleArgsDict']]] = None,
                 vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoadBalancerListenerRuleArgs.__new__(LoadBalancerListenerRuleArgs)

            if listener is None and not opts.urn:
                raise TypeError("Missing required property 'listener'")
            __props__.__dict__["listener"] = listener
            if listener_rule is None and not opts.urn:
                raise TypeError("Missing required property 'listener_rule'")
            __props__.__dict__["listener_rule"] = listener_rule
            if vm_ids is None and not opts.urn:
                raise TypeError("Missing required property 'vm_ids'")
            __props__.__dict__["vm_ids"] = vm_ids
            __props__.__dict__["request_id"] = None
        super(LoadBalancerListenerRule, __self__).__init__(
            'outscale:index/loadBalancerListenerRule:LoadBalancerListenerRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            listener: Optional[pulumi.Input[Union['LoadBalancerListenerRuleListenerArgs', 'LoadBalancerListenerRuleListenerArgsDict']]] = None,
            listener_rule: Optional[pulumi.Input[Union['LoadBalancerListenerRuleListenerRuleArgs', 'LoadBalancerListenerRuleListenerRuleArgsDict']]] = None,
            request_id: Optional[pulumi.Input[_builtins.str]] = None,
            vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None) -> 'LoadBalancerListenerRule':
        """
        Get an existing LoadBalancerListenerRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['LoadBalancerListenerRuleListenerArgs', 'LoadBalancerListenerRuleListenerArgsDict']] listener: Information about the load balancer.
        :param pulumi.Input[Union['LoadBalancerListenerRuleListenerRuleArgs', 'LoadBalancerListenerRuleListenerRuleArgsDict']] listener_rule: Information about the listener rule.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] vm_ids: The IDs of the backend VMs.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoadBalancerListenerRuleState.__new__(_LoadBalancerListenerRuleState)

        __props__.__dict__["listener"] = listener
        __props__.__dict__["listener_rule"] = listener_rule
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["vm_ids"] = vm_ids
        return LoadBalancerListenerRule(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def listener(self) -> pulumi.Output['outputs.LoadBalancerListenerRuleListener']:
        """
        Information about the load balancer.
        """
        return pulumi.get(self, "listener")

    @_builtins.property
    @pulumi.getter(name="listenerRule")
    def listener_rule(self) -> pulumi.Output['outputs.LoadBalancerListenerRuleListenerRule']:
        """
        Information about the listener rule.
        """
        return pulumi.get(self, "listener_rule")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="vmIds")
    def vm_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        The IDs of the backend VMs.
        """
        return pulumi.get(self, "vm_ids")

