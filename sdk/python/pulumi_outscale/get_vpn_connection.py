# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetVpnConnectionResult',
    'AwaitableGetVpnConnectionResult',
    'get_vpn_connection',
    'get_vpn_connection_output',
]

@pulumi.output_type
class GetVpnConnectionResult:
    """
    A collection of values returned by getVpnConnection.
    """
    def __init__(__self__, client_gateway_configuration=None, client_gateway_id=None, connection_type=None, filters=None, id=None, request_id=None, routes=None, state=None, static_routes_only=None, tags=None, vgw_telemetries=None, virtual_gateway_id=None, vpn_connection_id=None):
        if client_gateway_configuration and not isinstance(client_gateway_configuration, str):
            raise TypeError("Expected argument 'client_gateway_configuration' to be a str")
        pulumi.set(__self__, "client_gateway_configuration", client_gateway_configuration)
        if client_gateway_id and not isinstance(client_gateway_id, str):
            raise TypeError("Expected argument 'client_gateway_id' to be a str")
        pulumi.set(__self__, "client_gateway_id", client_gateway_id)
        if connection_type and not isinstance(connection_type, str):
            raise TypeError("Expected argument 'connection_type' to be a str")
        pulumi.set(__self__, "connection_type", connection_type)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if routes and not isinstance(routes, list):
            raise TypeError("Expected argument 'routes' to be a list")
        pulumi.set(__self__, "routes", routes)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if static_routes_only and not isinstance(static_routes_only, bool):
            raise TypeError("Expected argument 'static_routes_only' to be a bool")
        pulumi.set(__self__, "static_routes_only", static_routes_only)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if vgw_telemetries and not isinstance(vgw_telemetries, list):
            raise TypeError("Expected argument 'vgw_telemetries' to be a list")
        pulumi.set(__self__, "vgw_telemetries", vgw_telemetries)
        if virtual_gateway_id and not isinstance(virtual_gateway_id, str):
            raise TypeError("Expected argument 'virtual_gateway_id' to be a str")
        pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)
        if vpn_connection_id and not isinstance(vpn_connection_id, str):
            raise TypeError("Expected argument 'vpn_connection_id' to be a str")
        pulumi.set(__self__, "vpn_connection_id", vpn_connection_id)

    @_builtins.property
    @pulumi.getter(name="clientGatewayConfiguration")
    def client_gateway_configuration(self) -> _builtins.str:
        """
        Example configuration for the client gateway.
        """
        return pulumi.get(self, "client_gateway_configuration")

    @_builtins.property
    @pulumi.getter(name="clientGatewayId")
    def client_gateway_id(self) -> _builtins.str:
        """
        The ID of the client gateway used on the client end of the connection.
        """
        return pulumi.get(self, "client_gateway_id")

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        The type of VPN connection (always `ipsec.1`).
        """
        return pulumi.get(self, "connection_type")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetVpnConnectionFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter
    def routes(self) -> Sequence['outputs.GetVpnConnectionRouteResult']:
        """
        Information about one or more static routes associated with the VPN connection, if any.
        """
        return pulumi.get(self, "routes")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the IPSEC tunnel (`UP` \\| `DOWN`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="staticRoutesOnly")
    def static_routes_only(self) -> Optional[_builtins.bool]:
        """
        If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
        """
        return pulumi.get(self, "static_routes_only")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetVpnConnectionTagResult']:
        """
        One or more tags associated with the VPN connection.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="vgwTelemetries")
    def vgw_telemetries(self) -> Sequence['outputs.GetVpnConnectionVgwTelemetryResult']:
        """
        Information about the current state of one or more of the VPN tunnels.
        """
        return pulumi.get(self, "vgw_telemetries")

    @_builtins.property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> _builtins.str:
        """
        The ID of the virtual gateway used on the OUTSCALE end of the connection.
        """
        return pulumi.get(self, "virtual_gateway_id")

    @_builtins.property
    @pulumi.getter(name="vpnConnectionId")
    def vpn_connection_id(self) -> Optional[_builtins.str]:
        """
        The ID of the VPN connection.
        """
        return pulumi.get(self, "vpn_connection_id")


class AwaitableGetVpnConnectionResult(GetVpnConnectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVpnConnectionResult(
            client_gateway_configuration=self.client_gateway_configuration,
            client_gateway_id=self.client_gateway_id,
            connection_type=self.connection_type,
            filters=self.filters,
            id=self.id,
            request_id=self.request_id,
            routes=self.routes,
            state=self.state,
            static_routes_only=self.static_routes_only,
            tags=self.tags,
            vgw_telemetries=self.vgw_telemetries,
            virtual_gateway_id=self.virtual_gateway_id,
            vpn_connection_id=self.vpn_connection_id)


def get_vpn_connection(filters: Optional[Sequence[Union['GetVpnConnectionFilterArgs', 'GetVpnConnectionFilterArgsDict']]] = None,
                       static_routes_only: Optional[_builtins.bool] = None,
                       vpn_connection_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVpnConnectionResult:
    """
    Provides information about a VPN connection.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPN-Connections.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vpnconnection).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    vpn_connection01 = outscale.get_vpn_connection(filters=[{
        "name": "vpn_connection_ids",
        "values": ["vpn-12345678"],
    }])
    ```


    :param Sequence[Union['GetVpnConnectionFilterArgs', 'GetVpnConnectionFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    :param _builtins.bool static_routes_only: If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
    :param _builtins.str vpn_connection_id: The ID of the VPN connection.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['staticRoutesOnly'] = static_routes_only
    __args__['vpnConnectionId'] = vpn_connection_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getVpnConnection:getVpnConnection', __args__, opts=opts, typ=GetVpnConnectionResult).value

    return AwaitableGetVpnConnectionResult(
        client_gateway_configuration=pulumi.get(__ret__, 'client_gateway_configuration'),
        client_gateway_id=pulumi.get(__ret__, 'client_gateway_id'),
        connection_type=pulumi.get(__ret__, 'connection_type'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        request_id=pulumi.get(__ret__, 'request_id'),
        routes=pulumi.get(__ret__, 'routes'),
        state=pulumi.get(__ret__, 'state'),
        static_routes_only=pulumi.get(__ret__, 'static_routes_only'),
        tags=pulumi.get(__ret__, 'tags'),
        vgw_telemetries=pulumi.get(__ret__, 'vgw_telemetries'),
        virtual_gateway_id=pulumi.get(__ret__, 'virtual_gateway_id'),
        vpn_connection_id=pulumi.get(__ret__, 'vpn_connection_id'))
def get_vpn_connection_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetVpnConnectionFilterArgs', 'GetVpnConnectionFilterArgsDict']]]]] = None,
                              static_routes_only: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                              vpn_connection_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVpnConnectionResult]:
    """
    Provides information about a VPN connection.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPN-Connections.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vpnconnection).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    vpn_connection01 = outscale.get_vpn_connection(filters=[{
        "name": "vpn_connection_ids",
        "values": ["vpn-12345678"],
    }])
    ```


    :param Sequence[Union['GetVpnConnectionFilterArgs', 'GetVpnConnectionFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    :param _builtins.bool static_routes_only: If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
    :param _builtins.str vpn_connection_id: The ID of the VPN connection.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['staticRoutesOnly'] = static_routes_only
    __args__['vpnConnectionId'] = vpn_connection_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getVpnConnection:getVpnConnection', __args__, opts=opts, typ=GetVpnConnectionResult)
    return __ret__.apply(lambda __response__: GetVpnConnectionResult(
        client_gateway_configuration=pulumi.get(__response__, 'client_gateway_configuration'),
        client_gateway_id=pulumi.get(__response__, 'client_gateway_id'),
        connection_type=pulumi.get(__response__, 'connection_type'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        request_id=pulumi.get(__response__, 'request_id'),
        routes=pulumi.get(__response__, 'routes'),
        state=pulumi.get(__response__, 'state'),
        static_routes_only=pulumi.get(__response__, 'static_routes_only'),
        tags=pulumi.get(__response__, 'tags'),
        vgw_telemetries=pulumi.get(__response__, 'vgw_telemetries'),
        virtual_gateway_id=pulumi.get(__response__, 'virtual_gateway_id'),
        vpn_connection_id=pulumi.get(__response__, 'vpn_connection_id')))
