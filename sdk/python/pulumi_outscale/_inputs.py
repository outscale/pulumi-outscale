# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ClientGatewayTagArgs',
    'DhcpOptionTagArgs',
    'ImageBlockDeviceMappingArgs',
    'ImageBlockDeviceMappingBsusArgs',
    'ImageExportTaskOsuExportArgs',
    'ImageExportTaskOsuExportOsuApiKeyArgs',
    'ImageExportTaskTagArgs',
    'ImageLaunchPermissionPermissionAdditionsArgs',
    'ImageLaunchPermissionPermissionRemovalsArgs',
    'ImageLaunchPermissionPermissionsToLaunchArgs',
    'ImagePermissionsToLaunchArgs',
    'ImageStateCommentArgs',
    'ImageTagArgs',
    'InternetServiceLinkTagArgs',
    'InternetServiceTagArgs',
    'LoadBalancerAccessLogArgs',
    'LoadBalancerApplicationStickyCookiePolicyArgs',
    'LoadBalancerAttributesAccessLogArgs',
    'LoadBalancerAttributesApplicationStickyCookiePolicyArgs',
    'LoadBalancerAttributesHealthCheckArgs',
    'LoadBalancerAttributesListenerArgs',
    'LoadBalancerAttributesLoadBalancerStickyCookiePolicyArgs',
    'LoadBalancerAttributesSourceSecurityGroupArgs',
    'LoadBalancerAttributesTagArgs',
    'LoadBalancerHealthCheckArgs',
    'LoadBalancerListenerArgs',
    'LoadBalancerLoadBalancerStickyCookiePolicyArgs',
    'LoadBalancerPolicyAccessLogArgs',
    'LoadBalancerPolicyApplicationStickyCookiePolicyArgs',
    'LoadBalancerPolicyHealthCheckArgs',
    'LoadBalancerPolicyListenerArgs',
    'LoadBalancerPolicyLoadBalancerStickyCookiePolicyArgs',
    'LoadBalancerPolicySourceSecurityGroupArgs',
    'LoadBalancerPolicyTagArgs',
    'LoadBalancerSourceSecurityGroupArgs',
    'LoadBalancerTagArgs',
    'NatServicePublicIpArgs',
    'NatServiceTagArgs',
    'NetAccessPointTagArgs',
    'NetAttributesTagArgs',
    'NetPeeringAccepterNetArgs',
    'NetPeeringAcceptionAccepterNetArgs',
    'NetPeeringAcceptionSourceNetArgs',
    'NetPeeringAcceptionStateArgs',
    'NetPeeringAcceptionTagArgs',
    'NetPeeringSourceNetArgs',
    'NetPeeringStateArgs',
    'NetPeeringTagArgs',
    'NetTagArgs',
    'NicLinkNicArgs',
    'NicLinkPublicIpArgs',
    'NicPrivateIpArgs',
    'NicPrivateIpLinkPublicIpArgs',
    'NicSecurityGroupArgs',
    'NicTagArgs',
    'OutboundRuleRuleArgs',
    'OutboundRuleRuleSecurityGroupsMemberArgs',
    'ProviderEndpointArgs',
    'PublicIpLinkTagArgs',
    'PublicIpTagArgs',
    'RouteTableLinkRouteTableArgs',
    'RouteTableRouteArgs',
    'RouteTableRoutePropagatingVirtualGatewayArgs',
    'RouteTableTagArgs',
    'SecurityGroupInboundRuleArgs',
    'SecurityGroupOutboundRuleArgs',
    'SecurityGroupRuleRuleArgs',
    'SecurityGroupRuleRuleSecurityGroupsMemberArgs',
    'SecurityGroupTagArgs',
    'SnapshotAttributesPermissionsToCreateVolumeAdditionsArgs',
    'SnapshotAttributesPermissionsToCreateVolumeRemovalArgs',
    'SnapshotExportTaskOsuExportArgs',
    'SnapshotExportTaskOsuExportOsuApiKeyArgs',
    'SnapshotExportTaskTagArgs',
    'SnapshotPermissionsToCreateVolumeArgs',
    'SnapshotTagArgs',
    'SubnetTagArgs',
    'TagTagArgs',
    'VirtualGatewayLinkNetToVirtualGatewayLinkArgs',
    'VirtualGatewayNetToVirtualGatewayLinkArgs',
    'VirtualGatewayTagArgs',
    'VmBlockDeviceMappingArgs',
    'VmBlockDeviceMappingBsuArgs',
    'VmBlockDeviceMappingsCreatedArgs',
    'VmBlockDeviceMappingsCreatedBsuArgs',
    'VmNicArgs',
    'VmNicLinkNicArgs',
    'VmNicLinkPublicIpArgs',
    'VmNicPrivateIpArgs',
    'VmNicPrivateIpLinkPublicIpArgs',
    'VmNicSecurityGroupArgs',
    'VmSecurityGroupArgs',
    'VmTagArgs',
    'VolumeLinkedVolumeArgs',
    'VolumeTagArgs',
    'VpnConnectionRouteArgs',
    'VpnConnectionTagArgs',
    'VpnConnectionVgwTelemetryArgs',
    'GetAccessKeyFilterArgs',
    'GetAccessKeysFilterArgs',
    'GetApiAccessRuleFilterArgs',
    'GetApiAccessRulesFilterArgs',
    'GetCaFilterArgs',
    'GetCasFilterArgs',
    'GetClientGatewayFilterArgs',
    'GetClientGatewaysFilterArgs',
    'GetDhcpOptionFilterArgs',
    'GetDhcpOptionsFilterArgs',
    'GetFlexibleGpuCatalogFilterArgs',
    'GetFlexibleGpuFilterArgs',
    'GetFlexibleGpusFilterArgs',
    'GetImageBlockDeviceMappingArgs',
    'GetImageBlockDeviceMappingBsusArgs',
    'GetImageExportTaskFilterArgs',
    'GetImageExportTasksFilterArgs',
    'GetImageFilterArgs',
    'GetImagesFilterArgs',
    'GetInternetServiceFilterArgs',
    'GetInternetServicesFilterArgs',
    'GetKeypairFilterArgs',
    'GetKeypairsFilterArgs',
    'GetLoadBalancerAccessLogArgs',
    'GetLoadBalancerFilterArgs',
    'GetLoadBalancerHealthCheckArgs',
    'GetLoadBalancerListenerArgs',
    'GetLoadBalancerTagArgs',
    'GetLoadBalancerTagsFilterArgs',
    'GetLoadBalancerVmHealthFilterArgs',
    'GetLoadBalancersFilterArgs',
    'GetNatServiceFilterArgs',
    'GetNatServicesFilterArgs',
    'GetNetAccessPointFilterArgs',
    'GetNetAccessPointServicesFilterArgs',
    'GetNetAccessPointsFilterArgs',
    'GetNetFilterArgs',
    'GetNetPeeringFilterArgs',
    'GetNetPeeringsFilterArgs',
    'GetNetsFilterArgs',
    'GetNicFilterArgs',
    'GetNicsFilterArgs',
    'GetProductTypeFilterArgs',
    'GetProductTypesFilterArgs',
    'GetPublicIpFilterArgs',
    'GetPublicIpsFilterArgs',
    'GetQuotaFilterArgs',
    'GetQuotasFilterArgs',
    'GetRouteTableFilterArgs',
    'GetRouteTablesFilterArgs',
    'GetSecurityGroupFilterArgs',
    'GetSecurityGroupsFilterArgs',
    'GetServerCertificateFilterArgs',
    'GetServerCertificatesFilterArgs',
    'GetSnapshotExportTaskFilterArgs',
    'GetSnapshotExportTasksFilterArgs',
    'GetSnapshotFilterArgs',
    'GetSnapshotsFilterArgs',
    'GetSubnetFilterArgs',
    'GetSubnetsFilterArgs',
    'GetSubregionsFilterArgs',
    'GetTagFilterArgs',
    'GetVirtualGatewayFilterArgs',
    'GetVirtualGatewaysFilterArgs',
    'GetVmBlockDeviceMappingsCreatedArgs',
    'GetVmBlockDeviceMappingsCreatedBsuArgs',
    'GetVmFilterArgs',
    'GetVmNicArgs',
    'GetVmNicLinkNicArgs',
    'GetVmNicLinkPublicIpArgs',
    'GetVmNicPrivateIpArgs',
    'GetVmNicPrivateIpLinkPublicIpArgs',
    'GetVmNicSecurityGroupArgs',
    'GetVmStateFilterArgs',
    'GetVmStatesFilterArgs',
    'GetVmTypesFilterArgs',
    'GetVmsFilterArgs',
    'GetVolumeFilterArgs',
    'GetVolumesFilterArgs',
    'GetVpnConnectionFilterArgs',
    'GetVpnConnectionsFilterArgs',
]

@pulumi.input_type
class ClientGatewayTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DhcpOptionTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ImageBlockDeviceMappingArgs:
    def __init__(__self__, *,
                 bsus: Optional[pulumi.Input[Sequence[pulumi.Input['ImageBlockDeviceMappingBsusArgs']]]] = None,
                 device_name: Optional[pulumi.Input[str]] = None,
                 virtual_device_name: Optional[pulumi.Input[str]] = None):
        if bsus is not None:
            pulumi.set(__self__, "bsus", bsus)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if virtual_device_name is not None:
            pulumi.set(__self__, "virtual_device_name", virtual_device_name)

    @property
    @pulumi.getter
    def bsus(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageBlockDeviceMappingBsusArgs']]]]:
        return pulumi.get(self, "bsus")

    @bsus.setter
    def bsus(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageBlockDeviceMappingBsusArgs']]]]):
        pulumi.set(self, "bsus", value)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter(name="virtualDeviceName")
    def virtual_device_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_device_name")

    @virtual_device_name.setter
    def virtual_device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_device_name", value)


@pulumi.input_type
class ImageBlockDeviceMappingBsusArgs:
    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[pulumi.Input[bool]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None):
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_on_vm_deletion")

    @delete_on_vm_deletion.setter
    def delete_on_vm_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_on_vm_deletion", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_type", value)


@pulumi.input_type
class ImageExportTaskOsuExportArgs:
    def __init__(__self__, *,
                 disk_image_format: pulumi.Input[str],
                 osu_bucket: pulumi.Input[str],
                 osu_api_keys: Optional[pulumi.Input[Sequence[pulumi.Input['ImageExportTaskOsuExportOsuApiKeyArgs']]]] = None,
                 osu_manifest_url: Optional[pulumi.Input[str]] = None,
                 osu_prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "disk_image_format", disk_image_format)
        pulumi.set(__self__, "osu_bucket", osu_bucket)
        if osu_api_keys is not None:
            pulumi.set(__self__, "osu_api_keys", osu_api_keys)
        if osu_manifest_url is not None:
            pulumi.set(__self__, "osu_manifest_url", osu_manifest_url)
        if osu_prefix is not None:
            pulumi.set(__self__, "osu_prefix", osu_prefix)

    @property
    @pulumi.getter(name="diskImageFormat")
    def disk_image_format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "disk_image_format")

    @disk_image_format.setter
    def disk_image_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_image_format", value)

    @property
    @pulumi.getter(name="osuBucket")
    def osu_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "osu_bucket")

    @osu_bucket.setter
    def osu_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "osu_bucket", value)

    @property
    @pulumi.getter(name="osuApiKeys")
    def osu_api_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageExportTaskOsuExportOsuApiKeyArgs']]]]:
        return pulumi.get(self, "osu_api_keys")

    @osu_api_keys.setter
    def osu_api_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageExportTaskOsuExportOsuApiKeyArgs']]]]):
        pulumi.set(self, "osu_api_keys", value)

    @property
    @pulumi.getter(name="osuManifestUrl")
    def osu_manifest_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "osu_manifest_url")

    @osu_manifest_url.setter
    def osu_manifest_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_manifest_url", value)

    @property
    @pulumi.getter(name="osuPrefix")
    def osu_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "osu_prefix")

    @osu_prefix.setter
    def osu_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_prefix", value)


@pulumi.input_type
class ImageExportTaskOsuExportOsuApiKeyArgs:
    def __init__(__self__, *,
                 api_key_id: pulumi.Input[str],
                 secret_key: pulumi.Input[str]):
        pulumi.set(__self__, "api_key_id", api_key_id)
        pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key_id")

    @api_key_id.setter
    def api_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key_id", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class ImageExportTaskTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ImageLaunchPermissionPermissionAdditionsArgs:
    def __init__(__self__, *,
                 account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 global_permission: Optional[pulumi.Input[str]] = None):
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "account_ids")

    @account_ids.setter
    def account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_ids", value)

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_permission")

    @global_permission.setter
    def global_permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_permission", value)


@pulumi.input_type
class ImageLaunchPermissionPermissionRemovalsArgs:
    def __init__(__self__, *,
                 account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 global_permission: Optional[pulumi.Input[str]] = None):
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "account_ids")

    @account_ids.setter
    def account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_ids", value)

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_permission")

    @global_permission.setter
    def global_permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_permission", value)


@pulumi.input_type
class ImageLaunchPermissionPermissionsToLaunchArgs:
    def __init__(__self__, *,
                 account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 global_permission: Optional[pulumi.Input[str]] = None):
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "account_ids")

    @account_ids.setter
    def account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_ids", value)

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "global_permission")

    @global_permission.setter
    def global_permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_permission", value)


@pulumi.input_type
class ImagePermissionsToLaunchArgs:
    def __init__(__self__, *,
                 account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 global_permission: Optional[pulumi.Input[bool]] = None):
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "account_ids")

    @account_ids.setter
    def account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_ids", value)

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_permission")

    @global_permission.setter
    def global_permission(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_permission", value)


@pulumi.input_type
class ImageStateCommentArgs:
    def __init__(__self__, *,
                 state_code: Optional[pulumi.Input[str]] = None,
                 state_message: Optional[pulumi.Input[str]] = None):
        if state_code is not None:
            pulumi.set(__self__, "state_code", state_code)
        if state_message is not None:
            pulumi.set(__self__, "state_message", state_message)

    @property
    @pulumi.getter(name="stateCode")
    def state_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state_code")

    @state_code.setter
    def state_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state_code", value)

    @property
    @pulumi.getter(name="stateMessage")
    def state_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state_message")

    @state_message.setter
    def state_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state_message", value)


@pulumi.input_type
class ImageTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InternetServiceLinkTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InternetServiceTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LoadBalancerAccessLogArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 osu_bucket_name: Optional[pulumi.Input[str]] = None,
                 osu_bucket_prefix: Optional[pulumi.Input[str]] = None,
                 publication_interval: Optional[pulumi.Input[int]] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if osu_bucket_name is not None:
            pulumi.set(__self__, "osu_bucket_name", osu_bucket_name)
        if osu_bucket_prefix is not None:
            pulumi.set(__self__, "osu_bucket_prefix", osu_bucket_prefix)
        if publication_interval is not None:
            pulumi.set(__self__, "publication_interval", publication_interval)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="osuBucketName")
    def osu_bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "osu_bucket_name")

    @osu_bucket_name.setter
    def osu_bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_bucket_name", value)

    @property
    @pulumi.getter(name="osuBucketPrefix")
    def osu_bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "osu_bucket_prefix")

    @osu_bucket_prefix.setter
    def osu_bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_bucket_prefix", value)

    @property
    @pulumi.getter(name="publicationInterval")
    def publication_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "publication_interval")

    @publication_interval.setter
    def publication_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "publication_interval", value)


@pulumi.input_type
class LoadBalancerApplicationStickyCookiePolicyArgs:
    def __init__(__self__, *,
                 cookie_name: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)


@pulumi.input_type
class LoadBalancerAttributesAccessLogArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 osu_bucket_name: Optional[pulumi.Input[str]] = None,
                 osu_bucket_prefix: Optional[pulumi.Input[str]] = None,
                 publication_interval: Optional[pulumi.Input[int]] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if osu_bucket_name is not None:
            pulumi.set(__self__, "osu_bucket_name", osu_bucket_name)
        if osu_bucket_prefix is not None:
            pulumi.set(__self__, "osu_bucket_prefix", osu_bucket_prefix)
        if publication_interval is not None:
            pulumi.set(__self__, "publication_interval", publication_interval)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="osuBucketName")
    def osu_bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "osu_bucket_name")

    @osu_bucket_name.setter
    def osu_bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_bucket_name", value)

    @property
    @pulumi.getter(name="osuBucketPrefix")
    def osu_bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "osu_bucket_prefix")

    @osu_bucket_prefix.setter
    def osu_bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_bucket_prefix", value)

    @property
    @pulumi.getter(name="publicationInterval")
    def publication_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "publication_interval")

    @publication_interval.setter
    def publication_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "publication_interval", value)


@pulumi.input_type
class LoadBalancerAttributesApplicationStickyCookiePolicyArgs:
    def __init__(__self__, *,
                 cookie_name: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)


@pulumi.input_type
class LoadBalancerAttributesHealthCheckArgs:
    def __init__(__self__, *,
                 check_interval: pulumi.Input[int],
                 healthy_threshold: pulumi.Input[int],
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str],
                 timeout: pulumi.Input[int],
                 unhealthy_threshold: pulumi.Input[int],
                 path: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "check_interval", check_interval)
        pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> pulumi.Input[int]:
        return pulumi.get(self, "check_interval")

    @check_interval.setter
    def check_interval(self, value: pulumi.Input[int]):
        pulumi.set(self, "check_interval", value)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "healthy_threshold", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Input[int]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> pulumi.Input[int]:
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: pulumi.Input[int]):
        pulumi.set(self, "unhealthy_threshold", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class LoadBalancerAttributesListenerArgs:
    def __init__(__self__, *,
                 backend_port: Optional[pulumi.Input[int]] = None,
                 backend_protocol: Optional[pulumi.Input[str]] = None,
                 load_balancer_port: Optional[pulumi.Input[int]] = None,
                 load_balancer_protocol: Optional[pulumi.Input[str]] = None,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_certificate_id: Optional[pulumi.Input[str]] = None):
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if backend_protocol is not None:
            pulumi.set(__self__, "backend_protocol", backend_protocol)
        if load_balancer_port is not None:
            pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        if load_balancer_protocol is not None:
            pulumi.set(__self__, "load_balancer_protocol", load_balancer_protocol)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if server_certificate_id is not None:
            pulumi.set(__self__, "server_certificate_id", server_certificate_id)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "backend_port")

    @backend_port.setter
    def backend_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backend_port", value)

    @property
    @pulumi.getter(name="backendProtocol")
    def backend_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backend_protocol")

    @backend_protocol.setter
    def backend_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend_protocol", value)

    @property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "load_balancer_port")

    @load_balancer_port.setter
    def load_balancer_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "load_balancer_port", value)

    @property
    @pulumi.getter(name="loadBalancerProtocol")
    def load_balancer_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_protocol")

    @load_balancer_protocol.setter
    def load_balancer_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_protocol", value)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_names", value)

    @property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_id")

    @server_certificate_id.setter
    def server_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_id", value)


@pulumi.input_type
class LoadBalancerAttributesLoadBalancerStickyCookiePolicyArgs:
    def __init__(__self__, *,
                 policy_name: Optional[pulumi.Input[str]] = None):
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)


@pulumi.input_type
class LoadBalancerAttributesSourceSecurityGroupArgs:
    def __init__(__self__, *,
                 security_group_account_id: Optional[pulumi.Input[str]] = None,
                 security_group_name: Optional[pulumi.Input[str]] = None):
        if security_group_account_id is not None:
            pulumi.set(__self__, "security_group_account_id", security_group_account_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupAccountId")
    def security_group_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_account_id")

    @security_group_account_id.setter
    def security_group_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_account_id", value)

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_name")

    @security_group_name.setter
    def security_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_name", value)


@pulumi.input_type
class LoadBalancerAttributesTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LoadBalancerHealthCheckArgs:
    def __init__(__self__, *,
                 check_interval: Optional[pulumi.Input[str]] = None,
                 healthy_threshold: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[str]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[str]] = None):
        if check_interval is not None:
            pulumi.set(__self__, "check_interval", check_interval)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check_interval")

    @check_interval.setter
    def check_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_interval", value)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthy_threshold", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unhealthy_threshold", value)


@pulumi.input_type
class LoadBalancerListenerArgs:
    def __init__(__self__, *,
                 backend_port: pulumi.Input[int],
                 backend_protocol: pulumi.Input[str],
                 load_balancer_port: pulumi.Input[int],
                 load_balancer_protocol: pulumi.Input[str],
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_certificate_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "backend_port", backend_port)
        pulumi.set(__self__, "backend_protocol", backend_protocol)
        pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        pulumi.set(__self__, "load_balancer_protocol", load_balancer_protocol)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if server_certificate_id is not None:
            pulumi.set(__self__, "server_certificate_id", server_certificate_id)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "backend_port")

    @backend_port.setter
    def backend_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "backend_port", value)

    @property
    @pulumi.getter(name="backendProtocol")
    def backend_protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "backend_protocol")

    @backend_protocol.setter
    def backend_protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "backend_protocol", value)

    @property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "load_balancer_port")

    @load_balancer_port.setter
    def load_balancer_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "load_balancer_port", value)

    @property
    @pulumi.getter(name="loadBalancerProtocol")
    def load_balancer_protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "load_balancer_protocol")

    @load_balancer_protocol.setter
    def load_balancer_protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "load_balancer_protocol", value)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_names", value)

    @property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_id")

    @server_certificate_id.setter
    def server_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_id", value)


@pulumi.input_type
class LoadBalancerLoadBalancerStickyCookiePolicyArgs:
    def __init__(__self__, *,
                 policy_name: Optional[pulumi.Input[str]] = None):
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)


@pulumi.input_type
class LoadBalancerPolicyAccessLogArgs:
    def __init__(__self__, *,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 osu_bucket_name: Optional[pulumi.Input[str]] = None,
                 osu_bucket_prefix: Optional[pulumi.Input[str]] = None,
                 publication_interval: Optional[pulumi.Input[int]] = None):
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if osu_bucket_name is not None:
            pulumi.set(__self__, "osu_bucket_name", osu_bucket_name)
        if osu_bucket_prefix is not None:
            pulumi.set(__self__, "osu_bucket_prefix", osu_bucket_prefix)
        if publication_interval is not None:
            pulumi.set(__self__, "publication_interval", publication_interval)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="osuBucketName")
    def osu_bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "osu_bucket_name")

    @osu_bucket_name.setter
    def osu_bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_bucket_name", value)

    @property
    @pulumi.getter(name="osuBucketPrefix")
    def osu_bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "osu_bucket_prefix")

    @osu_bucket_prefix.setter
    def osu_bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_bucket_prefix", value)

    @property
    @pulumi.getter(name="publicationInterval")
    def publication_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "publication_interval")

    @publication_interval.setter
    def publication_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "publication_interval", value)


@pulumi.input_type
class LoadBalancerPolicyApplicationStickyCookiePolicyArgs:
    def __init__(__self__, *,
                 cookie_name: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None):
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)


@pulumi.input_type
class LoadBalancerPolicyHealthCheckArgs:
    def __init__(__self__, *,
                 check_interval: Optional[pulumi.Input[str]] = None,
                 healthy_threshold: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[str]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[str]] = None):
        if check_interval is not None:
            pulumi.set(__self__, "check_interval", check_interval)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "check_interval")

    @check_interval.setter
    def check_interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check_interval", value)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "healthy_threshold", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unhealthy_threshold", value)


@pulumi.input_type
class LoadBalancerPolicyListenerArgs:
    def __init__(__self__, *,
                 backend_port: Optional[pulumi.Input[int]] = None,
                 backend_protocol: Optional[pulumi.Input[str]] = None,
                 load_balancer_port: Optional[pulumi.Input[int]] = None,
                 load_balancer_protocol: Optional[pulumi.Input[str]] = None,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_certificate_id: Optional[pulumi.Input[str]] = None):
        if backend_port is not None:
            pulumi.set(__self__, "backend_port", backend_port)
        if backend_protocol is not None:
            pulumi.set(__self__, "backend_protocol", backend_protocol)
        if load_balancer_port is not None:
            pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        if load_balancer_protocol is not None:
            pulumi.set(__self__, "load_balancer_protocol", load_balancer_protocol)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if server_certificate_id is not None:
            pulumi.set(__self__, "server_certificate_id", server_certificate_id)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "backend_port")

    @backend_port.setter
    def backend_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backend_port", value)

    @property
    @pulumi.getter(name="backendProtocol")
    def backend_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backend_protocol")

    @backend_protocol.setter
    def backend_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backend_protocol", value)

    @property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "load_balancer_port")

    @load_balancer_port.setter
    def load_balancer_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "load_balancer_port", value)

    @property
    @pulumi.getter(name="loadBalancerProtocol")
    def load_balancer_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_protocol")

    @load_balancer_protocol.setter
    def load_balancer_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_protocol", value)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_names", value)

    @property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_certificate_id")

    @server_certificate_id.setter
    def server_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_id", value)


@pulumi.input_type
class LoadBalancerPolicyLoadBalancerStickyCookiePolicyArgs:
    def __init__(__self__, *,
                 policy_name: Optional[pulumi.Input[str]] = None):
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)


@pulumi.input_type
class LoadBalancerPolicySourceSecurityGroupArgs:
    def __init__(__self__, *,
                 security_group_account_id: Optional[pulumi.Input[str]] = None,
                 security_group_name: Optional[pulumi.Input[str]] = None):
        if security_group_account_id is not None:
            pulumi.set(__self__, "security_group_account_id", security_group_account_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupAccountId")
    def security_group_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_account_id")

    @security_group_account_id.setter
    def security_group_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_account_id", value)

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_name")

    @security_group_name.setter
    def security_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_name", value)


@pulumi.input_type
class LoadBalancerPolicyTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LoadBalancerSourceSecurityGroupArgs:
    def __init__(__self__, *,
                 security_group_account_id: Optional[pulumi.Input[str]] = None,
                 security_group_name: Optional[pulumi.Input[str]] = None):
        if security_group_account_id is not None:
            pulumi.set(__self__, "security_group_account_id", security_group_account_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupAccountId")
    def security_group_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_account_id")

    @security_group_account_id.setter
    def security_group_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_account_id", value)

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_name")

    @security_group_name.setter
    def security_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_name", value)


@pulumi.input_type
class LoadBalancerTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NatServicePublicIpArgs:
    def __init__(__self__, *,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 public_ip_id: Optional[pulumi.Input[str]] = None):
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_id is not None:
            pulumi.set(__self__, "public_ip_id", public_ip_id)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip_id")

    @public_ip_id.setter
    def public_ip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip_id", value)


@pulumi.input_type
class NatServiceTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NetAccessPointTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NetAttributesTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NetPeeringAccepterNetArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 ip_range: Optional[pulumi.Input[str]] = None,
                 net_id: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if ip_range is not None:
            pulumi.set(__self__, "ip_range", ip_range)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_range")

    @ip_range.setter
    def ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)


@pulumi.input_type
class NetPeeringAcceptionAccepterNetArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 ip_range: Optional[pulumi.Input[str]] = None,
                 net_id: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if ip_range is not None:
            pulumi.set(__self__, "ip_range", ip_range)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_range")

    @ip_range.setter
    def ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)


@pulumi.input_type
class NetPeeringAcceptionSourceNetArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 ip_range: Optional[pulumi.Input[str]] = None,
                 net_id: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if ip_range is not None:
            pulumi.set(__self__, "ip_range", ip_range)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_range")

    @ip_range.setter
    def ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)


@pulumi.input_type
class NetPeeringAcceptionStateArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class NetPeeringAcceptionTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NetPeeringSourceNetArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 ip_range: Optional[pulumi.Input[str]] = None,
                 net_id: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if ip_range is not None:
            pulumi.set(__self__, "ip_range", ip_range)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="ipRange")
    def ip_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_range")

    @ip_range.setter
    def ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_range", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)


@pulumi.input_type
class NetPeeringStateArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if message is not None:
            pulumi.set(__self__, "message", message)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class NetPeeringTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NetTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class NicLinkNicArgs:
    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[pulumi.Input[str]] = None,
                 device_number: Optional[pulumi.Input[int]] = None,
                 link_nic_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 vm_account_id: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None):
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if device_number is not None:
            pulumi.set(__self__, "device_number", device_number)
        if link_nic_id is not None:
            pulumi.set(__self__, "link_nic_id", link_nic_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vm_account_id is not None:
            pulumi.set(__self__, "vm_account_id", vm_account_id)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delete_on_vm_deletion")

    @delete_on_vm_deletion.setter
    def delete_on_vm_deletion(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_on_vm_deletion", value)

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "device_number")

    @device_number.setter
    def device_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_number", value)

    @property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_nic_id")

    @link_nic_id.setter
    def link_nic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_nic_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_account_id")

    @vm_account_id.setter
    def vm_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_account_id", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_id", value)


@pulumi.input_type
class NicLinkPublicIpArgs:
    def __init__(__self__, *,
                 link_public_ip_id: Optional[pulumi.Input[str]] = None,
                 public_dns_name: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 public_ip_account_id: Optional[pulumi.Input[str]] = None,
                 public_ip_id: Optional[pulumi.Input[str]] = None):
        if link_public_ip_id is not None:
            pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_account_id is not None:
            pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)
        if public_ip_id is not None:
            pulumi.set(__self__, "public_ip_id", public_ip_id)

    @property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_public_ip_id")

    @link_public_ip_id.setter
    def link_public_ip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_public_ip_id", value)

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_dns_name")

    @public_dns_name.setter
    def public_dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_dns_name", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip_account_id")

    @public_ip_account_id.setter
    def public_ip_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip_account_id", value)

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip_id")

    @public_ip_id.setter
    def public_ip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip_id", value)


@pulumi.input_type
class NicPrivateIpArgs:
    def __init__(__self__, *,
                 is_primary: Optional[pulumi.Input[bool]] = None,
                 link_public_ip: Optional[pulumi.Input['NicPrivateIpLinkPublicIpArgs']] = None,
                 private_dns_name: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None):
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if link_public_ip is not None:
            pulumi.set(__self__, "link_public_ip", link_public_ip)
        if private_dns_name is not None:
            pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_primary")

    @is_primary.setter
    def is_primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_primary", value)

    @property
    @pulumi.getter(name="linkPublicIp")
    def link_public_ip(self) -> Optional[pulumi.Input['NicPrivateIpLinkPublicIpArgs']]:
        return pulumi.get(self, "link_public_ip")

    @link_public_ip.setter
    def link_public_ip(self, value: Optional[pulumi.Input['NicPrivateIpLinkPublicIpArgs']]):
        pulumi.set(self, "link_public_ip", value)

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_dns_name")

    @private_dns_name.setter
    def private_dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_dns_name", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)


@pulumi.input_type
class NicPrivateIpLinkPublicIpArgs:
    def __init__(__self__, *,
                 link_public_ip_id: Optional[pulumi.Input[str]] = None,
                 public_dns_name: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 public_ip_account_id: Optional[pulumi.Input[str]] = None,
                 public_ip_id: Optional[pulumi.Input[str]] = None):
        if link_public_ip_id is not None:
            pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_account_id is not None:
            pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)
        if public_ip_id is not None:
            pulumi.set(__self__, "public_ip_id", public_ip_id)

    @property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_public_ip_id")

    @link_public_ip_id.setter
    def link_public_ip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_public_ip_id", value)

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_dns_name")

    @public_dns_name.setter
    def public_dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_dns_name", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip_account_id")

    @public_ip_account_id.setter
    def public_ip_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip_account_id", value)

    @property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip_id")

    @public_ip_id.setter
    def public_ip_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip_id", value)


@pulumi.input_type
class NicSecurityGroupArgs:
    def __init__(__self__, *,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 security_group_name: Optional[pulumi.Input[str]] = None):
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_name")

    @security_group_name.setter
    def security_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_name", value)


@pulumi.input_type
class NicTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class OutboundRuleRuleArgs:
    def __init__(__self__, *,
                 from_port_range: Optional[pulumi.Input[int]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_groups_members: Optional[pulumi.Input[Sequence[pulumi.Input['OutboundRuleRuleSecurityGroupsMemberArgs']]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 to_port_range: Optional[pulumi.Input[int]] = None):
        if from_port_range is not None:
            pulumi.set(__self__, "from_port_range", from_port_range)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if security_groups_members is not None:
            pulumi.set(__self__, "security_groups_members", security_groups_members)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if to_port_range is not None:
            pulumi.set(__self__, "to_port_range", to_port_range)

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "from_port_range")

    @from_port_range.setter
    def from_port_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "from_port_range", value)

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_protocol")

    @ip_protocol.setter
    def ip_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_protocol", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['OutboundRuleRuleSecurityGroupsMemberArgs']]]]:
        return pulumi.get(self, "security_groups_members")

    @security_groups_members.setter
    def security_groups_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['OutboundRuleRuleSecurityGroupsMemberArgs']]]]):
        pulumi.set(self, "security_groups_members", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "to_port_range")

    @to_port_range.setter
    def to_port_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "to_port_range", value)


@pulumi.input_type
class OutboundRuleRuleSecurityGroupsMemberArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 security_group_name: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_name")

    @security_group_name.setter
    def security_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_name", value)


@pulumi.input_type
class ProviderEndpointArgs:
    def __init__(__self__, *,
                 api: Optional[pulumi.Input[str]] = None):
        if api is not None:
            pulumi.set(__self__, "api", api)

    @property
    @pulumi.getter
    def api(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api")

    @api.setter
    def api(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api", value)


@pulumi.input_type
class PublicIpLinkTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PublicIpTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RouteTableLinkRouteTableArgs:
    def __init__(__self__, *,
                 link_route_table_id: Optional[pulumi.Input[str]] = None,
                 main: Optional[pulumi.Input[bool]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 route_table_to_subnet_link_id: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        if link_route_table_id is not None:
            pulumi.set(__self__, "link_route_table_id", link_route_table_id)
        if main is not None:
            pulumi.set(__self__, "main", main)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if route_table_to_subnet_link_id is not None:
            pulumi.set(__self__, "route_table_to_subnet_link_id", route_table_to_subnet_link_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="linkRouteTableId")
    def link_route_table_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_route_table_id")

    @link_route_table_id.setter
    def link_route_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_route_table_id", value)

    @property
    @pulumi.getter
    def main(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "main")

    @main.setter
    def main(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "main", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_table_id", value)

    @property
    @pulumi.getter(name="routeTableToSubnetLinkId")
    def route_table_to_subnet_link_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_table_to_subnet_link_id")

    @route_table_to_subnet_link_id.setter
    def route_table_to_subnet_link_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_table_to_subnet_link_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class RouteTableRouteArgs:
    def __init__(__self__, *,
                 creation_method: Optional[pulumi.Input[str]] = None,
                 destination_ip_range: Optional[pulumi.Input[str]] = None,
                 destination_service_id: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 nat_service_id: Optional[pulumi.Input[str]] = None,
                 net_access_point_id: Optional[pulumi.Input[str]] = None,
                 net_peering_id: Optional[pulumi.Input[str]] = None,
                 nic_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 vm_account_id: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None):
        if creation_method is not None:
            pulumi.set(__self__, "creation_method", creation_method)
        if destination_ip_range is not None:
            pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        if destination_service_id is not None:
            pulumi.set(__self__, "destination_service_id", destination_service_id)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if nat_service_id is not None:
            pulumi.set(__self__, "nat_service_id", nat_service_id)
        if net_access_point_id is not None:
            pulumi.set(__self__, "net_access_point_id", net_access_point_id)
        if net_peering_id is not None:
            pulumi.set(__self__, "net_peering_id", net_peering_id)
        if nic_id is not None:
            pulumi.set(__self__, "nic_id", nic_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vm_account_id is not None:
            pulumi.set(__self__, "vm_account_id", vm_account_id)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="creationMethod")
    def creation_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "creation_method")

    @creation_method.setter
    def creation_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_method", value)

    @property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_ip_range")

    @destination_ip_range.setter
    def destination_ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_ip_range", value)

    @property
    @pulumi.getter(name="destinationServiceId")
    def destination_service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_service_id")

    @destination_service_id.setter
    def destination_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_service_id", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat_service_id")

    @nat_service_id.setter
    def nat_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_service_id", value)

    @property
    @pulumi.getter(name="netAccessPointId")
    def net_access_point_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_access_point_id")

    @net_access_point_id.setter
    def net_access_point_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_access_point_id", value)

    @property
    @pulumi.getter(name="netPeeringId")
    def net_peering_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_peering_id")

    @net_peering_id.setter
    def net_peering_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_peering_id", value)

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nic_id")

    @nic_id.setter
    def nic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nic_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_account_id")

    @vm_account_id.setter
    def vm_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_account_id", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_id", value)


@pulumi.input_type
class RouteTableRoutePropagatingVirtualGatewayArgs:
    def __init__(__self__, *,
                 virtual_gateway_id: Optional[pulumi.Input[str]] = None):
        if virtual_gateway_id is not None:
            pulumi.set(__self__, "virtual_gateway_id", virtual_gateway_id)

    @property
    @pulumi.getter(name="virtualGatewayId")
    def virtual_gateway_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_gateway_id")

    @virtual_gateway_id.setter
    def virtual_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_gateway_id", value)


@pulumi.input_type
class RouteTableTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SecurityGroupInboundRuleArgs:
    def __init__(__self__, *,
                 from_port_range: Optional[pulumi.Input[int]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_groups_members: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 to_port_range: Optional[pulumi.Input[int]] = None):
        if from_port_range is not None:
            pulumi.set(__self__, "from_port_range", from_port_range)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if security_groups_members is not None:
            pulumi.set(__self__, "security_groups_members", security_groups_members)
        if to_port_range is not None:
            pulumi.set(__self__, "to_port_range", to_port_range)

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "from_port_range")

    @from_port_range.setter
    def from_port_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "from_port_range", value)

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_protocol")

    @ip_protocol.setter
    def ip_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_protocol", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        return pulumi.get(self, "security_groups_members")

    @security_groups_members.setter
    def security_groups_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "security_groups_members", value)

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "to_port_range")

    @to_port_range.setter
    def to_port_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "to_port_range", value)


@pulumi.input_type
class SecurityGroupOutboundRuleArgs:
    def __init__(__self__, *,
                 from_port_range: Optional[pulumi.Input[int]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_groups_members: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]] = None,
                 to_port_range: Optional[pulumi.Input[int]] = None):
        if from_port_range is not None:
            pulumi.set(__self__, "from_port_range", from_port_range)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if security_groups_members is not None:
            pulumi.set(__self__, "security_groups_members", security_groups_members)
        if to_port_range is not None:
            pulumi.set(__self__, "to_port_range", to_port_range)

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "from_port_range")

    @from_port_range.setter
    def from_port_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "from_port_range", value)

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_protocol")

    @ip_protocol.setter
    def ip_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_protocol", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]:
        return pulumi.get(self, "security_groups_members")

    @security_groups_members.setter
    def security_groups_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, Any]]]]]):
        pulumi.set(self, "security_groups_members", value)

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "to_port_range")

    @to_port_range.setter
    def to_port_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "to_port_range", value)


@pulumi.input_type
class SecurityGroupRuleRuleArgs:
    def __init__(__self__, *,
                 from_port_range: Optional[pulumi.Input[int]] = None,
                 ip_protocol: Optional[pulumi.Input[str]] = None,
                 ip_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_groups_members: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupRuleRuleSecurityGroupsMemberArgs']]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 to_port_range: Optional[pulumi.Input[int]] = None):
        if from_port_range is not None:
            pulumi.set(__self__, "from_port_range", from_port_range)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)
        if security_groups_members is not None:
            pulumi.set(__self__, "security_groups_members", security_groups_members)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if to_port_range is not None:
            pulumi.set(__self__, "to_port_range", to_port_range)

    @property
    @pulumi.getter(name="fromPortRange")
    def from_port_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "from_port_range")

    @from_port_range.setter
    def from_port_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "from_port_range", value)

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_protocol")

    @ip_protocol.setter
    def ip_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_protocol", value)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ip_ranges")

    @ip_ranges.setter
    def ip_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_ranges", value)

    @property
    @pulumi.getter(name="securityGroupsMembers")
    def security_groups_members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupRuleRuleSecurityGroupsMemberArgs']]]]:
        return pulumi.get(self, "security_groups_members")

    @security_groups_members.setter
    def security_groups_members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityGroupRuleRuleSecurityGroupsMemberArgs']]]]):
        pulumi.set(self, "security_groups_members", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="toPortRange")
    def to_port_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "to_port_range")

    @to_port_range.setter
    def to_port_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "to_port_range", value)


@pulumi.input_type
class SecurityGroupRuleRuleSecurityGroupsMemberArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 security_group_name: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_name")

    @security_group_name.setter
    def security_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_name", value)


@pulumi.input_type
class SecurityGroupTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SnapshotAttributesPermissionsToCreateVolumeAdditionsArgs:
    def __init__(__self__, *,
                 account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 global_permission: Optional[pulumi.Input[bool]] = None):
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "account_ids")

    @account_ids.setter
    def account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_ids", value)

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_permission")

    @global_permission.setter
    def global_permission(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_permission", value)


@pulumi.input_type
class SnapshotAttributesPermissionsToCreateVolumeRemovalArgs:
    def __init__(__self__, *,
                 account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 global_permission: Optional[pulumi.Input[bool]] = None):
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "account_ids")

    @account_ids.setter
    def account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_ids", value)

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_permission")

    @global_permission.setter
    def global_permission(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_permission", value)


@pulumi.input_type
class SnapshotExportTaskOsuExportArgs:
    def __init__(__self__, *,
                 disk_image_format: pulumi.Input[str],
                 osu_bucket: pulumi.Input[str],
                 osu_api_keys: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskOsuExportOsuApiKeyArgs']]]] = None,
                 osu_prefix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "disk_image_format", disk_image_format)
        pulumi.set(__self__, "osu_bucket", osu_bucket)
        if osu_api_keys is not None:
            pulumi.set(__self__, "osu_api_keys", osu_api_keys)
        if osu_prefix is not None:
            pulumi.set(__self__, "osu_prefix", osu_prefix)

    @property
    @pulumi.getter(name="diskImageFormat")
    def disk_image_format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "disk_image_format")

    @disk_image_format.setter
    def disk_image_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_image_format", value)

    @property
    @pulumi.getter(name="osuBucket")
    def osu_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "osu_bucket")

    @osu_bucket.setter
    def osu_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "osu_bucket", value)

    @property
    @pulumi.getter(name="osuApiKeys")
    def osu_api_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskOsuExportOsuApiKeyArgs']]]]:
        return pulumi.get(self, "osu_api_keys")

    @osu_api_keys.setter
    def osu_api_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskOsuExportOsuApiKeyArgs']]]]):
        pulumi.set(self, "osu_api_keys", value)

    @property
    @pulumi.getter(name="osuPrefix")
    def osu_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "osu_prefix")

    @osu_prefix.setter
    def osu_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "osu_prefix", value)


@pulumi.input_type
class SnapshotExportTaskOsuExportOsuApiKeyArgs:
    def __init__(__self__, *,
                 api_key_id: pulumi.Input[str],
                 secret_key: pulumi.Input[str]):
        pulumi.set(__self__, "api_key_id", api_key_id)
        pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key_id")

    @api_key_id.setter
    def api_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key_id", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class SnapshotExportTaskTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SnapshotPermissionsToCreateVolumeArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 global_permission: Optional[pulumi.Input[bool]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if global_permission is not None:
            pulumi.set(__self__, "global_permission", global_permission)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="globalPermission")
    def global_permission(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_permission")

    @global_permission.setter
    def global_permission(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_permission", value)


@pulumi.input_type
class SnapshotTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SubnetTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TagTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VirtualGatewayLinkNetToVirtualGatewayLinkArgs:
    def __init__(__self__, *,
                 net_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class VirtualGatewayNetToVirtualGatewayLinkArgs:
    def __init__(__self__, *,
                 net_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class VirtualGatewayTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VmBlockDeviceMappingArgs:
    def __init__(__self__, *,
                 bsu: Optional[pulumi.Input['VmBlockDeviceMappingBsuArgs']] = None,
                 device_name: Optional[pulumi.Input[str]] = None,
                 no_device: Optional[pulumi.Input[str]] = None,
                 virtual_device_name: Optional[pulumi.Input[str]] = None):
        if bsu is not None:
            pulumi.set(__self__, "bsu", bsu)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if no_device is not None:
            pulumi.set(__self__, "no_device", no_device)
        if virtual_device_name is not None:
            pulumi.set(__self__, "virtual_device_name", virtual_device_name)

    @property
    @pulumi.getter
    def bsu(self) -> Optional[pulumi.Input['VmBlockDeviceMappingBsuArgs']]:
        return pulumi.get(self, "bsu")

    @bsu.setter
    def bsu(self, value: Optional[pulumi.Input['VmBlockDeviceMappingBsuArgs']]):
        pulumi.set(self, "bsu", value)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter(name="noDevice")
    def no_device(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "no_device")

    @no_device.setter
    def no_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "no_device", value)

    @property
    @pulumi.getter(name="virtualDeviceName")
    def virtual_device_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_device_name")

    @virtual_device_name.setter
    def virtual_device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_device_name", value)


@pulumi.input_type
class VmBlockDeviceMappingBsuArgs:
    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[pulumi.Input[bool]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 volume_size: Optional[pulumi.Input[int]] = None,
                 volume_type: Optional[pulumi.Input[str]] = None):
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if volume_size is not None:
            pulumi.set(__self__, "volume_size", volume_size)
        if volume_type is not None:
            pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_on_vm_deletion")

    @delete_on_vm_deletion.setter
    def delete_on_vm_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_on_vm_deletion", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_type", value)


@pulumi.input_type
class VmBlockDeviceMappingsCreatedArgs:
    def __init__(__self__, *,
                 bsu: Optional[pulumi.Input['VmBlockDeviceMappingsCreatedBsuArgs']] = None,
                 device_name: Optional[pulumi.Input[str]] = None):
        if bsu is not None:
            pulumi.set(__self__, "bsu", bsu)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)

    @property
    @pulumi.getter
    def bsu(self) -> Optional[pulumi.Input['VmBlockDeviceMappingsCreatedBsuArgs']]:
        return pulumi.get(self, "bsu")

    @bsu.setter
    def bsu(self, value: Optional[pulumi.Input['VmBlockDeviceMappingsCreatedBsuArgs']]):
        pulumi.set(self, "bsu", value)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_name", value)


@pulumi.input_type
class VmBlockDeviceMappingsCreatedBsuArgs:
    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[pulumi.Input[bool]] = None,
                 link_date: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[int]] = None,
                 volume_id: Optional[pulumi.Input[float]] = None):
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if link_date is not None:
            pulumi.set(__self__, "link_date", link_date)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_on_vm_deletion")

    @delete_on_vm_deletion.setter
    def delete_on_vm_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_on_vm_deletion", value)

    @property
    @pulumi.getter(name="linkDate")
    def link_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_date")

    @link_date.setter
    def link_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_date", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "volume_id", value)


@pulumi.input_type
class VmNicArgs:
    def __init__(__self__, *,
                 device_number: pulumi.Input[int],
                 account_id: Optional[pulumi.Input[str]] = None,
                 delete_on_vm_deletion: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_source_dest_checked: Optional[pulumi.Input[bool]] = None,
                 link_nic: Optional[pulumi.Input['VmNicLinkNicArgs']] = None,
                 link_public_ips: Optional[pulumi.Input[Sequence[pulumi.Input['VmNicLinkPublicIpArgs']]]] = None,
                 mac_address: Optional[pulumi.Input[str]] = None,
                 net_id: Optional[pulumi.Input[str]] = None,
                 nic_id: Optional[pulumi.Input[str]] = None,
                 private_dns_name: Optional[pulumi.Input[str]] = None,
                 private_ips: Optional[pulumi.Input[Sequence[pulumi.Input['VmNicPrivateIpArgs']]]] = None,
                 secondary_private_ip_count: Optional[pulumi.Input[int]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input['VmNicSecurityGroupArgs']]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "device_number", device_number)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_source_dest_checked is not None:
            pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        if link_nic is not None:
            pulumi.set(__self__, "link_nic", link_nic)
        if link_public_ips is not None:
            pulumi.set(__self__, "link_public_ips", link_public_ips)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if nic_id is not None:
            pulumi.set(__self__, "nic_id", nic_id)
        if private_dns_name is not None:
            pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)
        if secondary_private_ip_count is not None:
            pulumi.set(__self__, "secondary_private_ip_count", secondary_private_ip_count)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "device_number")

    @device_number.setter
    def device_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "device_number", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_on_vm_deletion")

    @delete_on_vm_deletion.setter
    def delete_on_vm_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_on_vm_deletion", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_source_dest_checked")

    @is_source_dest_checked.setter
    def is_source_dest_checked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_source_dest_checked", value)

    @property
    @pulumi.getter(name="linkNic")
    def link_nic(self) -> Optional[pulumi.Input['VmNicLinkNicArgs']]:
        return pulumi.get(self, "link_nic")

    @link_nic.setter
    def link_nic(self, value: Optional[pulumi.Input['VmNicLinkNicArgs']]):
        pulumi.set(self, "link_nic", value)

    @property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmNicLinkPublicIpArgs']]]]:
        return pulumi.get(self, "link_public_ips")

    @link_public_ips.setter
    def link_public_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmNicLinkPublicIpArgs']]]]):
        pulumi.set(self, "link_public_ips", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nic_id")

    @nic_id.setter
    def nic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nic_id", value)

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_dns_name")

    @private_dns_name.setter
    def private_dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_dns_name", value)

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmNicPrivateIpArgs']]]]:
        return pulumi.get(self, "private_ips")

    @private_ips.setter
    def private_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmNicPrivateIpArgs']]]]):
        pulumi.set(self, "private_ips", value)

    @property
    @pulumi.getter(name="secondaryPrivateIpCount")
    def secondary_private_ip_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "secondary_private_ip_count")

    @secondary_private_ip_count.setter
    def secondary_private_ip_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "secondary_private_ip_count", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmNicSecurityGroupArgs']]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmNicSecurityGroupArgs']]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class VmNicLinkNicArgs:
    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[pulumi.Input[bool]] = None,
                 device_number: Optional[pulumi.Input[str]] = None,
                 link_nic_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if device_number is not None:
            pulumi.set(__self__, "device_number", device_number)
        if link_nic_id is not None:
            pulumi.set(__self__, "link_nic_id", link_nic_id)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_on_vm_deletion")

    @delete_on_vm_deletion.setter
    def delete_on_vm_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_on_vm_deletion", value)

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_number")

    @device_number.setter
    def device_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_number", value)

    @property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link_nic_id")

    @link_nic_id.setter
    def link_nic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_nic_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class VmNicLinkPublicIpArgs:
    def __init__(__self__, *,
                 public_dns_name: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 public_ip_account_id: Optional[pulumi.Input[str]] = None):
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_account_id is not None:
            pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_dns_name")

    @public_dns_name.setter
    def public_dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_dns_name", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip_account_id")

    @public_ip_account_id.setter
    def public_ip_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip_account_id", value)


@pulumi.input_type
class VmNicPrivateIpArgs:
    def __init__(__self__, *,
                 is_primary: Optional[pulumi.Input[bool]] = None,
                 link_public_ips: Optional[pulumi.Input[Sequence[pulumi.Input['VmNicPrivateIpLinkPublicIpArgs']]]] = None,
                 private_dns_name: Optional[pulumi.Input[str]] = None,
                 private_ip: Optional[pulumi.Input[str]] = None):
        if is_primary is not None:
            pulumi.set(__self__, "is_primary", is_primary)
        if link_public_ips is not None:
            pulumi.set(__self__, "link_public_ips", link_public_ips)
        if private_dns_name is not None:
            pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_primary")

    @is_primary.setter
    def is_primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_primary", value)

    @property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VmNicPrivateIpLinkPublicIpArgs']]]]:
        return pulumi.get(self, "link_public_ips")

    @link_public_ips.setter
    def link_public_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VmNicPrivateIpLinkPublicIpArgs']]]]):
        pulumi.set(self, "link_public_ips", value)

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_dns_name")

    @private_dns_name.setter
    def private_dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_dns_name", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_ip", value)


@pulumi.input_type
class VmNicPrivateIpLinkPublicIpArgs:
    def __init__(__self__, *,
                 public_dns_name: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 public_ip_account_id: Optional[pulumi.Input[str]] = None):
        if public_dns_name is not None:
            pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_account_id is not None:
            pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_dns_name")

    @public_dns_name.setter
    def public_dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_dns_name", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip_account_id")

    @public_ip_account_id.setter
    def public_ip_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip_account_id", value)


@pulumi.input_type
class VmNicSecurityGroupArgs:
    def __init__(__self__, *,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 security_group_name: Optional[pulumi.Input[str]] = None):
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_name")

    @security_group_name.setter
    def security_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_name", value)


@pulumi.input_type
class VmSecurityGroupArgs:
    def __init__(__self__, *,
                 security_group_id: Optional[pulumi.Input[str]] = None,
                 security_group_name: Optional[pulumi.Input[str]] = None):
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if security_group_name is not None:
            pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "security_group_name")

    @security_group_name.setter
    def security_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_group_name", value)


@pulumi.input_type
class VmTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VolumeLinkedVolumeArgs:
    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[pulumi.Input[bool]] = None,
                 device_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None):
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_on_vm_deletion")

    @delete_on_vm_deletion.setter
    def delete_on_vm_deletion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_on_vm_deletion", value)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_id", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_id", value)


@pulumi.input_type
class VolumeTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VpnConnectionRouteArgs:
    def __init__(__self__, *,
                 destination_ip_range: Optional[pulumi.Input[str]] = None,
                 route_type: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        if destination_ip_range is not None:
            pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        if route_type is not None:
            pulumi.set(__self__, "route_type", route_type)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_ip_range")

    @destination_ip_range.setter
    def destination_ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_ip_range", value)

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_type")

    @route_type.setter
    def route_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_type", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class VpnConnectionTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VpnConnectionVgwTelemetryArgs:
    def __init__(__self__, *,
                 accepted_route_count: Optional[pulumi.Input[int]] = None,
                 last_state_change_date: Optional[pulumi.Input[str]] = None,
                 outside_ip_address: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 state_description: Optional[pulumi.Input[str]] = None):
        if accepted_route_count is not None:
            pulumi.set(__self__, "accepted_route_count", accepted_route_count)
        if last_state_change_date is not None:
            pulumi.set(__self__, "last_state_change_date", last_state_change_date)
        if outside_ip_address is not None:
            pulumi.set(__self__, "outside_ip_address", outside_ip_address)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_description is not None:
            pulumi.set(__self__, "state_description", state_description)

    @property
    @pulumi.getter(name="acceptedRouteCount")
    def accepted_route_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "accepted_route_count")

    @accepted_route_count.setter
    def accepted_route_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "accepted_route_count", value)

    @property
    @pulumi.getter(name="lastStateChangeDate")
    def last_state_change_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_state_change_date")

    @last_state_change_date.setter
    def last_state_change_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_state_change_date", value)

    @property
    @pulumi.getter(name="outsideIpAddress")
    def outside_ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outside_ip_address")

    @outside_ip_address.setter
    def outside_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outside_ip_address", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="stateDescription")
    def state_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state_description")

    @state_description.setter
    def state_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state_description", value)


@pulumi.input_type
class GetAccessKeyFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetAccessKeysFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetApiAccessRuleFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetApiAccessRulesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCaFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetCasFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetClientGatewayFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetClientGatewaysFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetDhcpOptionFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetDhcpOptionsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetFlexibleGpuCatalogFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetFlexibleGpuFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetFlexibleGpusFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetImageBlockDeviceMappingArgs:
    def __init__(__self__, *,
                 bsus: Sequence['GetImageBlockDeviceMappingBsusArgs'],
                 device_name: str,
                 virtual_device_name: str):
        pulumi.set(__self__, "bsus", bsus)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "virtual_device_name", virtual_device_name)

    @property
    @pulumi.getter
    def bsus(self) -> Sequence['GetImageBlockDeviceMappingBsusArgs']:
        return pulumi.get(self, "bsus")

    @bsus.setter
    def bsus(self, value: Sequence['GetImageBlockDeviceMappingBsusArgs']):
        pulumi.set(self, "bsus", value)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: str):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter(name="virtualDeviceName")
    def virtual_device_name(self) -> str:
        return pulumi.get(self, "virtual_device_name")

    @virtual_device_name.setter
    def virtual_device_name(self, value: str):
        pulumi.set(self, "virtual_device_name", value)


@pulumi.input_type
class GetImageBlockDeviceMappingBsusArgs:
    def __init__(__self__, *,
                 delete_on_vm_deletion: bool,
                 iops: int,
                 snapshot_id: str,
                 volume_size: int,
                 volume_type: str):
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "iops", iops)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "volume_size", volume_size)
        pulumi.set(__self__, "volume_type", volume_type)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @delete_on_vm_deletion.setter
    def delete_on_vm_deletion(self, value: bool):
        pulumi.set(self, "delete_on_vm_deletion", value)

    @property
    @pulumi.getter
    def iops(self) -> int:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: int):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: str):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> int:
        return pulumi.get(self, "volume_size")

    @volume_size.setter
    def volume_size(self, value: int):
        pulumi.set(self, "volume_size", value)

    @property
    @pulumi.getter(name="volumeType")
    def volume_type(self) -> str:
        return pulumi.get(self, "volume_type")

    @volume_type.setter
    def volume_type(self, value: str):
        pulumi.set(self, "volume_type", value)


@pulumi.input_type
class GetImageExportTaskFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetImageExportTasksFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetImageFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetImagesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetInternetServiceFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetInternetServicesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetKeypairFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetKeypairsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetLoadBalancerAccessLogArgs:
    def __init__(__self__, *,
                 is_enabled: bool,
                 osu_bucket_name: str,
                 osu_bucket_prefix: str,
                 publication_interval: int):
        pulumi.set(__self__, "is_enabled", is_enabled)
        pulumi.set(__self__, "osu_bucket_name", osu_bucket_name)
        pulumi.set(__self__, "osu_bucket_prefix", osu_bucket_prefix)
        pulumi.set(__self__, "publication_interval", publication_interval)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> bool:
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: bool):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="osuBucketName")
    def osu_bucket_name(self) -> str:
        return pulumi.get(self, "osu_bucket_name")

    @osu_bucket_name.setter
    def osu_bucket_name(self, value: str):
        pulumi.set(self, "osu_bucket_name", value)

    @property
    @pulumi.getter(name="osuBucketPrefix")
    def osu_bucket_prefix(self) -> str:
        return pulumi.get(self, "osu_bucket_prefix")

    @osu_bucket_prefix.setter
    def osu_bucket_prefix(self, value: str):
        pulumi.set(self, "osu_bucket_prefix", value)

    @property
    @pulumi.getter(name="publicationInterval")
    def publication_interval(self) -> int:
        return pulumi.get(self, "publication_interval")

    @publication_interval.setter
    def publication_interval(self, value: int):
        pulumi.set(self, "publication_interval", value)


@pulumi.input_type
class GetLoadBalancerFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetLoadBalancerHealthCheckArgs:
    def __init__(__self__, *,
                 check_interval: str,
                 checked_vm: str,
                 healthy_threshold: str,
                 timeout: str,
                 unhealthy_threshold: str):
        pulumi.set(__self__, "check_interval", check_interval)
        pulumi.set(__self__, "checked_vm", checked_vm)
        pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="checkInterval")
    def check_interval(self) -> str:
        return pulumi.get(self, "check_interval")

    @check_interval.setter
    def check_interval(self, value: str):
        pulumi.set(self, "check_interval", value)

    @property
    @pulumi.getter(name="checkedVm")
    def checked_vm(self) -> str:
        return pulumi.get(self, "checked_vm")

    @checked_vm.setter
    def checked_vm(self, value: str):
        pulumi.set(self, "checked_vm", value)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> str:
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: str):
        pulumi.set(self, "healthy_threshold", value)

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: str):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> str:
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: str):
        pulumi.set(self, "unhealthy_threshold", value)


@pulumi.input_type
class GetLoadBalancerListenerArgs:
    def __init__(__self__, *,
                 backend_port: int,
                 backend_protocol: str,
                 load_balancer_port: int,
                 load_balancer_protocol: str,
                 policy_names: Sequence[str],
                 server_certificate_id: str):
        pulumi.set(__self__, "backend_port", backend_port)
        pulumi.set(__self__, "backend_protocol", backend_protocol)
        pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        pulumi.set(__self__, "load_balancer_protocol", load_balancer_protocol)
        pulumi.set(__self__, "policy_names", policy_names)
        pulumi.set(__self__, "server_certificate_id", server_certificate_id)

    @property
    @pulumi.getter(name="backendPort")
    def backend_port(self) -> int:
        return pulumi.get(self, "backend_port")

    @backend_port.setter
    def backend_port(self, value: int):
        pulumi.set(self, "backend_port", value)

    @property
    @pulumi.getter(name="backendProtocol")
    def backend_protocol(self) -> str:
        return pulumi.get(self, "backend_protocol")

    @backend_protocol.setter
    def backend_protocol(self, value: str):
        pulumi.set(self, "backend_protocol", value)

    @property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> int:
        return pulumi.get(self, "load_balancer_port")

    @load_balancer_port.setter
    def load_balancer_port(self, value: int):
        pulumi.set(self, "load_balancer_port", value)

    @property
    @pulumi.getter(name="loadBalancerProtocol")
    def load_balancer_protocol(self) -> str:
        return pulumi.get(self, "load_balancer_protocol")

    @load_balancer_protocol.setter
    def load_balancer_protocol(self, value: str):
        pulumi.set(self, "load_balancer_protocol", value)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Sequence[str]:
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Sequence[str]):
        pulumi.set(self, "policy_names", value)

    @property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> str:
        return pulumi.get(self, "server_certificate_id")

    @server_certificate_id.setter
    def server_certificate_id(self, value: str):
        pulumi.set(self, "server_certificate_id", value)


@pulumi.input_type
class GetLoadBalancerTagArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GetLoadBalancerTagsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetLoadBalancerVmHealthFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetLoadBalancersFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetNatServiceFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetNatServicesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetNetAccessPointFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetNetAccessPointServicesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetNetAccessPointsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetNetFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetNetPeeringFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetNetPeeringsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetNetsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetNicFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetNicsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetProductTypeFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetProductTypesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPublicIpFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetPublicIpsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetQuotaFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetQuotasFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetRouteTableFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetRouteTablesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetSecurityGroupFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetSecurityGroupsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetServerCertificateFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetServerCertificatesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetSnapshotExportTaskFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetSnapshotExportTasksFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetSnapshotFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetSnapshotsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetSubnetFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetSubnetsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetSubregionsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetTagFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetVirtualGatewayFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetVirtualGatewaysFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetVmBlockDeviceMappingsCreatedArgs:
    def __init__(__self__, *,
                 bsu: 'GetVmBlockDeviceMappingsCreatedBsuArgs',
                 device_name: Optional[str] = None):
        pulumi.set(__self__, "bsu", bsu)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)

    @property
    @pulumi.getter
    def bsu(self) -> 'GetVmBlockDeviceMappingsCreatedBsuArgs':
        return pulumi.get(self, "bsu")

    @bsu.setter
    def bsu(self, value: 'GetVmBlockDeviceMappingsCreatedBsuArgs'):
        pulumi.set(self, "bsu", value)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[str]):
        pulumi.set(self, "device_name", value)


@pulumi.input_type
class GetVmBlockDeviceMappingsCreatedBsuArgs:
    def __init__(__self__, *,
                 delete_on_vm_deletion: bool,
                 link_date: str,
                 state: int,
                 volume_id: float):
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "link_date", link_date)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @delete_on_vm_deletion.setter
    def delete_on_vm_deletion(self, value: bool):
        pulumi.set(self, "delete_on_vm_deletion", value)

    @property
    @pulumi.getter(name="linkDate")
    def link_date(self) -> str:
        return pulumi.get(self, "link_date")

    @link_date.setter
    def link_date(self, value: str):
        pulumi.set(self, "link_date", value)

    @property
    @pulumi.getter
    def state(self) -> int:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: int):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> float:
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: float):
        pulumi.set(self, "volume_id", value)


@pulumi.input_type
class GetVmFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetVmNicArgs:
    def __init__(__self__, *,
                 account_id: str,
                 delete_on_vm_deletion: bool,
                 description: str,
                 device_number: int,
                 is_source_dest_checked: bool,
                 link_nic: 'GetVmNicLinkNicArgs',
                 link_public_ips: Sequence['GetVmNicLinkPublicIpArgs'],
                 mac_address: str,
                 net_id: str,
                 nic_id: str,
                 private_dns_name: str,
                 private_ips: Sequence['GetVmNicPrivateIpArgs'],
                 secondary_private_ip_count: int,
                 security_group_ids: Sequence[str],
                 security_groups: Sequence['GetVmNicSecurityGroupArgs'],
                 security_groups_names: Sequence[str],
                 state: str,
                 subnet_id: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        pulumi.set(__self__, "link_nic", link_nic)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "nic_id", nic_id)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ips", private_ips)
        pulumi.set(__self__, "secondary_private_ip_count", secondary_private_ip_count)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "security_groups_names", security_groups_names)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: str):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @delete_on_vm_deletion.setter
    def delete_on_vm_deletion(self, value: bool):
        pulumi.set(self, "delete_on_vm_deletion", value)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: str):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> int:
        return pulumi.get(self, "device_number")

    @device_number.setter
    def device_number(self, value: int):
        pulumi.set(self, "device_number", value)

    @property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> bool:
        return pulumi.get(self, "is_source_dest_checked")

    @is_source_dest_checked.setter
    def is_source_dest_checked(self, value: bool):
        pulumi.set(self, "is_source_dest_checked", value)

    @property
    @pulumi.getter(name="linkNic")
    def link_nic(self) -> 'GetVmNicLinkNicArgs':
        return pulumi.get(self, "link_nic")

    @link_nic.setter
    def link_nic(self, value: 'GetVmNicLinkNicArgs'):
        pulumi.set(self, "link_nic", value)

    @property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['GetVmNicLinkPublicIpArgs']:
        return pulumi.get(self, "link_public_ips")

    @link_public_ips.setter
    def link_public_ips(self, value: Sequence['GetVmNicLinkPublicIpArgs']):
        pulumi.set(self, "link_public_ips", value)

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @mac_address.setter
    def mac_address(self, value: str):
        pulumi.set(self, "mac_address", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: str):
        pulumi.set(self, "net_id", value)

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> str:
        return pulumi.get(self, "nic_id")

    @nic_id.setter
    def nic_id(self, value: str):
        pulumi.set(self, "nic_id", value)

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> str:
        return pulumi.get(self, "private_dns_name")

    @private_dns_name.setter
    def private_dns_name(self, value: str):
        pulumi.set(self, "private_dns_name", value)

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence['GetVmNicPrivateIpArgs']:
        return pulumi.get(self, "private_ips")

    @private_ips.setter
    def private_ips(self, value: Sequence['GetVmNicPrivateIpArgs']):
        pulumi.set(self, "private_ips", value)

    @property
    @pulumi.getter(name="secondaryPrivateIpCount")
    def secondary_private_ip_count(self) -> int:
        return pulumi.get(self, "secondary_private_ip_count")

    @secondary_private_ip_count.setter
    def secondary_private_ip_count(self, value: int):
        pulumi.set(self, "secondary_private_ip_count", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Sequence[str]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['GetVmNicSecurityGroupArgs']:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Sequence['GetVmNicSecurityGroupArgs']):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="securityGroupsNames")
    def security_groups_names(self) -> Sequence[str]:
        return pulumi.get(self, "security_groups_names")

    @security_groups_names.setter
    def security_groups_names(self, value: Sequence[str]):
        pulumi.set(self, "security_groups_names", value)

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: str):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: str):
        pulumi.set(self, "subnet_id", value)


@pulumi.input_type
class GetVmNicLinkNicArgs:
    def __init__(__self__, *,
                 delete_on_vm_deletion: bool,
                 device_number: str,
                 link_nic_id: str,
                 state: str):
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        pulumi.set(__self__, "device_number", device_number)
        pulumi.set(__self__, "link_nic_id", link_nic_id)
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @delete_on_vm_deletion.setter
    def delete_on_vm_deletion(self, value: bool):
        pulumi.set(self, "delete_on_vm_deletion", value)

    @property
    @pulumi.getter(name="deviceNumber")
    def device_number(self) -> str:
        return pulumi.get(self, "device_number")

    @device_number.setter
    def device_number(self, value: str):
        pulumi.set(self, "device_number", value)

    @property
    @pulumi.getter(name="linkNicId")
    def link_nic_id(self) -> str:
        return pulumi.get(self, "link_nic_id")

    @link_nic_id.setter
    def link_nic_id(self, value: str):
        pulumi.set(self, "link_nic_id", value)

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: str):
        pulumi.set(self, "state", value)


@pulumi.input_type
class GetVmNicLinkPublicIpArgs:
    def __init__(__self__, *,
                 public_dns_name: str,
                 public_ip: str,
                 public_ip_account_id: str):
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> str:
        return pulumi.get(self, "public_dns_name")

    @public_dns_name.setter
    def public_dns_name(self, value: str):
        pulumi.set(self, "public_dns_name", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: str):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> str:
        return pulumi.get(self, "public_ip_account_id")

    @public_ip_account_id.setter
    def public_ip_account_id(self, value: str):
        pulumi.set(self, "public_ip_account_id", value)


@pulumi.input_type
class GetVmNicPrivateIpArgs:
    def __init__(__self__, *,
                 is_primary: bool,
                 link_public_ips: Sequence['GetVmNicPrivateIpLinkPublicIpArgs'],
                 private_dns_name: str,
                 private_ip: str):
        pulumi.set(__self__, "is_primary", is_primary)
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        pulumi.set(__self__, "private_ip", private_ip)

    @property
    @pulumi.getter(name="isPrimary")
    def is_primary(self) -> bool:
        return pulumi.get(self, "is_primary")

    @is_primary.setter
    def is_primary(self, value: bool):
        pulumi.set(self, "is_primary", value)

    @property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['GetVmNicPrivateIpLinkPublicIpArgs']:
        return pulumi.get(self, "link_public_ips")

    @link_public_ips.setter
    def link_public_ips(self, value: Sequence['GetVmNicPrivateIpLinkPublicIpArgs']):
        pulumi.set(self, "link_public_ips", value)

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> str:
        return pulumi.get(self, "private_dns_name")

    @private_dns_name.setter
    def private_dns_name(self, value: str):
        pulumi.set(self, "private_dns_name", value)

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: str):
        pulumi.set(self, "private_ip", value)


@pulumi.input_type
class GetVmNicPrivateIpLinkPublicIpArgs:
    def __init__(__self__, *,
                 public_dns_name: str,
                 public_ip: str,
                 public_ip_account_id: str):
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "public_ip_account_id", public_ip_account_id)

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> str:
        return pulumi.get(self, "public_dns_name")

    @public_dns_name.setter
    def public_dns_name(self, value: str):
        pulumi.set(self, "public_dns_name", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: str):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="publicIpAccountId")
    def public_ip_account_id(self) -> str:
        return pulumi.get(self, "public_ip_account_id")

    @public_ip_account_id.setter
    def public_ip_account_id(self, value: str):
        pulumi.set(self, "public_ip_account_id", value)


@pulumi.input_type
class GetVmNicSecurityGroupArgs:
    def __init__(__self__, *,
                 security_group_id: str,
                 security_group_name: str):
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "security_group_name", security_group_name)

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @security_group_id.setter
    def security_group_id(self, value: str):
        pulumi.set(self, "security_group_id", value)

    @property
    @pulumi.getter(name="securityGroupName")
    def security_group_name(self) -> str:
        return pulumi.get(self, "security_group_name")

    @security_group_name.setter
    def security_group_name(self, value: str):
        pulumi.set(self, "security_group_name", value)


@pulumi.input_type
class GetVmStateFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetVmStatesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetVmTypesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetVmsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetVolumeFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetVolumesFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetVpnConnectionFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class GetVpnConnectionsFilterArgs:
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Sequence[str]):
        pulumi.set(self, "values", value)


