# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetAccessPointArgs', 'NetAccessPoint']

@pulumi.input_type
class NetAccessPointArgs:
    def __init__(__self__, *,
                 net_id: pulumi.Input[_builtins.str],
                 service_name: pulumi.Input[_builtins.str],
                 route_table_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NetAccessPointTagArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['NetAccessPointTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a NetAccessPoint resource.
        :param pulumi.Input[_builtins.str] net_id: The ID of the Net.
        :param pulumi.Input[_builtins.str] service_name: The name of the service (in the format `com.outscale.region.service`).
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] route_table_ids: One or more IDs of route tables to use for the connection.
        :param pulumi.Input[Sequence[pulumi.Input['NetAccessPointTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        pulumi.set(__self__, "net_id", net_id)
        pulumi.set(__self__, "service_name", service_name)
        if route_table_ids is not None:
            pulumi.set(__self__, "route_table_ids", route_table_ids)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Net.
        """
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "net_id", value)

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the service (in the format `com.outscale.region.service`).
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "service_name", value)

    @_builtins.property
    @pulumi.getter(name="routeTableIds")
    def route_table_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        One or more IDs of route tables to use for the connection.
        """
        return pulumi.get(self, "route_table_ids")

    @route_table_ids.setter
    def route_table_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "route_table_ids", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetAccessPointTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetAccessPointTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['NetAccessPointTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['NetAccessPointTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _NetAccessPointState:
    def __init__(__self__, *,
                 net_access_point_id: Optional[pulumi.Input[_builtins.str]] = None,
                 net_id: Optional[pulumi.Input[_builtins.str]] = None,
                 request_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NetAccessPointTagArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['NetAccessPointTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering NetAccessPoint resources.
        :param pulumi.Input[_builtins.str] net_access_point_id: The ID of the Net access point.
        :param pulumi.Input[_builtins.str] net_id: The ID of the Net.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] route_table_ids: One or more IDs of route tables to use for the connection.
        :param pulumi.Input[_builtins.str] service_name: The name of the service (in the format `com.outscale.region.service`).
        :param pulumi.Input[_builtins.str] state: The state of the Net access point (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        :param pulumi.Input[Sequence[pulumi.Input['NetAccessPointTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        if net_access_point_id is not None:
            pulumi.set(__self__, "net_access_point_id", net_access_point_id)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if route_table_ids is not None:
            pulumi.set(__self__, "route_table_ids", route_table_ids)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="netAccessPointId")
    def net_access_point_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Net access point.
        """
        return pulumi.get(self, "net_access_point_id")

    @net_access_point_id.setter
    def net_access_point_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "net_access_point_id", value)

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Net.
        """
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "net_id", value)

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_id", value)

    @_builtins.property
    @pulumi.getter(name="routeTableIds")
    def route_table_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        One or more IDs of route tables to use for the connection.
        """
        return pulumi.get(self, "route_table_ids")

    @route_table_ids.setter
    def route_table_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "route_table_ids", value)

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the service (in the format `com.outscale.region.service`).
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "service_name", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The state of the Net access point (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetAccessPointTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetAccessPointTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['NetAccessPointTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['NetAccessPointTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("outscale:index/netAccessPoint:NetAccessPoint")
class NetAccessPoint(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 net_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetAccessPointTagArgs', 'NetAccessPointTagArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['NetAccessPointTimeoutsArgs', 'NetAccessPointTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Manages a Net access point.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Net-Access-Points.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-netaccesspoint).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net01 = outscale.Net("net01", ip_range="10.0.0.0/16")
        route_table01 = outscale.RouteTable("route_table01", net_id=net01.net_id)
        ```

        ### Create a Net access point

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net_access_point01 = outscale.NetAccessPoint("net_access_point01",
            net_id=net01["netId"],
            route_table_ids=[route_table01["routeTableId"]],
            service_name="com.outscale.eu-west-2.api",
            tags=[{
                "key": "name",
                "value": "terraform-net-access-point",
            }])
        ```

        ## Import

        A Net access point can be imported using its ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/netAccessPoint:NetAccessPoint ImportedNetAccessPoint vpce-87654321
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] net_id: The ID of the Net.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] route_table_ids: One or more IDs of route tables to use for the connection.
        :param pulumi.Input[_builtins.str] service_name: The name of the service (in the format `com.outscale.region.service`).
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetAccessPointTagArgs', 'NetAccessPointTagArgsDict']]]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetAccessPointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Net access point.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Net-Access-Points.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-netaccesspoint).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net01 = outscale.Net("net01", ip_range="10.0.0.0/16")
        route_table01 = outscale.RouteTable("route_table01", net_id=net01.net_id)
        ```

        ### Create a Net access point

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net_access_point01 = outscale.NetAccessPoint("net_access_point01",
            net_id=net01["netId"],
            route_table_ids=[route_table01["routeTableId"]],
            service_name="com.outscale.eu-west-2.api",
            tags=[{
                "key": "name",
                "value": "terraform-net-access-point",
            }])
        ```

        ## Import

        A Net access point can be imported using its ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/netAccessPoint:NetAccessPoint ImportedNetAccessPoint vpce-87654321
        ```

        :param str resource_name: The name of the resource.
        :param NetAccessPointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetAccessPointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 net_id: Optional[pulumi.Input[_builtins.str]] = None,
                 route_table_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 service_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetAccessPointTagArgs', 'NetAccessPointTagArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['NetAccessPointTimeoutsArgs', 'NetAccessPointTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetAccessPointArgs.__new__(NetAccessPointArgs)

            if net_id is None and not opts.urn:
                raise TypeError("Missing required property 'net_id'")
            __props__.__dict__["net_id"] = net_id
            __props__.__dict__["route_table_ids"] = route_table_ids
            if service_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_name'")
            __props__.__dict__["service_name"] = service_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["net_access_point_id"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["state"] = None
        super(NetAccessPoint, __self__).__init__(
            'outscale:index/netAccessPoint:NetAccessPoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            net_access_point_id: Optional[pulumi.Input[_builtins.str]] = None,
            net_id: Optional[pulumi.Input[_builtins.str]] = None,
            request_id: Optional[pulumi.Input[_builtins.str]] = None,
            route_table_ids: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
            service_name: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetAccessPointTagArgs', 'NetAccessPointTagArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['NetAccessPointTimeoutsArgs', 'NetAccessPointTimeoutsArgsDict']]] = None) -> 'NetAccessPoint':
        """
        Get an existing NetAccessPoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] net_access_point_id: The ID of the Net access point.
        :param pulumi.Input[_builtins.str] net_id: The ID of the Net.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] route_table_ids: One or more IDs of route tables to use for the connection.
        :param pulumi.Input[_builtins.str] service_name: The name of the service (in the format `com.outscale.region.service`).
        :param pulumi.Input[_builtins.str] state: The state of the Net access point (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetAccessPointTagArgs', 'NetAccessPointTagArgsDict']]]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetAccessPointState.__new__(_NetAccessPointState)

        __props__.__dict__["net_access_point_id"] = net_access_point_id
        __props__.__dict__["net_id"] = net_id
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["route_table_ids"] = route_table_ids
        __props__.__dict__["service_name"] = service_name
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        return NetAccessPoint(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="netAccessPointId")
    def net_access_point_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Net access point.
        """
        return pulumi.get(self, "net_access_point_id")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Net.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="routeTableIds")
    def route_table_ids(self) -> pulumi.Output[Sequence[_builtins.str]]:
        """
        One or more IDs of route tables to use for the connection.
        """
        return pulumi.get(self, "route_table_ids")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the service (in the format `com.outscale.region.service`).
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The state of the Net access point (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.NetAccessPointTag']]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.NetAccessPointTimeouts']]:
        return pulumi.get(self, "timeouts")

