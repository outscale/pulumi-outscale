# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPoliciesLinkedToUserGroupResult',
    'AwaitableGetPoliciesLinkedToUserGroupResult',
    'get_policies_linked_to_user_group',
    'get_policies_linked_to_user_group_output',
]

@pulumi.output_type
class GetPoliciesLinkedToUserGroupResult:
    """
    A collection of values returned by getPoliciesLinkedToUserGroup.
    """
    def __init__(__self__, filters=None, id=None, policies=None, user_group_name=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if user_group_name and not isinstance(user_group_name, str):
            raise TypeError("Expected argument 'user_group_name' to be a str")
        pulumi.set(__self__, "user_group_name", user_group_name)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetPoliciesLinkedToUserGroupFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetPoliciesLinkedToUserGroupPolicyResult']:
        return pulumi.get(self, "policies")

    @_builtins.property
    @pulumi.getter(name="userGroupName")
    def user_group_name(self) -> _builtins.str:
        return pulumi.get(self, "user_group_name")


class AwaitableGetPoliciesLinkedToUserGroupResult(GetPoliciesLinkedToUserGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPoliciesLinkedToUserGroupResult(
            filters=self.filters,
            id=self.id,
            policies=self.policies,
            user_group_name=self.user_group_name)


def get_policies_linked_to_user_group(filters: Optional[Sequence[Union['GetPoliciesLinkedToUserGroupFilterArgs', 'GetPoliciesLinkedToUserGroupFilterArgsDict']]] = None,
                                      user_group_name: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPoliciesLinkedToUserGroupResult:
    """
    Provides information about a link policy to user group.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Policies.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#readmanagedpolicieslinkedtousergroup).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    managed_policies_linked_to_user_group = outscale.get_policies_linked_to_user_group(user_group_name="user_group_name",
        filters=[
            {
                "name": "user_group_ids",
                "values": [
                    "XXXXXXX",
                    "YYYYYY",
                ],
            },
            {
                "name": "path_prefix",
                "values": ["/test/"],
            },
        ])
    ```


    :param _builtins.str user_group_name: The name of the group.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['userGroupName'] = user_group_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getPoliciesLinkedToUserGroup:getPoliciesLinkedToUserGroup', __args__, opts=opts, typ=GetPoliciesLinkedToUserGroupResult).value

    return AwaitableGetPoliciesLinkedToUserGroupResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        policies=pulumi.get(__ret__, 'policies'),
        user_group_name=pulumi.get(__ret__, 'user_group_name'))
def get_policies_linked_to_user_group_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetPoliciesLinkedToUserGroupFilterArgs', 'GetPoliciesLinkedToUserGroupFilterArgsDict']]]]] = None,
                                             user_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPoliciesLinkedToUserGroupResult]:
    """
    Provides information about a link policy to user group.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Policies.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#readmanagedpolicieslinkedtousergroup).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    managed_policies_linked_to_user_group = outscale.get_policies_linked_to_user_group(user_group_name="user_group_name",
        filters=[
            {
                "name": "user_group_ids",
                "values": [
                    "XXXXXXX",
                    "YYYYYY",
                ],
            },
            {
                "name": "path_prefix",
                "values": ["/test/"],
            },
        ])
    ```


    :param _builtins.str user_group_name: The name of the group.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['userGroupName'] = user_group_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getPoliciesLinkedToUserGroup:getPoliciesLinkedToUserGroup', __args__, opts=opts, typ=GetPoliciesLinkedToUserGroupResult)
    return __ret__.apply(lambda __response__: GetPoliciesLinkedToUserGroupResult(
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        policies=pulumi.get(__response__, 'policies'),
        user_group_name=pulumi.get(__response__, 'user_group_name')))
