# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetPeeringArgs', 'NetPeering']

@pulumi.input_type
class NetPeeringArgs:
    def __init__(__self__, *,
                 accepter_net_id: pulumi.Input[_builtins.str],
                 source_net_id: pulumi.Input[_builtins.str],
                 accepter_owner_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_net_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringTagArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['NetPeeringTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a NetPeering resource.
        :param pulumi.Input[_builtins.str] accepter_net_id: The ID of the Net you want to connect with.
        :param pulumi.Input[_builtins.str] source_net_id: The ID of the Net you send the peering request from.
        :param pulumi.Input[_builtins.str] accepter_owner_id: The account ID of the owner of the Net you want to connect with. By default, the account ID of the owner of the Net from which the peering request is sent. <br /><br/ >
               This parameter is required if the Net you want to connect with does not belong to you.
        :param pulumi.Input[Sequence[pulumi.Input['NetPeeringTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        pulumi.set(__self__, "accepter_net_id", accepter_net_id)
        pulumi.set(__self__, "source_net_id", source_net_id)
        if accepter_owner_id is not None:
            pulumi.set(__self__, "accepter_owner_id", accepter_owner_id)
        if source_net_account_id is not None:
            pulumi.set(__self__, "source_net_account_id", source_net_account_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="accepterNetId")
    def accepter_net_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Net you want to connect with.
        """
        return pulumi.get(self, "accepter_net_id")

    @accepter_net_id.setter
    def accepter_net_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "accepter_net_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceNetId")
    def source_net_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Net you send the peering request from.
        """
        return pulumi.get(self, "source_net_id")

    @source_net_id.setter
    def source_net_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "source_net_id", value)

    @_builtins.property
    @pulumi.getter(name="accepterOwnerId")
    def accepter_owner_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account ID of the owner of the Net you want to connect with. By default, the account ID of the owner of the Net from which the peering request is sent. <br /><br/ >
        This parameter is required if the Net you want to connect with does not belong to you.
        """
        return pulumi.get(self, "accepter_owner_id")

    @accepter_owner_id.setter
    def accepter_owner_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accepter_owner_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceNetAccountId")
    def source_net_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "source_net_account_id")

    @source_net_account_id.setter
    def source_net_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_net_account_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['NetPeeringTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['NetPeeringTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _NetPeeringState:
    def __init__(__self__, *,
                 accepter_net_id: Optional[pulumi.Input[_builtins.str]] = None,
                 accepter_nets: Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringAccepterNetArgs']]]] = None,
                 accepter_owner_id: Optional[pulumi.Input[_builtins.str]] = None,
                 expiration_date: Optional[pulumi.Input[_builtins.str]] = None,
                 net_peering_id: Optional[pulumi.Input[_builtins.str]] = None,
                 request_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_net_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_net_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_nets: Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringSourceNetArgs']]]] = None,
                 states: Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringStateArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringTagArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['NetPeeringTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering NetPeering resources.
        :param pulumi.Input[_builtins.str] accepter_net_id: The ID of the Net you want to connect with.
        :param pulumi.Input[Sequence[pulumi.Input['NetPeeringAccepterNetArgs']]] accepter_nets: Information about the accepter Net.
        :param pulumi.Input[_builtins.str] accepter_owner_id: The account ID of the owner of the Net you want to connect with. By default, the account ID of the owner of the Net from which the peering request is sent. <br /><br/ >
               This parameter is required if the Net you want to connect with does not belong to you.
        :param pulumi.Input[_builtins.str] expiration_date: The date and time (UTC) at which the Net peerings expire.
        :param pulumi.Input[_builtins.str] net_peering_id: The ID of the Net peering.
        :param pulumi.Input[_builtins.str] source_net_id: The ID of the Net you send the peering request from.
        :param pulumi.Input[Sequence[pulumi.Input['NetPeeringSourceNetArgs']]] source_nets: Information about the source Net.
        :param pulumi.Input[Sequence[pulumi.Input['NetPeeringStateArgs']]] states: Information about the state of the Net peering.
        :param pulumi.Input[Sequence[pulumi.Input['NetPeeringTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        if accepter_net_id is not None:
            pulumi.set(__self__, "accepter_net_id", accepter_net_id)
        if accepter_nets is not None:
            pulumi.set(__self__, "accepter_nets", accepter_nets)
        if accepter_owner_id is not None:
            pulumi.set(__self__, "accepter_owner_id", accepter_owner_id)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if net_peering_id is not None:
            pulumi.set(__self__, "net_peering_id", net_peering_id)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if source_net_account_id is not None:
            pulumi.set(__self__, "source_net_account_id", source_net_account_id)
        if source_net_id is not None:
            pulumi.set(__self__, "source_net_id", source_net_id)
        if source_nets is not None:
            pulumi.set(__self__, "source_nets", source_nets)
        if states is not None:
            pulumi.set(__self__, "states", states)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="accepterNetId")
    def accepter_net_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Net you want to connect with.
        """
        return pulumi.get(self, "accepter_net_id")

    @accepter_net_id.setter
    def accepter_net_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accepter_net_id", value)

    @_builtins.property
    @pulumi.getter(name="accepterNets")
    def accepter_nets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringAccepterNetArgs']]]]:
        """
        Information about the accepter Net.
        """
        return pulumi.get(self, "accepter_nets")

    @accepter_nets.setter
    def accepter_nets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringAccepterNetArgs']]]]):
        pulumi.set(self, "accepter_nets", value)

    @_builtins.property
    @pulumi.getter(name="accepterOwnerId")
    def accepter_owner_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The account ID of the owner of the Net you want to connect with. By default, the account ID of the owner of the Net from which the peering request is sent. <br /><br/ >
        This parameter is required if the Net you want to connect with does not belong to you.
        """
        return pulumi.get(self, "accepter_owner_id")

    @accepter_owner_id.setter
    def accepter_owner_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "accepter_owner_id", value)

    @_builtins.property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The date and time (UTC) at which the Net peerings expire.
        """
        return pulumi.get(self, "expiration_date")

    @expiration_date.setter
    def expiration_date(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "expiration_date", value)

    @_builtins.property
    @pulumi.getter(name="netPeeringId")
    def net_peering_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Net peering.
        """
        return pulumi.get(self, "net_peering_id")

    @net_peering_id.setter
    def net_peering_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "net_peering_id", value)

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceNetAccountId")
    def source_net_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "source_net_account_id")

    @source_net_account_id.setter
    def source_net_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_net_account_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceNetId")
    def source_net_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Net you send the peering request from.
        """
        return pulumi.get(self, "source_net_id")

    @source_net_id.setter
    def source_net_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "source_net_id", value)

    @_builtins.property
    @pulumi.getter(name="sourceNets")
    def source_nets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringSourceNetArgs']]]]:
        """
        Information about the source Net.
        """
        return pulumi.get(self, "source_nets")

    @source_nets.setter
    def source_nets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringSourceNetArgs']]]]):
        pulumi.set(self, "source_nets", value)

    @_builtins.property
    @pulumi.getter
    def states(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringStateArgs']]]]:
        """
        Information about the state of the Net peering.
        """
        return pulumi.get(self, "states")

    @states.setter
    def states(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringStateArgs']]]]):
        pulumi.set(self, "states", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetPeeringTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['NetPeeringTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['NetPeeringTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("outscale:index/netPeering:NetPeering")
class NetPeering(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accepter_net_id: Optional[pulumi.Input[_builtins.str]] = None,
                 accepter_owner_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_net_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_net_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetPeeringTagArgs', 'NetPeeringTagArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['NetPeeringTimeoutsArgs', 'NetPeeringTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Manages a Net peering.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Net-Peerings.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-netpeering).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net01 = outscale.Net("net01", ip_range="10.10.0.0/24")
        net02 = outscale.Net("net02", ip_range="10.31.0.0/16")
        ```

        ### Peer Nets

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net_peering01 = outscale.NetPeering("net_peering01",
            accepter_net_id=net01["netId"],
            source_net_id=net02["netId"])
        ```

        ## Import

        A Net peering can be imported using its ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/netPeering:NetPeering ImportedNetPeering pcx-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] accepter_net_id: The ID of the Net you want to connect with.
        :param pulumi.Input[_builtins.str] accepter_owner_id: The account ID of the owner of the Net you want to connect with. By default, the account ID of the owner of the Net from which the peering request is sent. <br /><br/ >
               This parameter is required if the Net you want to connect with does not belong to you.
        :param pulumi.Input[_builtins.str] source_net_id: The ID of the Net you send the peering request from.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetPeeringTagArgs', 'NetPeeringTagArgsDict']]]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetPeeringArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Net peering.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Net-Peerings.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-netpeering).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net01 = outscale.Net("net01", ip_range="10.10.0.0/24")
        net02 = outscale.Net("net02", ip_range="10.31.0.0/16")
        ```

        ### Peer Nets

        ```python
        import pulumi
        import pulumi_outscale as outscale

        net_peering01 = outscale.NetPeering("net_peering01",
            accepter_net_id=net01["netId"],
            source_net_id=net02["netId"])
        ```

        ## Import

        A Net peering can be imported using its ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/netPeering:NetPeering ImportedNetPeering pcx-12345678
        ```

        :param str resource_name: The name of the resource.
        :param NetPeeringArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetPeeringArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accepter_net_id: Optional[pulumi.Input[_builtins.str]] = None,
                 accepter_owner_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_net_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 source_net_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetPeeringTagArgs', 'NetPeeringTagArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['NetPeeringTimeoutsArgs', 'NetPeeringTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetPeeringArgs.__new__(NetPeeringArgs)

            if accepter_net_id is None and not opts.urn:
                raise TypeError("Missing required property 'accepter_net_id'")
            __props__.__dict__["accepter_net_id"] = accepter_net_id
            __props__.__dict__["accepter_owner_id"] = accepter_owner_id
            __props__.__dict__["source_net_account_id"] = source_net_account_id
            if source_net_id is None and not opts.urn:
                raise TypeError("Missing required property 'source_net_id'")
            __props__.__dict__["source_net_id"] = source_net_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["accepter_nets"] = None
            __props__.__dict__["expiration_date"] = None
            __props__.__dict__["net_peering_id"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["source_nets"] = None
            __props__.__dict__["states"] = None
        super(NetPeering, __self__).__init__(
            'outscale:index/netPeering:NetPeering',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accepter_net_id: Optional[pulumi.Input[_builtins.str]] = None,
            accepter_nets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetPeeringAccepterNetArgs', 'NetPeeringAccepterNetArgsDict']]]]] = None,
            accepter_owner_id: Optional[pulumi.Input[_builtins.str]] = None,
            expiration_date: Optional[pulumi.Input[_builtins.str]] = None,
            net_peering_id: Optional[pulumi.Input[_builtins.str]] = None,
            request_id: Optional[pulumi.Input[_builtins.str]] = None,
            source_net_account_id: Optional[pulumi.Input[_builtins.str]] = None,
            source_net_id: Optional[pulumi.Input[_builtins.str]] = None,
            source_nets: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetPeeringSourceNetArgs', 'NetPeeringSourceNetArgsDict']]]]] = None,
            states: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetPeeringStateArgs', 'NetPeeringStateArgsDict']]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NetPeeringTagArgs', 'NetPeeringTagArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['NetPeeringTimeoutsArgs', 'NetPeeringTimeoutsArgsDict']]] = None) -> 'NetPeering':
        """
        Get an existing NetPeering resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] accepter_net_id: The ID of the Net you want to connect with.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetPeeringAccepterNetArgs', 'NetPeeringAccepterNetArgsDict']]]] accepter_nets: Information about the accepter Net.
        :param pulumi.Input[_builtins.str] accepter_owner_id: The account ID of the owner of the Net you want to connect with. By default, the account ID of the owner of the Net from which the peering request is sent. <br /><br/ >
               This parameter is required if the Net you want to connect with does not belong to you.
        :param pulumi.Input[_builtins.str] expiration_date: The date and time (UTC) at which the Net peerings expire.
        :param pulumi.Input[_builtins.str] net_peering_id: The ID of the Net peering.
        :param pulumi.Input[_builtins.str] source_net_id: The ID of the Net you send the peering request from.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetPeeringSourceNetArgs', 'NetPeeringSourceNetArgsDict']]]] source_nets: Information about the source Net.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetPeeringStateArgs', 'NetPeeringStateArgsDict']]]] states: Information about the state of the Net peering.
        :param pulumi.Input[Sequence[pulumi.Input[Union['NetPeeringTagArgs', 'NetPeeringTagArgsDict']]]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetPeeringState.__new__(_NetPeeringState)

        __props__.__dict__["accepter_net_id"] = accepter_net_id
        __props__.__dict__["accepter_nets"] = accepter_nets
        __props__.__dict__["accepter_owner_id"] = accepter_owner_id
        __props__.__dict__["expiration_date"] = expiration_date
        __props__.__dict__["net_peering_id"] = net_peering_id
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["source_net_account_id"] = source_net_account_id
        __props__.__dict__["source_net_id"] = source_net_id
        __props__.__dict__["source_nets"] = source_nets
        __props__.__dict__["states"] = states
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        return NetPeering(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accepterNetId")
    def accepter_net_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Net you want to connect with.
        """
        return pulumi.get(self, "accepter_net_id")

    @_builtins.property
    @pulumi.getter(name="accepterNets")
    def accepter_nets(self) -> pulumi.Output[Sequence['outputs.NetPeeringAccepterNet']]:
        """
        Information about the accepter Net.
        """
        return pulumi.get(self, "accepter_nets")

    @_builtins.property
    @pulumi.getter(name="accepterOwnerId")
    def accepter_owner_id(self) -> pulumi.Output[_builtins.str]:
        """
        The account ID of the owner of the Net you want to connect with. By default, the account ID of the owner of the Net from which the peering request is sent. <br /><br/ >
        This parameter is required if the Net you want to connect with does not belong to you.
        """
        return pulumi.get(self, "accepter_owner_id")

    @_builtins.property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> pulumi.Output[_builtins.str]:
        """
        The date and time (UTC) at which the Net peerings expire.
        """
        return pulumi.get(self, "expiration_date")

    @_builtins.property
    @pulumi.getter(name="netPeeringId")
    def net_peering_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Net peering.
        """
        return pulumi.get(self, "net_peering_id")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="sourceNetAccountId")
    def source_net_account_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "source_net_account_id")

    @_builtins.property
    @pulumi.getter(name="sourceNetId")
    def source_net_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Net you send the peering request from.
        """
        return pulumi.get(self, "source_net_id")

    @_builtins.property
    @pulumi.getter(name="sourceNets")
    def source_nets(self) -> pulumi.Output[Sequence['outputs.NetPeeringSourceNet']]:
        """
        Information about the source Net.
        """
        return pulumi.get(self, "source_nets")

    @_builtins.property
    @pulumi.getter
    def states(self) -> pulumi.Output[Sequence['outputs.NetPeeringState']]:
        """
        Information about the state of the Net peering.
        """
        return pulumi.get(self, "states")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.NetPeeringTag']]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.NetPeeringTimeouts']]:
        return pulumi.get(self, "timeouts")

