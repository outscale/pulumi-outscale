# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['NicPrivateIpInitArgs', 'NicPrivateIp']

@pulumi.input_type
class NicPrivateIpInitArgs:
    def __init__(__self__, *,
                 nic_id: pulumi.Input[str],
                 allow_relink: Optional[pulumi.Input[bool]] = None,
                 private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secondary_private_ip_count: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a NicPrivateIp resource.
        """
        pulumi.set(__self__, "nic_id", nic_id)
        if allow_relink is not None:
            pulumi.set(__self__, "allow_relink", allow_relink)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)
        if secondary_private_ip_count is not None:
            pulumi.set(__self__, "secondary_private_ip_count", secondary_private_ip_count)

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "nic_id")

    @nic_id.setter
    def nic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "nic_id", value)

    @property
    @pulumi.getter(name="allowRelink")
    def allow_relink(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_relink")

    @allow_relink.setter
    def allow_relink(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_relink", value)

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "private_ips")

    @private_ips.setter
    def private_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_ips", value)

    @property
    @pulumi.getter(name="secondaryPrivateIpCount")
    def secondary_private_ip_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "secondary_private_ip_count")

    @secondary_private_ip_count.setter
    def secondary_private_ip_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "secondary_private_ip_count", value)


@pulumi.input_type
class _NicPrivateIpState:
    def __init__(__self__, *,
                 allow_relink: Optional[pulumi.Input[bool]] = None,
                 nic_id: Optional[pulumi.Input[str]] = None,
                 primary_private_ip: Optional[pulumi.Input[str]] = None,
                 private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 secondary_private_ip_count: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering NicPrivateIp resources.
        """
        if allow_relink is not None:
            pulumi.set(__self__, "allow_relink", allow_relink)
        if nic_id is not None:
            pulumi.set(__self__, "nic_id", nic_id)
        if primary_private_ip is not None:
            pulumi.set(__self__, "primary_private_ip", primary_private_ip)
        if private_ips is not None:
            pulumi.set(__self__, "private_ips", private_ips)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if secondary_private_ip_count is not None:
            pulumi.set(__self__, "secondary_private_ip_count", secondary_private_ip_count)

    @property
    @pulumi.getter(name="allowRelink")
    def allow_relink(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_relink")

    @allow_relink.setter
    def allow_relink(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_relink", value)

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nic_id")

    @nic_id.setter
    def nic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nic_id", value)

    @property
    @pulumi.getter(name="primaryPrivateIp")
    def primary_private_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_private_ip")

    @primary_private_ip.setter
    def primary_private_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_private_ip", value)

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "private_ips")

    @private_ips.setter
    def private_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_ips", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="secondaryPrivateIpCount")
    def secondary_private_ip_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "secondary_private_ip_count")

    @secondary_private_ip_count.setter
    def secondary_private_ip_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "secondary_private_ip_count", value)


class NicPrivateIp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_relink: Optional[pulumi.Input[bool]] = None,
                 nic_id: Optional[pulumi.Input[str]] = None,
                 private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secondary_private_ip_count: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a NicPrivateIp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NicPrivateIpInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a NicPrivateIp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param NicPrivateIpInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NicPrivateIpInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_relink: Optional[pulumi.Input[bool]] = None,
                 nic_id: Optional[pulumi.Input[str]] = None,
                 private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 secondary_private_ip_count: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NicPrivateIpInitArgs.__new__(NicPrivateIpInitArgs)

            __props__.__dict__["allow_relink"] = allow_relink
            if nic_id is None and not opts.urn:
                raise TypeError("Missing required property 'nic_id'")
            __props__.__dict__["nic_id"] = nic_id
            __props__.__dict__["private_ips"] = private_ips
            __props__.__dict__["secondary_private_ip_count"] = secondary_private_ip_count
            __props__.__dict__["primary_private_ip"] = None
            __props__.__dict__["request_id"] = None
        super(NicPrivateIp, __self__).__init__(
            'outscale:index/nicPrivateIp:NicPrivateIp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_relink: Optional[pulumi.Input[bool]] = None,
            nic_id: Optional[pulumi.Input[str]] = None,
            primary_private_ip: Optional[pulumi.Input[str]] = None,
            private_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            secondary_private_ip_count: Optional[pulumi.Input[int]] = None) -> 'NicPrivateIp':
        """
        Get an existing NicPrivateIp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NicPrivateIpState.__new__(_NicPrivateIpState)

        __props__.__dict__["allow_relink"] = allow_relink
        __props__.__dict__["nic_id"] = nic_id
        __props__.__dict__["primary_private_ip"] = primary_private_ip
        __props__.__dict__["private_ips"] = private_ips
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["secondary_private_ip_count"] = secondary_private_ip_count
        return NicPrivateIp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowRelink")
    def allow_relink(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "allow_relink")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter(name="primaryPrivateIp")
    def primary_private_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "primary_private_ip")

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "private_ips")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="secondaryPrivateIpCount")
    def secondary_private_ip_count(self) -> pulumi.Output[int]:
        return pulumi.get(self, "secondary_private_ip_count")

