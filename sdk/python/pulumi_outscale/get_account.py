# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAccountResult',
    'AwaitableGetAccountResult',
    'get_account',
]

@pulumi.output_type
class GetAccountResult:
    """
    A collection of values returned by getAccount.
    """
    def __init__(__self__, account_id=None, additional_emails=None, city=None, company_name=None, country=None, customer_id=None, email=None, first_name=None, id=None, job_title=None, last_name=None, mobile_number=None, phone_number=None, request_id=None, state_province=None, vat_number=None, zip_code=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if additional_emails and not isinstance(additional_emails, list):
            raise TypeError("Expected argument 'additional_emails' to be a list")
        pulumi.set(__self__, "additional_emails", additional_emails)
        if city and not isinstance(city, str):
            raise TypeError("Expected argument 'city' to be a str")
        pulumi.set(__self__, "city", city)
        if company_name and not isinstance(company_name, str):
            raise TypeError("Expected argument 'company_name' to be a str")
        pulumi.set(__self__, "company_name", company_name)
        if country and not isinstance(country, str):
            raise TypeError("Expected argument 'country' to be a str")
        pulumi.set(__self__, "country", country)
        if customer_id and not isinstance(customer_id, str):
            raise TypeError("Expected argument 'customer_id' to be a str")
        pulumi.set(__self__, "customer_id", customer_id)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if first_name and not isinstance(first_name, str):
            raise TypeError("Expected argument 'first_name' to be a str")
        pulumi.set(__self__, "first_name", first_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_title and not isinstance(job_title, str):
            raise TypeError("Expected argument 'job_title' to be a str")
        pulumi.set(__self__, "job_title", job_title)
        if last_name and not isinstance(last_name, str):
            raise TypeError("Expected argument 'last_name' to be a str")
        pulumi.set(__self__, "last_name", last_name)
        if mobile_number and not isinstance(mobile_number, str):
            raise TypeError("Expected argument 'mobile_number' to be a str")
        pulumi.set(__self__, "mobile_number", mobile_number)
        if phone_number and not isinstance(phone_number, str):
            raise TypeError("Expected argument 'phone_number' to be a str")
        pulumi.set(__self__, "phone_number", phone_number)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if state_province and not isinstance(state_province, str):
            raise TypeError("Expected argument 'state_province' to be a str")
        pulumi.set(__self__, "state_province", state_province)
        if vat_number and not isinstance(vat_number, str):
            raise TypeError("Expected argument 'vat_number' to be a str")
        pulumi.set(__self__, "vat_number", vat_number)
        if zip_code and not isinstance(zip_code, str):
            raise TypeError("Expected argument 'zip_code' to be a str")
        pulumi.set(__self__, "zip_code", zip_code)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="additionalEmails")
    def additional_emails(self) -> Sequence[str]:
        return pulumi.get(self, "additional_emails")

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> str:
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> str:
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> str:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobTitle")
    def job_title(self) -> str:
        return pulumi.get(self, "job_title")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> str:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter(name="mobileNumber")
    def mobile_number(self) -> str:
        return pulumi.get(self, "mobile_number")

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        return pulumi.get(self, "phone_number")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="stateProvince")
    def state_province(self) -> str:
        return pulumi.get(self, "state_province")

    @property
    @pulumi.getter(name="vatNumber")
    def vat_number(self) -> str:
        return pulumi.get(self, "vat_number")

    @property
    @pulumi.getter(name="zipCode")
    def zip_code(self) -> str:
        return pulumi.get(self, "zip_code")


class AwaitableGetAccountResult(GetAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccountResult(
            account_id=self.account_id,
            additional_emails=self.additional_emails,
            city=self.city,
            company_name=self.company_name,
            country=self.country,
            customer_id=self.customer_id,
            email=self.email,
            first_name=self.first_name,
            id=self.id,
            job_title=self.job_title,
            last_name=self.last_name,
            mobile_number=self.mobile_number,
            phone_number=self.phone_number,
            request_id=self.request_id,
            state_province=self.state_province,
            vat_number=self.vat_number,
            zip_code=self.zip_code)


def get_account(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccountResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getAccount:getAccount', __args__, opts=opts, typ=GetAccountResult).value

    return AwaitableGetAccountResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        additional_emails=pulumi.get(__ret__, 'additional_emails'),
        city=pulumi.get(__ret__, 'city'),
        company_name=pulumi.get(__ret__, 'company_name'),
        country=pulumi.get(__ret__, 'country'),
        customer_id=pulumi.get(__ret__, 'customer_id'),
        email=pulumi.get(__ret__, 'email'),
        first_name=pulumi.get(__ret__, 'first_name'),
        id=pulumi.get(__ret__, 'id'),
        job_title=pulumi.get(__ret__, 'job_title'),
        last_name=pulumi.get(__ret__, 'last_name'),
        mobile_number=pulumi.get(__ret__, 'mobile_number'),
        phone_number=pulumi.get(__ret__, 'phone_number'),
        request_id=pulumi.get(__ret__, 'request_id'),
        state_province=pulumi.get(__ret__, 'state_province'),
        vat_number=pulumi.get(__ret__, 'vat_number'),
        zip_code=pulumi.get(__ret__, 'zip_code'))
