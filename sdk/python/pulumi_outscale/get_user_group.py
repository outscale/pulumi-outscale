# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetUserGroupResult',
    'AwaitableGetUserGroupResult',
    'get_user_group',
    'get_user_group_output',
]

@pulumi.output_type
class GetUserGroupResult:
    """
    A collection of values returned by getUserGroup.
    """
    def __init__(__self__, creation_date=None, id=None, last_modification_date=None, orn=None, path=None, user_group_id=None, user_group_name=None, users=None):
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_modification_date and not isinstance(last_modification_date, str):
            raise TypeError("Expected argument 'last_modification_date' to be a str")
        pulumi.set(__self__, "last_modification_date", last_modification_date)
        if orn and not isinstance(orn, str):
            raise TypeError("Expected argument 'orn' to be a str")
        pulumi.set(__self__, "orn", orn)
        if path and not isinstance(path, str):
            raise TypeError("Expected argument 'path' to be a str")
        pulumi.set(__self__, "path", path)
        if user_group_id and not isinstance(user_group_id, str):
            raise TypeError("Expected argument 'user_group_id' to be a str")
        pulumi.set(__self__, "user_group_id", user_group_id)
        if user_group_name and not isinstance(user_group_name, str):
            raise TypeError("Expected argument 'user_group_name' to be a str")
        pulumi.set(__self__, "user_group_name", user_group_name)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @_builtins.property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> _builtins.str:
        """
        The date and time (UTC) of creation of the EIM user.
        """
        return pulumi.get(self, "creation_date")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="lastModificationDate")
    def last_modification_date(self) -> _builtins.str:
        """
        The date and time (UTC) of the last modification of the EIM user.
        """
        return pulumi.get(self, "last_modification_date")

    @_builtins.property
    @pulumi.getter
    def orn(self) -> _builtins.str:
        """
        The Outscale Resource Name (ORN) of the user group. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        """
        return pulumi.get(self, "orn")

    @_builtins.property
    @pulumi.getter
    def path(self) -> Optional[_builtins.str]:
        """
        The path to the EIM user.
        """
        return pulumi.get(self, "path")

    @_builtins.property
    @pulumi.getter(name="userGroupId")
    def user_group_id(self) -> _builtins.str:
        """
        The ID of the user group.
        """
        return pulumi.get(self, "user_group_id")

    @_builtins.property
    @pulumi.getter(name="userGroupName")
    def user_group_name(self) -> _builtins.str:
        return pulumi.get(self, "user_group_name")

    @_builtins.property
    @pulumi.getter
    def users(self) -> Optional[Sequence['outputs.GetUserGroupUserResult']]:
        return pulumi.get(self, "users")


class AwaitableGetUserGroupResult(GetUserGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserGroupResult(
            creation_date=self.creation_date,
            id=self.id,
            last_modification_date=self.last_modification_date,
            orn=self.orn,
            path=self.path,
            user_group_id=self.user_group_id,
            user_group_name=self.user_group_name,
            users=self.users)


def get_user_group(path: Optional[_builtins.str] = None,
                   user_group_name: Optional[_builtins.str] = None,
                   users: Optional[Sequence[Union['GetUserGroupUserArgs', 'GetUserGroupUserArgsDict']]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserGroupResult:
    """
    Provides information about a user group.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-EIM-Groups.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#createusergroup).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    user_group01 = outscale.get_user_group(user_group_name="user_group_name",
        path="/")
    ```


    :param _builtins.str path: The path to the group. If not specified, it is set to a slash (`/`).
    :param _builtins.str user_group_name: The name of the group.
    """
    __args__ = dict()
    __args__['path'] = path
    __args__['userGroupName'] = user_group_name
    __args__['users'] = users
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getUserGroup:getUserGroup', __args__, opts=opts, typ=GetUserGroupResult).value

    return AwaitableGetUserGroupResult(
        creation_date=pulumi.get(__ret__, 'creation_date'),
        id=pulumi.get(__ret__, 'id'),
        last_modification_date=pulumi.get(__ret__, 'last_modification_date'),
        orn=pulumi.get(__ret__, 'orn'),
        path=pulumi.get(__ret__, 'path'),
        user_group_id=pulumi.get(__ret__, 'user_group_id'),
        user_group_name=pulumi.get(__ret__, 'user_group_name'),
        users=pulumi.get(__ret__, 'users'))
def get_user_group_output(path: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                          user_group_name: Optional[pulumi.Input[_builtins.str]] = None,
                          users: Optional[pulumi.Input[Optional[Sequence[Union['GetUserGroupUserArgs', 'GetUserGroupUserArgsDict']]]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUserGroupResult]:
    """
    Provides information about a user group.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-EIM-Groups.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#createusergroup).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    user_group01 = outscale.get_user_group(user_group_name="user_group_name",
        path="/")
    ```


    :param _builtins.str path: The path to the group. If not specified, it is set to a slash (`/`).
    :param _builtins.str user_group_name: The name of the group.
    """
    __args__ = dict()
    __args__['path'] = path
    __args__['userGroupName'] = user_group_name
    __args__['users'] = users
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getUserGroup:getUserGroup', __args__, opts=opts, typ=GetUserGroupResult)
    return __ret__.apply(lambda __response__: GetUserGroupResult(
        creation_date=pulumi.get(__response__, 'creation_date'),
        id=pulumi.get(__response__, 'id'),
        last_modification_date=pulumi.get(__response__, 'last_modification_date'),
        orn=pulumi.get(__response__, 'orn'),
        path=pulumi.get(__response__, 'path'),
        user_group_id=pulumi.get(__response__, 'user_group_id'),
        user_group_name=pulumi.get(__response__, 'user_group_name'),
        users=pulumi.get(__response__, 'users')))
