# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ApiAccessPolicyArgs', 'ApiAccessPolicy']

@pulumi.input_type
class ApiAccessPolicyArgs:
    def __init__(__self__, *,
                 max_access_key_expiration_seconds: pulumi.Input[int],
                 require_trusted_env: pulumi.Input[bool]):
        """
        The set of arguments for constructing a ApiAccessPolicy resource.
        """
        pulumi.set(__self__, "max_access_key_expiration_seconds", max_access_key_expiration_seconds)
        pulumi.set(__self__, "require_trusted_env", require_trusted_env)

    @property
    @pulumi.getter(name="maxAccessKeyExpirationSeconds")
    def max_access_key_expiration_seconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_access_key_expiration_seconds")

    @max_access_key_expiration_seconds.setter
    def max_access_key_expiration_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_access_key_expiration_seconds", value)

    @property
    @pulumi.getter(name="requireTrustedEnv")
    def require_trusted_env(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "require_trusted_env")

    @require_trusted_env.setter
    def require_trusted_env(self, value: pulumi.Input[bool]):
        pulumi.set(self, "require_trusted_env", value)


@pulumi.input_type
class _ApiAccessPolicyState:
    def __init__(__self__, *,
                 max_access_key_expiration_seconds: Optional[pulumi.Input[int]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 require_trusted_env: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering ApiAccessPolicy resources.
        """
        if max_access_key_expiration_seconds is not None:
            pulumi.set(__self__, "max_access_key_expiration_seconds", max_access_key_expiration_seconds)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if require_trusted_env is not None:
            pulumi.set(__self__, "require_trusted_env", require_trusted_env)

    @property
    @pulumi.getter(name="maxAccessKeyExpirationSeconds")
    def max_access_key_expiration_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_access_key_expiration_seconds")

    @max_access_key_expiration_seconds.setter
    def max_access_key_expiration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_access_key_expiration_seconds", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="requireTrustedEnv")
    def require_trusted_env(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_trusted_env")

    @require_trusted_env.setter
    def require_trusted_env(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_trusted_env", value)


class ApiAccessPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 max_access_key_expiration_seconds: Optional[pulumi.Input[int]] = None,
                 require_trusted_env: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a ApiAccessPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApiAccessPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ApiAccessPolicy resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ApiAccessPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApiAccessPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 max_access_key_expiration_seconds: Optional[pulumi.Input[int]] = None,
                 require_trusted_env: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApiAccessPolicyArgs.__new__(ApiAccessPolicyArgs)

            if max_access_key_expiration_seconds is None and not opts.urn:
                raise TypeError("Missing required property 'max_access_key_expiration_seconds'")
            __props__.__dict__["max_access_key_expiration_seconds"] = max_access_key_expiration_seconds
            if require_trusted_env is None and not opts.urn:
                raise TypeError("Missing required property 'require_trusted_env'")
            __props__.__dict__["require_trusted_env"] = require_trusted_env
            __props__.__dict__["request_id"] = None
        super(ApiAccessPolicy, __self__).__init__(
            'outscale:index/apiAccessPolicy:ApiAccessPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            max_access_key_expiration_seconds: Optional[pulumi.Input[int]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            require_trusted_env: Optional[pulumi.Input[bool]] = None) -> 'ApiAccessPolicy':
        """
        Get an existing ApiAccessPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApiAccessPolicyState.__new__(_ApiAccessPolicyState)

        __props__.__dict__["max_access_key_expiration_seconds"] = max_access_key_expiration_seconds
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["require_trusted_env"] = require_trusted_env
        return ApiAccessPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="maxAccessKeyExpirationSeconds")
    def max_access_key_expiration_seconds(self) -> pulumi.Output[int]:
        return pulumi.get(self, "max_access_key_expiration_seconds")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="requireTrustedEnv")
    def require_trusted_env(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "require_trusted_env")

