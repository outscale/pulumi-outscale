# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetApiAccessPolicyResult',
    'AwaitableGetApiAccessPolicyResult',
    'get_api_access_policy',
]

@pulumi.output_type
class GetApiAccessPolicyResult:
    """
    A collection of values returned by getApiAccessPolicy.
    """
    def __init__(__self__, id=None, max_access_key_expiration_seconds=None, request_id=None, require_trusted_env=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_access_key_expiration_seconds and not isinstance(max_access_key_expiration_seconds, int):
            raise TypeError("Expected argument 'max_access_key_expiration_seconds' to be a int")
        pulumi.set(__self__, "max_access_key_expiration_seconds", max_access_key_expiration_seconds)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if require_trusted_env and not isinstance(require_trusted_env, bool):
            raise TypeError("Expected argument 'require_trusted_env' to be a bool")
        pulumi.set(__self__, "require_trusted_env", require_trusted_env)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxAccessKeyExpirationSeconds")
    def max_access_key_expiration_seconds(self) -> int:
        return pulumi.get(self, "max_access_key_expiration_seconds")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="requireTrustedEnv")
    def require_trusted_env(self) -> bool:
        return pulumi.get(self, "require_trusted_env")


class AwaitableGetApiAccessPolicyResult(GetApiAccessPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiAccessPolicyResult(
            id=self.id,
            max_access_key_expiration_seconds=self.max_access_key_expiration_seconds,
            request_id=self.request_id,
            require_trusted_env=self.require_trusted_env)


def get_api_access_policy(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiAccessPolicyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getApiAccessPolicy:getApiAccessPolicy', __args__, opts=opts, typ=GetApiAccessPolicyResult).value

    return AwaitableGetApiAccessPolicyResult(
        id=pulumi.get(__ret__, 'id'),
        max_access_key_expiration_seconds=pulumi.get(__ret__, 'max_access_key_expiration_seconds'),
        request_id=pulumi.get(__ret__, 'request_id'),
        require_trusted_env=pulumi.get(__ret__, 'require_trusted_env'))
