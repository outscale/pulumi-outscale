# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetProductTypesResult',
    'AwaitableGetProductTypesResult',
    'get_product_types',
    'get_product_types_output',
]

@pulumi.output_type
class GetProductTypesResult:
    """
    A collection of values returned by getProductTypes.
    """
    def __init__(__self__, filters=None, id=None, product_types=None, request_id=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if product_types and not isinstance(product_types, list):
            raise TypeError("Expected argument 'product_types' to be a list")
        pulumi.set(__self__, "product_types", product_types)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetProductTypesFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="productTypes")
    def product_types(self) -> Sequence['outputs.GetProductTypesProductTypeResult']:
        """
        Information about one or more product types.
        """
        return pulumi.get(self, "product_types")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        return pulumi.get(self, "request_id")


class AwaitableGetProductTypesResult(GetProductTypesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProductTypesResult(
            filters=self.filters,
            id=self.id,
            product_types=self.product_types,
            request_id=self.request_id)


def get_product_types(filters: Optional[Sequence[Union['GetProductTypesFilterArgs', 'GetProductTypesFilterArgsDict']]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProductTypesResult:
    """
    Provides information about product types.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/Software-Licenses.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-producttype).

    ## Example Usage

    ### Read specific product types
    ```python
    import pulumi
    import pulumi_outscale as outscale

    product_types01 = outscale.get_product_types(filters=[{
        "name": "product_type_ids",
        "values": [
            "0001",
            "0002",
        ],
    }])
    ```

    ### Read all product types
    ```python
    import pulumi
    import pulumi_outscale as outscale

    all_product_types = outscale.get_product_types()
    ```


    :param Sequence[Union['GetProductTypesFilterArgs', 'GetProductTypesFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getProductTypes:getProductTypes', __args__, opts=opts, typ=GetProductTypesResult).value

    return AwaitableGetProductTypesResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        product_types=pulumi.get(__ret__, 'product_types'),
        request_id=pulumi.get(__ret__, 'request_id'))
def get_product_types_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetProductTypesFilterArgs', 'GetProductTypesFilterArgsDict']]]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProductTypesResult]:
    """
    Provides information about product types.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/Software-Licenses.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-producttype).

    ## Example Usage

    ### Read specific product types
    ```python
    import pulumi
    import pulumi_outscale as outscale

    product_types01 = outscale.get_product_types(filters=[{
        "name": "product_type_ids",
        "values": [
            "0001",
            "0002",
        ],
    }])
    ```

    ### Read all product types
    ```python
    import pulumi
    import pulumi_outscale as outscale

    all_product_types = outscale.get_product_types()
    ```


    :param Sequence[Union['GetProductTypesFilterArgs', 'GetProductTypesFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getProductTypes:getProductTypes', __args__, opts=opts, typ=GetProductTypesResult)
    return __ret__.apply(lambda __response__: GetProductTypesResult(
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        product_types=pulumi.get(__response__, 'product_types'),
        request_id=pulumi.get(__response__, 'request_id')))
