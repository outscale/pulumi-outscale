# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetVmStateResult',
    'AwaitableGetVmStateResult',
    'get_vm_state',
    'get_vm_state_output',
]

@pulumi.output_type
class GetVmStateResult:
    """
    A collection of values returned by getVmState.
    """
    def __init__(__self__, all_vms=None, filters=None, id=None, maintenance_events=None, request_id=None, subregion_name=None, vm_id=None, vm_state=None):
        if all_vms and not isinstance(all_vms, bool):
            raise TypeError("Expected argument 'all_vms' to be a bool")
        pulumi.set(__self__, "all_vms", all_vms)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if maintenance_events and not isinstance(maintenance_events, list):
            raise TypeError("Expected argument 'maintenance_events' to be a list")
        pulumi.set(__self__, "maintenance_events", maintenance_events)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if subregion_name and not isinstance(subregion_name, str):
            raise TypeError("Expected argument 'subregion_name' to be a str")
        pulumi.set(__self__, "subregion_name", subregion_name)
        if vm_id and not isinstance(vm_id, str):
            raise TypeError("Expected argument 'vm_id' to be a str")
        pulumi.set(__self__, "vm_id", vm_id)
        if vm_state and not isinstance(vm_state, str):
            raise TypeError("Expected argument 'vm_state' to be a str")
        pulumi.set(__self__, "vm_state", vm_state)

    @_builtins.property
    @pulumi.getter(name="allVms")
    def all_vms(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "all_vms")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetVmStateFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maintenanceEvents")
    def maintenance_events(self) -> Sequence['outputs.GetVmStateMaintenanceEventResult']:
        """
        One or more scheduled events associated with the VM.
        """
        return pulumi.get(self, "maintenance_events")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> _builtins.str:
        """
        The name of the Subregion of the VM.
        """
        return pulumi.get(self, "subregion_name")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[_builtins.str]:
        """
        The ID of the VM.
        """
        return pulumi.get(self, "vm_id")

    @_builtins.property
    @pulumi.getter(name="vmState")
    def vm_state(self) -> _builtins.str:
        """
        The state of the VM (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
        """
        return pulumi.get(self, "vm_state")


class AwaitableGetVmStateResult(GetVmStateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVmStateResult(
            all_vms=self.all_vms,
            filters=self.filters,
            id=self.id,
            maintenance_events=self.maintenance_events,
            request_id=self.request_id,
            subregion_name=self.subregion_name,
            vm_id=self.vm_id,
            vm_state=self.vm_state)


def get_vm_state(all_vms: Optional[_builtins.bool] = None,
                 filters: Optional[Sequence[Union['GetVmStateFilterArgs', 'GetVmStateFilterArgsDict']]] = None,
                 vm_id: Optional[_builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVmStateResult:
    """
    Provides information about a VM state.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VM-Lifecycle.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#readvmsstate).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    vm_state01 = outscale.get_vm_state(all_vms=True,
        filters=[{
            "name": "vm_ids",
            "values": ["i-12345678"],
        }])
    ```


    :param _builtins.bool all_vms: If true, includes the status of all VMs. By default or if set to false, only includes the status of running VMs.
    :param Sequence[Union['GetVmStateFilterArgs', 'GetVmStateFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    :param _builtins.str vm_id: The ID of the VM.
    """
    __args__ = dict()
    __args__['allVms'] = all_vms
    __args__['filters'] = filters
    __args__['vmId'] = vm_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getVmState:getVmState', __args__, opts=opts, typ=GetVmStateResult).value

    return AwaitableGetVmStateResult(
        all_vms=pulumi.get(__ret__, 'all_vms'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        maintenance_events=pulumi.get(__ret__, 'maintenance_events'),
        request_id=pulumi.get(__ret__, 'request_id'),
        subregion_name=pulumi.get(__ret__, 'subregion_name'),
        vm_id=pulumi.get(__ret__, 'vm_id'),
        vm_state=pulumi.get(__ret__, 'vm_state'))
def get_vm_state_output(all_vms: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                        filters: Optional[pulumi.Input[Optional[Sequence[Union['GetVmStateFilterArgs', 'GetVmStateFilterArgsDict']]]]] = None,
                        vm_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVmStateResult]:
    """
    Provides information about a VM state.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VM-Lifecycle.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#readvmsstate).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    vm_state01 = outscale.get_vm_state(all_vms=True,
        filters=[{
            "name": "vm_ids",
            "values": ["i-12345678"],
        }])
    ```


    :param _builtins.bool all_vms: If true, includes the status of all VMs. By default or if set to false, only includes the status of running VMs.
    :param Sequence[Union['GetVmStateFilterArgs', 'GetVmStateFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    :param _builtins.str vm_id: The ID of the VM.
    """
    __args__ = dict()
    __args__['allVms'] = all_vms
    __args__['filters'] = filters
    __args__['vmId'] = vm_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getVmState:getVmState', __args__, opts=opts, typ=GetVmStateResult)
    return __ret__.apply(lambda __response__: GetVmStateResult(
        all_vms=pulumi.get(__response__, 'all_vms'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        maintenance_events=pulumi.get(__response__, 'maintenance_events'),
        request_id=pulumi.get(__response__, 'request_id'),
        subregion_name=pulumi.get(__response__, 'subregion_name'),
        vm_id=pulumi.get(__response__, 'vm_id'),
        vm_state=pulumi.get(__response__, 'vm_state')))
