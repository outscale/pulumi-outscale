# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VolumeLinkArgs', 'VolumeLink']

@pulumi.input_type
class VolumeLinkArgs:
    def __init__(__self__, *,
                 device_name: pulumi.Input[_builtins.str],
                 vm_id: pulumi.Input[_builtins.str],
                 volume_id: pulumi.Input[_builtins.str],
                 force_unlink: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input['VolumeLinkTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a VolumeLink resource.
        :param pulumi.Input[_builtins.str] device_name: The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        :param pulumi.Input[_builtins.str] vm_id: The ID of the VM you want to attach the volume to.
        :param pulumi.Input[_builtins.str] volume_id: The ID of the volume you want to attach.
        """
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "vm_id", vm_id)
        pulumi.set(__self__, "volume_id", volume_id)
        if force_unlink is not None:
            pulumi.set(__self__, "force_unlink", force_unlink)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        """
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "device_name", value)

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the VM you want to attach the volume to.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "vm_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the volume you want to attach.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "volume_id", value)

    @_builtins.property
    @pulumi.getter(name="forceUnlink")
    def force_unlink(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "force_unlink")

    @force_unlink.setter
    def force_unlink(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_unlink", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['VolumeLinkTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['VolumeLinkTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _VolumeLinkState:
    def __init__(__self__, *,
                 delete_on_vm_deletion: Optional[pulumi.Input[_builtins.bool]] = None,
                 device_name: Optional[pulumi.Input[_builtins.str]] = None,
                 force_unlink: Optional[pulumi.Input[_builtins.bool]] = None,
                 request_id: Optional[pulumi.Input[_builtins.str]] = None,
                 state: Optional[pulumi.Input[_builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['VolumeLinkTimeoutsArgs']] = None,
                 vm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering VolumeLink resources.
        :param pulumi.Input[_builtins.bool] delete_on_vm_deletion: If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        :param pulumi.Input[_builtins.str] device_name: The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        :param pulumi.Input[_builtins.str] state: The state of the attachment of the volume (`attaching` | `detaching` | `attached` | `detached`).
        :param pulumi.Input[_builtins.str] vm_id: The ID of the VM you want to attach the volume to.
        :param pulumi.Input[_builtins.str] volume_id: The ID of the volume you want to attach.
        """
        if delete_on_vm_deletion is not None:
            pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if force_unlink is not None:
            pulumi.set(__self__, "force_unlink", force_unlink)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @delete_on_vm_deletion.setter
    def delete_on_vm_deletion(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "delete_on_vm_deletion", value)

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        """
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "device_name", value)

    @_builtins.property
    @pulumi.getter(name="forceUnlink")
    def force_unlink(self) -> Optional[pulumi.Input[_builtins.bool]]:
        return pulumi.get(self, "force_unlink")

    @force_unlink.setter
    def force_unlink(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "force_unlink", value)

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_id", value)

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The state of the attachment of the volume (`attaching` | `detaching` | `attached` | `detached`).
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "state", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['VolumeLinkTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['VolumeLinkTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the VM you want to attach the volume to.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vm_id", value)

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the volume you want to attach.
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "volume_id", value)


@pulumi.type_token("outscale:index/volumeLink:VolumeLink")
class VolumeLink(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_name: Optional[pulumi.Input[_builtins.str]] = None,
                 force_unlink: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input[Union['VolumeLinkTimeoutsArgs', 'VolumeLinkTimeoutsArgsDict']]] = None,
                 vm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a volume link.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Volumes.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-volume).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        volume01 = outscale.Volume("volume01",
            subregion_name=f"{region}a",
            size=40)
        vm01 = outscale.Vm("vm01",
            image_id=image_id,
            vm_type=vm_type,
            keypair_name=keypair_name,
            security_group_ids=[security_group_id])
        ```

        ### Link a volume to a VM

        ```python
        import pulumi
        import pulumi_outscale as outscale

        volume_link01 = outscale.VolumeLink("volume_link01",
            device_name="/dev/xvdc",
            volume_id=volume01["id"],
            vm_id=vm01["id"])
        ```

        ## Import

        A volume link can be imported using a volume ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/volumeLink:VolumeLink ImportedVolumeLink vol-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] device_name: The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        :param pulumi.Input[_builtins.str] vm_id: The ID of the VM you want to attach the volume to.
        :param pulumi.Input[_builtins.str] volume_id: The ID of the volume you want to attach.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VolumeLinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a volume link.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Volumes.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-volume).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        volume01 = outscale.Volume("volume01",
            subregion_name=f"{region}a",
            size=40)
        vm01 = outscale.Vm("vm01",
            image_id=image_id,
            vm_type=vm_type,
            keypair_name=keypair_name,
            security_group_ids=[security_group_id])
        ```

        ### Link a volume to a VM

        ```python
        import pulumi
        import pulumi_outscale as outscale

        volume_link01 = outscale.VolumeLink("volume_link01",
            device_name="/dev/xvdc",
            volume_id=volume01["id"],
            vm_id=vm01["id"])
        ```

        ## Import

        A volume link can be imported using a volume ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/volumeLink:VolumeLink ImportedVolumeLink vol-12345678
        ```

        :param str resource_name: The name of the resource.
        :param VolumeLinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VolumeLinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_name: Optional[pulumi.Input[_builtins.str]] = None,
                 force_unlink: Optional[pulumi.Input[_builtins.bool]] = None,
                 timeouts: Optional[pulumi.Input[Union['VolumeLinkTimeoutsArgs', 'VolumeLinkTimeoutsArgsDict']]] = None,
                 vm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 volume_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VolumeLinkArgs.__new__(VolumeLinkArgs)

            if device_name is None and not opts.urn:
                raise TypeError("Missing required property 'device_name'")
            __props__.__dict__["device_name"] = device_name
            __props__.__dict__["force_unlink"] = force_unlink
            __props__.__dict__["timeouts"] = timeouts
            if vm_id is None and not opts.urn:
                raise TypeError("Missing required property 'vm_id'")
            __props__.__dict__["vm_id"] = vm_id
            if volume_id is None and not opts.urn:
                raise TypeError("Missing required property 'volume_id'")
            __props__.__dict__["volume_id"] = volume_id
            __props__.__dict__["delete_on_vm_deletion"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["state"] = None
        super(VolumeLink, __self__).__init__(
            'outscale:index/volumeLink:VolumeLink',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete_on_vm_deletion: Optional[pulumi.Input[_builtins.bool]] = None,
            device_name: Optional[pulumi.Input[_builtins.str]] = None,
            force_unlink: Optional[pulumi.Input[_builtins.bool]] = None,
            request_id: Optional[pulumi.Input[_builtins.str]] = None,
            state: Optional[pulumi.Input[_builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['VolumeLinkTimeoutsArgs', 'VolumeLinkTimeoutsArgsDict']]] = None,
            vm_id: Optional[pulumi.Input[_builtins.str]] = None,
            volume_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'VolumeLink':
        """
        Get an existing VolumeLink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] delete_on_vm_deletion: If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        :param pulumi.Input[_builtins.str] device_name: The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        :param pulumi.Input[_builtins.str] state: The state of the attachment of the volume (`attaching` | `detaching` | `attached` | `detached`).
        :param pulumi.Input[_builtins.str] vm_id: The ID of the VM you want to attach the volume to.
        :param pulumi.Input[_builtins.str] volume_id: The ID of the volume you want to attach.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VolumeLinkState.__new__(_VolumeLinkState)

        __props__.__dict__["delete_on_vm_deletion"] = delete_on_vm_deletion
        __props__.__dict__["device_name"] = device_name
        __props__.__dict__["force_unlink"] = force_unlink
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["state"] = state
        __props__.__dict__["timeouts"] = timeouts
        __props__.__dict__["vm_id"] = vm_id
        __props__.__dict__["volume_id"] = volume_id
        return VolumeLink(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> pulumi.Output[_builtins.bool]:
        """
        If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        """
        return pulumi.get(self, "delete_on_vm_deletion")

    @_builtins.property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        """
        return pulumi.get(self, "device_name")

    @_builtins.property
    @pulumi.getter(name="forceUnlink")
    def force_unlink(self) -> pulumi.Output[_builtins.bool]:
        return pulumi.get(self, "force_unlink")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output[_builtins.str]:
        """
        The state of the attachment of the volume (`attaching` | `detaching` | `attached` | `detached`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.VolumeLinkTimeouts']]:
        return pulumi.get(self, "timeouts")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the VM you want to attach the volume to.
        """
        return pulumi.get(self, "vm_id")

    @_builtins.property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the volume you want to attach.
        """
        return pulumi.get(self, "volume_id")

