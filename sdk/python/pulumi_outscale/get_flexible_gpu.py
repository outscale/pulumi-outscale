# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetFlexibleGpuResult',
    'AwaitableGetFlexibleGpuResult',
    'get_flexible_gpu',
    'get_flexible_gpu_output',
]

@pulumi.output_type
class GetFlexibleGpuResult:
    """
    A collection of values returned by getFlexibleGpu.
    """
    def __init__(__self__, delete_on_vm_deletion=None, filters=None, flexible_gpu_id=None, generation=None, id=None, model_name=None, request_id=None, state=None, subregion_name=None, vm_id=None):
        if delete_on_vm_deletion and not isinstance(delete_on_vm_deletion, bool):
            raise TypeError("Expected argument 'delete_on_vm_deletion' to be a bool")
        pulumi.set(__self__, "delete_on_vm_deletion", delete_on_vm_deletion)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if flexible_gpu_id and not isinstance(flexible_gpu_id, str):
            raise TypeError("Expected argument 'flexible_gpu_id' to be a str")
        pulumi.set(__self__, "flexible_gpu_id", flexible_gpu_id)
        if generation and not isinstance(generation, str):
            raise TypeError("Expected argument 'generation' to be a str")
        pulumi.set(__self__, "generation", generation)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if model_name and not isinstance(model_name, str):
            raise TypeError("Expected argument 'model_name' to be a str")
        pulumi.set(__self__, "model_name", model_name)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if subregion_name and not isinstance(subregion_name, str):
            raise TypeError("Expected argument 'subregion_name' to be a str")
        pulumi.set(__self__, "subregion_name", subregion_name)
        if vm_id and not isinstance(vm_id, str):
            raise TypeError("Expected argument 'vm_id' to be a str")
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="deleteOnVmDeletion")
    def delete_on_vm_deletion(self) -> bool:
        return pulumi.get(self, "delete_on_vm_deletion")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetFlexibleGpuFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="flexibleGpuId")
    def flexible_gpu_id(self) -> str:
        return pulumi.get(self, "flexible_gpu_id")

    @property
    @pulumi.getter
    def generation(self) -> str:
        return pulumi.get(self, "generation")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modelName")
    def model_name(self) -> str:
        return pulumi.get(self, "model_name")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> str:
        return pulumi.get(self, "subregion_name")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> str:
        return pulumi.get(self, "vm_id")


class AwaitableGetFlexibleGpuResult(GetFlexibleGpuResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFlexibleGpuResult(
            delete_on_vm_deletion=self.delete_on_vm_deletion,
            filters=self.filters,
            flexible_gpu_id=self.flexible_gpu_id,
            generation=self.generation,
            id=self.id,
            model_name=self.model_name,
            request_id=self.request_id,
            state=self.state,
            subregion_name=self.subregion_name,
            vm_id=self.vm_id)


def get_flexible_gpu(filters: Optional[Sequence[pulumi.InputType['GetFlexibleGpuFilterArgs']]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFlexibleGpuResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getFlexibleGpu:getFlexibleGpu', __args__, opts=opts, typ=GetFlexibleGpuResult).value

    return AwaitableGetFlexibleGpuResult(
        delete_on_vm_deletion=pulumi.get(__ret__, 'delete_on_vm_deletion'),
        filters=pulumi.get(__ret__, 'filters'),
        flexible_gpu_id=pulumi.get(__ret__, 'flexible_gpu_id'),
        generation=pulumi.get(__ret__, 'generation'),
        id=pulumi.get(__ret__, 'id'),
        model_name=pulumi.get(__ret__, 'model_name'),
        request_id=pulumi.get(__ret__, 'request_id'),
        state=pulumi.get(__ret__, 'state'),
        subregion_name=pulumi.get(__ret__, 'subregion_name'),
        vm_id=pulumi.get(__ret__, 'vm_id'))


@_utilities.lift_output_func(get_flexible_gpu)
def get_flexible_gpu_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetFlexibleGpuFilterArgs']]]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFlexibleGpuResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
