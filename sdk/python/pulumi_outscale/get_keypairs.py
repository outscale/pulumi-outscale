# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetKeypairsResult',
    'AwaitableGetKeypairsResult',
    'get_keypairs',
    'get_keypairs_output',
]

@pulumi.output_type
class GetKeypairsResult:
    """
    A collection of values returned by getKeypairs.
    """
    def __init__(__self__, filters=None, id=None, keypair_names=None, keypairs=None, request_id=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if keypair_names and not isinstance(keypair_names, list):
            raise TypeError("Expected argument 'keypair_names' to be a list")
        pulumi.set(__self__, "keypair_names", keypair_names)
        if keypairs and not isinstance(keypairs, list):
            raise TypeError("Expected argument 'keypairs' to be a list")
        pulumi.set(__self__, "keypairs", keypairs)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetKeypairsFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="keypairNames")
    def keypair_names(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "keypair_names")

    @_builtins.property
    @pulumi.getter
    def keypairs(self) -> Sequence['outputs.GetKeypairsKeypairResult']:
        """
        Information about one or more keypairs.
        """
        return pulumi.get(self, "keypairs")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        return pulumi.get(self, "request_id")


class AwaitableGetKeypairsResult(GetKeypairsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKeypairsResult(
            filters=self.filters,
            id=self.id,
            keypair_names=self.keypair_names,
            keypairs=self.keypairs,
            request_id=self.request_id)


def get_keypairs(filters: Optional[Sequence[Union['GetKeypairsFilterArgs', 'GetKeypairsFilterArgsDict']]] = None,
                 keypair_names: Optional[Sequence[_builtins.str]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKeypairsResult:
    """
    Provides information about keypairs.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Keypairs.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-keypair).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    keypairs01 = outscale.get_keypairs(filters=[{
        "name": "keypair_names",
        "values": [
            "terraform-keypair-01",
            "terraform-keypair-02",
        ],
    }])
    ```


    :param Sequence[Union['GetKeypairsFilterArgs', 'GetKeypairsFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['keypairNames'] = keypair_names
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getKeypairs:getKeypairs', __args__, opts=opts, typ=GetKeypairsResult).value

    return AwaitableGetKeypairsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        keypair_names=pulumi.get(__ret__, 'keypair_names'),
        keypairs=pulumi.get(__ret__, 'keypairs'),
        request_id=pulumi.get(__ret__, 'request_id'))
def get_keypairs_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetKeypairsFilterArgs', 'GetKeypairsFilterArgsDict']]]]] = None,
                        keypair_names: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetKeypairsResult]:
    """
    Provides information about keypairs.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Keypairs.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-keypair).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    keypairs01 = outscale.get_keypairs(filters=[{
        "name": "keypair_names",
        "values": [
            "terraform-keypair-01",
            "terraform-keypair-02",
        ],
    }])
    ```


    :param Sequence[Union['GetKeypairsFilterArgs', 'GetKeypairsFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['keypairNames'] = keypair_names
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getKeypairs:getKeypairs', __args__, opts=opts, typ=GetKeypairsResult)
    return __ret__.apply(lambda __response__: GetKeypairsResult(
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        keypair_names=pulumi.get(__response__, 'keypair_names'),
        keypairs=pulumi.get(__response__, 'keypairs'),
        request_id=pulumi.get(__response__, 'request_id')))
