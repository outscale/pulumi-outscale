# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SnapshotExportTaskArgs', 'SnapshotExportTask']

@pulumi.input_type
class SnapshotExportTaskArgs:
    def __init__(__self__, *,
                 osu_exports: pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskOsuExportArgs']]],
                 snapshot_id: pulumi.Input[str],
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskTagArgs']]]] = None):
        """
        The set of arguments for constructing a SnapshotExportTask resource.
        :param pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskOsuExportArgs']]] osu_exports: Information about the OOS export task to create.
        :param pulumi.Input[str] snapshot_id: The ID of the snapshot to export.
        :param pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        pulumi.set(__self__, "osu_exports", osu_exports)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="osuExports")
    def osu_exports(self) -> pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskOsuExportArgs']]]:
        """
        Information about the OOS export task to create.
        """
        return pulumi.get(self, "osu_exports")

    @osu_exports.setter
    def osu_exports(self, value: pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskOsuExportArgs']]]):
        pulumi.set(self, "osu_exports", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Input[str]:
        """
        The ID of the snapshot to export.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _SnapshotExportTaskState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 osu_exports: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskOsuExportArgs']]]] = None,
                 progress: Optional[pulumi.Input[int]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskTagArgs']]]] = None,
                 task_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SnapshotExportTask resources.
        :param pulumi.Input[str] comment: If the snapshot export task fails, an error message appears.
        :param pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskOsuExportArgs']]] osu_exports: Information about the OOS export task to create.
        :param pulumi.Input[int] progress: The progress of the snapshot export task, as a percentage.
        :param pulumi.Input[str] snapshot_id: The ID of the snapshot to export.
        :param pulumi.Input[str] state: The state of the snapshot export task (`pending` \\| `active` \\| `completed` \\| `failed`).
        :param pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[str] task_id: The ID of the snapshot export task.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if osu_exports is not None:
            pulumi.set(__self__, "osu_exports", osu_exports)
        if progress is not None:
            pulumi.set(__self__, "progress", progress)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if task_id is not None:
            pulumi.set(__self__, "task_id", task_id)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        If the snapshot export task fails, an error message appears.
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="osuExports")
    def osu_exports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskOsuExportArgs']]]]:
        """
        Information about the OOS export task to create.
        """
        return pulumi.get(self, "osu_exports")

    @osu_exports.setter
    def osu_exports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskOsuExportArgs']]]]):
        pulumi.set(self, "osu_exports", value)

    @property
    @pulumi.getter
    def progress(self) -> Optional[pulumi.Input[int]]:
        """
        The progress of the snapshot export task, as a percentage.
        """
        return pulumi.get(self, "progress")

    @progress.setter
    def progress(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "progress", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the snapshot to export.
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The state of the snapshot export task (`pending` \\| `active` \\| `completed` \\| `failed`).
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnapshotExportTaskTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the snapshot export task.
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_id", value)


class SnapshotExportTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 osu_exports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnapshotExportTaskOsuExportArgs']]]]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnapshotExportTaskTagArgs']]]]] = None,
                 __props__=None):
        """
        Manages a snapshot export task.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Snapshots.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-snapshot).

        ## Example Usage
        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        volume01 = outscale.Volume("volume01",
            subregion_name=f"{var['region']}a",
            size=40)
        snapshot01 = outscale.Snapshot("snapshot01", volume_id=volume01.volume_id)
        ```
        ### Create a snapshot export task

        ```python
        import pulumi
        import pulumi_outscale as outscale

        snapshot_export_task01 = outscale.SnapshotExportTask("snapshotExportTask01",
            snapshot_id=outscale_snapshot["snapshot01"]["snapshot_id"],
            osu_exports=[outscale.SnapshotExportTaskOsuExportArgs(
                disk_image_format="qcow2",
                osu_bucket="terraform-bucket",
                osu_prefix="new-export",
                osu_api_keys=[outscale.SnapshotExportTaskOsuExportOsuApiKeyArgs(
                    api_key_id=var["access_key_id"],
                    secret_key=var["secret_key_id"],
                )],
            )],
            tags=[outscale.SnapshotExportTaskTagArgs(
                key="Name",
                value="terraform-snapshot-export-task",
            )])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnapshotExportTaskOsuExportArgs']]]] osu_exports: Information about the OOS export task to create.
        :param pulumi.Input[str] snapshot_id: The ID of the snapshot to export.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnapshotExportTaskTagArgs']]]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SnapshotExportTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a snapshot export task.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Snapshots.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-snapshot).

        ## Example Usage
        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        volume01 = outscale.Volume("volume01",
            subregion_name=f"{var['region']}a",
            size=40)
        snapshot01 = outscale.Snapshot("snapshot01", volume_id=volume01.volume_id)
        ```
        ### Create a snapshot export task

        ```python
        import pulumi
        import pulumi_outscale as outscale

        snapshot_export_task01 = outscale.SnapshotExportTask("snapshotExportTask01",
            snapshot_id=outscale_snapshot["snapshot01"]["snapshot_id"],
            osu_exports=[outscale.SnapshotExportTaskOsuExportArgs(
                disk_image_format="qcow2",
                osu_bucket="terraform-bucket",
                osu_prefix="new-export",
                osu_api_keys=[outscale.SnapshotExportTaskOsuExportOsuApiKeyArgs(
                    api_key_id=var["access_key_id"],
                    secret_key=var["secret_key_id"],
                )],
            )],
            tags=[outscale.SnapshotExportTaskTagArgs(
                key="Name",
                value="terraform-snapshot-export-task",
            )])
        ```

        :param str resource_name: The name of the resource.
        :param SnapshotExportTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnapshotExportTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 osu_exports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnapshotExportTaskOsuExportArgs']]]]] = None,
                 snapshot_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnapshotExportTaskTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnapshotExportTaskArgs.__new__(SnapshotExportTaskArgs)

            if osu_exports is None and not opts.urn:
                raise TypeError("Missing required property 'osu_exports'")
            __props__.__dict__["osu_exports"] = osu_exports
            if snapshot_id is None and not opts.urn:
                raise TypeError("Missing required property 'snapshot_id'")
            __props__.__dict__["snapshot_id"] = snapshot_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["comment"] = None
            __props__.__dict__["progress"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["task_id"] = None
        super(SnapshotExportTask, __self__).__init__(
            'outscale:index/snapshotExportTask:SnapshotExportTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            osu_exports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnapshotExportTaskOsuExportArgs']]]]] = None,
            progress: Optional[pulumi.Input[int]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            snapshot_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnapshotExportTaskTagArgs']]]]] = None,
            task_id: Optional[pulumi.Input[str]] = None) -> 'SnapshotExportTask':
        """
        Get an existing SnapshotExportTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: If the snapshot export task fails, an error message appears.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnapshotExportTaskOsuExportArgs']]]] osu_exports: Information about the OOS export task to create.
        :param pulumi.Input[int] progress: The progress of the snapshot export task, as a percentage.
        :param pulumi.Input[str] snapshot_id: The ID of the snapshot to export.
        :param pulumi.Input[str] state: The state of the snapshot export task (`pending` \\| `active` \\| `completed` \\| `failed`).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnapshotExportTaskTagArgs']]]] tags: A tag to add to this resource. You can specify this argument several times.
        :param pulumi.Input[str] task_id: The ID of the snapshot export task.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnapshotExportTaskState.__new__(_SnapshotExportTaskState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["osu_exports"] = osu_exports
        __props__.__dict__["progress"] = progress
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["snapshot_id"] = snapshot_id
        __props__.__dict__["state"] = state
        __props__.__dict__["tags"] = tags
        __props__.__dict__["task_id"] = task_id
        return SnapshotExportTask(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[str]:
        """
        If the snapshot export task fails, an error message appears.
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="osuExports")
    def osu_exports(self) -> pulumi.Output[Sequence['outputs.SnapshotExportTaskOsuExport']]:
        """
        Information about the OOS export task to create.
        """
        return pulumi.get(self, "osu_exports")

    @property
    @pulumi.getter
    def progress(self) -> pulumi.Output[int]:
        """
        The progress of the snapshot export task, as a percentage.
        """
        return pulumi.get(self, "progress")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Output[str]:
        """
        The ID of the snapshot to export.
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The state of the snapshot export task (`pending` \\| `active` \\| `completed` \\| `failed`).
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.SnapshotExportTaskTag']]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Output[str]:
        """
        The ID of the snapshot export task.
        """
        return pulumi.get(self, "task_id")

