# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetClientGatewayResult',
    'AwaitableGetClientGatewayResult',
    'get_client_gateway',
    'get_client_gateway_output',
]

@pulumi.output_type
class GetClientGatewayResult:
    """
    A collection of values returned by getClientGateway.
    """
    def __init__(__self__, bgp_asn=None, client_gateway_id=None, connection_type=None, filters=None, id=None, public_ip=None, request_id=None, state=None, tags=None):
        if bgp_asn and not isinstance(bgp_asn, int):
            raise TypeError("Expected argument 'bgp_asn' to be a int")
        pulumi.set(__self__, "bgp_asn", bgp_asn)
        if client_gateway_id and not isinstance(client_gateway_id, str):
            raise TypeError("Expected argument 'client_gateway_id' to be a str")
        pulumi.set(__self__, "client_gateway_id", client_gateway_id)
        if connection_type and not isinstance(connection_type, str):
            raise TypeError("Expected argument 'connection_type' to be a str")
        pulumi.set(__self__, "connection_type", connection_type)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="bgpAsn")
    def bgp_asn(self) -> int:
        """
        The Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find the path to your client gateway through the Internet.
        """
        return pulumi.get(self, "bgp_asn")

    @property
    @pulumi.getter(name="clientGatewayId")
    def client_gateway_id(self) -> Optional[str]:
        """
        The ID of the client gateway.
        """
        return pulumi.get(self, "client_gateway_id")

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> str:
        """
        The type of communication tunnel used by the client gateway (only `ipsec.1` is supported).
        """
        return pulumi.get(self, "connection_type")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetClientGatewayFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> str:
        """
        The public IPv4 address of the client gateway (must be a fixed address into a NATed network).
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the client gateway (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetClientGatewayTagResult']:
        """
        One or more tags associated with the client gateway.
        """
        return pulumi.get(self, "tags")


class AwaitableGetClientGatewayResult(GetClientGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClientGatewayResult(
            bgp_asn=self.bgp_asn,
            client_gateway_id=self.client_gateway_id,
            connection_type=self.connection_type,
            filters=self.filters,
            id=self.id,
            public_ip=self.public_ip,
            request_id=self.request_id,
            state=self.state,
            tags=self.tags)


def get_client_gateway(client_gateway_id: Optional[str] = None,
                       filters: Optional[Sequence[pulumi.InputType['GetClientGatewayFilterArgs']]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClientGatewayResult:
    """
    Provides information about a client gateway.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Customer-Gateways.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-clientgateway).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    client_gateway01 = outscale.get_client_gateway(filters=[outscale.GetClientGatewayFilterArgs(
        name="client_gateway_ids",
        values=["cgw-12345678"],
    )])
    ```


    :param str client_gateway_id: The ID of the client gateway.
    :param Sequence[pulumi.InputType['GetClientGatewayFilterArgs']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    """
    __args__ = dict()
    __args__['clientGatewayId'] = client_gateway_id
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getClientGateway:getClientGateway', __args__, opts=opts, typ=GetClientGatewayResult).value

    return AwaitableGetClientGatewayResult(
        bgp_asn=pulumi.get(__ret__, 'bgp_asn'),
        client_gateway_id=pulumi.get(__ret__, 'client_gateway_id'),
        connection_type=pulumi.get(__ret__, 'connection_type'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        public_ip=pulumi.get(__ret__, 'public_ip'),
        request_id=pulumi.get(__ret__, 'request_id'),
        state=pulumi.get(__ret__, 'state'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_client_gateway)
def get_client_gateway_output(client_gateway_id: Optional[pulumi.Input[Optional[str]]] = None,
                              filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetClientGatewayFilterArgs']]]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClientGatewayResult]:
    """
    Provides information about a client gateway.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Customer-Gateways.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-clientgateway).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    client_gateway01 = outscale.get_client_gateway(filters=[outscale.GetClientGatewayFilterArgs(
        name="client_gateway_ids",
        values=["cgw-12345678"],
    )])
    ```


    :param str client_gateway_id: The ID of the client gateway.
    :param Sequence[pulumi.InputType['GetClientGatewayFilterArgs']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    """
    ...
