# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PublicIpLinkArgs', 'PublicIpLink']

@pulumi.input_type
class PublicIpLinkArgs:
    def __init__(__self__, *,
                 allow_relink: Optional[pulumi.Input[_builtins.bool]] = None,
                 nic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vm_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a PublicIpLink resource.
        :param pulumi.Input[_builtins.bool] allow_relink: If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
        :param pulumi.Input[_builtins.str] nic_id: (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `vm_id` parameter instead. You cannot specify both parameters at the same time.
        :param pulumi.Input[_builtins.str] private_ip: (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
        :param pulumi.Input[_builtins.str] public_ip: The public IP. This parameter is required unless you use the `public_ip_id` parameter.
        :param pulumi.Input[_builtins.str] public_ip_id: The allocation ID of the public IP. This parameter is required unless you use the `public_ip` parameter.
        :param pulumi.Input[_builtins.str] vm_id: The ID of the VM.<br />- In the public Cloud, this parameter is required.<br />- In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `nic_id` parameter instead. You cannot specify both parameters at the same time.
        """
        if allow_relink is not None:
            pulumi.set(__self__, "allow_relink", allow_relink)
        if nic_id is not None:
            pulumi.set(__self__, "nic_id", nic_id)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_id is not None:
            pulumi.set(__self__, "public_ip_id", public_ip_id)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter(name="allowRelink")
    def allow_relink(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
        """
        return pulumi.get(self, "allow_relink")

    @allow_relink.setter
    def allow_relink(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_relink", value)

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `vm_id` parameter instead. You cannot specify both parameters at the same time.
        """
        return pulumi.get(self, "nic_id")

    @nic_id.setter
    def nic_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nic_id", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IP. This parameter is required unless you use the `public_ip_id` parameter.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The allocation ID of the public IP. This parameter is required unless you use the `public_ip` parameter.
        """
        return pulumi.get(self, "public_ip_id")

    @public_ip_id.setter
    def public_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip_id", value)

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the VM.<br />- In the public Cloud, this parameter is required.<br />- In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `nic_id` parameter instead. You cannot specify both parameters at the same time.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vm_id", value)


@pulumi.input_type
class _PublicIpLinkState:
    def __init__(__self__, *,
                 allow_relink: Optional[pulumi.Input[_builtins.bool]] = None,
                 link_public_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nic_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 nic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 request_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['PublicIpLinkTagArgs']]]] = None,
                 vm_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering PublicIpLink resources.
        :param pulumi.Input[_builtins.bool] allow_relink: If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
        :param pulumi.Input[_builtins.str] link_public_ip_id: (Net only) The ID representing the association of the public IP with the VM or the NIC.
        :param pulumi.Input[_builtins.str] nic_id: (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `vm_id` parameter instead. You cannot specify both parameters at the same time.
        :param pulumi.Input[_builtins.str] private_ip: (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
        :param pulumi.Input[_builtins.str] public_ip: The public IP. This parameter is required unless you use the `public_ip_id` parameter.
        :param pulumi.Input[_builtins.str] public_ip_id: The allocation ID of the public IP. This parameter is required unless you use the `public_ip` parameter.
        :param pulumi.Input[_builtins.str] vm_id: The ID of the VM.<br />- In the public Cloud, this parameter is required.<br />- In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `nic_id` parameter instead. You cannot specify both parameters at the same time.
        """
        if allow_relink is not None:
            pulumi.set(__self__, "allow_relink", allow_relink)
        if link_public_ip_id is not None:
            pulumi.set(__self__, "link_public_ip_id", link_public_ip_id)
        if nic_account_id is not None:
            pulumi.set(__self__, "nic_account_id", nic_account_id)
        if nic_id is not None:
            pulumi.set(__self__, "nic_id", nic_id)
        if private_ip is not None:
            pulumi.set(__self__, "private_ip", private_ip)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if public_ip_id is not None:
            pulumi.set(__self__, "public_ip_id", public_ip_id)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @_builtins.property
    @pulumi.getter(name="allowRelink")
    def allow_relink(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
        """
        return pulumi.get(self, "allow_relink")

    @allow_relink.setter
    def allow_relink(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "allow_relink", value)

    @_builtins.property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Net only) The ID representing the association of the public IP with the VM or the NIC.
        """
        return pulumi.get(self, "link_public_ip_id")

    @link_public_ip_id.setter
    def link_public_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "link_public_ip_id", value)

    @_builtins.property
    @pulumi.getter(name="nicAccountId")
    def nic_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "nic_account_id")

    @nic_account_id.setter
    def nic_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nic_account_id", value)

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `vm_id` parameter instead. You cannot specify both parameters at the same time.
        """
        return pulumi.get(self, "nic_id")

    @nic_id.setter
    def nic_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "nic_id", value)

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
        """
        return pulumi.get(self, "private_ip")

    @private_ip.setter
    def private_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_ip", value)

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public IP. This parameter is required unless you use the `public_ip_id` parameter.
        """
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip", value)

    @_builtins.property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The allocation ID of the public IP. This parameter is required unless you use the `public_ip` parameter.
        """
        return pulumi.get(self, "public_ip_id")

    @public_ip_id.setter
    def public_ip_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_ip_id", value)

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PublicIpLinkTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PublicIpLinkTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the VM.<br />- In the public Cloud, this parameter is required.<br />- In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `nic_id` parameter instead. You cannot specify both parameters at the same time.
        """
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vm_id", value)


@pulumi.type_token("outscale:index/publicIpLink:PublicIpLink")
class PublicIpLink(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_relink: Optional[pulumi.Input[_builtins.bool]] = None,
                 nic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Manages a public IP link.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Public-IPs.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-publicip).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        public_ip01 = outscale.PublicIp("public_ip01")
        vm01 = outscale.Vm("vm01",
            image_id=image_id,
            vm_type=vm_type,
            keypair_name=keypair_name,
            security_group_ids=[security_group_id])
        ```

        ### Link a public IP address to a VM

        ```python
        import pulumi
        import pulumi_outscale as outscale

        public_ip_link01 = outscale.PublicIpLink("public_ip_link01",
            vm_id=vm01["vmId"],
            public_ip=public_ip01["publicIp"])
        ```

        ## Import

        A public IP link can be imported using the public IP or the public IP link ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/publicIpLink:PublicIpLink ImportedPublicIpLink eipassoc-12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_relink: If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
        :param pulumi.Input[_builtins.str] nic_id: (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `vm_id` parameter instead. You cannot specify both parameters at the same time.
        :param pulumi.Input[_builtins.str] private_ip: (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
        :param pulumi.Input[_builtins.str] public_ip: The public IP. This parameter is required unless you use the `public_ip_id` parameter.
        :param pulumi.Input[_builtins.str] public_ip_id: The allocation ID of the public IP. This parameter is required unless you use the `public_ip` parameter.
        :param pulumi.Input[_builtins.str] vm_id: The ID of the VM.<br />- In the public Cloud, this parameter is required.<br />- In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `nic_id` parameter instead. You cannot specify both parameters at the same time.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PublicIpLinkArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a public IP link.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Public-IPs.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-publicip).

        ## Example Usage

        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        public_ip01 = outscale.PublicIp("public_ip01")
        vm01 = outscale.Vm("vm01",
            image_id=image_id,
            vm_type=vm_type,
            keypair_name=keypair_name,
            security_group_ids=[security_group_id])
        ```

        ### Link a public IP address to a VM

        ```python
        import pulumi
        import pulumi_outscale as outscale

        public_ip_link01 = outscale.PublicIpLink("public_ip_link01",
            vm_id=vm01["vmId"],
            public_ip=public_ip01["publicIp"])
        ```

        ## Import

        A public IP link can be imported using the public IP or the public IP link ID. For example:

        console

        ```sh
        $ pulumi import outscale:index/publicIpLink:PublicIpLink ImportedPublicIpLink eipassoc-12345678
        ```

        :param str resource_name: The name of the resource.
        :param PublicIpLinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PublicIpLinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_relink: Optional[pulumi.Input[_builtins.bool]] = None,
                 nic_id: Optional[pulumi.Input[_builtins.str]] = None,
                 private_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip: Optional[pulumi.Input[_builtins.str]] = None,
                 public_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
                 vm_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PublicIpLinkArgs.__new__(PublicIpLinkArgs)

            __props__.__dict__["allow_relink"] = allow_relink
            __props__.__dict__["nic_id"] = nic_id
            __props__.__dict__["private_ip"] = private_ip
            __props__.__dict__["public_ip"] = public_ip
            __props__.__dict__["public_ip_id"] = public_ip_id
            __props__.__dict__["vm_id"] = vm_id
            __props__.__dict__["link_public_ip_id"] = None
            __props__.__dict__["nic_account_id"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["tags"] = None
        super(PublicIpLink, __self__).__init__(
            'outscale:index/publicIpLink:PublicIpLink',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_relink: Optional[pulumi.Input[_builtins.bool]] = None,
            link_public_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
            nic_account_id: Optional[pulumi.Input[_builtins.str]] = None,
            nic_id: Optional[pulumi.Input[_builtins.str]] = None,
            private_ip: Optional[pulumi.Input[_builtins.str]] = None,
            public_ip: Optional[pulumi.Input[_builtins.str]] = None,
            public_ip_id: Optional[pulumi.Input[_builtins.str]] = None,
            request_id: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['PublicIpLinkTagArgs', 'PublicIpLinkTagArgsDict']]]]] = None,
            vm_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'PublicIpLink':
        """
        Get an existing PublicIpLink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.bool] allow_relink: If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
        :param pulumi.Input[_builtins.str] link_public_ip_id: (Net only) The ID representing the association of the public IP with the VM or the NIC.
        :param pulumi.Input[_builtins.str] nic_id: (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `vm_id` parameter instead. You cannot specify both parameters at the same time.
        :param pulumi.Input[_builtins.str] private_ip: (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
        :param pulumi.Input[_builtins.str] public_ip: The public IP. This parameter is required unless you use the `public_ip_id` parameter.
        :param pulumi.Input[_builtins.str] public_ip_id: The allocation ID of the public IP. This parameter is required unless you use the `public_ip` parameter.
        :param pulumi.Input[_builtins.str] vm_id: The ID of the VM.<br />- In the public Cloud, this parameter is required.<br />- In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `nic_id` parameter instead. You cannot specify both parameters at the same time.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PublicIpLinkState.__new__(_PublicIpLinkState)

        __props__.__dict__["allow_relink"] = allow_relink
        __props__.__dict__["link_public_ip_id"] = link_public_ip_id
        __props__.__dict__["nic_account_id"] = nic_account_id
        __props__.__dict__["nic_id"] = nic_id
        __props__.__dict__["private_ip"] = private_ip
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["public_ip_id"] = public_ip_id
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["vm_id"] = vm_id
        return PublicIpLink(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="allowRelink")
    def allow_relink(self) -> pulumi.Output[Optional[_builtins.bool]]:
        """
        If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
        """
        return pulumi.get(self, "allow_relink")

    @_builtins.property
    @pulumi.getter(name="linkPublicIpId")
    def link_public_ip_id(self) -> pulumi.Output[_builtins.str]:
        """
        (Net only) The ID representing the association of the public IP with the VM or the NIC.
        """
        return pulumi.get(self, "link_public_ip_id")

    @_builtins.property
    @pulumi.getter(name="nicAccountId")
    def nic_account_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "nic_account_id")

    @_builtins.property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> pulumi.Output[_builtins.str]:
        """
        (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `vm_id` parameter instead. You cannot specify both parameters at the same time.
        """
        return pulumi.get(self, "nic_id")

    @_builtins.property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> pulumi.Output[_builtins.str]:
        """
        (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
        """
        return pulumi.get(self, "private_ip")

    @_builtins.property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[_builtins.str]:
        """
        The public IP. This parameter is required unless you use the `public_ip_id` parameter.
        """
        return pulumi.get(self, "public_ip")

    @_builtins.property
    @pulumi.getter(name="publicIpId")
    def public_ip_id(self) -> pulumi.Output[_builtins.str]:
        """
        The allocation ID of the public IP. This parameter is required unless you use the `public_ip` parameter.
        """
        return pulumi.get(self, "public_ip_id")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.PublicIpLinkTag']]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the VM.<br />- In the public Cloud, this parameter is required.<br />- In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `nic_id` parameter instead. You cannot specify both parameters at the same time.
        """
        return pulumi.get(self, "vm_id")

