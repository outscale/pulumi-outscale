# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetCaResult',
    'AwaitableGetCaResult',
    'get_ca',
    'get_ca_output',
]

@pulumi.output_type
class GetCaResult:
    """
    A collection of values returned by getCa.
    """
    def __init__(__self__, ca_fingerprint=None, ca_id=None, ca_pem=None, description=None, filters=None, id=None, request_id=None):
        if ca_fingerprint and not isinstance(ca_fingerprint, str):
            raise TypeError("Expected argument 'ca_fingerprint' to be a str")
        pulumi.set(__self__, "ca_fingerprint", ca_fingerprint)
        if ca_id and not isinstance(ca_id, str):
            raise TypeError("Expected argument 'ca_id' to be a str")
        pulumi.set(__self__, "ca_id", ca_id)
        if ca_pem and not isinstance(ca_pem, str):
            raise TypeError("Expected argument 'ca_pem' to be a str")
        pulumi.set(__self__, "ca_pem", ca_pem)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)

    @property
    @pulumi.getter(name="caFingerprint")
    def ca_fingerprint(self) -> str:
        """
        The fingerprint of the CA.
        """
        return pulumi.get(self, "ca_fingerprint")

    @property
    @pulumi.getter(name="caId")
    def ca_id(self) -> str:
        """
        The ID of the CA.
        """
        return pulumi.get(self, "ca_id")

    @property
    @pulumi.getter(name="caPem")
    def ca_pem(self) -> str:
        return pulumi.get(self, "ca_pem")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the CA.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetCaFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")


class AwaitableGetCaResult(GetCaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCaResult(
            ca_fingerprint=self.ca_fingerprint,
            ca_id=self.ca_id,
            ca_pem=self.ca_pem,
            description=self.description,
            filters=self.filters,
            id=self.id,
            request_id=self.request_id)


def get_ca(filters: Optional[Sequence[pulumi.InputType['GetCaFilterArgs']]] = None,
           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCaResult:
    """
    Provides information about a Certificate Authority (CA).

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-API-Access-Rules.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-ca).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    ca01 = outscale.get_ca(filters=[outscale.GetCaFilterArgs(
        name="ca_ids",
        values=["ca-12345678"],
    )])
    ```


    :param Sequence[pulumi.InputType['GetCaFilterArgs']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getCa:getCa', __args__, opts=opts, typ=GetCaResult).value

    return AwaitableGetCaResult(
        ca_fingerprint=pulumi.get(__ret__, 'ca_fingerprint'),
        ca_id=pulumi.get(__ret__, 'ca_id'),
        ca_pem=pulumi.get(__ret__, 'ca_pem'),
        description=pulumi.get(__ret__, 'description'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        request_id=pulumi.get(__ret__, 'request_id'))


@_utilities.lift_output_func(get_ca)
def get_ca_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetCaFilterArgs']]]]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCaResult]:
    """
    Provides information about a Certificate Authority (CA).

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-API-Access-Rules.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-ca).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    ca01 = outscale.get_ca(filters=[outscale.GetCaFilterArgs(
        name="ca_ids",
        values=["ca-12345678"],
    )])
    ```


    :param Sequence[pulumi.InputType['GetCaFilterArgs']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    """
    ...
