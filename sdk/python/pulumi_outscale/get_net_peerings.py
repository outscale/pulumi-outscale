# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNetPeeringsResult',
    'AwaitableGetNetPeeringsResult',
    'get_net_peerings',
    'get_net_peerings_output',
]

@pulumi.output_type
class GetNetPeeringsResult:
    """
    A collection of values returned by getNetPeerings.
    """
    def __init__(__self__, filters=None, id=None, net_peerings=None, request_id=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if net_peerings and not isinstance(net_peerings, list):
            raise TypeError("Expected argument 'net_peerings' to be a list")
        pulumi.set(__self__, "net_peerings", net_peerings)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetNetPeeringsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="netPeerings")
    def net_peerings(self) -> Sequence['outputs.GetNetPeeringsNetPeeringResult']:
        return pulumi.get(self, "net_peerings")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")


class AwaitableGetNetPeeringsResult(GetNetPeeringsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetPeeringsResult(
            filters=self.filters,
            id=self.id,
            net_peerings=self.net_peerings,
            request_id=self.request_id)


def get_net_peerings(filters: Optional[Sequence[pulumi.InputType['GetNetPeeringsFilterArgs']]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetPeeringsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getNetPeerings:getNetPeerings', __args__, opts=opts, typ=GetNetPeeringsResult).value

    return AwaitableGetNetPeeringsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        net_peerings=pulumi.get(__ret__, 'net_peerings'),
        request_id=pulumi.get(__ret__, 'request_id'))


@_utilities.lift_output_func(get_net_peerings)
def get_net_peerings_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNetPeeringsFilterArgs']]]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetPeeringsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
