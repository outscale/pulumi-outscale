# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetLoadBalancerVmHealthResult',
    'AwaitableGetLoadBalancerVmHealthResult',
    'get_load_balancer_vm_health',
    'get_load_balancer_vm_health_output',
]

@pulumi.output_type
class GetLoadBalancerVmHealthResult:
    """
    A collection of values returned by getLoadBalancerVmHealth.
    """
    def __init__(__self__, backend_vm_healths=None, backend_vm_ids=None, filters=None, id=None, load_balancer_name=None, request_id=None):
        if backend_vm_healths and not isinstance(backend_vm_healths, list):
            raise TypeError("Expected argument 'backend_vm_healths' to be a list")
        pulumi.set(__self__, "backend_vm_healths", backend_vm_healths)
        if backend_vm_ids and not isinstance(backend_vm_ids, list):
            raise TypeError("Expected argument 'backend_vm_ids' to be a list")
        pulumi.set(__self__, "backend_vm_ids", backend_vm_ids)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if load_balancer_name and not isinstance(load_balancer_name, str):
            raise TypeError("Expected argument 'load_balancer_name' to be a str")
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)

    @property
    @pulumi.getter(name="backendVmHealths")
    def backend_vm_healths(self) -> Sequence['outputs.GetLoadBalancerVmHealthBackendVmHealthResult']:
        return pulumi.get(self, "backend_vm_healths")

    @property
    @pulumi.getter(name="backendVmIds")
    def backend_vm_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "backend_vm_ids")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetLoadBalancerVmHealthFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> str:
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")


class AwaitableGetLoadBalancerVmHealthResult(GetLoadBalancerVmHealthResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLoadBalancerVmHealthResult(
            backend_vm_healths=self.backend_vm_healths,
            backend_vm_ids=self.backend_vm_ids,
            filters=self.filters,
            id=self.id,
            load_balancer_name=self.load_balancer_name,
            request_id=self.request_id)


def get_load_balancer_vm_health(backend_vm_ids: Optional[Sequence[str]] = None,
                                filters: Optional[Sequence[pulumi.InputType['GetLoadBalancerVmHealthFilterArgs']]] = None,
                                load_balancer_name: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLoadBalancerVmHealthResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['backendVmIds'] = backend_vm_ids
    __args__['filters'] = filters
    __args__['loadBalancerName'] = load_balancer_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getLoadBalancerVmHealth:getLoadBalancerVmHealth', __args__, opts=opts, typ=GetLoadBalancerVmHealthResult).value

    return AwaitableGetLoadBalancerVmHealthResult(
        backend_vm_healths=pulumi.get(__ret__, 'backend_vm_healths'),
        backend_vm_ids=pulumi.get(__ret__, 'backend_vm_ids'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        load_balancer_name=pulumi.get(__ret__, 'load_balancer_name'),
        request_id=pulumi.get(__ret__, 'request_id'))


@_utilities.lift_output_func(get_load_balancer_vm_health)
def get_load_balancer_vm_health_output(backend_vm_ids: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                                       filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetLoadBalancerVmHealthFilterArgs']]]]] = None,
                                       load_balancer_name: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLoadBalancerVmHealthResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
