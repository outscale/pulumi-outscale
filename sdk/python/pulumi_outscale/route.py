# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RouteArgs', 'Route']

@pulumi.input_type
class RouteArgs:
    def __init__(__self__, *,
                 destination_ip_range: pulumi.Input[str],
                 route_table_id: pulumi.Input[str],
                 await_active_state: Optional[pulumi.Input[bool]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 nat_service_id: Optional[pulumi.Input[str]] = None,
                 net_peering_id: Optional[pulumi.Input[str]] = None,
                 nic_id: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Route resource.
        """
        pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        pulumi.set(__self__, "route_table_id", route_table_id)
        if await_active_state is not None:
            pulumi.set(__self__, "await_active_state", await_active_state)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if nat_service_id is not None:
            pulumi.set(__self__, "nat_service_id", nat_service_id)
        if net_peering_id is not None:
            pulumi.set(__self__, "net_peering_id", net_peering_id)
        if nic_id is not None:
            pulumi.set(__self__, "nic_id", nic_id)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_ip_range")

    @destination_ip_range.setter
    def destination_ip_range(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_ip_range", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "route_table_id", value)

    @property
    @pulumi.getter(name="awaitActiveState")
    def await_active_state(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "await_active_state")

    @await_active_state.setter
    def await_active_state(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "await_active_state", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat_service_id")

    @nat_service_id.setter
    def nat_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_service_id", value)

    @property
    @pulumi.getter(name="netPeeringId")
    def net_peering_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_peering_id")

    @net_peering_id.setter
    def net_peering_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_peering_id", value)

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nic_id")

    @nic_id.setter
    def nic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nic_id", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_id", value)


@pulumi.input_type
class _RouteState:
    def __init__(__self__, *,
                 await_active_state: Optional[pulumi.Input[bool]] = None,
                 creation_method: Optional[pulumi.Input[str]] = None,
                 destination_ip_range: Optional[pulumi.Input[str]] = None,
                 destination_service_id: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 nat_access_point: Optional[pulumi.Input[str]] = None,
                 nat_service_id: Optional[pulumi.Input[str]] = None,
                 net_peering_id: Optional[pulumi.Input[str]] = None,
                 nic_id: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 vm_account_id: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Route resources.
        """
        if await_active_state is not None:
            pulumi.set(__self__, "await_active_state", await_active_state)
        if creation_method is not None:
            pulumi.set(__self__, "creation_method", creation_method)
        if destination_ip_range is not None:
            pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        if destination_service_id is not None:
            pulumi.set(__self__, "destination_service_id", destination_service_id)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if nat_access_point is not None:
            pulumi.set(__self__, "nat_access_point", nat_access_point)
        if nat_service_id is not None:
            pulumi.set(__self__, "nat_service_id", nat_service_id)
        if net_peering_id is not None:
            pulumi.set(__self__, "net_peering_id", net_peering_id)
        if nic_id is not None:
            pulumi.set(__self__, "nic_id", nic_id)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if route_table_id is not None:
            pulumi.set(__self__, "route_table_id", route_table_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vm_account_id is not None:
            pulumi.set(__self__, "vm_account_id", vm_account_id)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="awaitActiveState")
    def await_active_state(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "await_active_state")

    @await_active_state.setter
    def await_active_state(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "await_active_state", value)

    @property
    @pulumi.getter(name="creationMethod")
    def creation_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "creation_method")

    @creation_method.setter
    def creation_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_method", value)

    @property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_ip_range")

    @destination_ip_range.setter
    def destination_ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_ip_range", value)

    @property
    @pulumi.getter(name="destinationServiceId")
    def destination_service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_service_id")

    @destination_service_id.setter
    def destination_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_service_id", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="natAccessPoint")
    def nat_access_point(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat_access_point")

    @nat_access_point.setter
    def nat_access_point(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_access_point", value)

    @property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nat_service_id")

    @nat_service_id.setter
    def nat_service_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nat_service_id", value)

    @property
    @pulumi.getter(name="netPeeringId")
    def net_peering_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_peering_id")

    @net_peering_id.setter
    def net_peering_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_peering_id", value)

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "nic_id")

    @nic_id.setter
    def nic_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nic_id", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_table_id")

    @route_table_id.setter
    def route_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_table_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_account_id")

    @vm_account_id.setter
    def vm_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_account_id", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_id", value)


class Route(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 await_active_state: Optional[pulumi.Input[bool]] = None,
                 destination_ip_range: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 nat_service_id: Optional[pulumi.Input[str]] = None,
                 net_peering_id: Optional[pulumi.Input[str]] = None,
                 nic_id: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Route resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RouteArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Route resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RouteArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RouteArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 await_active_state: Optional[pulumi.Input[bool]] = None,
                 destination_ip_range: Optional[pulumi.Input[str]] = None,
                 gateway_id: Optional[pulumi.Input[str]] = None,
                 nat_service_id: Optional[pulumi.Input[str]] = None,
                 net_peering_id: Optional[pulumi.Input[str]] = None,
                 nic_id: Optional[pulumi.Input[str]] = None,
                 route_table_id: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RouteArgs.__new__(RouteArgs)

            __props__.__dict__["await_active_state"] = await_active_state
            if destination_ip_range is None and not opts.urn:
                raise TypeError("Missing required property 'destination_ip_range'")
            __props__.__dict__["destination_ip_range"] = destination_ip_range
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["nat_service_id"] = nat_service_id
            __props__.__dict__["net_peering_id"] = net_peering_id
            __props__.__dict__["nic_id"] = nic_id
            if route_table_id is None and not opts.urn:
                raise TypeError("Missing required property 'route_table_id'")
            __props__.__dict__["route_table_id"] = route_table_id
            __props__.__dict__["vm_id"] = vm_id
            __props__.__dict__["creation_method"] = None
            __props__.__dict__["destination_service_id"] = None
            __props__.__dict__["nat_access_point"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["vm_account_id"] = None
        super(Route, __self__).__init__(
            'outscale:index/route:Route',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            await_active_state: Optional[pulumi.Input[bool]] = None,
            creation_method: Optional[pulumi.Input[str]] = None,
            destination_ip_range: Optional[pulumi.Input[str]] = None,
            destination_service_id: Optional[pulumi.Input[str]] = None,
            gateway_id: Optional[pulumi.Input[str]] = None,
            nat_access_point: Optional[pulumi.Input[str]] = None,
            nat_service_id: Optional[pulumi.Input[str]] = None,
            net_peering_id: Optional[pulumi.Input[str]] = None,
            nic_id: Optional[pulumi.Input[str]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            route_table_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            vm_account_id: Optional[pulumi.Input[str]] = None,
            vm_id: Optional[pulumi.Input[str]] = None) -> 'Route':
        """
        Get an existing Route resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RouteState.__new__(_RouteState)

        __props__.__dict__["await_active_state"] = await_active_state
        __props__.__dict__["creation_method"] = creation_method
        __props__.__dict__["destination_ip_range"] = destination_ip_range
        __props__.__dict__["destination_service_id"] = destination_service_id
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["nat_access_point"] = nat_access_point
        __props__.__dict__["nat_service_id"] = nat_service_id
        __props__.__dict__["net_peering_id"] = net_peering_id
        __props__.__dict__["nic_id"] = nic_id
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["route_table_id"] = route_table_id
        __props__.__dict__["state"] = state
        __props__.__dict__["vm_account_id"] = vm_account_id
        __props__.__dict__["vm_id"] = vm_id
        return Route(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="awaitActiveState")
    def await_active_state(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "await_active_state")

    @property
    @pulumi.getter(name="creationMethod")
    def creation_method(self) -> pulumi.Output[str]:
        return pulumi.get(self, "creation_method")

    @property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> pulumi.Output[str]:
        return pulumi.get(self, "destination_ip_range")

    @property
    @pulumi.getter(name="destinationServiceId")
    def destination_service_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "destination_service_id")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="natAccessPoint")
    def nat_access_point(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nat_access_point")

    @property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "nat_service_id")

    @property
    @pulumi.getter(name="netPeeringId")
    def net_peering_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "net_peering_id")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vmAccountId")
    def vm_account_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vm_account_id")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vm_id")

