# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VpnConnectionRouteInitArgs', 'VpnConnectionRoute']

@pulumi.input_type
class VpnConnectionRouteInitArgs:
    def __init__(__self__, *,
                 destination_ip_range: pulumi.Input[str],
                 vpn_connection_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a VpnConnectionRoute resource.
        :param pulumi.Input[str] destination_ip_range: The network prefix of the route, in CIDR notation (for example, `10.12.0.0/16`).
        :param pulumi.Input[str] vpn_connection_id: The ID of the target VPN connection of the static route.
        """
        pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        pulumi.set(__self__, "vpn_connection_id", vpn_connection_id)

    @property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> pulumi.Input[str]:
        """
        The network prefix of the route, in CIDR notation (for example, `10.12.0.0/16`).
        """
        return pulumi.get(self, "destination_ip_range")

    @destination_ip_range.setter
    def destination_ip_range(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_ip_range", value)

    @property
    @pulumi.getter(name="vpnConnectionId")
    def vpn_connection_id(self) -> pulumi.Input[str]:
        """
        The ID of the target VPN connection of the static route.
        """
        return pulumi.get(self, "vpn_connection_id")

    @vpn_connection_id.setter
    def vpn_connection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpn_connection_id", value)


@pulumi.input_type
class _VpnConnectionRouteState:
    def __init__(__self__, *,
                 destination_ip_range: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 vpn_connection_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VpnConnectionRoute resources.
        :param pulumi.Input[str] destination_ip_range: The network prefix of the route, in CIDR notation (for example, `10.12.0.0/16`).
        :param pulumi.Input[str] vpn_connection_id: The ID of the target VPN connection of the static route.
        """
        if destination_ip_range is not None:
            pulumi.set(__self__, "destination_ip_range", destination_ip_range)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if vpn_connection_id is not None:
            pulumi.set(__self__, "vpn_connection_id", vpn_connection_id)

    @property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> Optional[pulumi.Input[str]]:
        """
        The network prefix of the route, in CIDR notation (for example, `10.12.0.0/16`).
        """
        return pulumi.get(self, "destination_ip_range")

    @destination_ip_range.setter
    def destination_ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_ip_range", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="vpnConnectionId")
    def vpn_connection_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the target VPN connection of the static route.
        """
        return pulumi.get(self, "vpn_connection_id")

    @vpn_connection_id.setter
    def vpn_connection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_connection_id", value)


class VpnConnectionRoute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_ip_range: Optional[pulumi.Input[str]] = None,
                 vpn_connection_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a VPN connection route.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Routing-Configuration-for-VPN-Connections.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vpnconnection).

        ## Example Usage
        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        client_gateway01 = outscale.ClientGateway("clientGateway01",
            bgp_asn=65000,
            public_ip="111.11.11.111",
            connection_type="ipsec.1")
        virtual_gateway01 = outscale.VirtualGateway("virtualGateway01", connection_type="ipsec.1")
        vpn_connection01 = outscale.VpnConnection("vpnConnection01",
            client_gateway_id=client_gateway01.client_gateway_id,
            virtual_gateway_id=virtual_gateway01.virtual_gateway_id,
            connection_type="ipsec.1",
            static_routes_only=True)
        ```
        ### Create a static route to a VPN connection

        ```python
        import pulumi
        import pulumi_outscale as outscale

        vpn_connection_route01 = outscale.VpnConnectionRoute("vpnConnectionRoute01",
            vpn_connection_id=outscale_vpn_connection["vpn_connection01"]["vpn_connection_id"],
            destination_ip_range="10.0.0.0/16")
        ```

        ## Import

        A VPN connection route can be imported using the VPN connection ID and the route destination IP range. For exampleconsole

        ```sh
         $ pulumi import outscale:index/vpnConnectionRoute:VpnConnectionRoute ImportedRoute vpn-12345678_10.0.0.0/0
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] destination_ip_range: The network prefix of the route, in CIDR notation (for example, `10.12.0.0/16`).
        :param pulumi.Input[str] vpn_connection_id: The ID of the target VPN connection of the static route.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpnConnectionRouteInitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a VPN connection route.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Routing-Configuration-for-VPN-Connections.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vpnconnection).

        ## Example Usage
        ### Required resources

        ```python
        import pulumi
        import pulumi_outscale as outscale

        client_gateway01 = outscale.ClientGateway("clientGateway01",
            bgp_asn=65000,
            public_ip="111.11.11.111",
            connection_type="ipsec.1")
        virtual_gateway01 = outscale.VirtualGateway("virtualGateway01", connection_type="ipsec.1")
        vpn_connection01 = outscale.VpnConnection("vpnConnection01",
            client_gateway_id=client_gateway01.client_gateway_id,
            virtual_gateway_id=virtual_gateway01.virtual_gateway_id,
            connection_type="ipsec.1",
            static_routes_only=True)
        ```
        ### Create a static route to a VPN connection

        ```python
        import pulumi
        import pulumi_outscale as outscale

        vpn_connection_route01 = outscale.VpnConnectionRoute("vpnConnectionRoute01",
            vpn_connection_id=outscale_vpn_connection["vpn_connection01"]["vpn_connection_id"],
            destination_ip_range="10.0.0.0/16")
        ```

        ## Import

        A VPN connection route can be imported using the VPN connection ID and the route destination IP range. For exampleconsole

        ```sh
         $ pulumi import outscale:index/vpnConnectionRoute:VpnConnectionRoute ImportedRoute vpn-12345678_10.0.0.0/0
        ```

        :param str resource_name: The name of the resource.
        :param VpnConnectionRouteInitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpnConnectionRouteInitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_ip_range: Optional[pulumi.Input[str]] = None,
                 vpn_connection_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpnConnectionRouteInitArgs.__new__(VpnConnectionRouteInitArgs)

            if destination_ip_range is None and not opts.urn:
                raise TypeError("Missing required property 'destination_ip_range'")
            __props__.__dict__["destination_ip_range"] = destination_ip_range
            if vpn_connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpn_connection_id'")
            __props__.__dict__["vpn_connection_id"] = vpn_connection_id
            __props__.__dict__["request_id"] = None
        super(VpnConnectionRoute, __self__).__init__(
            'outscale:index/vpnConnectionRoute:VpnConnectionRoute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            destination_ip_range: Optional[pulumi.Input[str]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            vpn_connection_id: Optional[pulumi.Input[str]] = None) -> 'VpnConnectionRoute':
        """
        Get an existing VpnConnectionRoute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] destination_ip_range: The network prefix of the route, in CIDR notation (for example, `10.12.0.0/16`).
        :param pulumi.Input[str] vpn_connection_id: The ID of the target VPN connection of the static route.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpnConnectionRouteState.__new__(_VpnConnectionRouteState)

        __props__.__dict__["destination_ip_range"] = destination_ip_range
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["vpn_connection_id"] = vpn_connection_id
        return VpnConnectionRoute(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="destinationIpRange")
    def destination_ip_range(self) -> pulumi.Output[str]:
        """
        The network prefix of the route, in CIDR notation (for example, `10.12.0.0/16`).
        """
        return pulumi.get(self, "destination_ip_range")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="vpnConnectionId")
    def vpn_connection_id(self) -> pulumi.Output[str]:
        """
        The ID of the target VPN connection of the static route.
        """
        return pulumi.get(self, "vpn_connection_id")

