# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetUserGroupsPerUserResult',
    'AwaitableGetUserGroupsPerUserResult',
    'get_user_groups_per_user',
    'get_user_groups_per_user_output',
]

@pulumi.output_type
class GetUserGroupsPerUserResult:
    """
    A collection of values returned by getUserGroupsPerUser.
    """
    def __init__(__self__, id=None, user_groups=None, user_name=None, user_path=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if user_groups and not isinstance(user_groups, list):
            raise TypeError("Expected argument 'user_groups' to be a list")
        pulumi.set(__self__, "user_groups", user_groups)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)
        if user_path and not isinstance(user_path, str):
            raise TypeError("Expected argument 'user_path' to be a str")
        pulumi.set(__self__, "user_path", user_path)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="userGroups")
    def user_groups(self) -> Sequence['outputs.GetUserGroupsPerUserUserGroupResult']:
        return pulumi.get(self, "user_groups")

    @_builtins.property
    @pulumi.getter(name="userName")
    def user_name(self) -> _builtins.str:
        return pulumi.get(self, "user_name")

    @_builtins.property
    @pulumi.getter(name="userPath")
    def user_path(self) -> _builtins.str:
        return pulumi.get(self, "user_path")


class AwaitableGetUserGroupsPerUserResult(GetUserGroupsPerUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserGroupsPerUserResult(
            id=self.id,
            user_groups=self.user_groups,
            user_name=self.user_name,
            user_path=self.user_path)


def get_user_groups_per_user(user_name: Optional[_builtins.str] = None,
                             user_path: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserGroupsPerUserResult:
    """
    Provides information about  groups that a specified user belongs to.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-EIM-Groups.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#readusergroupsperuser).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    user_groups_per_user01 = outscale.get_user_groups_per_user(user_name="user_name",
        user_path="/")
    ```


    :param _builtins.str user_name: The name of the user.
    :param _builtins.str user_path: The path to the user (by default, `/`).
    """
    __args__ = dict()
    __args__['userName'] = user_name
    __args__['userPath'] = user_path
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getUserGroupsPerUser:getUserGroupsPerUser', __args__, opts=opts, typ=GetUserGroupsPerUserResult).value

    return AwaitableGetUserGroupsPerUserResult(
        id=pulumi.get(__ret__, 'id'),
        user_groups=pulumi.get(__ret__, 'user_groups'),
        user_name=pulumi.get(__ret__, 'user_name'),
        user_path=pulumi.get(__ret__, 'user_path'))
def get_user_groups_per_user_output(user_name: Optional[pulumi.Input[_builtins.str]] = None,
                                    user_path: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetUserGroupsPerUserResult]:
    """
    Provides information about  groups that a specified user belongs to.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-EIM-Groups.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#readusergroupsperuser).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    user_groups_per_user01 = outscale.get_user_groups_per_user(user_name="user_name",
        user_path="/")
    ```


    :param _builtins.str user_name: The name of the user.
    :param _builtins.str user_path: The path to the user (by default, `/`).
    """
    __args__ = dict()
    __args__['userName'] = user_name
    __args__['userPath'] = user_path
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getUserGroupsPerUser:getUserGroupsPerUser', __args__, opts=opts, typ=GetUserGroupsPerUserResult)
    return __ret__.apply(lambda __response__: GetUserGroupsPerUserResult(
        id=pulumi.get(__response__, 'id'),
        user_groups=pulumi.get(__response__, 'user_groups'),
        user_name=pulumi.get(__response__, 'user_name'),
        user_path=pulumi.get(__response__, 'user_path')))
