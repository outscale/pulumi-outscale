# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['KeypairArgs', 'Keypair']

@pulumi.input_type
class KeypairArgs:
    def __init__(__self__, *,
                 keypair_name: pulumi.Input[_builtins.str],
                 public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['KeypairTagArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['KeypairTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a Keypair resource.
        :param pulumi.Input[_builtins.str] keypair_name: A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
        :param pulumi.Input[_builtins.str] public_key: The public key to import in your account, if you are importing an existing keypair. This value must be Base64-encoded.
        :param pulumi.Input[Sequence[pulumi.Input['KeypairTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        pulumi.set(__self__, "keypair_name", keypair_name)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> pulumi.Input[_builtins.str]:
        """
        A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
        """
        return pulumi.get(self, "keypair_name")

    @keypair_name.setter
    def keypair_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "keypair_name", value)

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public key to import in your account, if you are importing an existing keypair. This value must be Base64-encoded.
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_key", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeypairTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeypairTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['KeypairTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['KeypairTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _KeypairState:
    def __init__(__self__, *,
                 keypair_fingerprint: Optional[pulumi.Input[_builtins.str]] = None,
                 keypair_id: Optional[pulumi.Input[_builtins.str]] = None,
                 keypair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 keypair_type: Optional[pulumi.Input[_builtins.str]] = None,
                 private_key: Optional[pulumi.Input[_builtins.str]] = None,
                 public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 request_id: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['KeypairTagArgs']]]] = None,
                 timeouts: Optional[pulumi.Input['KeypairTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering Keypair resources.
        :param pulumi.Input[_builtins.str] keypair_fingerprint: The MD5 public key fingerprint, as specified in section 4 of RFC 4716.
        :param pulumi.Input[_builtins.str] keypair_id: The ID of the keypair.
        :param pulumi.Input[_builtins.str] keypair_name: A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
        :param pulumi.Input[_builtins.str] keypair_type: The type of the keypair (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
        :param pulumi.Input[_builtins.str] private_key: The private key, returned only if you are creating a keypair (not if you are importing). When you save this private key in a .rsa file, make sure you replace the `\\n` escape sequences with real line breaks.
        :param pulumi.Input[_builtins.str] public_key: The public key to import in your account, if you are importing an existing keypair. This value must be Base64-encoded.
        :param pulumi.Input[Sequence[pulumi.Input['KeypairTagArgs']]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        if keypair_fingerprint is not None:
            pulumi.set(__self__, "keypair_fingerprint", keypair_fingerprint)
        if keypair_id is not None:
            pulumi.set(__self__, "keypair_id", keypair_id)
        if keypair_name is not None:
            pulumi.set(__self__, "keypair_name", keypair_name)
        if keypair_type is not None:
            pulumi.set(__self__, "keypair_type", keypair_type)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @_builtins.property
    @pulumi.getter(name="keypairFingerprint")
    def keypair_fingerprint(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The MD5 public key fingerprint, as specified in section 4 of RFC 4716.
        """
        return pulumi.get(self, "keypair_fingerprint")

    @keypair_fingerprint.setter
    def keypair_fingerprint(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keypair_fingerprint", value)

    @_builtins.property
    @pulumi.getter(name="keypairId")
    def keypair_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the keypair.
        """
        return pulumi.get(self, "keypair_id")

    @keypair_id.setter
    def keypair_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keypair_id", value)

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
        """
        return pulumi.get(self, "keypair_name")

    @keypair_name.setter
    def keypair_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keypair_name", value)

    @_builtins.property
    @pulumi.getter(name="keypairType")
    def keypair_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of the keypair (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
        """
        return pulumi.get(self, "keypair_type")

    @keypair_type.setter
    def keypair_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "keypair_type", value)

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The private key, returned only if you are creating a keypair (not if you are importing). When you save this private key in a .rsa file, make sure you replace the `\\n` escape sequences with real line breaks.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "private_key", value)

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The public key to import in your account, if you are importing an existing keypair. This value must be Base64-encoded.
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "public_key", value)

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "request_id", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeypairTagArgs']]]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeypairTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['KeypairTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['KeypairTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.type_token("outscale:index/keypair:Keypair")
class Keypair(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 keypair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KeypairTagArgs', 'KeypairTagArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['KeypairTimeoutsArgs', 'KeypairTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Manages a keypair.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Keypairs.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-keypair).

        ## Example Usage

        ### Create a keypair

        ```python
        import pulumi
        import pulumi_outscale as outscale

        keypair01 = outscale.Keypair("keypair01", keypair_name="terraform-keypair-create")
        ```

        ## Import

        A keypair can be imported using its name. For example:

        console

        ```sh
        $ pulumi import outscale:index/keypair:Keypair ImportedKeypair keypair_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] keypair_name: A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
        :param pulumi.Input[_builtins.str] public_key: The public key to import in your account, if you are importing an existing keypair. This value must be Base64-encoded.
        :param pulumi.Input[Sequence[pulumi.Input[Union['KeypairTagArgs', 'KeypairTagArgsDict']]]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KeypairArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a keypair.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Keypairs.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-keypair).

        ## Example Usage

        ### Create a keypair

        ```python
        import pulumi
        import pulumi_outscale as outscale

        keypair01 = outscale.Keypair("keypair01", keypair_name="terraform-keypair-create")
        ```

        ## Import

        A keypair can be imported using its name. For example:

        console

        ```sh
        $ pulumi import outscale:index/keypair:Keypair ImportedKeypair keypair_id
        ```

        :param str resource_name: The name of the resource.
        :param KeypairArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KeypairArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 keypair_name: Optional[pulumi.Input[_builtins.str]] = None,
                 public_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KeypairTagArgs', 'KeypairTagArgsDict']]]]] = None,
                 timeouts: Optional[pulumi.Input[Union['KeypairTimeoutsArgs', 'KeypairTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KeypairArgs.__new__(KeypairArgs)

            if keypair_name is None and not opts.urn:
                raise TypeError("Missing required property 'keypair_name'")
            __props__.__dict__["keypair_name"] = keypair_name
            __props__.__dict__["public_key"] = public_key
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeouts"] = timeouts
            __props__.__dict__["keypair_fingerprint"] = None
            __props__.__dict__["keypair_id"] = None
            __props__.__dict__["keypair_type"] = None
            __props__.__dict__["private_key"] = None
            __props__.__dict__["request_id"] = None
        super(Keypair, __self__).__init__(
            'outscale:index/keypair:Keypair',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            keypair_fingerprint: Optional[pulumi.Input[_builtins.str]] = None,
            keypair_id: Optional[pulumi.Input[_builtins.str]] = None,
            keypair_name: Optional[pulumi.Input[_builtins.str]] = None,
            keypair_type: Optional[pulumi.Input[_builtins.str]] = None,
            private_key: Optional[pulumi.Input[_builtins.str]] = None,
            public_key: Optional[pulumi.Input[_builtins.str]] = None,
            request_id: Optional[pulumi.Input[_builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['KeypairTagArgs', 'KeypairTagArgsDict']]]]] = None,
            timeouts: Optional[pulumi.Input[Union['KeypairTimeoutsArgs', 'KeypairTimeoutsArgsDict']]] = None) -> 'Keypair':
        """
        Get an existing Keypair resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] keypair_fingerprint: The MD5 public key fingerprint, as specified in section 4 of RFC 4716.
        :param pulumi.Input[_builtins.str] keypair_id: The ID of the keypair.
        :param pulumi.Input[_builtins.str] keypair_name: A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
        :param pulumi.Input[_builtins.str] keypair_type: The type of the keypair (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
        :param pulumi.Input[_builtins.str] private_key: The private key, returned only if you are creating a keypair (not if you are importing). When you save this private key in a .rsa file, make sure you replace the `\\n` escape sequences with real line breaks.
        :param pulumi.Input[_builtins.str] public_key: The public key to import in your account, if you are importing an existing keypair. This value must be Base64-encoded.
        :param pulumi.Input[Sequence[pulumi.Input[Union['KeypairTagArgs', 'KeypairTagArgsDict']]]] tags: A tag to add to this resource. You can specify this argument several times.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KeypairState.__new__(_KeypairState)

        __props__.__dict__["keypair_fingerprint"] = keypair_fingerprint
        __props__.__dict__["keypair_id"] = keypair_id
        __props__.__dict__["keypair_name"] = keypair_name
        __props__.__dict__["keypair_type"] = keypair_type
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["public_key"] = public_key
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeouts"] = timeouts
        return Keypair(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="keypairFingerprint")
    def keypair_fingerprint(self) -> pulumi.Output[_builtins.str]:
        """
        The MD5 public key fingerprint, as specified in section 4 of RFC 4716.
        """
        return pulumi.get(self, "keypair_fingerprint")

    @_builtins.property
    @pulumi.getter(name="keypairId")
    def keypair_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the keypair.
        """
        return pulumi.get(self, "keypair_id")

    @_builtins.property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> pulumi.Output[_builtins.str]:
        """
        A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
        """
        return pulumi.get(self, "keypair_name")

    @_builtins.property
    @pulumi.getter(name="keypairType")
    def keypair_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of the keypair (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
        """
        return pulumi.get(self, "keypair_type")

    @_builtins.property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[_builtins.str]:
        """
        The private key, returned only if you are creating a keypair (not if you are importing). When you save this private key in a .rsa file, make sure you replace the `\\n` escape sequences with real line breaks.
        """
        return pulumi.get(self, "private_key")

    @_builtins.property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The public key to import in your account, if you are importing an existing keypair. This value must be Base64-encoded.
        """
        return pulumi.get(self, "public_key")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.KeypairTag']]]:
        """
        A tag to add to this resource. You can specify this argument several times.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.KeypairTimeouts']]:
        return pulumi.get(self, "timeouts")

