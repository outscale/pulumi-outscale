# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNicResult',
    'AwaitableGetNicResult',
    'get_nic',
    'get_nic_output',
]

@pulumi.output_type
class GetNicResult:
    """
    A collection of values returned by getNic.
    """
    def __init__(__self__, account_id=None, description=None, filters=None, id=None, is_source_dest_checked=None, link_nics=None, link_public_ips=None, mac_address=None, net_id=None, nic_id=None, private_dns_name=None, private_ip=None, private_ips=None, request_id=None, requester_managed=None, security_group_ids=None, security_groups=None, state=None, subnet_id=None, subregion_name=None, tags=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_source_dest_checked and not isinstance(is_source_dest_checked, bool):
            raise TypeError("Expected argument 'is_source_dest_checked' to be a bool")
        pulumi.set(__self__, "is_source_dest_checked", is_source_dest_checked)
        if link_nics and not isinstance(link_nics, list):
            raise TypeError("Expected argument 'link_nics' to be a list")
        pulumi.set(__self__, "link_nics", link_nics)
        if link_public_ips and not isinstance(link_public_ips, list):
            raise TypeError("Expected argument 'link_public_ips' to be a list")
        pulumi.set(__self__, "link_public_ips", link_public_ips)
        if mac_address and not isinstance(mac_address, str):
            raise TypeError("Expected argument 'mac_address' to be a str")
        pulumi.set(__self__, "mac_address", mac_address)
        if net_id and not isinstance(net_id, str):
            raise TypeError("Expected argument 'net_id' to be a str")
        pulumi.set(__self__, "net_id", net_id)
        if nic_id and not isinstance(nic_id, str):
            raise TypeError("Expected argument 'nic_id' to be a str")
        pulumi.set(__self__, "nic_id", nic_id)
        if private_dns_name and not isinstance(private_dns_name, str):
            raise TypeError("Expected argument 'private_dns_name' to be a str")
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if private_ips and not isinstance(private_ips, list):
            raise TypeError("Expected argument 'private_ips' to be a list")
        pulumi.set(__self__, "private_ips", private_ips)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if requester_managed and not isinstance(requester_managed, bool):
            raise TypeError("Expected argument 'requester_managed' to be a bool")
        pulumi.set(__self__, "requester_managed", requester_managed)
        if security_group_ids and not isinstance(security_group_ids, list):
            raise TypeError("Expected argument 'security_group_ids' to be a list")
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        if security_groups and not isinstance(security_groups, list):
            raise TypeError("Expected argument 'security_groups' to be a list")
        pulumi.set(__self__, "security_groups", security_groups)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if subregion_name and not isinstance(subregion_name, str):
            raise TypeError("Expected argument 'subregion_name' to be a str")
        pulumi.set(__self__, "subregion_name", subregion_name)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        """
        The account ID of the owner of the NIC.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the NIC.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetNicFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isSourceDestChecked")
    def is_source_dest_checked(self) -> bool:
        """
        (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
        """
        return pulumi.get(self, "is_source_dest_checked")

    @property
    @pulumi.getter(name="linkNics")
    def link_nics(self) -> Sequence['outputs.GetNicLinkNicResult']:
        """
        Information about the NIC attachment.
        """
        return pulumi.get(self, "link_nics")

    @property
    @pulumi.getter(name="linkPublicIps")
    def link_public_ips(self) -> Sequence['outputs.GetNicLinkPublicIpResult']:
        """
        Information about the public IP association.
        """
        return pulumi.get(self, "link_public_ips")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        """
        The Media Access Control (MAC) address of the NIC.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> str:
        """
        The ID of the Net for the NIC.
        """
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="nicId")
    def nic_id(self) -> str:
        """
        The ID of the NIC.
        """
        return pulumi.get(self, "nic_id")

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> str:
        """
        The name of the private DNS.
        """
        return pulumi.get(self, "private_dns_name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> str:
        """
        The private IP of the NIC.
        """
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="privateIps")
    def private_ips(self) -> Sequence['outputs.GetNicPrivateIpResult']:
        """
        The private IPs of the NIC.
        """
        return pulumi.get(self, "private_ips")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="requesterManaged")
    def requester_managed(self) -> bool:
        return pulumi.get(self, "requester_managed")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        """
        The ID of the security group.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Sequence['outputs.GetNicSecurityGroupResult']:
        """
        One or more IDs of security groups for the NIC.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def state(self) -> str:
        """
        The state of the NIC (`available` \\| `attaching` \\| `in-use` \\| `detaching`).
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of the Subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="subregionName")
    def subregion_name(self) -> str:
        """
        The Subregion in which the NIC is located.
        """
        return pulumi.get(self, "subregion_name")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNicTagResult']:
        """
        One or more tags associated with the NIC.
        """
        return pulumi.get(self, "tags")


class AwaitableGetNicResult(GetNicResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNicResult(
            account_id=self.account_id,
            description=self.description,
            filters=self.filters,
            id=self.id,
            is_source_dest_checked=self.is_source_dest_checked,
            link_nics=self.link_nics,
            link_public_ips=self.link_public_ips,
            mac_address=self.mac_address,
            net_id=self.net_id,
            nic_id=self.nic_id,
            private_dns_name=self.private_dns_name,
            private_ip=self.private_ip,
            private_ips=self.private_ips,
            request_id=self.request_id,
            requester_managed=self.requester_managed,
            security_group_ids=self.security_group_ids,
            security_groups=self.security_groups,
            state=self.state,
            subnet_id=self.subnet_id,
            subregion_name=self.subregion_name,
            tags=self.tags)


def get_nic(filters: Optional[Sequence[pulumi.InputType['GetNicFilterArgs']]] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNicResult:
    """
    Provides information about a network interface card (NIC).

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-FNIs.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-nic).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    nic01 = outscale.get_nic(filters=[outscale.GetNicFilterArgs(
        name="nic_ids",
        values=["eni-12345678"],
    )])
    ```


    :param Sequence[pulumi.InputType['GetNicFilterArgs']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getNic:getNic', __args__, opts=opts, typ=GetNicResult).value

    return AwaitableGetNicResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        description=pulumi.get(__ret__, 'description'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        is_source_dest_checked=pulumi.get(__ret__, 'is_source_dest_checked'),
        link_nics=pulumi.get(__ret__, 'link_nics'),
        link_public_ips=pulumi.get(__ret__, 'link_public_ips'),
        mac_address=pulumi.get(__ret__, 'mac_address'),
        net_id=pulumi.get(__ret__, 'net_id'),
        nic_id=pulumi.get(__ret__, 'nic_id'),
        private_dns_name=pulumi.get(__ret__, 'private_dns_name'),
        private_ip=pulumi.get(__ret__, 'private_ip'),
        private_ips=pulumi.get(__ret__, 'private_ips'),
        request_id=pulumi.get(__ret__, 'request_id'),
        requester_managed=pulumi.get(__ret__, 'requester_managed'),
        security_group_ids=pulumi.get(__ret__, 'security_group_ids'),
        security_groups=pulumi.get(__ret__, 'security_groups'),
        state=pulumi.get(__ret__, 'state'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        subregion_name=pulumi.get(__ret__, 'subregion_name'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_nic)
def get_nic_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetNicFilterArgs']]]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNicResult]:
    """
    Provides information about a network interface card (NIC).

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-FNIs.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-nic).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    nic01 = outscale.get_nic(filters=[outscale.GetNicFilterArgs(
        name="nic_ids",
        values=["eni-12345678"],
    )])
    ```


    :param Sequence[pulumi.InputType['GetNicFilterArgs']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    """
    ...
