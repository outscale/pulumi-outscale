# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetVmsResult',
    'AwaitableGetVmsResult',
    'get_vms',
    'get_vms_output',
]

@pulumi.output_type
class GetVmsResult:
    """
    A collection of values returned by getVms.
    """
    def __init__(__self__, filters=None, id=None, request_id=None, vms=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if vms and not isinstance(vms, list):
            raise TypeError("Expected argument 'vms' to be a list")
        pulumi.set(__self__, "vms", vms)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetVmsFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter
    def vms(self) -> Sequence['outputs.GetVmsVmResult']:
        """
        Information about one or more VMs.
        """
        return pulumi.get(self, "vms")


class AwaitableGetVmsResult(GetVmsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVmsResult(
            filters=self.filters,
            id=self.id,
            request_id=self.request_id,
            vms=self.vms)


def get_vms(filters: Optional[Sequence[Union['GetVmsFilterArgs', 'GetVmsFilterArgsDict']]] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVmsResult:
    """
    Provides information about virtual machines (VMs).

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VMs.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vm).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    vms01 = outscale.get_vms(filters=[
        {
            "name": "tag_keys",
            "values": ["env"],
        },
        {
            "name": "tag_values",
            "values": [
                "prod",
                "test",
            ],
        },
    ])
    ```


    :param Sequence[Union['GetVmsFilterArgs', 'GetVmsFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getVms:getVms', __args__, opts=opts, typ=GetVmsResult).value

    return AwaitableGetVmsResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        request_id=pulumi.get(__ret__, 'request_id'),
        vms=pulumi.get(__ret__, 'vms'))
def get_vms_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetVmsFilterArgs', 'GetVmsFilterArgsDict']]]]] = None,
                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVmsResult]:
    """
    Provides information about virtual machines (VMs).

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VMs.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vm).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    vms01 = outscale.get_vms(filters=[
        {
            "name": "tag_keys",
            "values": ["env"],
        },
        {
            "name": "tag_values",
            "values": [
                "prod",
                "test",
            ],
        },
    ])
    ```


    :param Sequence[Union['GetVmsFilterArgs', 'GetVmsFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    """
    __args__ = dict()
    __args__['filters'] = filters
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getVms:getVms', __args__, opts=opts, typ=GetVmsResult)
    return __ret__.apply(lambda __response__: GetVmsResult(
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        request_id=pulumi.get(__response__, 'request_id'),
        vms=pulumi.get(__response__, 'vms')))
