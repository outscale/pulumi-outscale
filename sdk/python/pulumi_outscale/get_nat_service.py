# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetNatServiceResult',
    'AwaitableGetNatServiceResult',
    'get_nat_service',
    'get_nat_service_output',
]

@pulumi.output_type
class GetNatServiceResult:
    """
    A collection of values returned by getNatService.
    """
    def __init__(__self__, filters=None, id=None, nat_service_id=None, net_id=None, public_ips=None, request_id=None, state=None, subnet_id=None, tags=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if nat_service_id and not isinstance(nat_service_id, str):
            raise TypeError("Expected argument 'nat_service_id' to be a str")
        pulumi.set(__self__, "nat_service_id", nat_service_id)
        if net_id and not isinstance(net_id, str):
            raise TypeError("Expected argument 'net_id' to be a str")
        pulumi.set(__self__, "net_id", net_id)
        if public_ips and not isinstance(public_ips, list):
            raise TypeError("Expected argument 'public_ips' to be a list")
        pulumi.set(__self__, "public_ips", public_ips)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetNatServiceFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="natServiceId")
    def nat_service_id(self) -> Optional[_builtins.str]:
        """
        The ID of the NAT service.
        """
        return pulumi.get(self, "nat_service_id")

    @_builtins.property
    @pulumi.getter(name="netId")
    def net_id(self) -> _builtins.str:
        """
        The ID of the Net in which the NAT service is.
        """
        return pulumi.get(self, "net_id")

    @_builtins.property
    @pulumi.getter(name="publicIps")
    def public_ips(self) -> Sequence['outputs.GetNatServicePublicIpResult']:
        """
        Information about the public IP or IPs associated with the NAT service.
        """
        return pulumi.get(self, "public_ips")

    @_builtins.property
    @pulumi.getter(name="requestId")
    def request_id(self) -> _builtins.str:
        return pulumi.get(self, "request_id")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        The state of the NAT service (`pending` \\| `available` \\| `deleting` \\| `deleted`).
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> _builtins.str:
        """
        The ID of the Subnet in which the NAT service is.
        """
        return pulumi.get(self, "subnet_id")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNatServiceTagResult']:
        """
        One or more tags associated with the NAT service.
        """
        return pulumi.get(self, "tags")


class AwaitableGetNatServiceResult(GetNatServiceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNatServiceResult(
            filters=self.filters,
            id=self.id,
            nat_service_id=self.nat_service_id,
            net_id=self.net_id,
            public_ips=self.public_ips,
            request_id=self.request_id,
            state=self.state,
            subnet_id=self.subnet_id,
            tags=self.tags)


def get_nat_service(filters: Optional[Sequence[Union['GetNatServiceFilterArgs', 'GetNatServiceFilterArgsDict']]] = None,
                    nat_service_id: Optional[_builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNatServiceResult:
    """
    Provides information about a NAT service.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-NAT-Services.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-natservice).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    nat_service01 = outscale.get_nat_service(filters=[{
        "name": "nat_service_ids",
        "values": ["nat-12345678"],
    }])
    ```


    :param Sequence[Union['GetNatServiceFilterArgs', 'GetNatServiceFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    :param _builtins.str nat_service_id: The ID of the NAT service.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['natServiceId'] = nat_service_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getNatService:getNatService', __args__, opts=opts, typ=GetNatServiceResult).value

    return AwaitableGetNatServiceResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        nat_service_id=pulumi.get(__ret__, 'nat_service_id'),
        net_id=pulumi.get(__ret__, 'net_id'),
        public_ips=pulumi.get(__ret__, 'public_ips'),
        request_id=pulumi.get(__ret__, 'request_id'),
        state=pulumi.get(__ret__, 'state'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        tags=pulumi.get(__ret__, 'tags'))
def get_nat_service_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetNatServiceFilterArgs', 'GetNatServiceFilterArgsDict']]]]] = None,
                           nat_service_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNatServiceResult]:
    """
    Provides information about a NAT service.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-NAT-Services.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-natservice).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    nat_service01 = outscale.get_nat_service(filters=[{
        "name": "nat_service_ids",
        "values": ["nat-12345678"],
    }])
    ```


    :param Sequence[Union['GetNatServiceFilterArgs', 'GetNatServiceFilterArgsDict']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    :param _builtins.str nat_service_id: The ID of the NAT service.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['natServiceId'] = nat_service_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('outscale:index/getNatService:getNatService', __args__, opts=opts, typ=GetNatServiceResult)
    return __ret__.apply(lambda __response__: GetNatServiceResult(
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        nat_service_id=pulumi.get(__response__, 'nat_service_id'),
        net_id=pulumi.get(__response__, 'net_id'),
        public_ips=pulumi.get(__response__, 'public_ips'),
        request_id=pulumi.get(__response__, 'request_id'),
        state=pulumi.get(__response__, 'state'),
        subnet_id=pulumi.get(__response__, 'subnet_id'),
        tags=pulumi.get(__response__, 'tags')))
