# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetKeypairResult',
    'AwaitableGetKeypairResult',
    'get_keypair',
    'get_keypair_output',
]

@pulumi.output_type
class GetKeypairResult:
    """
    A collection of values returned by getKeypair.
    """
    def __init__(__self__, filters=None, id=None, keypair_fingerprint=None, keypair_name=None, request_id=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if keypair_fingerprint and not isinstance(keypair_fingerprint, str):
            raise TypeError("Expected argument 'keypair_fingerprint' to be a str")
        pulumi.set(__self__, "keypair_fingerprint", keypair_fingerprint)
        if keypair_name and not isinstance(keypair_name, str):
            raise TypeError("Expected argument 'keypair_name' to be a str")
        pulumi.set(__self__, "keypair_name", keypair_name)
        if request_id and not isinstance(request_id, str):
            raise TypeError("Expected argument 'request_id' to be a str")
        pulumi.set(__self__, "request_id", request_id)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetKeypairFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keypairFingerprint")
    def keypair_fingerprint(self) -> str:
        """
        The MD5 public key fingerprint as specified in section 4 of RFC 4716.
        """
        return pulumi.get(self, "keypair_fingerprint")

    @property
    @pulumi.getter(name="keypairName")
    def keypair_name(self) -> str:
        """
        The name of the keypair.
        """
        return pulumi.get(self, "keypair_name")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> str:
        return pulumi.get(self, "request_id")


class AwaitableGetKeypairResult(GetKeypairResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKeypairResult(
            filters=self.filters,
            id=self.id,
            keypair_fingerprint=self.keypair_fingerprint,
            keypair_name=self.keypair_name,
            request_id=self.request_id)


def get_keypair(filters: Optional[Sequence[pulumi.InputType['GetKeypairFilterArgs']]] = None,
                keypair_name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKeypairResult:
    """
    Provides information about a keypair.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Keypairs.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-keypair).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    keypair01 = outscale.get_keypair(filters=[outscale.GetKeypairFilterArgs(
        name="keypair_names",
        values=["terraform-keypair-01"],
    )])
    ```


    :param Sequence[pulumi.InputType['GetKeypairFilterArgs']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    :param str keypair_name: The name of the keypair.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['keypairName'] = keypair_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('outscale:index/getKeypair:getKeypair', __args__, opts=opts, typ=GetKeypairResult).value

    return AwaitableGetKeypairResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        keypair_fingerprint=pulumi.get(__ret__, 'keypair_fingerprint'),
        keypair_name=pulumi.get(__ret__, 'keypair_name'),
        request_id=pulumi.get(__ret__, 'request_id'))


@_utilities.lift_output_func(get_keypair)
def get_keypair_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetKeypairFilterArgs']]]]] = None,
                       keypair_name: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetKeypairResult]:
    """
    Provides information about a keypair.

    For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Keypairs.html).\\
    For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-keypair).

    ## Example Usage

    ```python
    import pulumi
    import pulumi_outscale as outscale

    keypair01 = outscale.get_keypair(filters=[outscale.GetKeypairFilterArgs(
        name="keypair_names",
        values=["terraform-keypair-01"],
    )])
    ```


    :param Sequence[pulumi.InputType['GetKeypairFilterArgs']] filters: A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
    :param str keypair_name: The name of the keypair.
    """
    ...
