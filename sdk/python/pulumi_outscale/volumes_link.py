# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VolumesLinkArgs', 'VolumesLink']

@pulumi.input_type
class VolumesLinkArgs:
    def __init__(__self__, *,
                 device_name: pulumi.Input[str],
                 vm_id: pulumi.Input[str],
                 volume_id: pulumi.Input[str],
                 delete_on_vm_termination: Optional[pulumi.Input[bool]] = None,
                 force_unlink: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a VolumesLink resource.
        """
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "vm_id", vm_id)
        pulumi.set(__self__, "volume_id", volume_id)
        if delete_on_vm_termination is not None:
            pulumi.set(__self__, "delete_on_vm_termination", delete_on_vm_termination)
        if force_unlink is not None:
            pulumi.set(__self__, "force_unlink", force_unlink)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vm_id", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "volume_id", value)

    @property
    @pulumi.getter(name="deleteOnVmTermination")
    def delete_on_vm_termination(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_on_vm_termination")

    @delete_on_vm_termination.setter
    def delete_on_vm_termination(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_on_vm_termination", value)

    @property
    @pulumi.getter(name="forceUnlink")
    def force_unlink(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_unlink")

    @force_unlink.setter
    def force_unlink(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_unlink", value)


@pulumi.input_type
class _VolumesLinkState:
    def __init__(__self__, *,
                 delete_on_vm_termination: Optional[pulumi.Input[bool]] = None,
                 device_name: Optional[pulumi.Input[str]] = None,
                 force_unlink: Optional[pulumi.Input[bool]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering VolumesLink resources.
        """
        if delete_on_vm_termination is not None:
            pulumi.set(__self__, "delete_on_vm_termination", delete_on_vm_termination)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if force_unlink is not None:
            pulumi.set(__self__, "force_unlink", force_unlink)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if vm_id is not None:
            pulumi.set(__self__, "vm_id", vm_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="deleteOnVmTermination")
    def delete_on_vm_termination(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_on_vm_termination")

    @delete_on_vm_termination.setter
    def delete_on_vm_termination(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_on_vm_termination", value)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter(name="forceUnlink")
    def force_unlink(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_unlink")

    @force_unlink.setter
    def force_unlink(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_unlink", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vm_id")

    @vm_id.setter
    def vm_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vm_id", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_id", value)


class VolumesLink(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_on_vm_termination: Optional[pulumi.Input[bool]] = None,
                 device_name: Optional[pulumi.Input[str]] = None,
                 force_unlink: Optional[pulumi.Input[bool]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a VolumesLink resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VolumesLinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VolumesLink resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VolumesLinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VolumesLinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_on_vm_termination: Optional[pulumi.Input[bool]] = None,
                 device_name: Optional[pulumi.Input[str]] = None,
                 force_unlink: Optional[pulumi.Input[bool]] = None,
                 vm_id: Optional[pulumi.Input[str]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VolumesLinkArgs.__new__(VolumesLinkArgs)

            __props__.__dict__["delete_on_vm_termination"] = delete_on_vm_termination
            if device_name is None and not opts.urn:
                raise TypeError("Missing required property 'device_name'")
            __props__.__dict__["device_name"] = device_name
            __props__.__dict__["force_unlink"] = force_unlink
            if vm_id is None and not opts.urn:
                raise TypeError("Missing required property 'vm_id'")
            __props__.__dict__["vm_id"] = vm_id
            if volume_id is None and not opts.urn:
                raise TypeError("Missing required property 'volume_id'")
            __props__.__dict__["volume_id"] = volume_id
            __props__.__dict__["request_id"] = None
            __props__.__dict__["state"] = None
        super(VolumesLink, __self__).__init__(
            'outscale:index/volumesLink:VolumesLink',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete_on_vm_termination: Optional[pulumi.Input[bool]] = None,
            device_name: Optional[pulumi.Input[str]] = None,
            force_unlink: Optional[pulumi.Input[bool]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            vm_id: Optional[pulumi.Input[str]] = None,
            volume_id: Optional[pulumi.Input[str]] = None) -> 'VolumesLink':
        """
        Get an existing VolumesLink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VolumesLinkState.__new__(_VolumesLinkState)

        __props__.__dict__["delete_on_vm_termination"] = delete_on_vm_termination
        __props__.__dict__["device_name"] = device_name
        __props__.__dict__["force_unlink"] = force_unlink
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["state"] = state
        __props__.__dict__["vm_id"] = vm_id
        __props__.__dict__["volume_id"] = volume_id
        return VolumesLink(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deleteOnVmTermination")
    def delete_on_vm_termination(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "delete_on_vm_termination")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="forceUnlink")
    def force_unlink(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "force_unlink")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "vm_id")

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "volume_id")

