# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LoadBalancerArgs', 'LoadBalancer']

@pulumi.input_type
class LoadBalancerArgs:
    def __init__(__self__, *,
                 listeners: pulumi.Input[Sequence[pulumi.Input['LoadBalancerListenerArgs']]],
                 load_balancer_name: pulumi.Input[str],
                 access_log: Optional[pulumi.Input['LoadBalancerAccessLogArgs']] = None,
                 backend_vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 load_balancer_type: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 secured_cookies: Optional[pulumi.Input[bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subregion_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTagArgs']]]] = None):
        """
        The set of arguments for constructing a LoadBalancer resource.
        """
        pulumi.set(__self__, "listeners", listeners)
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        if access_log is not None:
            pulumi.set(__self__, "access_log", access_log)
        if backend_vm_ids is not None:
            pulumi.set(__self__, "backend_vm_ids", backend_vm_ids)
        if load_balancer_type is not None:
            pulumi.set(__self__, "load_balancer_type", load_balancer_type)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if secured_cookies is not None:
            pulumi.set(__self__, "secured_cookies", secured_cookies)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if subregion_names is not None:
            pulumi.set(__self__, "subregion_names", subregion_names)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def listeners(self) -> pulumi.Input[Sequence[pulumi.Input['LoadBalancerListenerArgs']]]:
        return pulumi.get(self, "listeners")

    @listeners.setter
    def listeners(self, value: pulumi.Input[Sequence[pulumi.Input['LoadBalancerListenerArgs']]]):
        pulumi.set(self, "listeners", value)

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "load_balancer_name")

    @load_balancer_name.setter
    def load_balancer_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "load_balancer_name", value)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> Optional[pulumi.Input['LoadBalancerAccessLogArgs']]:
        return pulumi.get(self, "access_log")

    @access_log.setter
    def access_log(self, value: Optional[pulumi.Input['LoadBalancerAccessLogArgs']]):
        pulumi.set(self, "access_log", value)

    @property
    @pulumi.getter(name="backendVmIds")
    def backend_vm_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "backend_vm_ids")

    @backend_vm_ids.setter
    def backend_vm_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backend_vm_ids", value)

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_type")

    @load_balancer_type.setter
    def load_balancer_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_type", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="securedCookies")
    def secured_cookies(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secured_cookies")

    @secured_cookies.setter
    def secured_cookies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secured_cookies", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="subregionNames")
    def subregion_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subregion_names")

    @subregion_names.setter
    def subregion_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subregion_names", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _LoadBalancerState:
    def __init__(__self__, *,
                 access_log: Optional[pulumi.Input['LoadBalancerAccessLogArgs']] = None,
                 application_sticky_cookie_policies: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerApplicationStickyCookiePolicyArgs']]]] = None,
                 backend_vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input['LoadBalancerHealthCheckArgs']] = None,
                 listeners: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerListenerArgs']]]] = None,
                 load_balancer_name: Optional[pulumi.Input[str]] = None,
                 load_balancer_sticky_cookie_policies: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerLoadBalancerStickyCookiePolicyArgs']]]] = None,
                 load_balancer_type: Optional[pulumi.Input[str]] = None,
                 net_id: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 secured_cookies: Optional[pulumi.Input[bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_security_group: Optional[pulumi.Input['LoadBalancerSourceSecurityGroupArgs']] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subregion_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTagArgs']]]] = None):
        """
        Input properties used for looking up and filtering LoadBalancer resources.
        """
        if access_log is not None:
            pulumi.set(__self__, "access_log", access_log)
        if application_sticky_cookie_policies is not None:
            pulumi.set(__self__, "application_sticky_cookie_policies", application_sticky_cookie_policies)
        if backend_vm_ids is not None:
            pulumi.set(__self__, "backend_vm_ids", backend_vm_ids)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if listeners is not None:
            pulumi.set(__self__, "listeners", listeners)
        if load_balancer_name is not None:
            pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        if load_balancer_sticky_cookie_policies is not None:
            pulumi.set(__self__, "load_balancer_sticky_cookie_policies", load_balancer_sticky_cookie_policies)
        if load_balancer_type is not None:
            pulumi.set(__self__, "load_balancer_type", load_balancer_type)
        if net_id is not None:
            pulumi.set(__self__, "net_id", net_id)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if secured_cookies is not None:
            pulumi.set(__self__, "secured_cookies", secured_cookies)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if source_security_group is not None:
            pulumi.set(__self__, "source_security_group", source_security_group)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if subregion_names is not None:
            pulumi.set(__self__, "subregion_names", subregion_names)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> Optional[pulumi.Input['LoadBalancerAccessLogArgs']]:
        return pulumi.get(self, "access_log")

    @access_log.setter
    def access_log(self, value: Optional[pulumi.Input['LoadBalancerAccessLogArgs']]):
        pulumi.set(self, "access_log", value)

    @property
    @pulumi.getter(name="applicationStickyCookiePolicies")
    def application_sticky_cookie_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerApplicationStickyCookiePolicyArgs']]]]:
        return pulumi.get(self, "application_sticky_cookie_policies")

    @application_sticky_cookie_policies.setter
    def application_sticky_cookie_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerApplicationStickyCookiePolicyArgs']]]]):
        pulumi.set(self, "application_sticky_cookie_policies", value)

    @property
    @pulumi.getter(name="backendVmIds")
    def backend_vm_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "backend_vm_ids")

    @backend_vm_ids.setter
    def backend_vm_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backend_vm_ids", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['LoadBalancerHealthCheckArgs']]:
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['LoadBalancerHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def listeners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerListenerArgs']]]]:
        return pulumi.get(self, "listeners")

    @listeners.setter
    def listeners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerListenerArgs']]]]):
        pulumi.set(self, "listeners", value)

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_name")

    @load_balancer_name.setter
    def load_balancer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_name", value)

    @property
    @pulumi.getter(name="loadBalancerStickyCookiePolicies")
    def load_balancer_sticky_cookie_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerLoadBalancerStickyCookiePolicyArgs']]]]:
        return pulumi.get(self, "load_balancer_sticky_cookie_policies")

    @load_balancer_sticky_cookie_policies.setter
    def load_balancer_sticky_cookie_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerLoadBalancerStickyCookiePolicyArgs']]]]):
        pulumi.set(self, "load_balancer_sticky_cookie_policies", value)

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "load_balancer_type")

    @load_balancer_type.setter
    def load_balancer_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_type", value)

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "net_id")

    @net_id.setter
    def net_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "net_id", value)

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_ip")

    @public_ip.setter
    def public_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_ip", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="securedCookies")
    def secured_cookies(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secured_cookies")

    @secured_cookies.setter
    def secured_cookies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secured_cookies", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="sourceSecurityGroup")
    def source_security_group(self) -> Optional[pulumi.Input['LoadBalancerSourceSecurityGroupArgs']]:
        return pulumi.get(self, "source_security_group")

    @source_security_group.setter
    def source_security_group(self, value: Optional[pulumi.Input['LoadBalancerSourceSecurityGroupArgs']]):
        pulumi.set(self, "source_security_group", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="subregionNames")
    def subregion_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subregion_names")

    @subregion_names.setter
    def subregion_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subregion_names", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerTagArgs']]]]):
        pulumi.set(self, "tags", value)


class LoadBalancer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_log: Optional[pulumi.Input[pulumi.InputType['LoadBalancerAccessLogArgs']]] = None,
                 backend_vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 listeners: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerListenerArgs']]]]] = None,
                 load_balancer_name: Optional[pulumi.Input[str]] = None,
                 load_balancer_type: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 secured_cookies: Optional[pulumi.Input[bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subregion_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerTagArgs']]]]] = None,
                 __props__=None):
        """
        Create a LoadBalancer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LoadBalancerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a LoadBalancer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param LoadBalancerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoadBalancerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_log: Optional[pulumi.Input[pulumi.InputType['LoadBalancerAccessLogArgs']]] = None,
                 backend_vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 listeners: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerListenerArgs']]]]] = None,
                 load_balancer_name: Optional[pulumi.Input[str]] = None,
                 load_balancer_type: Optional[pulumi.Input[str]] = None,
                 public_ip: Optional[pulumi.Input[str]] = None,
                 secured_cookies: Optional[pulumi.Input[bool]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subregion_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoadBalancerArgs.__new__(LoadBalancerArgs)

            __props__.__dict__["access_log"] = access_log
            __props__.__dict__["backend_vm_ids"] = backend_vm_ids
            if listeners is None and not opts.urn:
                raise TypeError("Missing required property 'listeners'")
            __props__.__dict__["listeners"] = listeners
            if load_balancer_name is None and not opts.urn:
                raise TypeError("Missing required property 'load_balancer_name'")
            __props__.__dict__["load_balancer_name"] = load_balancer_name
            __props__.__dict__["load_balancer_type"] = load_balancer_type
            __props__.__dict__["public_ip"] = public_ip
            __props__.__dict__["secured_cookies"] = secured_cookies
            __props__.__dict__["security_groups"] = security_groups
            __props__.__dict__["subnets"] = subnets
            __props__.__dict__["subregion_names"] = subregion_names
            __props__.__dict__["tags"] = tags
            __props__.__dict__["application_sticky_cookie_policies"] = None
            __props__.__dict__["dns_name"] = None
            __props__.__dict__["health_check"] = None
            __props__.__dict__["load_balancer_sticky_cookie_policies"] = None
            __props__.__dict__["net_id"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["source_security_group"] = None
        super(LoadBalancer, __self__).__init__(
            'outscale:index/loadBalancer:LoadBalancer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_log: Optional[pulumi.Input[pulumi.InputType['LoadBalancerAccessLogArgs']]] = None,
            application_sticky_cookie_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerApplicationStickyCookiePolicyArgs']]]]] = None,
            backend_vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dns_name: Optional[pulumi.Input[str]] = None,
            health_check: Optional[pulumi.Input[pulumi.InputType['LoadBalancerHealthCheckArgs']]] = None,
            listeners: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerListenerArgs']]]]] = None,
            load_balancer_name: Optional[pulumi.Input[str]] = None,
            load_balancer_sticky_cookie_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerLoadBalancerStickyCookiePolicyArgs']]]]] = None,
            load_balancer_type: Optional[pulumi.Input[str]] = None,
            net_id: Optional[pulumi.Input[str]] = None,
            public_ip: Optional[pulumi.Input[str]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            secured_cookies: Optional[pulumi.Input[bool]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            source_security_group: Optional[pulumi.Input[pulumi.InputType['LoadBalancerSourceSecurityGroupArgs']]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            subregion_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerTagArgs']]]]] = None) -> 'LoadBalancer':
        """
        Get an existing LoadBalancer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoadBalancerState.__new__(_LoadBalancerState)

        __props__.__dict__["access_log"] = access_log
        __props__.__dict__["application_sticky_cookie_policies"] = application_sticky_cookie_policies
        __props__.__dict__["backend_vm_ids"] = backend_vm_ids
        __props__.__dict__["dns_name"] = dns_name
        __props__.__dict__["health_check"] = health_check
        __props__.__dict__["listeners"] = listeners
        __props__.__dict__["load_balancer_name"] = load_balancer_name
        __props__.__dict__["load_balancer_sticky_cookie_policies"] = load_balancer_sticky_cookie_policies
        __props__.__dict__["load_balancer_type"] = load_balancer_type
        __props__.__dict__["net_id"] = net_id
        __props__.__dict__["public_ip"] = public_ip
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["secured_cookies"] = secured_cookies
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["source_security_group"] = source_security_group
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["subregion_names"] = subregion_names
        __props__.__dict__["tags"] = tags
        return LoadBalancer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> pulumi.Output['outputs.LoadBalancerAccessLog']:
        return pulumi.get(self, "access_log")

    @property
    @pulumi.getter(name="applicationStickyCookiePolicies")
    def application_sticky_cookie_policies(self) -> pulumi.Output[Sequence['outputs.LoadBalancerApplicationStickyCookiePolicy']]:
        return pulumi.get(self, "application_sticky_cookie_policies")

    @property
    @pulumi.getter(name="backendVmIds")
    def backend_vm_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "backend_vm_ids")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> pulumi.Output['outputs.LoadBalancerHealthCheck']:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def listeners(self) -> pulumi.Output[Sequence['outputs.LoadBalancerListener']]:
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter(name="loadBalancerStickyCookiePolicies")
    def load_balancer_sticky_cookie_policies(self) -> pulumi.Output[Sequence['outputs.LoadBalancerLoadBalancerStickyCookiePolicy']]:
        return pulumi.get(self, "load_balancer_sticky_cookie_policies")

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "load_balancer_type")

    @property
    @pulumi.getter(name="netId")
    def net_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "net_id")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="securedCookies")
    def secured_cookies(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "secured_cookies")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="sourceSecurityGroup")
    def source_security_group(self) -> pulumi.Output['outputs.LoadBalancerSourceSecurityGroup']:
        return pulumi.get(self, "source_security_group")

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="subregionNames")
    def subregion_names(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "subregion_names")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.LoadBalancerTag']]]:
        return pulumi.get(self, "tags")

