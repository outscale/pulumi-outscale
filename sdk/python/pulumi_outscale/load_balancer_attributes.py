# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LoadBalancerAttributesArgs', 'LoadBalancerAttributes']

@pulumi.input_type
class LoadBalancerAttributesArgs:
    def __init__(__self__, *,
                 load_balancer_name: pulumi.Input[str],
                 access_log: Optional[pulumi.Input['LoadBalancerAttributesAccessLogArgs']] = None,
                 health_check: Optional[pulumi.Input['LoadBalancerAttributesHealthCheckArgs']] = None,
                 load_balancer_port: Optional[pulumi.Input[int]] = None,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_certificate_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesTagArgs']]]] = None):
        """
        The set of arguments for constructing a LoadBalancerAttributes resource.
        :param pulumi.Input[str] load_balancer_name: The name of the load balancer.
        :param pulumi.Input['LoadBalancerAttributesAccessLogArgs'] access_log: Information about access logs.
        :param pulumi.Input['LoadBalancerAttributesHealthCheckArgs'] health_check: Information about the health check configuration.
        :param pulumi.Input[int] load_balancer_port: The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] policy_names: The name of the policy you want to enable for the listener.
        :param pulumi.Input[str] server_certificate_id: The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesTagArgs']]] tags: One or more tags associated with the load balancer.
        """
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        if access_log is not None:
            pulumi.set(__self__, "access_log", access_log)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if load_balancer_port is not None:
            pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if server_certificate_id is not None:
            pulumi.set(__self__, "server_certificate_id", server_certificate_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> pulumi.Input[str]:
        """
        The name of the load balancer.
        """
        return pulumi.get(self, "load_balancer_name")

    @load_balancer_name.setter
    def load_balancer_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "load_balancer_name", value)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> Optional[pulumi.Input['LoadBalancerAttributesAccessLogArgs']]:
        """
        Information about access logs.
        """
        return pulumi.get(self, "access_log")

    @access_log.setter
    def access_log(self, value: Optional[pulumi.Input['LoadBalancerAttributesAccessLogArgs']]):
        pulumi.set(self, "access_log", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['LoadBalancerAttributesHealthCheckArgs']]:
        """
        Information about the health check configuration.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['LoadBalancerAttributesHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> Optional[pulumi.Input[int]]:
        """
        The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
        """
        return pulumi.get(self, "load_balancer_port")

    @load_balancer_port.setter
    def load_balancer_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "load_balancer_port", value)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The name of the policy you want to enable for the listener.
        """
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_names", value)

    @property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
        """
        return pulumi.get(self, "server_certificate_id")

    @server_certificate_id.setter
    def server_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesTagArgs']]]]:
        """
        One or more tags associated with the load balancer.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _LoadBalancerAttributesState:
    def __init__(__self__, *,
                 access_log: Optional[pulumi.Input['LoadBalancerAttributesAccessLogArgs']] = None,
                 application_sticky_cookie_policies: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesApplicationStickyCookiePolicyArgs']]]] = None,
                 backend_vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 health_check: Optional[pulumi.Input['LoadBalancerAttributesHealthCheckArgs']] = None,
                 listeners: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesListenerArgs']]]] = None,
                 load_balancer_name: Optional[pulumi.Input[str]] = None,
                 load_balancer_port: Optional[pulumi.Input[int]] = None,
                 load_balancer_sticky_cookie_policies: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesLoadBalancerStickyCookiePolicyArgs']]]] = None,
                 load_balancer_type: Optional[pulumi.Input[str]] = None,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 request_id: Optional[pulumi.Input[str]] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_certificate_id: Optional[pulumi.Input[str]] = None,
                 source_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesSourceSecurityGroupArgs']]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subregion_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesTagArgs']]]] = None):
        """
        Input properties used for looking up and filtering LoadBalancerAttributes resources.
        :param pulumi.Input['LoadBalancerAttributesAccessLogArgs'] access_log: Information about access logs.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesApplicationStickyCookiePolicyArgs']]] application_sticky_cookie_policies: The stickiness policies defined for the load balancer.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backend_vm_ids: One or more IDs of back-end VMs for the load balancer.
        :param pulumi.Input[str] dns_name: The DNS name of the load balancer.
        :param pulumi.Input['LoadBalancerAttributesHealthCheckArgs'] health_check: Information about the health check configuration.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesListenerArgs']]] listeners: The listeners for the load balancer.
        :param pulumi.Input[str] load_balancer_name: The name of the load balancer.
        :param pulumi.Input[int] load_balancer_port: The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesLoadBalancerStickyCookiePolicyArgs']]] load_balancer_sticky_cookie_policies: The policies defined for the load balancer.
        :param pulumi.Input[str] load_balancer_type: The type of load balancer. Valid only for load balancers in a Net.<br />
               If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
               If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] policy_names: The name of the policy you want to enable for the listener.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
        :param pulumi.Input[str] server_certificate_id: The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesSourceSecurityGroupArgs']]] source_security_groups: Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
               To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: The ID of the Subnet in which the load balancer was created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subregion_names: The ID of the Subregion in which the load balancer was created.
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesTagArgs']]] tags: One or more tags associated with the load balancer.
        """
        if access_log is not None:
            pulumi.set(__self__, "access_log", access_log)
        if application_sticky_cookie_policies is not None:
            pulumi.set(__self__, "application_sticky_cookie_policies", application_sticky_cookie_policies)
        if backend_vm_ids is not None:
            pulumi.set(__self__, "backend_vm_ids", backend_vm_ids)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if listeners is not None:
            pulumi.set(__self__, "listeners", listeners)
        if load_balancer_name is not None:
            pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        if load_balancer_port is not None:
            pulumi.set(__self__, "load_balancer_port", load_balancer_port)
        if load_balancer_sticky_cookie_policies is not None:
            pulumi.set(__self__, "load_balancer_sticky_cookie_policies", load_balancer_sticky_cookie_policies)
        if load_balancer_type is not None:
            pulumi.set(__self__, "load_balancer_type", load_balancer_type)
        if policy_names is not None:
            pulumi.set(__self__, "policy_names", policy_names)
        if request_id is not None:
            pulumi.set(__self__, "request_id", request_id)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if server_certificate_id is not None:
            pulumi.set(__self__, "server_certificate_id", server_certificate_id)
        if source_security_groups is not None:
            pulumi.set(__self__, "source_security_groups", source_security_groups)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)
        if subregion_names is not None:
            pulumi.set(__self__, "subregion_names", subregion_names)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> Optional[pulumi.Input['LoadBalancerAttributesAccessLogArgs']]:
        """
        Information about access logs.
        """
        return pulumi.get(self, "access_log")

    @access_log.setter
    def access_log(self, value: Optional[pulumi.Input['LoadBalancerAttributesAccessLogArgs']]):
        pulumi.set(self, "access_log", value)

    @property
    @pulumi.getter(name="applicationStickyCookiePolicies")
    def application_sticky_cookie_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesApplicationStickyCookiePolicyArgs']]]]:
        """
        The stickiness policies defined for the load balancer.
        """
        return pulumi.get(self, "application_sticky_cookie_policies")

    @application_sticky_cookie_policies.setter
    def application_sticky_cookie_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesApplicationStickyCookiePolicyArgs']]]]):
        pulumi.set(self, "application_sticky_cookie_policies", value)

    @property
    @pulumi.getter(name="backendVmIds")
    def backend_vm_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        One or more IDs of back-end VMs for the load balancer.
        """
        return pulumi.get(self, "backend_vm_ids")

    @backend_vm_ids.setter
    def backend_vm_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "backend_vm_ids", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        """
        The DNS name of the load balancer.
        """
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['LoadBalancerAttributesHealthCheckArgs']]:
        """
        Information about the health check configuration.
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['LoadBalancerAttributesHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter
    def listeners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesListenerArgs']]]]:
        """
        The listeners for the load balancer.
        """
        return pulumi.get(self, "listeners")

    @listeners.setter
    def listeners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesListenerArgs']]]]):
        pulumi.set(self, "listeners", value)

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the load balancer.
        """
        return pulumi.get(self, "load_balancer_name")

    @load_balancer_name.setter
    def load_balancer_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_name", value)

    @property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> Optional[pulumi.Input[int]]:
        """
        The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
        """
        return pulumi.get(self, "load_balancer_port")

    @load_balancer_port.setter
    def load_balancer_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "load_balancer_port", value)

    @property
    @pulumi.getter(name="loadBalancerStickyCookiePolicies")
    def load_balancer_sticky_cookie_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesLoadBalancerStickyCookiePolicyArgs']]]]:
        """
        The policies defined for the load balancer.
        """
        return pulumi.get(self, "load_balancer_sticky_cookie_policies")

    @load_balancer_sticky_cookie_policies.setter
    def load_balancer_sticky_cookie_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesLoadBalancerStickyCookiePolicyArgs']]]]):
        pulumi.set(self, "load_balancer_sticky_cookie_policies", value)

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of load balancer. Valid only for load balancers in a Net.<br />
        If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
        If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
        """
        return pulumi.get(self, "load_balancer_type")

    @load_balancer_type.setter
    def load_balancer_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "load_balancer_type", value)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The name of the policy you want to enable for the listener.
        """
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_names", value)

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_id")

    @request_id.setter
    def request_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_id", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
        """
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)

    @property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
        """
        return pulumi.get(self, "server_certificate_id")

    @server_certificate_id.setter
    def server_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_certificate_id", value)

    @property
    @pulumi.getter(name="sourceSecurityGroups")
    def source_security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesSourceSecurityGroupArgs']]]]:
        """
        Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
        To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
        """
        return pulumi.get(self, "source_security_groups")

    @source_security_groups.setter
    def source_security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesSourceSecurityGroupArgs']]]]):
        pulumi.set(self, "source_security_groups", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ID of the Subnet in which the load balancer was created.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="subregionNames")
    def subregion_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The ID of the Subregion in which the load balancer was created.
        """
        return pulumi.get(self, "subregion_names")

    @subregion_names.setter
    def subregion_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subregion_names", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesTagArgs']]]]:
        """
        One or more tags associated with the load balancer.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerAttributesTagArgs']]]]):
        pulumi.set(self, "tags", value)


class LoadBalancerAttributes(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_log: Optional[pulumi.Input[pulumi.InputType['LoadBalancerAttributesAccessLogArgs']]] = None,
                 health_check: Optional[pulumi.Input[pulumi.InputType['LoadBalancerAttributesHealthCheckArgs']]] = None,
                 load_balancer_name: Optional[pulumi.Input[str]] = None,
                 load_balancer_port: Optional[pulumi.Input[int]] = None,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_certificate_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerAttributesTagArgs']]]]] = None,
                 __props__=None):
        """
        Manages load balancer attributes.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#updateloadbalancer).

        ## Example Usage
        ### Required resource

        ```python
        import pulumi
        import pulumi_outscale as outscale

        load_balancer01 = outscale.LoadBalancer("loadBalancer01",
            listeners=[
                outscale.LoadBalancerListenerArgs(
                    backend_port=80,
                    backend_protocol="HTTP",
                    load_balancer_port=80,
                    load_balancer_protocol="HTTP",
                ),
                outscale.LoadBalancerListenerArgs(
                    backend_port=8080,
                    backend_protocol="HTTPS",
                    load_balancer_port=8080,
                    load_balancer_protocol="HTTPS",
                    server_certificate_id="arn:aws:iam::012345678910:server-certificate/MyCertificates/Certificate",
                ),
                outscale.LoadBalancerListenerArgs(
                    backend_port=1024,
                    backend_protocol="TCP",
                    load_balancer_port=1024,
                    load_balancer_protocol="TCP",
                ),
            ],
            load_balancer_name="terraform-load-balancer",
            subregion_names=["eu-west-2a"],
            tags=[
                outscale.LoadBalancerTagArgs(
                    key="name",
                    value="terraform-load-balancer",
                ),
                outscale.LoadBalancerTagArgs(
                    key="platform",
                    value="eu-west-2",
                ),
            ])
        ```
        ### Update health check

        ```python
        import pulumi
        import pulumi_outscale as outscale

        attributes01 = outscale.LoadBalancerAttributes("attributes01",
            load_balancer_name=outscale_load_balancer["load_balancer01"]["id"],
            health_check=outscale.LoadBalancerAttributesHealthCheckArgs(
                healthy_threshold=10,
                check_interval=30,
                path="/index.html",
                port=8080,
                protocol="HTTPS",
                timeout=5,
                unhealthy_threshold=5,
            ))
        ```
        ### Update access log

        ```python
        import pulumi
        import pulumi_outscale as outscale

        attributes02 = outscale.LoadBalancerAttributes("attributes02",
            load_balancer_name=outscale_load_balancer["load_balancer01"]["id"],
            access_log=outscale.LoadBalancerAttributesAccessLogArgs(
                publication_interval=5,
                is_enabled=True,
                osu_bucket_name="terraform-access-logs",
                osu_bucket_prefix="access-logs-01234",
            ))
        ```
        ### Update policies

        ```python
        import pulumi
        import pulumi_outscale as outscale

        attributes03 = outscale.LoadBalancerAttributes("attributes03",
            load_balancer_name=outscale_load_balancer["load_balancer01"]["id"],
            load_balancer_port=80,
            policy_names=["policy-name-01"])
        ```
        ### Update SSL certificate

        ```python
        import pulumi
        import pulumi_outscale as outscale

        attributes04 = outscale.LoadBalancerAttributes("attributes04",
            load_balancer_name=outscale_load_balancer["load_balancer01"]["id"],
            load_balancer_port=8080,
            server_certificate_id="arn:aws:iam::012345678910:server-certificate/MyCertificates/Certificate")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['LoadBalancerAttributesAccessLogArgs']] access_log: Information about access logs.
        :param pulumi.Input[pulumi.InputType['LoadBalancerAttributesHealthCheckArgs']] health_check: Information about the health check configuration.
        :param pulumi.Input[str] load_balancer_name: The name of the load balancer.
        :param pulumi.Input[int] load_balancer_port: The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] policy_names: The name of the policy you want to enable for the listener.
        :param pulumi.Input[str] server_certificate_id: The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerAttributesTagArgs']]]] tags: One or more tags associated with the load balancer.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LoadBalancerAttributesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages load balancer attributes.

        For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\\
        For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#updateloadbalancer).

        ## Example Usage
        ### Required resource

        ```python
        import pulumi
        import pulumi_outscale as outscale

        load_balancer01 = outscale.LoadBalancer("loadBalancer01",
            listeners=[
                outscale.LoadBalancerListenerArgs(
                    backend_port=80,
                    backend_protocol="HTTP",
                    load_balancer_port=80,
                    load_balancer_protocol="HTTP",
                ),
                outscale.LoadBalancerListenerArgs(
                    backend_port=8080,
                    backend_protocol="HTTPS",
                    load_balancer_port=8080,
                    load_balancer_protocol="HTTPS",
                    server_certificate_id="arn:aws:iam::012345678910:server-certificate/MyCertificates/Certificate",
                ),
                outscale.LoadBalancerListenerArgs(
                    backend_port=1024,
                    backend_protocol="TCP",
                    load_balancer_port=1024,
                    load_balancer_protocol="TCP",
                ),
            ],
            load_balancer_name="terraform-load-balancer",
            subregion_names=["eu-west-2a"],
            tags=[
                outscale.LoadBalancerTagArgs(
                    key="name",
                    value="terraform-load-balancer",
                ),
                outscale.LoadBalancerTagArgs(
                    key="platform",
                    value="eu-west-2",
                ),
            ])
        ```
        ### Update health check

        ```python
        import pulumi
        import pulumi_outscale as outscale

        attributes01 = outscale.LoadBalancerAttributes("attributes01",
            load_balancer_name=outscale_load_balancer["load_balancer01"]["id"],
            health_check=outscale.LoadBalancerAttributesHealthCheckArgs(
                healthy_threshold=10,
                check_interval=30,
                path="/index.html",
                port=8080,
                protocol="HTTPS",
                timeout=5,
                unhealthy_threshold=5,
            ))
        ```
        ### Update access log

        ```python
        import pulumi
        import pulumi_outscale as outscale

        attributes02 = outscale.LoadBalancerAttributes("attributes02",
            load_balancer_name=outscale_load_balancer["load_balancer01"]["id"],
            access_log=outscale.LoadBalancerAttributesAccessLogArgs(
                publication_interval=5,
                is_enabled=True,
                osu_bucket_name="terraform-access-logs",
                osu_bucket_prefix="access-logs-01234",
            ))
        ```
        ### Update policies

        ```python
        import pulumi
        import pulumi_outscale as outscale

        attributes03 = outscale.LoadBalancerAttributes("attributes03",
            load_balancer_name=outscale_load_balancer["load_balancer01"]["id"],
            load_balancer_port=80,
            policy_names=["policy-name-01"])
        ```
        ### Update SSL certificate

        ```python
        import pulumi
        import pulumi_outscale as outscale

        attributes04 = outscale.LoadBalancerAttributes("attributes04",
            load_balancer_name=outscale_load_balancer["load_balancer01"]["id"],
            load_balancer_port=8080,
            server_certificate_id="arn:aws:iam::012345678910:server-certificate/MyCertificates/Certificate")
        ```

        :param str resource_name: The name of the resource.
        :param LoadBalancerAttributesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoadBalancerAttributesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_log: Optional[pulumi.Input[pulumi.InputType['LoadBalancerAttributesAccessLogArgs']]] = None,
                 health_check: Optional[pulumi.Input[pulumi.InputType['LoadBalancerAttributesHealthCheckArgs']]] = None,
                 load_balancer_name: Optional[pulumi.Input[str]] = None,
                 load_balancer_port: Optional[pulumi.Input[int]] = None,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 server_certificate_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerAttributesTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoadBalancerAttributesArgs.__new__(LoadBalancerAttributesArgs)

            __props__.__dict__["access_log"] = access_log
            __props__.__dict__["health_check"] = health_check
            if load_balancer_name is None and not opts.urn:
                raise TypeError("Missing required property 'load_balancer_name'")
            __props__.__dict__["load_balancer_name"] = load_balancer_name
            __props__.__dict__["load_balancer_port"] = load_balancer_port
            __props__.__dict__["policy_names"] = policy_names
            __props__.__dict__["server_certificate_id"] = server_certificate_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["application_sticky_cookie_policies"] = None
            __props__.__dict__["backend_vm_ids"] = None
            __props__.__dict__["dns_name"] = None
            __props__.__dict__["listeners"] = None
            __props__.__dict__["load_balancer_sticky_cookie_policies"] = None
            __props__.__dict__["load_balancer_type"] = None
            __props__.__dict__["request_id"] = None
            __props__.__dict__["security_groups"] = None
            __props__.__dict__["source_security_groups"] = None
            __props__.__dict__["subnets"] = None
            __props__.__dict__["subregion_names"] = None
        super(LoadBalancerAttributes, __self__).__init__(
            'outscale:index/loadBalancerAttributes:LoadBalancerAttributes',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_log: Optional[pulumi.Input[pulumi.InputType['LoadBalancerAttributesAccessLogArgs']]] = None,
            application_sticky_cookie_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerAttributesApplicationStickyCookiePolicyArgs']]]]] = None,
            backend_vm_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dns_name: Optional[pulumi.Input[str]] = None,
            health_check: Optional[pulumi.Input[pulumi.InputType['LoadBalancerAttributesHealthCheckArgs']]] = None,
            listeners: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerAttributesListenerArgs']]]]] = None,
            load_balancer_name: Optional[pulumi.Input[str]] = None,
            load_balancer_port: Optional[pulumi.Input[int]] = None,
            load_balancer_sticky_cookie_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerAttributesLoadBalancerStickyCookiePolicyArgs']]]]] = None,
            load_balancer_type: Optional[pulumi.Input[str]] = None,
            policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            request_id: Optional[pulumi.Input[str]] = None,
            security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            server_certificate_id: Optional[pulumi.Input[str]] = None,
            source_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerAttributesSourceSecurityGroupArgs']]]]] = None,
            subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            subregion_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerAttributesTagArgs']]]]] = None) -> 'LoadBalancerAttributes':
        """
        Get an existing LoadBalancerAttributes resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['LoadBalancerAttributesAccessLogArgs']] access_log: Information about access logs.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerAttributesApplicationStickyCookiePolicyArgs']]]] application_sticky_cookie_policies: The stickiness policies defined for the load balancer.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] backend_vm_ids: One or more IDs of back-end VMs for the load balancer.
        :param pulumi.Input[str] dns_name: The DNS name of the load balancer.
        :param pulumi.Input[pulumi.InputType['LoadBalancerAttributesHealthCheckArgs']] health_check: Information about the health check configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerAttributesListenerArgs']]]] listeners: The listeners for the load balancer.
        :param pulumi.Input[str] load_balancer_name: The name of the load balancer.
        :param pulumi.Input[int] load_balancer_port: The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerAttributesLoadBalancerStickyCookiePolicyArgs']]]] load_balancer_sticky_cookie_policies: The policies defined for the load balancer.
        :param pulumi.Input[str] load_balancer_type: The type of load balancer. Valid only for load balancers in a Net.<br />
               If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
               If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] policy_names: The name of the policy you want to enable for the listener.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_groups: One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
        :param pulumi.Input[str] server_certificate_id: The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerAttributesSourceSecurityGroupArgs']]]] source_security_groups: Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
               To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: The ID of the Subnet in which the load balancer was created.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subregion_names: The ID of the Subregion in which the load balancer was created.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoadBalancerAttributesTagArgs']]]] tags: One or more tags associated with the load balancer.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoadBalancerAttributesState.__new__(_LoadBalancerAttributesState)

        __props__.__dict__["access_log"] = access_log
        __props__.__dict__["application_sticky_cookie_policies"] = application_sticky_cookie_policies
        __props__.__dict__["backend_vm_ids"] = backend_vm_ids
        __props__.__dict__["dns_name"] = dns_name
        __props__.__dict__["health_check"] = health_check
        __props__.__dict__["listeners"] = listeners
        __props__.__dict__["load_balancer_name"] = load_balancer_name
        __props__.__dict__["load_balancer_port"] = load_balancer_port
        __props__.__dict__["load_balancer_sticky_cookie_policies"] = load_balancer_sticky_cookie_policies
        __props__.__dict__["load_balancer_type"] = load_balancer_type
        __props__.__dict__["policy_names"] = policy_names
        __props__.__dict__["request_id"] = request_id
        __props__.__dict__["security_groups"] = security_groups
        __props__.__dict__["server_certificate_id"] = server_certificate_id
        __props__.__dict__["source_security_groups"] = source_security_groups
        __props__.__dict__["subnets"] = subnets
        __props__.__dict__["subregion_names"] = subregion_names
        __props__.__dict__["tags"] = tags
        return LoadBalancerAttributes(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessLog")
    def access_log(self) -> pulumi.Output['outputs.LoadBalancerAttributesAccessLog']:
        """
        Information about access logs.
        """
        return pulumi.get(self, "access_log")

    @property
    @pulumi.getter(name="applicationStickyCookiePolicies")
    def application_sticky_cookie_policies(self) -> pulumi.Output[Sequence['outputs.LoadBalancerAttributesApplicationStickyCookiePolicy']]:
        """
        The stickiness policies defined for the load balancer.
        """
        return pulumi.get(self, "application_sticky_cookie_policies")

    @property
    @pulumi.getter(name="backendVmIds")
    def backend_vm_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        One or more IDs of back-end VMs for the load balancer.
        """
        return pulumi.get(self, "backend_vm_ids")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Output[str]:
        """
        The DNS name of the load balancer.
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> pulumi.Output['outputs.LoadBalancerAttributesHealthCheck']:
        """
        Information about the health check configuration.
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter
    def listeners(self) -> pulumi.Output[Sequence['outputs.LoadBalancerAttributesListener']]:
        """
        The listeners for the load balancer.
        """
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> pulumi.Output[str]:
        """
        The name of the load balancer.
        """
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> pulumi.Output[Optional[int]]:
        """
        The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
        """
        return pulumi.get(self, "load_balancer_port")

    @property
    @pulumi.getter(name="loadBalancerStickyCookiePolicies")
    def load_balancer_sticky_cookie_policies(self) -> pulumi.Output[Sequence['outputs.LoadBalancerAttributesLoadBalancerStickyCookiePolicy']]:
        """
        The policies defined for the load balancer.
        """
        return pulumi.get(self, "load_balancer_sticky_cookie_policies")

    @property
    @pulumi.getter(name="loadBalancerType")
    def load_balancer_type(self) -> pulumi.Output[str]:
        """
        The type of load balancer. Valid only for load balancers in a Net.<br />
        If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
        If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
        """
        return pulumi.get(self, "load_balancer_type")

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The name of the policy you want to enable for the listener.
        """
        return pulumi.get(self, "policy_names")

    @property
    @pulumi.getter(name="requestId")
    def request_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "request_id")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Output[Sequence[str]]:
        """
        One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="serverCertificateId")
    def server_certificate_id(self) -> pulumi.Output[Optional[str]]:
        """
        The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
        """
        return pulumi.get(self, "server_certificate_id")

    @property
    @pulumi.getter(name="sourceSecurityGroups")
    def source_security_groups(self) -> pulumi.Output[Sequence['outputs.LoadBalancerAttributesSourceSecurityGroup']]:
        """
        Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
        To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
        """
        return pulumi.get(self, "source_security_groups")

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Output[Sequence[str]]:
        """
        The ID of the Subnet in which the load balancer was created.
        """
        return pulumi.get(self, "subnets")

    @property
    @pulumi.getter(name="subregionNames")
    def subregion_names(self) -> pulumi.Output[Sequence[str]]:
        """
        The ID of the Subregion in which the load balancer was created.
        """
        return pulumi.get(self, "subregion_names")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.LoadBalancerAttributesTag']]:
        """
        One or more tags associated with the load balancer.
        """
        return pulumi.get(self, "tags")

