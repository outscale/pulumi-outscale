// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Image extends pulumi.CustomResource {
    /**
     * Get an existing Image resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageState, opts?: pulumi.CustomResourceOptions): Image {
        return new Image(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/image:Image';

    /**
     * Returns true if the given object is an instance of Image.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Image {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Image.__pulumiType;
    }

    public /*out*/ readonly accountAlias!: pulumi.Output<string>;
    public /*out*/ readonly accountId!: pulumi.Output<string>;
    public readonly architecture!: pulumi.Output<string>;
    public readonly blockDeviceMappings!: pulumi.Output<outputs.ImageBlockDeviceMapping[]>;
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string>;
    public readonly fileLocation!: pulumi.Output<string>;
    public /*out*/ readonly imageId!: pulumi.Output<string>;
    public readonly imageName!: pulumi.Output<string>;
    public /*out*/ readonly imageType!: pulumi.Output<string>;
    public /*out*/ readonly isPublic!: pulumi.Output<boolean>;
    public readonly noReboot!: pulumi.Output<boolean>;
    public /*out*/ readonly permissionsToLaunches!: pulumi.Output<outputs.ImagePermissionsToLaunch[]>;
    public /*out*/ readonly productCodes!: pulumi.Output<string[]>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    public readonly rootDeviceName!: pulumi.Output<string>;
    public /*out*/ readonly rootDeviceType!: pulumi.Output<string>;
    public readonly sourceImageId!: pulumi.Output<string>;
    public readonly sourceRegionName!: pulumi.Output<string | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly stateComments!: pulumi.Output<outputs.ImageStateComment[]>;
    public readonly tags!: pulumi.Output<outputs.ImageTag[] | undefined>;
    public readonly vmId!: pulumi.Output<string>;

    /**
     * Create a Image resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ImageArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageArgs | ImageState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageState | undefined;
            resourceInputs["accountAlias"] = state ? state.accountAlias : undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["blockDeviceMappings"] = state ? state.blockDeviceMappings : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fileLocation"] = state ? state.fileLocation : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["imageType"] = state ? state.imageType : undefined;
            resourceInputs["isPublic"] = state ? state.isPublic : undefined;
            resourceInputs["noReboot"] = state ? state.noReboot : undefined;
            resourceInputs["permissionsToLaunches"] = state ? state.permissionsToLaunches : undefined;
            resourceInputs["productCodes"] = state ? state.productCodes : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["rootDeviceName"] = state ? state.rootDeviceName : undefined;
            resourceInputs["rootDeviceType"] = state ? state.rootDeviceType : undefined;
            resourceInputs["sourceImageId"] = state ? state.sourceImageId : undefined;
            resourceInputs["sourceRegionName"] = state ? state.sourceRegionName : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateComments"] = state ? state.stateComments : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vmId"] = state ? state.vmId : undefined;
        } else {
            const args = argsOrState as ImageArgs | undefined;
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["blockDeviceMappings"] = args ? args.blockDeviceMappings : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fileLocation"] = args ? args.fileLocation : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["noReboot"] = args ? args.noReboot : undefined;
            resourceInputs["rootDeviceName"] = args ? args.rootDeviceName : undefined;
            resourceInputs["sourceImageId"] = args ? args.sourceImageId : undefined;
            resourceInputs["sourceRegionName"] = args ? args.sourceRegionName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vmId"] = args ? args.vmId : undefined;
            resourceInputs["accountAlias"] = undefined /*out*/;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["imageId"] = undefined /*out*/;
            resourceInputs["imageType"] = undefined /*out*/;
            resourceInputs["isPublic"] = undefined /*out*/;
            resourceInputs["permissionsToLaunches"] = undefined /*out*/;
            resourceInputs["productCodes"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["rootDeviceType"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateComments"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Image.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Image resources.
 */
export interface ImageState {
    accountAlias?: pulumi.Input<string>;
    accountId?: pulumi.Input<string>;
    architecture?: pulumi.Input<string>;
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.ImageBlockDeviceMapping>[]>;
    creationDate?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    fileLocation?: pulumi.Input<string>;
    imageId?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    imageType?: pulumi.Input<string>;
    isPublic?: pulumi.Input<boolean>;
    noReboot?: pulumi.Input<boolean>;
    permissionsToLaunches?: pulumi.Input<pulumi.Input<inputs.ImagePermissionsToLaunch>[]>;
    productCodes?: pulumi.Input<pulumi.Input<string>[]>;
    requestId?: pulumi.Input<string>;
    rootDeviceName?: pulumi.Input<string>;
    rootDeviceType?: pulumi.Input<string>;
    sourceImageId?: pulumi.Input<string>;
    sourceRegionName?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    stateComments?: pulumi.Input<pulumi.Input<inputs.ImageStateComment>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.ImageTag>[]>;
    vmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Image resource.
 */
export interface ImageArgs {
    architecture?: pulumi.Input<string>;
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.ImageBlockDeviceMapping>[]>;
    description?: pulumi.Input<string>;
    fileLocation?: pulumi.Input<string>;
    imageName?: pulumi.Input<string>;
    noReboot?: pulumi.Input<boolean>;
    rootDeviceName?: pulumi.Input<string>;
    sourceImageId?: pulumi.Input<string>;
    sourceRegionName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ImageTag>[]>;
    vmId?: pulumi.Input<string>;
}
