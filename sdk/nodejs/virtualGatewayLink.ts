// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualGatewayLink extends pulumi.CustomResource {
    /**
     * Get an existing VirtualGatewayLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualGatewayLinkState, opts?: pulumi.CustomResourceOptions): VirtualGatewayLink {
        return new VirtualGatewayLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/virtualGatewayLink:VirtualGatewayLink';

    /**
     * Returns true if the given object is an instance of VirtualGatewayLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualGatewayLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualGatewayLink.__pulumiType;
    }

    public readonly dryRun!: pulumi.Output<string>;
    public readonly netId!: pulumi.Output<string>;
    public /*out*/ readonly netToVirtualGatewayLinks!: pulumi.Output<outputs.VirtualGatewayLinkNetToVirtualGatewayLink[]>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    public readonly virtualGatewayId!: pulumi.Output<string>;

    /**
     * Create a VirtualGatewayLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualGatewayLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualGatewayLinkArgs | VirtualGatewayLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualGatewayLinkState | undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["netId"] = state ? state.netId : undefined;
            resourceInputs["netToVirtualGatewayLinks"] = state ? state.netToVirtualGatewayLinks : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["virtualGatewayId"] = state ? state.virtualGatewayId : undefined;
        } else {
            const args = argsOrState as VirtualGatewayLinkArgs | undefined;
            if ((!args || args.netId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netId'");
            }
            if ((!args || args.virtualGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualGatewayId'");
            }
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["netId"] = args ? args.netId : undefined;
            resourceInputs["virtualGatewayId"] = args ? args.virtualGatewayId : undefined;
            resourceInputs["netToVirtualGatewayLinks"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualGatewayLink.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualGatewayLink resources.
 */
export interface VirtualGatewayLinkState {
    dryRun?: pulumi.Input<string>;
    netId?: pulumi.Input<string>;
    netToVirtualGatewayLinks?: pulumi.Input<pulumi.Input<inputs.VirtualGatewayLinkNetToVirtualGatewayLink>[]>;
    requestId?: pulumi.Input<string>;
    virtualGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualGatewayLink resource.
 */
export interface VirtualGatewayLinkArgs {
    dryRun?: pulumi.Input<string>;
    netId: pulumi.Input<string>;
    virtualGatewayId: pulumi.Input<string>;
}
