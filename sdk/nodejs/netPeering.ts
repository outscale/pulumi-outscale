// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a Net peering.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPC-Peering-Connections.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-netpeering).
 *
 * ## Example Usage
 * ### Required resources
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@pulumi/outscale";
 *
 * const net01 = new outscale.Net("net01", {ipRange: "10.10.0.0/24"});
 * const net02 = new outscale.Net("net02", {ipRange: "10.31.0.0/16"});
 * ```
 * ### Peer Nets
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@pulumi/outscale";
 *
 * const netPeering01 = new outscale.NetPeering("netPeering01", {
 *     accepterNetId: outscale_net.net01.net_id,
 *     sourceNetId: outscale_net.net02.net_id,
 * });
 * ```
 *
 * ## Import
 *
 * A Net peering can be imported using its ID. For exampleconsole
 *
 * ```sh
 *  $ pulumi import outscale:index/netPeering:NetPeering ImportedNetPeering pcx-12345678
 * ```
 */
export class NetPeering extends pulumi.CustomResource {
    /**
     * Get an existing NetPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetPeeringState, opts?: pulumi.CustomResourceOptions): NetPeering {
        return new NetPeering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/netPeering:NetPeering';

    /**
     * Returns true if the given object is an instance of NetPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetPeering.__pulumiType;
    }

    /**
     * The ID of the Net you want to connect with.
     */
    public readonly accepterNetId!: pulumi.Output<string>;
    /**
     * Information about the accepter Net.
     */
    public /*out*/ readonly accepterNets!: pulumi.Output<outputs.NetPeeringAccepterNet[]>;
    /**
     * The ID of the Net peering.
     */
    public /*out*/ readonly netPeeringId!: pulumi.Output<string>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    public readonly sourceNetAccountId!: pulumi.Output<string>;
    /**
     * The ID of the Net you send the peering request from.
     */
    public readonly sourceNetId!: pulumi.Output<string>;
    /**
     * Information about the source Net.
     */
    public /*out*/ readonly sourceNets!: pulumi.Output<outputs.NetPeeringSourceNet[]>;
    /**
     * Information about the state of the Net peering.
     */
    public /*out*/ readonly states!: pulumi.Output<outputs.NetPeeringState[]>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    public readonly tags!: pulumi.Output<outputs.NetPeeringTag[] | undefined>;

    /**
     * Create a NetPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetPeeringArgs | NetPeeringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetPeeringState | undefined;
            resourceInputs["accepterNetId"] = state ? state.accepterNetId : undefined;
            resourceInputs["accepterNets"] = state ? state.accepterNets : undefined;
            resourceInputs["netPeeringId"] = state ? state.netPeeringId : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["sourceNetAccountId"] = state ? state.sourceNetAccountId : undefined;
            resourceInputs["sourceNetId"] = state ? state.sourceNetId : undefined;
            resourceInputs["sourceNets"] = state ? state.sourceNets : undefined;
            resourceInputs["states"] = state ? state.states : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as NetPeeringArgs | undefined;
            if ((!args || args.accepterNetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accepterNetId'");
            }
            if ((!args || args.sourceNetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceNetId'");
            }
            resourceInputs["accepterNetId"] = args ? args.accepterNetId : undefined;
            resourceInputs["sourceNetAccountId"] = args ? args.sourceNetAccountId : undefined;
            resourceInputs["sourceNetId"] = args ? args.sourceNetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["accepterNets"] = undefined /*out*/;
            resourceInputs["netPeeringId"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["sourceNets"] = undefined /*out*/;
            resourceInputs["states"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetPeering.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetPeering resources.
 */
export interface NetPeeringState {
    /**
     * The ID of the Net you want to connect with.
     */
    accepterNetId?: pulumi.Input<string>;
    /**
     * Information about the accepter Net.
     */
    accepterNets?: pulumi.Input<pulumi.Input<inputs.NetPeeringAccepterNet>[]>;
    /**
     * The ID of the Net peering.
     */
    netPeeringId?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    sourceNetAccountId?: pulumi.Input<string>;
    /**
     * The ID of the Net you send the peering request from.
     */
    sourceNetId?: pulumi.Input<string>;
    /**
     * Information about the source Net.
     */
    sourceNets?: pulumi.Input<pulumi.Input<inputs.NetPeeringSourceNet>[]>;
    /**
     * Information about the state of the Net peering.
     */
    states?: pulumi.Input<pulumi.Input<inputs.NetPeeringState>[]>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetPeeringTag>[]>;
}

/**
 * The set of arguments for constructing a NetPeering resource.
 */
export interface NetPeeringArgs {
    /**
     * The ID of the Net you want to connect with.
     */
    accepterNetId: pulumi.Input<string>;
    sourceNetAccountId?: pulumi.Input<string>;
    /**
     * The ID of the Net you send the peering request from.
     */
    sourceNetId: pulumi.Input<string>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetPeeringTag>[]>;
}
