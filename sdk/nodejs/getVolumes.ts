// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides information about volumes.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Volumes.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-volume).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const outscaleVolumes01 = outscale.getVolumes({
 *     filters: [
 *         {
 *             name: "volume_states",
 *             values: ["in-use"],
 *         },
 *         {
 *             name: "volume_types",
 *             values: [
 *                 "gp2",
 *                 "io1",
 *             ],
 *         },
 *     ],
 * });
 * ```
 */
export function getVolumes(args?: GetVolumesArgs, opts?: pulumi.InvokeOptions): Promise<GetVolumesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("outscale:index/getVolumes:getVolumes", {
        "filters": args.filters,
        "requestId": args.requestId,
        "volumeId": args.volumeId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVolumes.
 */
export interface GetVolumesArgs {
    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     */
    filters?: inputs.GetVolumesFilter[];
    requestId?: string;
    /**
     * The ID of the volume.
     */
    volumeId?: string;
}

/**
 * A collection of values returned by getVolumes.
 */
export interface GetVolumesResult {
    readonly filters?: outputs.GetVolumesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly requestId?: string;
    /**
     * The ID of the volume.
     */
    readonly volumeId?: string;
    /**
     * Information about one or more volumes.
     */
    readonly volumes: outputs.GetVolumesVolume[];
}
/**
 * Provides information about volumes.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Volumes.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-volume).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const outscaleVolumes01 = outscale.getVolumes({
 *     filters: [
 *         {
 *             name: "volume_states",
 *             values: ["in-use"],
 *         },
 *         {
 *             name: "volume_types",
 *             values: [
 *                 "gp2",
 *                 "io1",
 *             ],
 *         },
 *     ],
 * });
 * ```
 */
export function getVolumesOutput(args?: GetVolumesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVolumesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("outscale:index/getVolumes:getVolumes", {
        "filters": args.filters,
        "requestId": args.requestId,
        "volumeId": args.volumeId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVolumes.
 */
export interface GetVolumesOutputArgs {
    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetVolumesFilterArgs>[]>;
    requestId?: pulumi.Input<string>;
    /**
     * The ID of the volume.
     */
    volumeId?: pulumi.Input<string>;
}
