// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a server certificate.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Server-Certificates-in-EIM.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-servercertificate).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as outscale from "@pulumi/outscale";
 *
 * const serverCertificate01 = new outscale.ServerCertificate("serverCertificate01", {
 *     body: fs.readFileSync("<PATH>"),
 *     chain: fs.readFileSync("<PATH>"),
 *     privateKey: fs.readFileSync("<PATH>"),
 *     path: "<PATH>",
 * });
 * ```
 *
 * ## Import
 *
 * A server certificate can be imported using its ID. For exampleconsole
 *
 * ```sh
 *  $ pulumi import outscale:index/serverCertificate:ServerCertificate ImportedServerCertificate 0123456789
 * ```
 */
export class ServerCertificate extends pulumi.CustomResource {
    /**
     * Get an existing ServerCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerCertificateState, opts?: pulumi.CustomResourceOptions): ServerCertificate {
        return new ServerCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/serverCertificate:ServerCertificate';

    /**
     * Returns true if the given object is an instance of ServerCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerCertificate.__pulumiType;
    }

    /**
     * The PEM-encoded X509 certificate.
     */
    public readonly body!: pulumi.Output<string | undefined>;
    /**
     * The PEM-encoded intermediate certification authorities.
     */
    public readonly chain!: pulumi.Output<string | undefined>;
    public readonly dryRun!: pulumi.Output<string | undefined>;
    /**
     * The date at which the server certificate expires.
     */
    public /*out*/ readonly expirationDate!: pulumi.Output<string>;
    /**
     * A unique name for the certificate. Constraints: 1-128 alphanumeric characters, pluses (+), equals (=), commas (,), periods (.), at signs (@), minuses (-), or underscores (_).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
     */
    public /*out*/ readonly orn!: pulumi.Output<string>;
    /**
     * The path to the server certificate, set to a slash (/) if not specified.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * The PEM-encoded private key matching the certificate.
     */
    public readonly privateKey!: pulumi.Output<string | undefined>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    /**
     * The date at which the server certificate has been uploaded.
     */
    public /*out*/ readonly uploadDate!: pulumi.Output<string>;

    /**
     * Create a ServerCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServerCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerCertificateArgs | ServerCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerCertificateState | undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["chain"] = state ? state.chain : undefined;
            resourceInputs["dryRun"] = state ? state.dryRun : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orn"] = state ? state.orn : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["uploadDate"] = state ? state.uploadDate : undefined;
        } else {
            const args = argsOrState as ServerCertificateArgs | undefined;
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["chain"] = args ? args.chain : undefined;
            resourceInputs["dryRun"] = args ? args.dryRun : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["orn"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["uploadDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerCertificate resources.
 */
export interface ServerCertificateState {
    /**
     * The PEM-encoded X509 certificate.
     */
    body?: pulumi.Input<string>;
    /**
     * The PEM-encoded intermediate certification authorities.
     */
    chain?: pulumi.Input<string>;
    dryRun?: pulumi.Input<string>;
    /**
     * The date at which the server certificate expires.
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * A unique name for the certificate. Constraints: 1-128 alphanumeric characters, pluses (+), equals (=), commas (,), periods (.), at signs (@), minuses (-), or underscores (_).
     */
    name?: pulumi.Input<string>;
    /**
     * The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
     */
    orn?: pulumi.Input<string>;
    /**
     * The path to the server certificate, set to a slash (/) if not specified.
     */
    path?: pulumi.Input<string>;
    /**
     * The PEM-encoded private key matching the certificate.
     */
    privateKey?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    /**
     * The date at which the server certificate has been uploaded.
     */
    uploadDate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerCertificate resource.
 */
export interface ServerCertificateArgs {
    /**
     * The PEM-encoded X509 certificate.
     */
    body?: pulumi.Input<string>;
    /**
     * The PEM-encoded intermediate certification authorities.
     */
    chain?: pulumi.Input<string>;
    dryRun?: pulumi.Input<string>;
    /**
     * A unique name for the certificate. Constraints: 1-128 alphanumeric characters, pluses (+), equals (=), commas (,), periods (.), at signs (@), minuses (-), or underscores (_).
     */
    name?: pulumi.Input<string>;
    /**
     * The path to the server certificate, set to a slash (/) if not specified.
     */
    path?: pulumi.Input<string>;
    /**
     * The PEM-encoded private key matching the certificate.
     */
    privateKey?: pulumi.Input<string>;
}
