// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VirtualGateway extends pulumi.CustomResource {
    /**
     * Get an existing VirtualGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualGatewayState, opts?: pulumi.CustomResourceOptions): VirtualGateway {
        return new VirtualGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/virtualGateway:VirtualGateway';

    /**
     * Returns true if the given object is an instance of VirtualGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualGateway.__pulumiType;
    }

    public readonly connectionType!: pulumi.Output<string>;
    public readonly netToVirtualGatewayLinks!: pulumi.Output<outputs.VirtualGatewayNetToVirtualGatewayLink[]>;
    public readonly requestId!: pulumi.Output<string>;
    public readonly state!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.VirtualGatewayTag[] | undefined>;
    public readonly virtualGatewayId!: pulumi.Output<string>;

    /**
     * Create a VirtualGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualGatewayArgs | VirtualGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualGatewayState | undefined;
            resourceInputs["connectionType"] = state ? state.connectionType : undefined;
            resourceInputs["netToVirtualGatewayLinks"] = state ? state.netToVirtualGatewayLinks : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["virtualGatewayId"] = state ? state.virtualGatewayId : undefined;
        } else {
            const args = argsOrState as VirtualGatewayArgs | undefined;
            if ((!args || args.connectionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionType'");
            }
            resourceInputs["connectionType"] = args ? args.connectionType : undefined;
            resourceInputs["netToVirtualGatewayLinks"] = args ? args.netToVirtualGatewayLinks : undefined;
            resourceInputs["requestId"] = args ? args.requestId : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["virtualGatewayId"] = args ? args.virtualGatewayId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualGateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualGateway resources.
 */
export interface VirtualGatewayState {
    connectionType?: pulumi.Input<string>;
    netToVirtualGatewayLinks?: pulumi.Input<pulumi.Input<inputs.VirtualGatewayNetToVirtualGatewayLink>[]>;
    requestId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VirtualGatewayTag>[]>;
    virtualGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VirtualGateway resource.
 */
export interface VirtualGatewayArgs {
    connectionType: pulumi.Input<string>;
    netToVirtualGatewayLinks?: pulumi.Input<pulumi.Input<inputs.VirtualGatewayNetToVirtualGatewayLink>[]>;
    requestId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VirtualGatewayTag>[]>;
    virtualGatewayId?: pulumi.Input<string>;
}
