// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a flexible GPU link.
 *
 * When linking a flexible GPU to a VM, the VM will automatically be stopped and started again.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-flexiblegpu).
 *
 * ## Example Usage
 *
 * ### Required resources
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const vm01 = new outscale.Vm("vm01", {
 *     imageId: "ami-12345678",
 *     vmType: "tinav5.c1r1p2",
 *     keypairName: keypairName,
 *     placementSubregionName: "eu-west-2a",
 * });
 * const flexibleGpu01 = new outscale.FlexibleGpu("flexible_gpu01", {
 *     modelName: modelName,
 *     generation: "v4",
 *     subregionName: "eu-west-2a",
 *     deleteOnVmDeletion: true,
 * });
 * ```
 *
 * ### Create a flexible GPU link
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const linkFgpu01 = new outscale.FlexibleGpuLink("link_fgpu01", {
 *     flexibleGpuIds: [flexibleGpu01.flexibleGpuId],
 *     vmId: vm01.vmId,
 * });
 * ```
 *
 * ## Import
 *
 * A flexible GPU link can be imported using the flexible GPU ID. For example:
 *
 * console
 *
 * ```sh
 * $ pulumi import outscale:index/flexibleGpuLink:FlexibleGpuLink imported_link_fgpu fgpu-12345678
 * ```
 */
export class FlexibleGpuLink extends pulumi.CustomResource {
    /**
     * Get an existing FlexibleGpuLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlexibleGpuLinkState, opts?: pulumi.CustomResourceOptions): FlexibleGpuLink {
        return new FlexibleGpuLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/flexibleGpuLink:FlexibleGpuLink';

    /**
     * Returns true if the given object is an instance of FlexibleGpuLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlexibleGpuLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlexibleGpuLink.__pulumiType;
    }

    /**
     * (Required) The ID of one or more fGPUs you want to attach.
     */
    public readonly flexibleGpuIds!: pulumi.Output<string[]>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    /**
     * The ID of the VM you want to attach the fGPU to.
     */
    public readonly vmId!: pulumi.Output<string>;

    /**
     * Create a FlexibleGpuLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlexibleGpuLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlexibleGpuLinkArgs | FlexibleGpuLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlexibleGpuLinkState | undefined;
            resourceInputs["flexibleGpuIds"] = state ? state.flexibleGpuIds : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["vmId"] = state ? state.vmId : undefined;
        } else {
            const args = argsOrState as FlexibleGpuLinkArgs | undefined;
            if ((!args || args.flexibleGpuIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flexibleGpuIds'");
            }
            if ((!args || args.vmId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmId'");
            }
            resourceInputs["flexibleGpuIds"] = args ? args.flexibleGpuIds : undefined;
            resourceInputs["vmId"] = args ? args.vmId : undefined;
            resourceInputs["requestId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlexibleGpuLink.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlexibleGpuLink resources.
 */
export interface FlexibleGpuLinkState {
    /**
     * (Required) The ID of one or more fGPUs you want to attach.
     */
    flexibleGpuIds?: pulumi.Input<pulumi.Input<string>[]>;
    requestId?: pulumi.Input<string>;
    /**
     * The ID of the VM you want to attach the fGPU to.
     */
    vmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlexibleGpuLink resource.
 */
export interface FlexibleGpuLinkArgs {
    /**
     * (Required) The ID of one or more fGPUs you want to attach.
     */
    flexibleGpuIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the VM you want to attach the fGPU to.
     */
    vmId: pulumi.Input<string>;
}
