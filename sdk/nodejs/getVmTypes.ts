// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides information about VM types.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/VM-Types.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#readvmtypes).
 *
 * ## Example Usage
 *
 * ### All types of VMs
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const allVmTypes = outscale.getVmTypes({});
 * ```
 *
 * ### VMs optimized for Block Storage Unit (BSU)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const vmTypes01 = outscale.getVmTypes({
 *     filters: [{
 *         name: "bsu_optimized",
 *         values: ["true"],
 *     }],
 * });
 * ```
 *
 * ### Specific VM type
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const vmTypes02 = outscale.getVmTypes({
 *     filters: [{
 *         name: "vm_type_names",
 *         values: ["m3.large"],
 *     }],
 * });
 * ```
 */
export function getVmTypes(args?: GetVmTypesArgs, opts?: pulumi.InvokeOptions): Promise<GetVmTypesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("outscale:index/getVmTypes:getVmTypes", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getVmTypes.
 */
export interface GetVmTypesArgs {
    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     */
    filters?: inputs.GetVmTypesFilter[];
}

/**
 * A collection of values returned by getVmTypes.
 */
export interface GetVmTypesResult {
    readonly filters?: outputs.GetVmTypesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly requestId: string;
    /**
     * Information about one or more VM types.
     */
    readonly vmTypes: outputs.GetVmTypesVmType[];
}
/**
 * Provides information about VM types.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/VM-Types.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#readvmtypes).
 *
 * ## Example Usage
 *
 * ### All types of VMs
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const allVmTypes = outscale.getVmTypes({});
 * ```
 *
 * ### VMs optimized for Block Storage Unit (BSU)
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const vmTypes01 = outscale.getVmTypes({
 *     filters: [{
 *         name: "bsu_optimized",
 *         values: ["true"],
 *     }],
 * });
 * ```
 *
 * ### Specific VM type
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const vmTypes02 = outscale.getVmTypes({
 *     filters: [{
 *         name: "vm_type_names",
 *         values: ["m3.large"],
 *     }],
 * });
 * ```
 */
export function getVmTypesOutput(args?: GetVmTypesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVmTypesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("outscale:index/getVmTypes:getVmTypes", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getVmTypes.
 */
export interface GetVmTypesOutputArgs {
    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetVmTypesFilterArgs>[]>;
}
