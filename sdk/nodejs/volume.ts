// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    public readonly iops!: pulumi.Output<number>;
    public /*out*/ readonly linkedVolumes!: pulumi.Output<outputs.VolumeLinkedVolume[]>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<number>;
    public readonly snapshotId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly subregionName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.VolumeTag[] | undefined>;
    public /*out*/ readonly volumeId!: pulumi.Output<string>;
    public readonly volumeType!: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["linkedVolumes"] = state ? state.linkedVolumes : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subregionName"] = state ? state.subregionName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.subregionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subregionName'");
            }
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["subregionName"] = args ? args.subregionName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["linkedVolumes"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["volumeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    creationDate?: pulumi.Input<string>;
    iops?: pulumi.Input<number>;
    linkedVolumes?: pulumi.Input<pulumi.Input<inputs.VolumeLinkedVolume>[]>;
    requestId?: pulumi.Input<string>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    subregionName?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VolumeTag>[]>;
    volumeId?: pulumi.Input<string>;
    volumeType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    iops?: pulumi.Input<number>;
    size?: pulumi.Input<number>;
    snapshotId?: pulumi.Input<string>;
    subregionName: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.VolumeTag>[]>;
    volumeType?: pulumi.Input<string>;
}
