// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a volume.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Volumes.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-volume).
 *
 * ## Example Usage
 *
 * ### Creating an io1 volume
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const volume01 = new outscale.Volume("volume01", {
 *     subregionName: `${region}a`,
 *     size: 10,
 *     iops: 100,
 *     volumeType: "io1",
 * });
 * ```
 *
 * ### Creating a snapshot before volume deletion
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const volume01 = new outscale.Volume("volume01", {
 *     terminationSnapshotName: "deleting_volume_snap",
 *     subregionName: `${region}a`,
 *     size: 40,
 * });
 * ```
 *
 * ## Import
 *
 * A volume can be imported using its ID. For example:
 *
 * console
 *
 * ```sh
 * $ pulumi import outscale:index/volume:Volume ImportedVolume vol-12345678
 * ```
 */
export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * The date and time (UTC) at which the volume was created.
     */
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    /**
     * The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
     */
    public readonly iops!: pulumi.Output<number>;
    /**
     * Information about your volume attachment.
     */
    public /*out*/ readonly linkedVolumes!: pulumi.Output<outputs.VolumeLinkedVolume[]>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    /**
     * The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshotId` unspecified).
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * The ID of the snapshot from which you want to create the volume.
     */
    public readonly snapshotId!: pulumi.Output<string>;
    /**
     * The state of the volume (`creating` \| `available` \| `in-use` \| `updating` \| `deleting` \| `error`).
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The Subregion in which you want to create the volume.
     */
    public readonly subregionName!: pulumi.Output<string>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    public readonly tags!: pulumi.Output<outputs.VolumeTag[] | undefined>;
    /**
     * Whether you want to create a snapshot before the volume deletion.
     */
    public readonly terminationSnapshotName!: pulumi.Output<string | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.VolumeTimeouts | undefined>;
    /**
     * The ID of the volume.
     */
    public /*out*/ readonly volumeId!: pulumi.Output<string>;
    /**
     * The type of volume you want to create (`io1` \| `gp2` \| `standard`). If not specified, a `standard` volume is created.<br />
     * For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
     */
    public readonly volumeType!: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["iops"] = state ? state.iops : undefined;
            resourceInputs["linkedVolumes"] = state ? state.linkedVolumes : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["subregionName"] = state ? state.subregionName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["terminationSnapshotName"] = state ? state.terminationSnapshotName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
            resourceInputs["volumeType"] = state ? state.volumeType : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.subregionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subregionName'");
            }
            resourceInputs["iops"] = args ? args.iops : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["subregionName"] = args ? args.subregionName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["terminationSnapshotName"] = args ? args.terminationSnapshotName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["volumeType"] = args ? args.volumeType : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["linkedVolumes"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["volumeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * The date and time (UTC) at which the volume was created.
     */
    creationDate?: pulumi.Input<string>;
    /**
     * The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
     */
    iops?: pulumi.Input<number>;
    /**
     * Information about your volume attachment.
     */
    linkedVolumes?: pulumi.Input<pulumi.Input<inputs.VolumeLinkedVolume>[]>;
    requestId?: pulumi.Input<string>;
    /**
     * The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshotId` unspecified).
     */
    size?: pulumi.Input<number>;
    /**
     * The ID of the snapshot from which you want to create the volume.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The state of the volume (`creating` \| `available` \| `in-use` \| `updating` \| `deleting` \| `error`).
     */
    state?: pulumi.Input<string>;
    /**
     * The Subregion in which you want to create the volume.
     */
    subregionName?: pulumi.Input<string>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.VolumeTag>[]>;
    /**
     * Whether you want to create a snapshot before the volume deletion.
     */
    terminationSnapshotName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VolumeTimeouts>;
    /**
     * The ID of the volume.
     */
    volumeId?: pulumi.Input<string>;
    /**
     * The type of volume you want to create (`io1` \| `gp2` \| `standard`). If not specified, a `standard` volume is created.<br />
     * For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
     */
    volumeType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
     */
    iops?: pulumi.Input<number>;
    /**
     * The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshotId` unspecified).
     */
    size?: pulumi.Input<number>;
    /**
     * The ID of the snapshot from which you want to create the volume.
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * The Subregion in which you want to create the volume.
     */
    subregionName: pulumi.Input<string>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.VolumeTag>[]>;
    /**
     * Whether you want to create a snapshot before the volume deletion.
     */
    terminationSnapshotName?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.VolumeTimeouts>;
    /**
     * The type of volume you want to create (`io1` \| `gp2` \| `standard`). If not specified, a `standard` volume is created.<br />
     * For more information about volume types, see [About Volumes > Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
     */
    volumeType?: pulumi.Input<string>;
}
