// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class PublicIpLink extends pulumi.CustomResource {
    /**
     * Get an existing PublicIpLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PublicIpLinkState, opts?: pulumi.CustomResourceOptions): PublicIpLink {
        return new PublicIpLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/publicIpLink:PublicIpLink';

    /**
     * Returns true if the given object is an instance of PublicIpLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PublicIpLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PublicIpLink.__pulumiType;
    }

    public readonly allowRelink!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly linkPublicIpId!: pulumi.Output<string>;
    public /*out*/ readonly nicAccountId!: pulumi.Output<string>;
    public readonly nicId!: pulumi.Output<string>;
    public readonly privateIp!: pulumi.Output<string>;
    public readonly publicIp!: pulumi.Output<string>;
    public readonly publicIpId!: pulumi.Output<string>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    public /*out*/ readonly tags!: pulumi.Output<outputs.PublicIpLinkTag[]>;
    public readonly vmId!: pulumi.Output<string>;

    /**
     * Create a PublicIpLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PublicIpLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PublicIpLinkArgs | PublicIpLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PublicIpLinkState | undefined;
            resourceInputs["allowRelink"] = state ? state.allowRelink : undefined;
            resourceInputs["linkPublicIpId"] = state ? state.linkPublicIpId : undefined;
            resourceInputs["nicAccountId"] = state ? state.nicAccountId : undefined;
            resourceInputs["nicId"] = state ? state.nicId : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["publicIpId"] = state ? state.publicIpId : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vmId"] = state ? state.vmId : undefined;
        } else {
            const args = argsOrState as PublicIpLinkArgs | undefined;
            resourceInputs["allowRelink"] = args ? args.allowRelink : undefined;
            resourceInputs["nicId"] = args ? args.nicId : undefined;
            resourceInputs["privateIp"] = args ? args.privateIp : undefined;
            resourceInputs["publicIp"] = args ? args.publicIp : undefined;
            resourceInputs["publicIpId"] = args ? args.publicIpId : undefined;
            resourceInputs["vmId"] = args ? args.vmId : undefined;
            resourceInputs["linkPublicIpId"] = undefined /*out*/;
            resourceInputs["nicAccountId"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PublicIpLink.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PublicIpLink resources.
 */
export interface PublicIpLinkState {
    allowRelink?: pulumi.Input<boolean>;
    linkPublicIpId?: pulumi.Input<string>;
    nicAccountId?: pulumi.Input<string>;
    nicId?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    publicIpId?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.PublicIpLinkTag>[]>;
    vmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PublicIpLink resource.
 */
export interface PublicIpLinkArgs {
    allowRelink?: pulumi.Input<boolean>;
    nicId?: pulumi.Input<string>;
    privateIp?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    publicIpId?: pulumi.Input<string>;
    vmId?: pulumi.Input<string>;
}
