// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages a Certificate Authority (CA).
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-API-Access-Rules.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-ca).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const ca01 = new outscale.Ca("ca01", {
 *     caPem: fs.readFileSync("<PATH>", "utf8"),
 *     description: "Terraform certificate authority",
 * });
 * ```
 *
 * ## Import
 *
 * A CA can be imported using its ID. For exampleconsole
 *
 * ```sh
 *  $ pulumi import outscale:index/ca:Ca ImportedCa ca-12345678
 * ```
 */
export class Ca extends pulumi.CustomResource {
    /**
     * Get an existing Ca resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CaState, opts?: pulumi.CustomResourceOptions): Ca {
        return new Ca(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/ca:Ca';

    /**
     * Returns true if the given object is an instance of Ca.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Ca {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Ca.__pulumiType;
    }

    /**
     * The fingerprint of the CA.
     */
    public /*out*/ readonly caFingerprint!: pulumi.Output<string>;
    /**
     * The ID of the CA.
     */
    public /*out*/ readonly caId!: pulumi.Output<string>;
    /**
     * The CA in PEM format.
     */
    public readonly caPem!: pulumi.Output<string | undefined>;
    /**
     * The description of the CA.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;

    /**
     * Create a Ca resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CaArgs | CaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CaState | undefined;
            resourceInputs["caFingerprint"] = state ? state.caFingerprint : undefined;
            resourceInputs["caId"] = state ? state.caId : undefined;
            resourceInputs["caPem"] = state ? state.caPem : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
        } else {
            const args = argsOrState as CaArgs | undefined;
            resourceInputs["caPem"] = args ? args.caPem : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["caFingerprint"] = undefined /*out*/;
            resourceInputs["caId"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Ca.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Ca resources.
 */
export interface CaState {
    /**
     * The fingerprint of the CA.
     */
    caFingerprint?: pulumi.Input<string>;
    /**
     * The ID of the CA.
     */
    caId?: pulumi.Input<string>;
    /**
     * The CA in PEM format.
     */
    caPem?: pulumi.Input<string>;
    /**
     * The description of the CA.
     */
    description?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Ca resource.
 */
export interface CaArgs {
    /**
     * The CA in PEM format.
     */
    caPem?: pulumi.Input<string>;
    /**
     * The description of the CA.
     */
    description?: pulumi.Input<string>;
}
