// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LoadBalancerPolicy extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerPolicyState, opts?: pulumi.CustomResourceOptions): LoadBalancerPolicy {
        return new LoadBalancerPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/loadBalancerPolicy:LoadBalancerPolicy';

    /**
     * Returns true if the given object is an instance of LoadBalancerPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancerPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancerPolicy.__pulumiType;
    }

    public /*out*/ readonly accessLog!: pulumi.Output<outputs.LoadBalancerPolicyAccessLog>;
    public /*out*/ readonly applicationStickyCookiePolicies!: pulumi.Output<outputs.LoadBalancerPolicyApplicationStickyCookiePolicy[]>;
    public readonly backendVmIds!: pulumi.Output<string[]>;
    public readonly cookieExpirationPeriod!: pulumi.Output<number>;
    public readonly cookieName!: pulumi.Output<string>;
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    public /*out*/ readonly healthCheck!: pulumi.Output<outputs.LoadBalancerPolicyHealthCheck>;
    public /*out*/ readonly listeners!: pulumi.Output<outputs.LoadBalancerPolicyListener[]>;
    public readonly loadBalancerName!: pulumi.Output<string>;
    public /*out*/ readonly loadBalancerStickyCookiePolicies!: pulumi.Output<outputs.LoadBalancerPolicyLoadBalancerStickyCookiePolicy[]>;
    public readonly loadBalancerType!: pulumi.Output<string>;
    public /*out*/ readonly netId!: pulumi.Output<string>;
    public readonly policyName!: pulumi.Output<string>;
    public readonly policyType!: pulumi.Output<string>;
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    public /*out*/ readonly securedCookies!: pulumi.Output<boolean>;
    public readonly securityGroups!: pulumi.Output<string[]>;
    public /*out*/ readonly sourceSecurityGroup!: pulumi.Output<outputs.LoadBalancerPolicySourceSecurityGroup>;
    public readonly subnets!: pulumi.Output<string[]>;
    public readonly subregionNames!: pulumi.Output<string[]>;
    public readonly tags!: pulumi.Output<outputs.LoadBalancerPolicyTag[]>;

    /**
     * Create a LoadBalancerPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerPolicyArgs | LoadBalancerPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerPolicyState | undefined;
            resourceInputs["accessLog"] = state ? state.accessLog : undefined;
            resourceInputs["applicationStickyCookiePolicies"] = state ? state.applicationStickyCookiePolicies : undefined;
            resourceInputs["backendVmIds"] = state ? state.backendVmIds : undefined;
            resourceInputs["cookieExpirationPeriod"] = state ? state.cookieExpirationPeriod : undefined;
            resourceInputs["cookieName"] = state ? state.cookieName : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["listeners"] = state ? state.listeners : undefined;
            resourceInputs["loadBalancerName"] = state ? state.loadBalancerName : undefined;
            resourceInputs["loadBalancerStickyCookiePolicies"] = state ? state.loadBalancerStickyCookiePolicies : undefined;
            resourceInputs["loadBalancerType"] = state ? state.loadBalancerType : undefined;
            resourceInputs["netId"] = state ? state.netId : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["securedCookies"] = state ? state.securedCookies : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["sourceSecurityGroup"] = state ? state.sourceSecurityGroup : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["subregionNames"] = state ? state.subregionNames : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LoadBalancerPolicyArgs | undefined;
            if ((!args || args.loadBalancerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerName'");
            }
            if ((!args || args.policyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyName'");
            }
            if ((!args || args.policyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyType'");
            }
            resourceInputs["backendVmIds"] = args ? args.backendVmIds : undefined;
            resourceInputs["cookieExpirationPeriod"] = args ? args.cookieExpirationPeriod : undefined;
            resourceInputs["cookieName"] = args ? args.cookieName : undefined;
            resourceInputs["loadBalancerName"] = args ? args.loadBalancerName : undefined;
            resourceInputs["loadBalancerType"] = args ? args.loadBalancerType : undefined;
            resourceInputs["policyName"] = args ? args.policyName : undefined;
            resourceInputs["policyType"] = args ? args.policyType : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["subregionNames"] = args ? args.subregionNames : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["accessLog"] = undefined /*out*/;
            resourceInputs["applicationStickyCookiePolicies"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["healthCheck"] = undefined /*out*/;
            resourceInputs["listeners"] = undefined /*out*/;
            resourceInputs["loadBalancerStickyCookiePolicies"] = undefined /*out*/;
            resourceInputs["netId"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["securedCookies"] = undefined /*out*/;
            resourceInputs["sourceSecurityGroup"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancerPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancerPolicy resources.
 */
export interface LoadBalancerPolicyState {
    accessLog?: pulumi.Input<inputs.LoadBalancerPolicyAccessLog>;
    applicationStickyCookiePolicies?: pulumi.Input<pulumi.Input<inputs.LoadBalancerPolicyApplicationStickyCookiePolicy>[]>;
    backendVmIds?: pulumi.Input<pulumi.Input<string>[]>;
    cookieExpirationPeriod?: pulumi.Input<number>;
    cookieName?: pulumi.Input<string>;
    dnsName?: pulumi.Input<string>;
    healthCheck?: pulumi.Input<inputs.LoadBalancerPolicyHealthCheck>;
    listeners?: pulumi.Input<pulumi.Input<inputs.LoadBalancerPolicyListener>[]>;
    loadBalancerName?: pulumi.Input<string>;
    loadBalancerStickyCookiePolicies?: pulumi.Input<pulumi.Input<inputs.LoadBalancerPolicyLoadBalancerStickyCookiePolicy>[]>;
    loadBalancerType?: pulumi.Input<string>;
    netId?: pulumi.Input<string>;
    policyName?: pulumi.Input<string>;
    policyType?: pulumi.Input<string>;
    publicIp?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    securedCookies?: pulumi.Input<boolean>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    sourceSecurityGroup?: pulumi.Input<inputs.LoadBalancerPolicySourceSecurityGroup>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    subregionNames?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.LoadBalancerPolicyTag>[]>;
}

/**
 * The set of arguments for constructing a LoadBalancerPolicy resource.
 */
export interface LoadBalancerPolicyArgs {
    backendVmIds?: pulumi.Input<pulumi.Input<string>[]>;
    cookieExpirationPeriod?: pulumi.Input<number>;
    cookieName?: pulumi.Input<string>;
    loadBalancerName: pulumi.Input<string>;
    loadBalancerType?: pulumi.Input<string>;
    policyName: pulumi.Input<string>;
    policyType: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    subregionNames?: pulumi.Input<pulumi.Input<string>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.LoadBalancerPolicyTag>[]>;
}
