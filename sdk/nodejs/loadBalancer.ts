// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a load balancer.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-loadbalancer).
 *
 * ## Example Usage
 * ### Create a load balancer in the public Cloud
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@pulumi/outscale";
 *
 * const loadBalancer01 = new outscale.LoadBalancer("loadBalancer01", {
 *     listeners: [{
 *         backendPort: 8080,
 *         backendProtocol: "HTTP",
 *         loadBalancerPort: 8080,
 *         loadBalancerProtocol: "HTTP",
 *     }],
 *     loadBalancerName: "terraform-public-load-balancer",
 *     subregionNames: [`${_var.region}a`],
 *     tags: [{
 *         key: "name",
 *         value: "terraform-public-load-balancer",
 *     }],
 * });
 * ```
 * ### Create a load balancer in a Net
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@pulumi/outscale";
 *
 * const net01 = new outscale.Net("net01", {ipRange: "10.0.0.0/16"});
 * const subnet01 = new outscale.Subnet("subnet01", {
 *     netId: net01.netId,
 *     ipRange: "10.0.0.0/24",
 *     tags: [{
 *         key: "Name",
 *         value: "terraform-subnet-for-internal-load-balancer",
 *     }],
 * });
 * const securityGroup01 = new outscale.SecurityGroup("securityGroup01", {
 *     description: "Terraform security group for internal load balancer",
 *     securityGroupName: "terraform-security-group-for-internal-load-balancer",
 *     netId: net01.netId,
 *     tags: [{
 *         key: "Name",
 *         value: "terraform-security-group-for-internal-load-balancer",
 *     }],
 * });
 * const loadBalancer02 = new outscale.LoadBalancer("loadBalancer02", {
 *     loadBalancerName: "terraform-private-load-balancer",
 *     listeners: [{
 *         backendPort: 80,
 *         backendProtocol: "TCP",
 *         loadBalancerProtocol: "TCP",
 *         loadBalancerPort: 80,
 *     }],
 *     subnets: [subnet01.subnetId],
 *     securityGroups: [securityGroup01.securityGroupId],
 *     loadBalancerType: "internal",
 *     tags: [{
 *         key: "name",
 *         value: "terraform-private-load-balancer",
 *     }],
 * });
 * ```
 * ### Create an internet-facing load balancer in a Net
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@pulumi/outscale";
 *
 * const net02 = new outscale.Net("net02", {ipRange: "10.0.0.0/16"});
 * const subnet02 = new outscale.Subnet("subnet02", {
 *     netId: net02.netId,
 *     ipRange: "10.0.0.0/24",
 *     tags: [{
 *         key: "Name",
 *         value: "terraform-security-group-for-load-balancer",
 *     }],
 * });
 * const internetService01 = new outscale.InternetService("internetService01", {}, {
 *     dependsOn: [net02],
 * });
 * const internetServiceLink01 = new outscale.InternetServiceLink("internetServiceLink01", {
 *     internetServiceId: internetService01.internetServiceId,
 *     netId: net02.netId,
 * });
 * const routeTable01 = new outscale.RouteTable("routeTable01", {
 *     netId: net02.netId,
 *     tags: [{
 *         key: "name",
 *         value: "terraform-route-table-for-load-balancer",
 *     }],
 * });
 * const route01 = new outscale.Route("route01", {
 *     gatewayId: internetService01.id,
 *     destinationIpRange: "10.0.0.0/0",
 *     routeTableId: routeTable01.routeTableId,
 * });
 * const routeTableLink01 = new outscale.RouteTableLink("routeTableLink01", {
 *     routeTableId: routeTable01.routeTableId,
 *     subnetId: subnet02.subnetId,
 * });
 * const loadBalancer03 = new outscale.LoadBalancer("loadBalancer03", {
 *     loadBalancerName: "terraform-internet-private-lb",
 *     listeners: [
 *         {
 *             backendPort: 80,
 *             backendProtocol: "TCP",
 *             loadBalancerProtocol: "TCP",
 *             loadBalancerPort: 80,
 *         },
 *         {
 *             backendPort: 8080,
 *             backendProtocol: "HTTP",
 *             loadBalancerProtocol: "HTTP",
 *             loadBalancerPort: 8080,
 *         },
 *     ],
 *     subnets: [subnet02.subnetId],
 *     loadBalancerType: "internet-facing",
 *     publicIp: "192.0.2.0",
 *     tags: [{
 *         key: "name",
 *         value: "terraform-internet-private-lb",
 *     }],
 * }, {
 *     dependsOn: [
 *         route01,
 *         routeTableLink01,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * A load balancer can be imported using its name. For exampleconsole
 *
 * ```sh
 *  $ pulumi import outscale:index/loadBalancer:LoadBalancer ImportedLbu Name-of-the-Lbu
 * ```
 */
export class LoadBalancer extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerState, opts?: pulumi.CustomResourceOptions): LoadBalancer {
        return new LoadBalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/loadBalancer:LoadBalancer';

    /**
     * Returns true if the given object is an instance of LoadBalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancer.__pulumiType;
    }

    /**
     * Information about access logs.
     */
    public readonly accessLogs!: pulumi.Output<outputs.LoadBalancerAccessLog[]>;
    /**
     * The stickiness policies defined for the load balancer.
     */
    public /*out*/ readonly applicationStickyCookiePolicies!: pulumi.Output<outputs.LoadBalancerApplicationStickyCookiePolicy[]>;
    /**
     * One or more IDs of back-end VMs for the load balancer.
     */
    public readonly backendVmIds!: pulumi.Output<string[]>;
    /**
     * The DNS name of the load balancer.
     */
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    /**
     * Information about the health check configuration.
     */
    public /*out*/ readonly healthChecks!: pulumi.Output<outputs.LoadBalancerHealthCheck[]>;
    /**
     * One or more listeners to create.
     */
    public readonly listeners!: pulumi.Output<outputs.LoadBalancerListener[]>;
    /**
     * The unique name of the load balancer (32 alphanumeric or hyphen characters maximum, but cannot start or end with a hyphen).
     */
    public readonly loadBalancerName!: pulumi.Output<string>;
    /**
     * The policies defined for the load balancer.
     */
    public /*out*/ readonly loadBalancerStickyCookiePolicies!: pulumi.Output<outputs.LoadBalancerLoadBalancerStickyCookiePolicy[]>;
    /**
     * The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
     */
    public readonly loadBalancerType!: pulumi.Output<string>;
    /**
     * The ID of the Net for the load balancer.
     */
    public /*out*/ readonly netId!: pulumi.Output<string>;
    /**
     * (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
     */
    public readonly publicIp!: pulumi.Output<string>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    /**
     * Whether secure cookies are enabled for the load balancer.
     */
    public readonly securedCookies!: pulumi.Output<boolean>;
    /**
     * (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
     */
    public readonly securityGroups!: pulumi.Output<string[]>;
    /**
     * Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
     * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
     */
    public /*out*/ readonly sourceSecurityGroups!: pulumi.Output<outputs.LoadBalancerSourceSecurityGroup[]>;
    /**
     * (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
     */
    public readonly subnets!: pulumi.Output<string[]>;
    /**
     * (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
     */
    public readonly subregionNames!: pulumi.Output<string[]>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    public readonly tags!: pulumi.Output<outputs.LoadBalancerTag[] | undefined>;

    /**
     * Create a LoadBalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerArgs | LoadBalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerState | undefined;
            resourceInputs["accessLogs"] = state ? state.accessLogs : undefined;
            resourceInputs["applicationStickyCookiePolicies"] = state ? state.applicationStickyCookiePolicies : undefined;
            resourceInputs["backendVmIds"] = state ? state.backendVmIds : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["healthChecks"] = state ? state.healthChecks : undefined;
            resourceInputs["listeners"] = state ? state.listeners : undefined;
            resourceInputs["loadBalancerName"] = state ? state.loadBalancerName : undefined;
            resourceInputs["loadBalancerStickyCookiePolicies"] = state ? state.loadBalancerStickyCookiePolicies : undefined;
            resourceInputs["loadBalancerType"] = state ? state.loadBalancerType : undefined;
            resourceInputs["netId"] = state ? state.netId : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["securedCookies"] = state ? state.securedCookies : undefined;
            resourceInputs["securityGroups"] = state ? state.securityGroups : undefined;
            resourceInputs["sourceSecurityGroups"] = state ? state.sourceSecurityGroups : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["subregionNames"] = state ? state.subregionNames : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LoadBalancerArgs | undefined;
            if ((!args || args.listeners === undefined) && !opts.urn) {
                throw new Error("Missing required property 'listeners'");
            }
            if ((!args || args.loadBalancerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerName'");
            }
            resourceInputs["accessLogs"] = args ? args.accessLogs : undefined;
            resourceInputs["backendVmIds"] = args ? args.backendVmIds : undefined;
            resourceInputs["listeners"] = args ? args.listeners : undefined;
            resourceInputs["loadBalancerName"] = args ? args.loadBalancerName : undefined;
            resourceInputs["loadBalancerType"] = args ? args.loadBalancerType : undefined;
            resourceInputs["publicIp"] = args ? args.publicIp : undefined;
            resourceInputs["securedCookies"] = args ? args.securedCookies : undefined;
            resourceInputs["securityGroups"] = args ? args.securityGroups : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["subregionNames"] = args ? args.subregionNames : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["applicationStickyCookiePolicies"] = undefined /*out*/;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["healthChecks"] = undefined /*out*/;
            resourceInputs["loadBalancerStickyCookiePolicies"] = undefined /*out*/;
            resourceInputs["netId"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["sourceSecurityGroups"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancer resources.
 */
export interface LoadBalancerState {
    /**
     * Information about access logs.
     */
    accessLogs?: pulumi.Input<pulumi.Input<inputs.LoadBalancerAccessLog>[]>;
    /**
     * The stickiness policies defined for the load balancer.
     */
    applicationStickyCookiePolicies?: pulumi.Input<pulumi.Input<inputs.LoadBalancerApplicationStickyCookiePolicy>[]>;
    /**
     * One or more IDs of back-end VMs for the load balancer.
     */
    backendVmIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The DNS name of the load balancer.
     */
    dnsName?: pulumi.Input<string>;
    /**
     * Information about the health check configuration.
     */
    healthChecks?: pulumi.Input<pulumi.Input<inputs.LoadBalancerHealthCheck>[]>;
    /**
     * One or more listeners to create.
     */
    listeners?: pulumi.Input<pulumi.Input<inputs.LoadBalancerListener>[]>;
    /**
     * The unique name of the load balancer (32 alphanumeric or hyphen characters maximum, but cannot start or end with a hyphen).
     */
    loadBalancerName?: pulumi.Input<string>;
    /**
     * The policies defined for the load balancer.
     */
    loadBalancerStickyCookiePolicies?: pulumi.Input<pulumi.Input<inputs.LoadBalancerLoadBalancerStickyCookiePolicy>[]>;
    /**
     * The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
     */
    loadBalancerType?: pulumi.Input<string>;
    /**
     * The ID of the Net for the load balancer.
     */
    netId?: pulumi.Input<string>;
    /**
     * (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
     */
    publicIp?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    /**
     * Whether secure cookies are enabled for the load balancer.
     */
    securedCookies?: pulumi.Input<boolean>;
    /**
     * (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
     * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
     */
    sourceSecurityGroups?: pulumi.Input<pulumi.Input<inputs.LoadBalancerSourceSecurityGroup>[]>;
    /**
     * (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
     */
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
     */
    subregionNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LoadBalancerTag>[]>;
}

/**
 * The set of arguments for constructing a LoadBalancer resource.
 */
export interface LoadBalancerArgs {
    /**
     * Information about access logs.
     */
    accessLogs?: pulumi.Input<pulumi.Input<inputs.LoadBalancerAccessLog>[]>;
    /**
     * One or more IDs of back-end VMs for the load balancer.
     */
    backendVmIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more listeners to create.
     */
    listeners: pulumi.Input<pulumi.Input<inputs.LoadBalancerListener>[]>;
    /**
     * The unique name of the load balancer (32 alphanumeric or hyphen characters maximum, but cannot start or end with a hyphen).
     */
    loadBalancerName: pulumi.Input<string>;
    /**
     * The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
     */
    loadBalancerType?: pulumi.Input<string>;
    /**
     * (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
     */
    publicIp?: pulumi.Input<string>;
    /**
     * Whether secure cookies are enabled for the load balancer.
     */
    securedCookies?: pulumi.Input<boolean>;
    /**
     * (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
     */
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
     */
    subregionNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.LoadBalancerTag>[]>;
}
