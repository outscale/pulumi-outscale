// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides information about a virtual machine (VM).
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Instances.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vm).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@pulumi/outscale";
 *
 * const vm01 = outscale.getVm({
 *     filters: [{
 *         name: "vm_ids",
 *         values: ["i-12345678"],
 *     }],
 * });
 * ```
 */
export function getVm(args?: GetVmArgs, opts?: pulumi.InvokeOptions): Promise<GetVmResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("outscale:index/getVm:getVm", {
        "filters": args.filters,
    }, opts);
}

/**
 * A collection of arguments for invoking getVm.
 */
export interface GetVmArgs {
    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     */
    filters?: inputs.GetVmFilter[];
}

/**
 * A collection of values returned by getVm.
 */
export interface GetVmResult {
    /**
     * The architecture of the VM (`i386` \| `x8664`).
     */
    readonly architecture: string;
    /**
     * The block device mapping of the VM.
     */
    readonly blockDeviceMappingsCreateds: outputs.GetVmBlockDeviceMappingsCreated[];
    readonly bsuOptimized: boolean;
    /**
     * The idempotency token provided when launching the VM.
     */
    readonly clientToken: string;
    /**
     * The date and time of creation of the VM.
     */
    readonly creationDate: string;
    /**
     * If true, you cannot delete the VM unless you change this parameter back to false.
     */
    readonly deletionProtection: boolean;
    readonly filters?: outputs.GetVmFilter[];
    /**
     * The hypervisor type of the VMs (`ovm` \| `xen`).
     */
    readonly hypervisor: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of the OMI used to create the VM.
     */
    readonly imageId: string;
    /**
     * (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
     */
    readonly isSourceDestChecked: boolean;
    /**
     * The name of the keypair used when launching the VM.
     */
    readonly keypairName: string;
    /**
     * The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
     */
    readonly launchNumber: number;
    /**
     * If true, nested virtualization is enabled. If false, it is disabled.
     */
    readonly nestedVirtualization: boolean;
    /**
     * The ID of the Net for the NIC.
     */
    readonly netId: string;
    /**
     * (Net only) The network interface cards (NICs) the VMs are attached to.
     */
    readonly nics: outputs.GetVmNic[];
    /**
     * Indicates the operating system (OS) of the VM.
     */
    readonly osFamily: string;
    /**
     * The performance of the VM (`medium` \| `high` \|  `highest`).
     */
    readonly performance: string;
    readonly placementSubregionName: string;
    readonly placementTenancy: string;
    readonly primaryNics: outputs.GetVmPrimaryNic[];
    /**
     * The name of the private DNS.
     */
    readonly privateDnsName: string;
    /**
     * The primary private IP of the VM.
     */
    readonly privateIp: string;
    /**
     * The private IP or IPs of the NIC.
     */
    readonly privateIps: string[];
    /**
     * The product codes associated with the OMI used to create the VM.
     */
    readonly productCodes: string[];
    /**
     * The name of the public DNS.
     */
    readonly publicDnsName: string;
    /**
     * The public IP of the VM.
     */
    readonly publicIp: string;
    readonly requestId: string;
    /**
     * The reservation ID of the VM.
     */
    readonly reservationId: string;
    /**
     * The name of the root device for the VM (for example, `/dev/vda1`).
     */
    readonly rootDeviceName: string;
    /**
     * The type of root device used by the VM (always `bsu`).
     */
    readonly rootDeviceType: string;
    readonly securityGroupIds: string[];
    readonly securityGroupNames: string[];
    /**
     * One or more security groups associated with the VM.
     */
    readonly securityGroups: outputs.GetVmSecurityGroup[];
    /**
     * The state of the VM (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
     */
    readonly state: string;
    /**
     * The reason explaining the current state of the VM.
     */
    readonly stateReason: string;
    /**
     * The ID of the Subnet for the VM.
     */
    readonly subnetId: string;
    /**
     * One or more tags associated with the VM.
     */
    readonly tags: outputs.GetVmTag[];
    /**
     * The Base64-encoded MIME user data.
     */
    readonly userData: string;
    /**
     * The ID of the VM.
     */
    readonly vmId: string;
    /**
     * The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.
     */
    readonly vmInitiatedShutdownBehavior: string;
    /**
     * The type of VM. For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
     */
    readonly vmType: string;
}
/**
 * Provides information about a virtual machine (VM).
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Instances.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vm).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@pulumi/outscale";
 *
 * const vm01 = outscale.getVm({
 *     filters: [{
 *         name: "vm_ids",
 *         values: ["i-12345678"],
 *     }],
 * });
 * ```
 */
export function getVmOutput(args?: GetVmOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVmResult> {
    return pulumi.output(args).apply((a: any) => getVm(a, opts))
}

/**
 * A collection of arguments for invoking getVm.
 */
export interface GetVmOutputArgs {
    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetVmFilterArgs>[]>;
}
