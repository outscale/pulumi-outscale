// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ClientGatewayTag {
    key: string;
    value: string;
}

export interface DhcpOptionTag {
    key: string;
    value: string;
}

export interface GetAccessKeyFilter {
    name: string;
    values: string[];
}

export interface GetAccessKeysAccessKey {
    accessKeyId: string;
    creationDate: string;
    expirationDate: string;
    lastModificationDate: string;
    state: string;
}

export interface GetAccessKeysFilter {
    name: string;
    values: string[];
}

export interface GetAccountsAccount {
    accountId: string;
    additionalEmails: string[];
    city: string;
    companyName: string;
    country: string;
    customerId: string;
    email: string;
    firstName: string;
    jobTitle: string;
    lastName: string;
    mobileNumber: string;
    phoneNumber: string;
    stateProvince: string;
    vatNumber: string;
    zipCode: string;
}

export interface GetApiAccessRuleFilter {
    name: string;
    values: string[];
}

export interface GetApiAccessRulesApiAccessRule {
    apiAccessRuleId: string;
    caIds: string[];
    cns: string[];
    description: string;
    ipRanges: string[];
}

export interface GetApiAccessRulesFilter {
    name: string;
    values: string[];
}

export interface GetCaFilter {
    name: string;
    values: string[];
}

export interface GetCasCa {
    caFingerprint: string;
    caId: string;
    description: string;
}

export interface GetCasFilter {
    name: string;
    values: string[];
}

export interface GetClientGatewayFilter {
    name: string;
    values: string[];
}

export interface GetClientGatewayTag {
    key: string;
    value: string;
}

export interface GetClientGatewaysClientGateway {
    bgpAsn: number;
    clientGatewayId?: string;
    connectionType: string;
    publicIp: string;
    state: string;
    tags: outputs.GetClientGatewaysClientGatewayTag[];
}

export interface GetClientGatewaysClientGatewayTag {
    key: string;
    value: string;
}

export interface GetClientGatewaysFilter {
    name: string;
    values: string[];
}

export interface GetDhcpOptionFilter {
    name: string;
    values: string[];
}

export interface GetDhcpOptionTag {
    key: string;
    value: string;
}

export interface GetDhcpOptionsDhcpOption {
    default: boolean;
    dhcpOptionsSetId: string;
    domainName: string;
    domainNameServers: string[];
    logServers: string[];
    ntpServers: string[];
    tags: outputs.GetDhcpOptionsDhcpOptionTag[];
}

export interface GetDhcpOptionsDhcpOptionTag {
    key: string;
    value: string;
}

export interface GetDhcpOptionsFilter {
    name: string;
    values: string[];
}

export interface GetFlexibleGpuCatalogFilter {
    name: string;
    values: string[];
}

export interface GetFlexibleGpuCatalogFlexibleGpuCatalog {
    generations: string[];
    maxCpu: number;
    maxRam: number;
    modelName: string;
    vRam: number;
}

export interface GetFlexibleGpuFilter {
    name: string;
    values: string[];
}

export interface GetFlexibleGpusFilter {
    name: string;
    values: string[];
}

export interface GetFlexibleGpusFlexibleGpus {
    deleteOnVmDeletion: boolean;
    flexibleGpuId: string;
    generation: string;
    modelName: string;
    state: string;
    subregionName: string;
    vmId: string;
}

export interface GetImageBlockDeviceMapping {
    bsus: outputs.GetImageBlockDeviceMappingBsus[];
    deviceName: string;
    virtualDeviceName: string;
}

export interface GetImageBlockDeviceMappingBsus {
    deleteOnVmDeletion: boolean;
    iops: number;
    snapshotId: string;
    volumeSize: number;
    volumeType: string;
}

export interface GetImageExportTaskFilter {
    name: string;
    values: string[];
}

export interface GetImageExportTaskOsuExport {
    diskImageFormat: string;
    osuBucket: string;
    osuManifestUrl: string;
    osuPrefix: string;
}

export interface GetImageExportTaskTag {
    key: string;
    value: string;
}

export interface GetImageExportTasksFilter {
    name: string;
    values: string[];
}

export interface GetImageExportTasksImageExportTask {
    comment: string;
    imageId: string;
    osuExports: outputs.GetImageExportTasksImageExportTaskOsuExport[];
    progress: number;
    state: string;
    tags: outputs.GetImageExportTasksImageExportTaskTag[];
    taskId: string;
}

export interface GetImageExportTasksImageExportTaskOsuExport {
    diskImageFormat: string;
    osuBucket: string;
    osuManifestUrl: string;
    osuPrefix: string;
}

export interface GetImageExportTasksImageExportTaskTag {
    key: string;
    value: string;
}

export interface GetImageFilter {
    name: string;
    values: string[];
}

export interface GetImagePermissionsToLaunch {
    accountId: string;
    globalPermission: boolean;
}

export interface GetImageStateComment {
    stateCode: string;
    stateMessage: string;
}

export interface GetImageTag {
    key: string;
    value: string;
}

export interface GetImagesFilter {
    name: string;
    values: string[];
}

export interface GetImagesImage {
    accountAlias: string;
    accountId: string;
    architecture: string;
    blockDeviceMappings: outputs.GetImagesImageBlockDeviceMapping[];
    creationDate: string;
    description: string;
    fileLocation: string;
    imageId: string;
    imageName: string;
    imageType: string;
    permissionsToLaunches: outputs.GetImagesImagePermissionsToLaunch[];
    productCodes: string[];
    rootDeviceName: string;
    rootDeviceType: string;
    state: string;
    stateComments: outputs.GetImagesImageStateComment[];
    tags: outputs.GetImagesImageTag[];
}

export interface GetImagesImageBlockDeviceMapping {
    bsus: outputs.GetImagesImageBlockDeviceMappingBsus[];
    deviceName: string;
    virtualDeviceName: string;
}

export interface GetImagesImageBlockDeviceMappingBsus {
    deleteOnVmDeletion: boolean;
    iops: number;
    snapshotId: string;
    volumeSize: number;
    volumeType: string;
}

export interface GetImagesImagePermissionsToLaunch {
    accountId: string;
    globalPermission: boolean;
}

export interface GetImagesImageStateComment {
    stateCode: string;
    stateMessage: string;
}

export interface GetImagesImageTag {
    key: string;
    value: string;
}

export interface GetInternetServiceFilter {
    name: string;
    values: string[];
}

export interface GetInternetServiceTag {
    key: string;
    value: string;
}

export interface GetInternetServicesFilter {
    name: string;
    values: string[];
}

export interface GetInternetServicesInternetService {
    internetServiceId: string;
    netId: string;
    state: string;
    tags: outputs.GetInternetServicesInternetServiceTag[];
}

export interface GetInternetServicesInternetServiceTag {
    key: string;
    value: string;
}

export interface GetKeypairFilter {
    name: string;
    values: string[];
}

export interface GetKeypairsFilter {
    name: string;
    values: string[];
}

export interface GetKeypairsKeypair {
    keypairFingerprint: string;
    keypairName: string;
}

export interface GetLoadBalancerAccessLog {
    isEnabled: boolean;
    osuBucketName: string;
    osuBucketPrefix: string;
    publicationInterval: number;
}

export interface GetLoadBalancerApplicationStickyCookiePolicy {
    cookieName: string;
    policyName: string;
}

export interface GetLoadBalancerFilter {
    name: string;
    values: string[];
}

export interface GetLoadBalancerHealthCheck {
    checkInterval: string;
    checkedVm: string;
    healthyThreshold: string;
    timeout: string;
    unhealthyThreshold: string;
}

export interface GetLoadBalancerListener {
    backendPort: number;
    backendProtocol: string;
    loadBalancerPort: number;
    loadBalancerProtocol: string;
    policyNames: string[];
    serverCertificateId: string;
}

export interface GetLoadBalancerLoadBalancerStickyCookiePolicy {
    policyName: string;
}

export interface GetLoadBalancerSourceSecurityGroup {
    securityGroupAccountId: string;
    securityGroupName: string;
}

export interface GetLoadBalancerTag {
    key: string;
    value: string;
}

export interface GetLoadBalancerTagsFilter {
    name: string;
    values: string[];
}

export interface GetLoadBalancerTagsTag {
    key: string;
    loadBalancerName: string;
    value: string;
}

export interface GetLoadBalancerVmHealthBackendVmHealth {
    description: string;
    state: string;
    stateReason: string;
    vmId: string;
}

export interface GetLoadBalancerVmHealthFilter {
    name: string;
    values: string[];
}

export interface GetLoadBalancersFilter {
    name: string;
    values: string[];
}

export interface GetLoadBalancersLoadBalancer {
    accessLog: outputs.GetLoadBalancersLoadBalancerAccessLog;
    applicationStickyCookiePolicies: outputs.GetLoadBalancersLoadBalancerApplicationStickyCookiePolicy[];
    backendVmIds: outputs.GetLoadBalancersLoadBalancerBackendVmId[];
    dnsName: string;
    healthCheck: outputs.GetLoadBalancersLoadBalancerHealthCheck;
    listeners: outputs.GetLoadBalancersLoadBalancerListener[];
    loadBalancerName: string;
    loadBalancerStickyCookiePolicies: outputs.GetLoadBalancersLoadBalancerLoadBalancerStickyCookiePolicy[];
    loadBalancerType: string;
    netId: string;
    publicIp: string;
    securedCookies: boolean;
    securityGroups: string[];
    sourceSecurityGroup: outputs.GetLoadBalancersLoadBalancerSourceSecurityGroup;
    subnetIds: string[];
    subregionNames: string[];
    tags: outputs.GetLoadBalancersLoadBalancerTag[];
}

export interface GetLoadBalancersLoadBalancerAccessLog {
    isEnabled: boolean;
    osuBucketName: string;
    osuBucketPrefix: string;
    publicationInterval: number;
}

export interface GetLoadBalancersLoadBalancerApplicationStickyCookiePolicy {
    cookieName: string;
    policyName: string;
}

export interface GetLoadBalancersLoadBalancerBackendVmId {
    vmId: string;
}

export interface GetLoadBalancersLoadBalancerHealthCheck {
    checkInterval: string;
    checkedVm: string;
    healthyThreshold: string;
    port: number;
    protocol: string;
    timeout: string;
    unhealthyThreshold: string;
}

export interface GetLoadBalancersLoadBalancerListener {
    backendPort: number;
    backendProtocol: string;
    loadBalancerPort: number;
    loadBalancerProtocol: string;
    policyNames: string[];
    serverCertificateId: string;
}

export interface GetLoadBalancersLoadBalancerLoadBalancerStickyCookiePolicy {
    policyName: string;
}

export interface GetLoadBalancersLoadBalancerSourceSecurityGroup {
    securityGroupAccountId: string;
    securityGroupName: string;
}

export interface GetLoadBalancersLoadBalancerTag {
    key: string;
    value: string;
}

export interface GetNatServiceFilter {
    name: string;
    values: string[];
}

export interface GetNatServicePublicIp {
    publicIp: string;
    publicIpId: string;
}

export interface GetNatServiceTag {
    key: string;
    value: string;
}

export interface GetNatServicesFilter {
    name: string;
    values: string[];
}

export interface GetNatServicesNatService {
    natServiceId: string;
    netId: string;
    publicIps: outputs.GetNatServicesNatServicePublicIp[];
    state: string;
    subnetId: string;
    tags: outputs.GetNatServicesNatServiceTag[];
}

export interface GetNatServicesNatServicePublicIp {
    publicIp: string;
    publicIpId: string;
}

export interface GetNatServicesNatServiceTag {
    key: string;
    value: string;
}

export interface GetNetAccessPointFilter {
    name: string;
    values: string[];
}

export interface GetNetAccessPointServicesFilter {
    name: string;
    values: string[];
}

export interface GetNetAccessPointServicesService {
    ipRanges: string[];
    serviceId: string;
    serviceName: string;
}

export interface GetNetAccessPointTag {
    key: string;
    value: string;
}

export interface GetNetAccessPointsFilter {
    name: string;
    values: string[];
}

export interface GetNetAccessPointsNetAccessPoint {
    netAccessPointId: string;
    netId: string;
    routeTableIds: string[];
    serviceName: string;
    state: string;
    tags: outputs.GetNetAccessPointsNetAccessPointTag[];
}

export interface GetNetAccessPointsNetAccessPointTag {
    key: string;
    value: string;
}

export interface GetNetAttributesTag {
    key: string;
    value: string;
}

export interface GetNetFilter {
    name: string;
    values: string[];
}

export interface GetNetPeeringAccepterNet {
    accountId: string;
    ipRange: string;
    netId: string;
}

export interface GetNetPeeringFilter {
    name: string;
    values: string[];
}

export interface GetNetPeeringSourceNet {
    accountId: string;
    ipRange: string;
    netId: string;
}

export interface GetNetPeeringState {
    message: string;
    name: string;
}

export interface GetNetPeeringTag {
    key: string;
    value: string;
}

export interface GetNetPeeringsFilter {
    name: string;
    values: string[];
}

export interface GetNetPeeringsNetPeering {
    accepterNet: outputs.GetNetPeeringsNetPeeringAccepterNet;
    netPeeringId: string;
    sourceNet: outputs.GetNetPeeringsNetPeeringSourceNet;
    state: outputs.GetNetPeeringsNetPeeringState;
    tags: outputs.GetNetPeeringsNetPeeringTag[];
}

export interface GetNetPeeringsNetPeeringAccepterNet {
    accountId: string;
    ipRange: string;
    netId: string;
}

export interface GetNetPeeringsNetPeeringSourceNet {
    accountId: string;
    ipRange: string;
    netId: string;
}

export interface GetNetPeeringsNetPeeringState {
    code: string;
    message: string;
}

export interface GetNetPeeringsNetPeeringTag {
    key: string;
    value: string;
}

export interface GetNetTag {
    key: string;
    value: string;
}

export interface GetNetsFilter {
    name: string;
    values: string[];
}

export interface GetNetsNet {
    dhcpOptionsSetId: string;
    ipRange: string;
    netId: string;
    state: string;
    tags: outputs.GetNetsNetTag[];
    tenancy: string;
}

export interface GetNetsNetTag {
    key: string;
    value: string;
}

export interface GetNicFilter {
    name: string;
    values: string[];
}

export interface GetNicLinkNic {
    deleteOnVmDeletion: string;
    deviceNumber: number;
    linkNicId: string;
    state: string;
    vmAccountId: string;
    vmId: string;
}

export interface GetNicLinkPublicIp {
    linkPublicIpId: string;
    publicDnsName: string;
    publicIpAccountId: string;
    publicIpId: string;
}

export interface GetNicPrivateIp {
    isPrimary: boolean;
    linkPublicIp: outputs.GetNicPrivateIpLinkPublicIp;
    privateDnsName: string;
    privateIp: string;
}

export interface GetNicPrivateIpLinkPublicIp {
    linkPublicIpId: string;
    publicDnsName: string;
    publicIp: string;
    publicIpAccountId: string;
    publicIpId: string;
}

export interface GetNicSecurityGroup {
    securityGroupId: string;
    securityGroupName: string;
}

export interface GetNicTag {
    key: string;
    value: string;
}

export interface GetNicsFilter {
    name: string;
    values: string[];
}

export interface GetNicsNic {
    accountId: string;
    description: string;
    isSourceDestChecked: boolean;
    linkNic: outputs.GetNicsNicLinkNic;
    linkPublicIp: outputs.GetNicsNicLinkPublicIp;
    macAddress: string;
    netId: string;
    nicId: string;
    privateDnsName: string;
    privateIps: outputs.GetNicsNicPrivateIp[];
    securityGroups: outputs.GetNicsNicSecurityGroup[];
    state: string;
    subnetId: string;
    subregionName: string;
    tags: outputs.GetNicsNicTag[];
}

export interface GetNicsNicLinkNic {
    deleteOnVmDeletion: boolean;
    deviceNumber: number;
    nicLinkId: string;
    state: string;
    vmAccountId: string;
    vmId: string;
}

export interface GetNicsNicLinkPublicIp {
    linkPublicIpId: string;
    publicDnsName: string;
    publicIp: string;
    publicIpAccountId: string;
    publicIpId: string;
}

export interface GetNicsNicPrivateIp {
    isPrimary: boolean;
    linkPublicIp: outputs.GetNicsNicPrivateIpLinkPublicIp;
    privateDnsName: string;
    privateIp: string;
}

export interface GetNicsNicPrivateIpLinkPublicIp {
    linkPublicIpId: string;
    publicDnsName: string;
    publicIp: string;
    publicIpAccountId: string;
    publicIpId: string;
}

export interface GetNicsNicSecurityGroup {
    securityGroupId: string;
    securityGroupName: string;
}

export interface GetNicsNicTag {
    key: string;
    value: string;
}

export interface GetProductTypeFilter {
    name: string;
    values: string[];
}

export interface GetProductTypesFilter {
    name: string;
    values: string[];
}

export interface GetProductTypesProductType {
    description: string;
    productTypeId: string;
    vendor: string;
}

export interface GetPublicIpFilter {
    name: string;
    values: string[];
}

export interface GetPublicIpTag {
    key: string;
    value: string;
}

export interface GetPublicIpsFilter {
    name: string;
    values: string[];
}

export interface GetPublicIpsPublicIp {
    linkPublicIpId: string;
    nicAccountId: string;
    nicId: string;
    privateIp: string;
    publicIp: string;
    publicIpId: string;
    tags: outputs.GetPublicIpsPublicIpTag[];
    vmId: string;
}

export interface GetPublicIpsPublicIpTag {
    key: string;
    value: string;
}

export interface GetPulicCatalogCatalog {
    entries: outputs.GetPulicCatalogCatalogEntry[];
}

export interface GetPulicCatalogCatalogEntry {
    category: string;
    flags: string;
    operation: string;
    service: string;
    subregionName: string;
    title: string;
    type: string;
    unitPrice: number;
}

export interface GetQuotaFilter {
    name: string;
    values: string[];
}

export interface GetQuotasFilter {
    name: string;
    values: string[];
}

export interface GetQuotasQuota {
    accountId: string;
    description: string;
    maxValue: number;
    name: string;
    quotaCollection: string;
    quotaType: string;
    shortDescription: string;
    usedValue: number;
}

export interface GetRegionsRegion {
    endpoint: string;
    regionName: string;
}

export interface GetRouteTableFilter {
    name: string;
    values: string[];
}

export interface GetRouteTableLinkRouteTable {
    linkRouteTableId: string;
    main: boolean;
    routeTableId: string;
    routeTableToSubnetLinkId: string;
    subnetId: string;
}

export interface GetRouteTableRoute {
    creationMethod: string;
    destinationIpRange: string;
    destinationServiceId: string;
    gatewayId: string;
    natServiceId: string;
    netAccessPointId: string;
    netPeeringId: string;
    nicId: string;
    state: string;
    vmAccountId: string;
    vmId: string;
}

export interface GetRouteTableRoutePropagatingVirtualGateway {
    virtualGatewayId: string;
}

export interface GetRouteTableTag {
    key: string;
    value: string;
}

export interface GetRouteTablesFilter {
    name: string;
    values: string[];
}

export interface GetRouteTablesRouteTable {
    linkRouteTables: outputs.GetRouteTablesRouteTableLinkRouteTable[];
    netId: string;
    routePropagatingVirtualGateways: outputs.GetRouteTablesRouteTableRoutePropagatingVirtualGateway[];
    routeTableId: string;
    routes: outputs.GetRouteTablesRouteTableRoute[];
    tags: outputs.GetRouteTablesRouteTableTag[];
}

export interface GetRouteTablesRouteTableLinkRouteTable {
    linkRouteTableId: string;
    main: boolean;
    routeTableId: string;
    routeTableToSubnetLinkId: string;
    subnetId: string;
}

export interface GetRouteTablesRouteTableRoute {
    creationMethod: string;
    destinationIpRange: string;
    destinationServiceId: string;
    gatewayId: string;
    natServiceId: string;
    netAccessPointId: string;
    netPeeringId: string;
    nicId: string;
    state: string;
    vmAccountId: string;
    vmId: string;
}

export interface GetRouteTablesRouteTableRoutePropagatingVirtualGateway {
    virtualGatewayId: string;
}

export interface GetRouteTablesRouteTableTag {
    key: string;
    value: string;
}

export interface GetSecurityGroupFilter {
    name: string;
    values: string[];
}

export interface GetSecurityGroupInboundRule {
    fromPortRange: number;
    ipProtocol: string;
    ipRanges: string[];
    prefixListIds: string[];
    securityGroupsMembers: outputs.GetSecurityGroupInboundRuleSecurityGroupsMember[];
    toPortRange: number;
}

export interface GetSecurityGroupInboundRuleSecurityGroupsMember {
    accountId: string;
    securityGroupId: string;
    securityGroupName: string;
}

export interface GetSecurityGroupOutboundRule {
    fromPortRange: number;
    ipProtocol: string;
    ipRanges: string[];
    prefixListIds: string[];
    securityGroupsMembers: outputs.GetSecurityGroupOutboundRuleSecurityGroupsMember[];
    toPortRange: number;
}

export interface GetSecurityGroupOutboundRuleSecurityGroupsMember {
    accountId: string;
    securityGroupId: string;
    securityGroupName: string;
}

export interface GetSecurityGroupTag {
    key: string;
    value: string;
}

export interface GetSecurityGroupsFilter {
    name: string;
    values: string[];
}

export interface GetSecurityGroupsSecurityGroup {
    accountId: string;
    description: string;
    inboundRules: outputs.GetSecurityGroupsSecurityGroupInboundRule[];
    netId: string;
    outboundRules: outputs.GetSecurityGroupsSecurityGroupOutboundRule[];
    securityGroupId: string;
    securityGroupName: string;
    tags: outputs.GetSecurityGroupsSecurityGroupTag[];
}

export interface GetSecurityGroupsSecurityGroupInboundRule {
    fromPortRange: number;
    ipProtocol: string;
    ipRanges: string[];
    prefixListIds: string[];
    securityGroupsMembers: outputs.GetSecurityGroupsSecurityGroupInboundRuleSecurityGroupsMember[];
    toPortRange: number;
}

export interface GetSecurityGroupsSecurityGroupInboundRuleSecurityGroupsMember {
    accountId: string;
    securityGroupId: string;
    securityGroupName: string;
}

export interface GetSecurityGroupsSecurityGroupOutboundRule {
    fromPortRange: number;
    ipProtocol: string;
    ipRanges: string[];
    prefixListIds: string[];
    securityGroupsMembers: outputs.GetSecurityGroupsSecurityGroupOutboundRuleSecurityGroupsMember[];
    toPortRange: number;
}

export interface GetSecurityGroupsSecurityGroupOutboundRuleSecurityGroupsMember {
    accountId: string;
    securityGroupId: string;
    securityGroupName: string;
}

export interface GetSecurityGroupsSecurityGroupTag {
    key: string;
    value: string;
}

export interface GetServerCertificateFilter {
    name: string;
    values: string[];
}

export interface GetServerCertificatesFilter {
    name: string;
    values: string[];
}

export interface GetServerCertificatesServerCertificate {
    expirationDate: string;
    id: string;
    name: string;
    orn: string;
    path: string;
    uploadDate: string;
}

export interface GetSnapshotExportTaskFilter {
    name: string;
    values: string[];
}

export interface GetSnapshotExportTaskOsuExport {
    diskImageFormat: string;
    osuBucket: string;
    osuPrefix: string;
}

export interface GetSnapshotExportTaskTag {
    key: string;
    value: string;
}

export interface GetSnapshotExportTasksFilter {
    name: string;
    values: string[];
}

export interface GetSnapshotExportTasksSnapshotExportTask {
    comment: string;
    osuExports: outputs.GetSnapshotExportTasksSnapshotExportTaskOsuExport[];
    progress: number;
    snapshotId: string;
    state: string;
    tags: outputs.GetSnapshotExportTasksSnapshotExportTaskTag[];
    taskId: string;
}

export interface GetSnapshotExportTasksSnapshotExportTaskOsuExport {
    diskImageFormat: string;
    osuBucket: string;
    osuPrefix: string;
}

export interface GetSnapshotExportTasksSnapshotExportTaskTag {
    key: string;
    value: string;
}

export interface GetSnapshotFilter {
    name: string;
    values: string[];
}

export interface GetSnapshotPermissionsToCreateVolume {
    accountIds: string[];
    globalPermission: boolean;
}

export interface GetSnapshotTag {
    key: string;
    value: string;
}

export interface GetSnapshotsFilter {
    name: string;
    values: string[];
}

export interface GetSnapshotsSnapshot {
    accountAlias: string;
    accountId: string;
    creationDate: string;
    description: string;
    permissionsToCreateVolumes: outputs.GetSnapshotsSnapshotPermissionsToCreateVolume[];
    progress: number;
    snapshotId: string;
    state: string;
    tags: outputs.GetSnapshotsSnapshotTag[];
    volumeId: string;
    volumeSize: number;
}

export interface GetSnapshotsSnapshotPermissionsToCreateVolume {
    accountIds: string[];
    globalPermission: boolean;
}

export interface GetSnapshotsSnapshotTag {
    key: string;
    value: string;
}

export interface GetSubnetFilter {
    name: string;
    values: string[];
}

export interface GetSubnetTag {
    key: string;
    value: string;
}

export interface GetSubnetsFilter {
    name: string;
    values: string[];
}

export interface GetSubnetsSubnet {
    availableIpsCount: number;
    ipRange: string;
    mapPublicIpOnLaunch: boolean;
    netId: string;
    state: string;
    subnetId: string;
    subregionName: string;
    tags: outputs.GetSubnetsSubnetTag[];
}

export interface GetSubnetsSubnetTag {
    key: string;
    value: string;
}

export interface GetSubregionsFilter {
    name: string;
    values: string[];
}

export interface GetSubregionsSubregion {
    locationCode: string;
    regionName: string;
    state: string;
    subregionName: string;
}

export interface GetTagFilter {
    name: string;
    values: string[];
}

export interface GetVirtualGatewayFilter {
    name: string;
    values: string[];
}

export interface GetVirtualGatewayNetToVirtualGatewayLink {
    netId: string;
    state: string;
}

export interface GetVirtualGatewayTag {
    key: string;
    value: string;
}

export interface GetVirtualGatewaysFilter {
    name: string;
    values: string[];
}

export interface GetVirtualGatewaysVirtualGateway {
    connectionType: string;
    netToVirtualGatewayLinks: outputs.GetVirtualGatewaysVirtualGatewayNetToVirtualGatewayLink[];
    state: string;
    tags: outputs.GetVirtualGatewaysVirtualGatewayTag[];
    virtualGatewayId: string;
}

export interface GetVirtualGatewaysVirtualGatewayNetToVirtualGatewayLink {
    netId: string;
    state: string;
}

export interface GetVirtualGatewaysVirtualGatewayTag {
    key: string;
    value: string;
}

export interface GetVmBlockDeviceMappingsCreated {
    bsu: outputs.GetVmBlockDeviceMappingsCreatedBsu;
    deviceName?: string;
}

export interface GetVmBlockDeviceMappingsCreatedBsu {
    deleteOnVmDeletion: boolean;
    linkDate: string;
    state: number;
    volumeId: number;
}

export interface GetVmFilter {
    name: string;
    values: string[];
}

export interface GetVmNic {
    accountId: string;
    deleteOnVmDeletion: boolean;
    description: string;
    deviceNumber: number;
    isSourceDestChecked: boolean;
    linkNic: outputs.GetVmNicLinkNic;
    linkPublicIps: outputs.GetVmNicLinkPublicIp[];
    macAddress: string;
    netId: string;
    nicId: string;
    privateDnsName: string;
    privateIps: outputs.GetVmNicPrivateIp[];
    secondaryPrivateIpCount: number;
    securityGroupIds: string[];
    securityGroups: outputs.GetVmNicSecurityGroup[];
    securityGroupsNames: string[];
    state: string;
    subnetId: string;
}

export interface GetVmNicLinkNic {
    deleteOnVmDeletion: boolean;
    deviceNumber: string;
    linkNicId: string;
    state: string;
}

export interface GetVmNicLinkPublicIp {
    publicDnsName: string;
    publicIp: string;
    publicIpAccountId: string;
}

export interface GetVmNicPrivateIp {
    isPrimary: boolean;
    linkPublicIps: outputs.GetVmNicPrivateIpLinkPublicIp[];
    privateDnsName: string;
    privateIp: string;
}

export interface GetVmNicPrivateIpLinkPublicIp {
    publicDnsName: string;
    publicIp: string;
    publicIpAccountId: string;
}

export interface GetVmNicSecurityGroup {
    securityGroupId: string;
    securityGroupName: string;
}

export interface GetVmSecurityGroup {
    securityGroupId: string;
    securityGroupName: string;
}

export interface GetVmStateFilter {
    name: string;
    values: string[];
}

export interface GetVmStateMaintenanceEvent {
    code: string;
    description: string;
    notAfter: string;
    notBefore: string;
}

export interface GetVmStatesFilter {
    name: string;
    values: string[];
}

export interface GetVmStatesVmState {
    allVms?: boolean;
    maintenanceEvents: outputs.GetVmStatesVmStateMaintenanceEvent[];
    subregionName: string;
    vmId?: string;
    vmState: string;
}

export interface GetVmStatesVmStateMaintenanceEvent {
    code: string;
    description: string;
    notAfter: string;
    notBefore: string;
}

export interface GetVmTag {
    key: string;
    value: string;
}

export interface GetVmTypesFilter {
    name: string;
    values: string[];
}

export interface GetVmTypesVmType {
    bsuOptimized: boolean;
    maxPrivateIps: number;
    memorySize: number;
    vcoreCount: number;
    vmTypeName: string;
    volumeCount: number;
    volumeSize: number;
}

export interface GetVmsFilter {
    name: string;
    values: string[];
}

export interface GetVmsVm {
    architecture: string;
    blockDeviceMappingsCreateds: outputs.GetVmsVmBlockDeviceMappingsCreated[];
    bsuOptimized: boolean;
    clientToken: string;
    creationDate: string;
    deletionProtection: boolean;
    hypervisor: string;
    imageId: string;
    isSourceDestChecked: boolean;
    keypairName: string;
    launchNumber: number;
    nestedVirtualization: boolean;
    netId: string;
    nics: outputs.GetVmsVmNic[];
    osFamily: string;
    performance: string;
    placementSubregionName: string;
    placementTenancy: string;
    privateDnsName: string;
    privateIp: string;
    privateIps?: string[];
    productCodes: string[];
    publicDnsName: string;
    publicIp: string;
    requestId: string;
    reservationId: string;
    rootDeviceName: string;
    rootDeviceType: string;
    securityGroupIds?: string[];
    securityGroupNames?: string[];
    securityGroups: outputs.GetVmsVmSecurityGroup[];
    state: string;
    stateReason: string;
    subnetId: string;
    tags: outputs.GetVmsVmTag[];
    userData: string;
    vmId: string;
    vmInitiatedShutdownBehavior: string;
    vmType: string;
}

export interface GetVmsVmBlockDeviceMappingsCreated {
    bsu: outputs.GetVmsVmBlockDeviceMappingsCreatedBsu;
    deviceName?: string;
}

export interface GetVmsVmBlockDeviceMappingsCreatedBsu {
    deleteOnVmDeletion: boolean;
    linkDate: string;
    state: number;
    volumeId: number;
}

export interface GetVmsVmNic {
    accountId: string;
    deleteOnVmDeletion: boolean;
    description: string;
    deviceNumber: number;
    isSourceDestChecked: boolean;
    linkNic: outputs.GetVmsVmNicLinkNic;
    linkPublicIps: outputs.GetVmsVmNicLinkPublicIp[];
    macAddress: string;
    netId: string;
    nicId: string;
    privateDnsName: string;
    privateIps: outputs.GetVmsVmNicPrivateIp[];
    secondaryPrivateIpCount: number;
    securityGroupIds: string[];
    securityGroups: outputs.GetVmsVmNicSecurityGroup[];
    securityGroupsNames: string[];
    state: string;
    subnetId: string;
}

export interface GetVmsVmNicLinkNic {
    deleteOnVmDeletion: boolean;
    deviceNumber: string;
    linkNicId: string;
    state: string;
}

export interface GetVmsVmNicLinkPublicIp {
    publicDnsName: string;
    publicIp: string;
    publicIpAccountId: string;
}

export interface GetVmsVmNicPrivateIp {
    isPrimary: boolean;
    linkPublicIps: outputs.GetVmsVmNicPrivateIpLinkPublicIp[];
    privateDnsName: string;
    privateIp: string;
}

export interface GetVmsVmNicPrivateIpLinkPublicIp {
    publicDnsName: string;
    publicIp: string;
    publicIpAccountId: string;
}

export interface GetVmsVmNicSecurityGroup {
    securityGroupId: string;
    securityGroupName: string;
}

export interface GetVmsVmSecurityGroup {
    securityGroupId: string;
    securityGroupName: string;
}

export interface GetVmsVmTag {
    key: string;
    value: string;
}

export interface GetVolumeFilter {
    name: string;
    values: string[];
}

export interface GetVolumeLinkedVolume {
    deleteOnVmDeletion: boolean;
    deviceName: string;
    state: string;
    vmId: string;
    volumeId: string;
}

export interface GetVolumeTag {
    key: string;
    value: string;
}

export interface GetVolumesFilter {
    name: string;
    values: string[];
}

export interface GetVolumesVolume {
    creationDate: string;
    iops: number;
    linkedVolumes: outputs.GetVolumesVolumeLinkedVolume[];
    size: number;
    snapshotId: string;
    state: string;
    subregionName: string;
    tags: outputs.GetVolumesVolumeTag[];
    volumeId: string;
    volumeType: string;
}

export interface GetVolumesVolumeLinkedVolume {
    deleteOnVmDeletion: boolean;
    deviceName: string;
    state: string;
    vmId: string;
    volumeId: string;
}

export interface GetVolumesVolumeTag {
    key: string;
    value: string;
}

export interface GetVpnConnectionFilter {
    name: string;
    values: string[];
}

export interface GetVpnConnectionRoute {
    destinationIpRange: string;
    routeType: string;
    state: string;
}

export interface GetVpnConnectionTag {
    key: string;
    value: string;
}

export interface GetVpnConnectionVgwTelemetry {
    acceptedRouteCount: number;
    lastStateChangeDate: string;
    outsideIpAddress: string;
    state: string;
    stateDescription: string;
}

export interface GetVpnConnectionsFilter {
    name: string;
    values: string[];
}

export interface GetVpnConnectionsVpnConnection {
    clientGatewayConfiguration: string;
    clientGatewayId: string;
    connectionType: string;
    routes: outputs.GetVpnConnectionsVpnConnectionRoute[];
    state: string;
    staticRoutesOnly?: boolean;
    tags: outputs.GetVpnConnectionsVpnConnectionTag[];
    vgwTelemetries: outputs.GetVpnConnectionsVpnConnectionVgwTelemetry[];
    virtualGatewayId: string;
    vpnConnectionId: string;
}

export interface GetVpnConnectionsVpnConnectionRoute {
    destinationIpRange: string;
    routeType: string;
    state: string;
}

export interface GetVpnConnectionsVpnConnectionTag {
    key: string;
    value: string;
}

export interface GetVpnConnectionsVpnConnectionVgwTelemetry {
    acceptedRouteCount: number;
    lastStateChangeDate: string;
    outsideIpAddress: string;
    state: string;
    stateDescription: string;
}

export interface ImageBlockDeviceMapping {
    bsus: outputs.ImageBlockDeviceMappingBsus[];
    deviceName: string;
    virtualDeviceName: string;
}

export interface ImageBlockDeviceMappingBsus {
    deleteOnVmDeletion: boolean;
    iops: number;
    snapshotId: string;
    volumeSize: number;
    volumeType: string;
}

export interface ImageExportTaskOsuExport {
    diskImageFormat: string;
    osuApiKeys?: outputs.ImageExportTaskOsuExportOsuApiKey[];
    osuBucket: string;
    osuManifestUrl: string;
    osuPrefix?: string;
}

export interface ImageExportTaskOsuExportOsuApiKey {
    apiKeyId: string;
    secretKey: string;
}

export interface ImageExportTaskTag {
    key: string;
    value: string;
}

export interface ImageLaunchPermissionPermissionAdditions {
    accountIds?: string[];
    globalPermission?: string;
}

export interface ImageLaunchPermissionPermissionRemovals {
    accountIds?: string[];
    globalPermission?: string;
}

export interface ImageLaunchPermissionPermissionsToLaunch {
    accountIds: string[];
    globalPermission: string;
}

export interface ImagePermissionsToLaunch {
    accountIds: string[];
    globalPermission: boolean;
}

export interface ImageStateComment {
    stateCode: string;
    stateMessage: string;
}

export interface ImageTag {
    key: string;
    value: string;
}

export interface InternetServiceLinkTag {
    key: string;
    value: string;
}

export interface InternetServiceTag {
    key: string;
    value: string;
}

export interface LoadBalancerAccessLog {
    isEnabled: boolean;
    osuBucketName: string;
    osuBucketPrefix: string;
    publicationInterval: number;
}

export interface LoadBalancerApplicationStickyCookiePolicy {
    cookieName: string;
    policyName: string;
}

export interface LoadBalancerAttributesAccessLog {
    isEnabled: boolean;
    osuBucketName?: string;
    osuBucketPrefix?: string;
    publicationInterval?: number;
}

export interface LoadBalancerAttributesApplicationStickyCookiePolicy {
    cookieName: string;
    policyName: string;
}

export interface LoadBalancerAttributesHealthCheck {
    checkInterval: number;
    healthyThreshold: number;
    path?: string;
    port: number;
    protocol: string;
    timeout: number;
    unhealthyThreshold: number;
}

export interface LoadBalancerAttributesListener {
    backendPort: number;
    backendProtocol: string;
    loadBalancerPort: number;
    loadBalancerProtocol: string;
    policyNames: string[];
    serverCertificateId: string;
}

export interface LoadBalancerAttributesLoadBalancerStickyCookiePolicy {
    policyName: string;
}

export interface LoadBalancerAttributesSourceSecurityGroup {
    securityGroupAccountId: string;
    securityGroupName: string;
}

export interface LoadBalancerAttributesTag {
    key: string;
    value: string;
}

export interface LoadBalancerHealthCheck {
    checkInterval: string;
    healthyThreshold: string;
    path: string;
    port: string;
    protocol: string;
    timeout: string;
    unhealthyThreshold: string;
}

export interface LoadBalancerListener {
    backendPort: number;
    backendProtocol: string;
    loadBalancerPort: number;
    loadBalancerProtocol: string;
    policyNames: string[];
    serverCertificateId?: string;
}

export interface LoadBalancerLoadBalancerStickyCookiePolicy {
    policyName: string;
}

export interface LoadBalancerPolicyAccessLog {
    isEnabled: boolean;
    osuBucketName: string;
    osuBucketPrefix: string;
    publicationInterval: number;
}

export interface LoadBalancerPolicyApplicationStickyCookiePolicy {
    cookieName: string;
    policyName: string;
}

export interface LoadBalancerPolicyHealthCheck {
    checkInterval: string;
    healthyThreshold: string;
    path: string;
    port: string;
    protocol: string;
    timeout: string;
    unhealthyThreshold: string;
}

export interface LoadBalancerPolicyListener {
    backendPort: number;
    backendProtocol: string;
    loadBalancerPort: number;
    loadBalancerProtocol: string;
    policyNames: string[];
    serverCertificateId: string;
}

export interface LoadBalancerPolicyLoadBalancerStickyCookiePolicy {
    policyName: string;
}

export interface LoadBalancerPolicySourceSecurityGroup {
    securityGroupAccountId: string;
    securityGroupName: string;
}

export interface LoadBalancerPolicyTag {
    key: string;
    value: string;
}

export interface LoadBalancerSourceSecurityGroup {
    securityGroupAccountId: string;
    securityGroupName: string;
}

export interface LoadBalancerTag {
    key?: string;
    value?: string;
}

export interface NatServicePublicIp {
    publicIp: string;
    publicIpId: string;
}

export interface NatServiceTag {
    key: string;
    value: string;
}

export interface NetAccessPointTag {
    key: string;
    value: string;
}

export interface NetAttributesTag {
    key: string;
    value: string;
}

export interface NetPeeringAccepterNet {
    accountId: string;
    ipRange: string;
    netId: string;
}

export interface NetPeeringAcceptionAccepterNet {
    accountId: string;
    ipRange: string;
    netId: string;
}

export interface NetPeeringAcceptionSourceNet {
    accountId: string;
    ipRange: string;
    netId: string;
}

export interface NetPeeringAcceptionState {
    message: string;
    name: string;
}

export interface NetPeeringAcceptionTag {
    key: string;
    value: string;
}

export interface NetPeeringSourceNet {
    accountId: string;
    ipRange: string;
    netId: string;
}

export interface NetPeeringState {
    message: string;
    name: string;
}

export interface NetPeeringTag {
    key: string;
    value: string;
}

export interface NetTag {
    key: string;
    value: string;
}

export interface NicLinkNic {
    deleteOnVmDeletion: string;
    deviceNumber: number;
    linkNicId: string;
    state: string;
    vmAccountId: string;
    vmId: string;
}

export interface NicLinkPublicIp {
    linkPublicIpId: string;
    publicDnsName: string;
    publicIp: string;
    publicIpAccountId: string;
    publicIpId: string;
}

export interface NicPrivateIp {
    isPrimary: boolean;
    linkPublicIp: outputs.NicPrivateIpLinkPublicIp;
    privateDnsName: string;
    privateIp: string;
}

export interface NicPrivateIpLinkPublicIp {
    linkPublicIpId: string;
    publicDnsName: string;
    publicIp: string;
    publicIpAccountId: string;
    publicIpId: string;
}

export interface NicSecurityGroup {
    securityGroupId: string;
    securityGroupName: string;
}

export interface NicTag {
    key: string;
    value: string;
}

export interface OutboundRuleRule {
    fromPortRange?: number;
    ipProtocol: string;
    ipRanges?: string[];
    securityGroupsMembers: outputs.OutboundRuleRuleSecurityGroupsMember[];
    serviceIds?: string[];
    toPortRange?: number;
}

export interface OutboundRuleRuleSecurityGroupsMember {
    accountId?: string;
    securityGroupId?: string;
    securityGroupName?: string;
}

export interface PublicIpLinkTag {
    key: string;
    value: string;
}

export interface PublicIpTag {
    key: string;
    value: string;
}

export interface RouteTableLinkRouteTable {
    linkRouteTableId: string;
    main: boolean;
    routeTableId: string;
    routeTableToSubnetLinkId: string;
    subnetId: string;
}

export interface RouteTableRoute {
    creationMethod: string;
    destinationIpRange: string;
    destinationServiceId: string;
    gatewayId: string;
    natServiceId: string;
    netAccessPointId: string;
    netPeeringId: string;
    nicId: string;
    state: string;
    vmAccountId: string;
    vmId: string;
}

export interface RouteTableRoutePropagatingVirtualGateway {
    virtualGatewayId: string;
}

export interface RouteTableTag {
    key: string;
    value: string;
}

export interface SecurityGroupInboundRule {
    fromPortRange: number;
    ipProtocol: string;
    ipRanges: string[];
    securityGroupsMembers?: {[key: string]: any}[];
    toPortRange: number;
}

export interface SecurityGroupOutboundRule {
    fromPortRange: number;
    ipProtocol: string;
    ipRanges: string[];
    securityGroupsMembers?: {[key: string]: any}[];
    toPortRange: number;
}

export interface SecurityGroupRuleRule {
    fromPortRange?: number;
    ipProtocol: string;
    ipRanges?: string[];
    securityGroupsMembers: outputs.SecurityGroupRuleRuleSecurityGroupsMember[];
    serviceIds?: string[];
    toPortRange?: number;
}

export interface SecurityGroupRuleRuleSecurityGroupsMember {
    accountId?: string;
    securityGroupId?: string;
    securityGroupName?: string;
}

export interface SecurityGroupTag {
    key: string;
    value: string;
}

export interface SnapshotAttributesPermissionsToCreateVolumeAdditions {
    accountIds?: string[];
    globalPermission?: boolean;
}

export interface SnapshotAttributesPermissionsToCreateVolumeRemoval {
    accountIds?: string[];
    globalPermission?: boolean;
}

export interface SnapshotExportTaskOsuExport {
    diskImageFormat: string;
    osuApiKeys?: outputs.SnapshotExportTaskOsuExportOsuApiKey[];
    osuBucket: string;
    osuPrefix: string;
}

export interface SnapshotExportTaskOsuExportOsuApiKey {
    apiKeyId: string;
    secretKey: string;
}

export interface SnapshotExportTaskTag {
    key: string;
    value: string;
}

export interface SnapshotPermissionsToCreateVolume {
    accountId: string;
    globalPermission: boolean;
}

export interface SnapshotTag {
    key: string;
    value: string;
}

export interface SubnetTag {
    key: string;
    value: string;
}

export interface TagTag {
    key: string;
    resourceId: string;
    resourceType: string;
    value: string;
}

export interface VirtualGatewayLinkNetToVirtualGatewayLink {
    netId: string;
    state: string;
}

export interface VirtualGatewayNetToVirtualGatewayLink {
    netId: string;
    state: string;
}

export interface VirtualGatewayTag {
    key: string;
    value: string;
}

export interface VmBlockDeviceMapping {
    bsu: outputs.VmBlockDeviceMappingBsu;
    deviceName?: string;
    noDevice?: string;
    virtualDeviceName?: string;
}

export interface VmBlockDeviceMappingBsu {
    deleteOnVmDeletion?: boolean;
    iops?: number;
    snapshotId?: string;
    volumeSize?: number;
    volumeType?: string;
}

export interface VmBlockDeviceMappingsCreated {
    bsu: outputs.VmBlockDeviceMappingsCreatedBsu;
    deviceName?: string;
}

export interface VmBlockDeviceMappingsCreatedBsu {
    deleteOnVmDeletion: boolean;
    linkDate: string;
    state: number;
    volumeId: number;
}

export interface VmNic {
    accountId: string;
    deleteOnVmDeletion: boolean;
    description: string;
    deviceNumber: number;
    isSourceDestChecked: boolean;
    linkNic: outputs.VmNicLinkNic;
    linkPublicIps: outputs.VmNicLinkPublicIp[];
    macAddress: string;
    netId: string;
    nicId: string;
    privateDnsName: string;
    privateIps: outputs.VmNicPrivateIp[];
    secondaryPrivateIpCount: number;
    securityGroupIds?: string[];
    securityGroups: outputs.VmNicSecurityGroup[];
    state: string;
    subnetId: string;
}

export interface VmNicLinkNic {
    deleteOnVmDeletion: boolean;
    deviceNumber: string;
    linkNicId: string;
    state: string;
}

export interface VmNicLinkPublicIp {
    publicDnsName: string;
    publicIp: string;
    publicIpAccountId: string;
}

export interface VmNicPrivateIp {
    isPrimary: boolean;
    linkPublicIps: outputs.VmNicPrivateIpLinkPublicIp[];
    privateDnsName: string;
    privateIp: string;
}

export interface VmNicPrivateIpLinkPublicIp {
    publicDnsName: string;
    publicIp: string;
    publicIpAccountId: string;
}

export interface VmNicSecurityGroup {
    securityGroupId: string;
    securityGroupName: string;
}

export interface VmSecurityGroup {
    securityGroupId: string;
    securityGroupName: string;
}

export interface VmTag {
    key: string;
    value: string;
}

export interface VolumeLinkedVolume {
    deleteOnVmDeletion: boolean;
    deviceName: string;
    state: string;
    vmId: string;
    volumeId: string;
}

export interface VolumeTag {
    key: string;
    value: string;
}

export interface VpnConnectionRoute {
    destinationIpRange: string;
    routeType: string;
    state: string;
}

export interface VpnConnectionTag {
    key: string;
    value: string;
}

export interface VpnConnectionVgwTelemetry {
    acceptedRouteCount: number;
    lastStateChangeDate: string;
    outsideIpAddress: string;
    state: string;
    stateDescription: string;
}

export namespace config {
    export interface Endpoints {
        api?: string;
    }

}
