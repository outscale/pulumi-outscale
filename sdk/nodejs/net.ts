// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a Net.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Nets.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-net).
 *
 * ## Example Usage
 *
 * ### Create a Net
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const net01 = new outscale.Net("net01", {
 *     ipRange: "10.10.0.0/16",
 *     tenancy: "default",
 * });
 * ```
 *
 * ### Create a Net with a network
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const net02 = new outscale.Net("net02", {ipRange: "10.0.0.0/16"});
 * const subnet01 = new outscale.Subnet("subnet01", {
 *     netId: net02.netId,
 *     ipRange: "10.0.0.0/18",
 * });
 * const publicIp01 = new outscale.PublicIp("public_ip01", {});
 * const natService01 = new outscale.NatService("nat_service01", {
 *     subnetId: subnet01.subnetId,
 *     publicIpId: publicIp01.publicIpId,
 * });
 * const routeTable01 = new outscale.RouteTable("route_table01", {netId: net02.netId});
 * const internetService01 = new outscale.InternetService("internet_service01", {});
 * const route01 = new outscale.Route("route01", {
 *     destinationIpRange: "0.0.0.0/0",
 *     gatewayId: internetService01.internetServiceId,
 *     routeTableId: routeTable01.routeTableId,
 * });
 * const routeTableLink01 = new outscale.RouteTableLink("route_table_link01", {
 *     subnetId: subnet01.subnetId,
 *     routeTableId: routeTable01.id,
 * });
 * const internetServiceLink01 = new outscale.InternetServiceLink("internet_service_link01", {
 *     netId: net02.netId,
 *     internetServiceId: internetService01.id,
 * });
 * ```
 *
 * ## Import
 *
 * A Net can be imported using its ID. For example:
 *
 * console
 *
 * ```sh
 * $ pulumi import outscale:index/net:Net ImportedNet vpc-87654321
 * ```
 */
export class Net extends pulumi.CustomResource {
    /**
     * Get an existing Net resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetState, opts?: pulumi.CustomResourceOptions): Net {
        return new Net(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/net:Net';

    /**
     * Returns true if the given object is an instance of Net.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Net {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Net.__pulumiType;
    }

    /**
     * The ID of the DHCP options set (or `default` if you want to associate the default one).
     */
    public /*out*/ readonly dhcpOptionsSetId!: pulumi.Output<string>;
    /**
     * The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
     */
    public readonly ipRange!: pulumi.Output<string>;
    /**
     * The ID of the Net.
     */
    public /*out*/ readonly netId!: pulumi.Output<string>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    /**
     * The state of the Net (`pending` \| `available` \| `deleting`).
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    public readonly tags!: pulumi.Output<outputs.NetTag[] | undefined>;
    /**
     * The tenancy options for the VMs:<br />
     */
    public readonly tenancy!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.NetTimeouts | undefined>;

    /**
     * Create a Net resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetArgs | NetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetState | undefined;
            resourceInputs["dhcpOptionsSetId"] = state ? state.dhcpOptionsSetId : undefined;
            resourceInputs["ipRange"] = state ? state.ipRange : undefined;
            resourceInputs["netId"] = state ? state.netId : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenancy"] = state ? state.tenancy : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetArgs | undefined;
            if ((!args || args.ipRange === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipRange'");
            }
            resourceInputs["ipRange"] = args ? args.ipRange : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenancy"] = args ? args.tenancy : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["dhcpOptionsSetId"] = undefined /*out*/;
            resourceInputs["netId"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Net.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Net resources.
 */
export interface NetState {
    /**
     * The ID of the DHCP options set (or `default` if you want to associate the default one).
     */
    dhcpOptionsSetId?: pulumi.Input<string>;
    /**
     * The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
     */
    ipRange?: pulumi.Input<string>;
    /**
     * The ID of the Net.
     */
    netId?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    /**
     * The state of the Net (`pending` \| `available` \| `deleting`).
     */
    state?: pulumi.Input<string>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetTag>[]>;
    /**
     * The tenancy options for the VMs:<br />
     */
    tenancy?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetTimeouts>;
}

/**
 * The set of arguments for constructing a Net resource.
 */
export interface NetArgs {
    /**
     * The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
     */
    ipRange: pulumi.Input<string>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetTag>[]>;
    /**
     * The tenancy options for the VMs:<br />
     */
    tenancy?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetTimeouts>;
}
