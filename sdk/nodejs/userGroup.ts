// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a user group.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-EIM-Groups.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#createusergroup).
 *
 * ## Example Usage
 *
 * ### Create a user group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const group_1 = new outscale.UserGroup("group-1", {
 *     userGroupName: "Group-TF-test-1",
 *     path: "/terraform/",
 * });
 * ```
 *
 * ### Link a policy to a user group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const group_1 = new outscale.UserGroup("group-1", {
 *     userGroupName: "Group-TF-test-1",
 *     policies: [{
 *         policyOrn: policy_2.orn,
 *         defaultVersionId: "V2",
 *     }],
 * });
 * ```
 *
 * ### Add a user to a user group
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const group_1 = new outscale.UserGroup("group-1", {
 *     userGroupName: "Group-TF-test-1",
 *     users: [
 *         {
 *             userName: "user-name-1",
 *             path: "/terraform/",
 *         },
 *         {
 *             userName: "user-name-2",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * A user group can be imported using its group ID. For example:
 *
 * console
 *
 * ```sh
 * $ pulumi import outscale:index/userGroup:UserGroup group1 user_group_id
 * ```
 */
export class UserGroup extends pulumi.CustomResource {
    /**
     * Get an existing UserGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserGroupState, opts?: pulumi.CustomResourceOptions): UserGroup {
        return new UserGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/userGroup:UserGroup';

    /**
     * Returns true if the given object is an instance of UserGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserGroup.__pulumiType;
    }

    /**
     * The date and time (UTC) of creation of the user group.
     */
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    /**
     * The date and time (UTC) of the last modification of the user group.
     */
    public /*out*/ readonly lastModificationDate!: pulumi.Output<string>;
    /**
     * The Outscale Resource Name (ORN) of the user group. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
     */
    public /*out*/ readonly orn!: pulumi.Output<string>;
    /**
     * The path to the group. If not specified, it is set to a slash (`/`).
     */
    public readonly path!: pulumi.Output<string | undefined>;
    public readonly policies!: pulumi.Output<outputs.UserGroupPolicy[] | undefined>;
    /**
     * The ID of the user group.
     */
    public /*out*/ readonly userGroupId!: pulumi.Output<string>;
    /**
     * The name of the group.
     */
    public readonly userGroupName!: pulumi.Output<string>;
    public readonly users!: pulumi.Output<outputs.UserGroupUser[] | undefined>;

    /**
     * Create a UserGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserGroupArgs | UserGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserGroupState | undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["lastModificationDate"] = state ? state.lastModificationDate : undefined;
            resourceInputs["orn"] = state ? state.orn : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
            resourceInputs["userGroupId"] = state ? state.userGroupId : undefined;
            resourceInputs["userGroupName"] = state ? state.userGroupName : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as UserGroupArgs | undefined;
            if ((!args || args.userGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userGroupName'");
            }
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
            resourceInputs["userGroupName"] = args ? args.userGroupName : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["lastModificationDate"] = undefined /*out*/;
            resourceInputs["orn"] = undefined /*out*/;
            resourceInputs["userGroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserGroup resources.
 */
export interface UserGroupState {
    /**
     * The date and time (UTC) of creation of the user group.
     */
    creationDate?: pulumi.Input<string>;
    /**
     * The date and time (UTC) of the last modification of the user group.
     */
    lastModificationDate?: pulumi.Input<string>;
    /**
     * The Outscale Resource Name (ORN) of the user group. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
     */
    orn?: pulumi.Input<string>;
    /**
     * The path to the group. If not specified, it is set to a slash (`/`).
     */
    path?: pulumi.Input<string>;
    policies?: pulumi.Input<pulumi.Input<inputs.UserGroupPolicy>[]>;
    /**
     * The ID of the user group.
     */
    userGroupId?: pulumi.Input<string>;
    /**
     * The name of the group.
     */
    userGroupName?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.UserGroupUser>[]>;
}

/**
 * The set of arguments for constructing a UserGroup resource.
 */
export interface UserGroupArgs {
    /**
     * The path to the group. If not specified, it is set to a slash (`/`).
     */
    path?: pulumi.Input<string>;
    policies?: pulumi.Input<pulumi.Input<inputs.UserGroupPolicy>[]>;
    /**
     * The name of the group.
     */
    userGroupName: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.UserGroupUser>[]>;
}
