// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getImage(args?: GetImageArgs, opts?: pulumi.InvokeOptions): Promise<GetImageResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("outscale:index/getImage:getImage", {
        "blockDeviceMappings": args.blockDeviceMappings,
        "filters": args.filters,
        "imageId": args.imageId,
        "permissions": args.permissions,
    }, opts);
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageArgs {
    blockDeviceMappings?: inputs.GetImageBlockDeviceMapping[];
    filters?: inputs.GetImageFilter[];
    imageId?: string;
    permissions?: string[];
}

/**
 * A collection of values returned by getImage.
 */
export interface GetImageResult {
    readonly accountAlias: string;
    readonly accountId: string;
    readonly architecture: string;
    readonly blockDeviceMappings: outputs.GetImageBlockDeviceMapping[];
    readonly creationDate: string;
    readonly description: string;
    readonly fileLocation: string;
    readonly filters?: outputs.GetImageFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly imageId?: string;
    readonly imageName: string;
    readonly imageType: string;
    readonly isPublic: boolean;
    readonly permissions?: string[];
    readonly permissionsToLaunches: outputs.GetImagePermissionsToLaunch[];
    readonly productCodes: string[];
    readonly requestId: string;
    readonly rootDeviceName: string;
    readonly rootDeviceType: string;
    readonly state: string;
    readonly stateComments: outputs.GetImageStateComment[];
    readonly tags: outputs.GetImageTag[];
}
export function getImageOutput(args?: GetImageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetImageResult> {
    return pulumi.output(args).apply((a: any) => getImage(a, opts))
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageOutputArgs {
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.GetImageBlockDeviceMappingArgs>[]>;
    filters?: pulumi.Input<pulumi.Input<inputs.GetImageFilterArgs>[]>;
    imageId?: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
}
