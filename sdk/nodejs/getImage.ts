// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides information about an image.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-OMIs.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-image).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const image01 = outscale.getImage({
 *     filters: [{
 *         name: "image_ids",
 *         values: ["ami-12345678"],
 *     }],
 * });
 * ```
 */
export function getImage(args?: GetImageArgs, opts?: pulumi.InvokeOptions): Promise<GetImageResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("outscale:index/getImage:getImage", {
        "blockDeviceMappings": args.blockDeviceMappings,
        "filters": args.filters,
        "imageId": args.imageId,
        "permissions": args.permissions,
    }, opts);
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageArgs {
    /**
     * One or more block device mappings.
     */
    blockDeviceMappings?: inputs.GetImageBlockDeviceMapping[];
    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     */
    filters?: inputs.GetImageFilter[];
    /**
     * The ID of the OMI.
     */
    imageId?: string;
    permissions?: string[];
}

/**
 * A collection of values returned by getImage.
 */
export interface GetImageResult {
    /**
     * The account alias of the owner of the OMI.
     */
    readonly accountAlias: string;
    /**
     * The account ID of the owner of the OMI.
     */
    readonly accountId: string;
    /**
     * The architecture of the OMI.
     */
    readonly architecture: string;
    /**
     * One or more block device mappings.
     */
    readonly blockDeviceMappings: outputs.GetImageBlockDeviceMapping[];
    /**
     * The date and time (UTC) at which the OMI was created.
     */
    readonly creationDate: string;
    /**
     * The description of the OMI.
     */
    readonly description: string;
    /**
     * The location from which the OMI files were created.
     */
    readonly fileLocation: string;
    readonly filters?: outputs.GetImageFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of the OMI.
     */
    readonly imageId?: string;
    /**
     * The name of the OMI.
     */
    readonly imageName: string;
    /**
     * The type of the OMI.
     */
    readonly imageType: string;
    readonly isPublic: boolean;
    readonly permissions?: string[];
    /**
     * Permissions for the resource.
     */
    readonly permissionsToLaunches: outputs.GetImagePermissionsToLaunch[];
    /**
     * The product codes associated with the OMI.
     */
    readonly productCodes: string[];
    readonly requestId: string;
    /**
     * The name of the root device.
     */
    readonly rootDeviceName: string;
    /**
     * The type of root device used by the OMI (always `bsu`).
     */
    readonly rootDeviceType: string;
    /**
     * The state of the OMI (`pending` \| `available` \| `failed`).
     */
    readonly state: string;
    /**
     * Information about the change of state.
     */
    readonly stateComments: outputs.GetImageStateComment[];
    /**
     * One or more tags associated with the OMI.
     */
    readonly tags: outputs.GetImageTag[];
}
/**
 * Provides information about an image.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-OMIs.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-image).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const image01 = outscale.getImage({
 *     filters: [{
 *         name: "image_ids",
 *         values: ["ami-12345678"],
 *     }],
 * });
 * ```
 */
export function getImageOutput(args?: GetImageOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetImageResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("outscale:index/getImage:getImage", {
        "blockDeviceMappings": args.blockDeviceMappings,
        "filters": args.filters,
        "imageId": args.imageId,
        "permissions": args.permissions,
    }, opts);
}

/**
 * A collection of arguments for invoking getImage.
 */
export interface GetImageOutputArgs {
    /**
     * One or more block device mappings.
     */
    blockDeviceMappings?: pulumi.Input<pulumi.Input<inputs.GetImageBlockDeviceMappingArgs>[]>;
    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetImageFilterArgs>[]>;
    /**
     * The ID of the OMI.
     */
    imageId?: pulumi.Input<string>;
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
}
