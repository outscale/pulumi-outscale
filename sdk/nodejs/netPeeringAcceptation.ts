// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a Net peering acceptation.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Net-Peerings.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-netpeering).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const netPeeringAcceptation01 = new outscale.NetPeeringAcceptation("net_peering_acceptation01", {netPeeringId: netPeering01.netPeeringId});
 * ```
 */
export class NetPeeringAcceptation extends pulumi.CustomResource {
    /**
     * Get an existing NetPeeringAcceptation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetPeeringAcceptationState, opts?: pulumi.CustomResourceOptions): NetPeeringAcceptation {
        return new NetPeeringAcceptation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/netPeeringAcceptation:NetPeeringAcceptation';

    /**
     * Returns true if the given object is an instance of NetPeeringAcceptation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetPeeringAcceptation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetPeeringAcceptation.__pulumiType;
    }

    public /*out*/ readonly accepterNetId!: pulumi.Output<string>;
    /**
     * Information about the accepter Net.
     */
    public /*out*/ readonly accepterNets!: pulumi.Output<outputs.NetPeeringAcceptationAccepterNet[]>;
    public /*out*/ readonly accepterOwnerId!: pulumi.Output<string>;
    /**
     * The date and time (UTC) at which the Net peerings expire.
     */
    public /*out*/ readonly expirationDate!: pulumi.Output<string>;
    /**
     * The ID of the Net peering you want to accept.
     */
    public readonly netPeeringId!: pulumi.Output<string>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    public /*out*/ readonly sourceNetAccountId!: pulumi.Output<string>;
    public /*out*/ readonly sourceNetId!: pulumi.Output<string>;
    /**
     * Information about the source Net.
     */
    public /*out*/ readonly sourceNets!: pulumi.Output<outputs.NetPeeringAcceptationSourceNet[]>;
    /**
     * Information about the state of the Net peering.
     */
    public /*out*/ readonly states!: pulumi.Output<outputs.NetPeeringAcceptationState[]>;
    /**
     * One or more tags associated with the Net peering.
     */
    public /*out*/ readonly tags!: pulumi.Output<outputs.NetPeeringAcceptationTag[]>;
    public readonly timeouts!: pulumi.Output<outputs.NetPeeringAcceptationTimeouts | undefined>;

    /**
     * Create a NetPeeringAcceptation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetPeeringAcceptationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetPeeringAcceptationArgs | NetPeeringAcceptationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetPeeringAcceptationState | undefined;
            resourceInputs["accepterNetId"] = state ? state.accepterNetId : undefined;
            resourceInputs["accepterNets"] = state ? state.accepterNets : undefined;
            resourceInputs["accepterOwnerId"] = state ? state.accepterOwnerId : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["netPeeringId"] = state ? state.netPeeringId : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["sourceNetAccountId"] = state ? state.sourceNetAccountId : undefined;
            resourceInputs["sourceNetId"] = state ? state.sourceNetId : undefined;
            resourceInputs["sourceNets"] = state ? state.sourceNets : undefined;
            resourceInputs["states"] = state ? state.states : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as NetPeeringAcceptationArgs | undefined;
            if ((!args || args.netPeeringId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netPeeringId'");
            }
            resourceInputs["netPeeringId"] = args ? args.netPeeringId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["accepterNetId"] = undefined /*out*/;
            resourceInputs["accepterNets"] = undefined /*out*/;
            resourceInputs["accepterOwnerId"] = undefined /*out*/;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["sourceNetAccountId"] = undefined /*out*/;
            resourceInputs["sourceNetId"] = undefined /*out*/;
            resourceInputs["sourceNets"] = undefined /*out*/;
            resourceInputs["states"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetPeeringAcceptation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetPeeringAcceptation resources.
 */
export interface NetPeeringAcceptationState {
    accepterNetId?: pulumi.Input<string>;
    /**
     * Information about the accepter Net.
     */
    accepterNets?: pulumi.Input<pulumi.Input<inputs.NetPeeringAcceptationAccepterNet>[]>;
    accepterOwnerId?: pulumi.Input<string>;
    /**
     * The date and time (UTC) at which the Net peerings expire.
     */
    expirationDate?: pulumi.Input<string>;
    /**
     * The ID of the Net peering you want to accept.
     */
    netPeeringId?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    sourceNetAccountId?: pulumi.Input<string>;
    sourceNetId?: pulumi.Input<string>;
    /**
     * Information about the source Net.
     */
    sourceNets?: pulumi.Input<pulumi.Input<inputs.NetPeeringAcceptationSourceNet>[]>;
    /**
     * Information about the state of the Net peering.
     */
    states?: pulumi.Input<pulumi.Input<inputs.NetPeeringAcceptationState>[]>;
    /**
     * One or more tags associated with the Net peering.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.NetPeeringAcceptationTag>[]>;
    timeouts?: pulumi.Input<inputs.NetPeeringAcceptationTimeouts>;
}

/**
 * The set of arguments for constructing a NetPeeringAcceptation resource.
 */
export interface NetPeeringAcceptationArgs {
    /**
     * The ID of the Net peering you want to accept.
     */
    netPeeringId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.NetPeeringAcceptationTimeouts>;
}
