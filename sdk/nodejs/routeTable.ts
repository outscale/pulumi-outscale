// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a route table.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Route-Tables.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-routetable).
 *
 * ## Example Usage
 *
 * ### Required resource
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const net01 = new outscale.Net("net01", {ipRange: "10.0.0.0/16"});
 * ```
 *
 * ### Create a route table
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const routeTable01 = new outscale.RouteTable("route_table01", {netId: net01.netId});
 * ```
 *
 * ## Import
 *
 * A route table can be imported using its ID. For example:
 *
 * console
 *
 * ```sh
 * $ pulumi import outscale:index/routeTable:RouteTable ImportedRouteTable rtb-12345678
 * ```
 */
export class RouteTable extends pulumi.CustomResource {
    /**
     * Get an existing RouteTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteTableState, opts?: pulumi.CustomResourceOptions): RouteTable {
        return new RouteTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/routeTable:RouteTable';

    /**
     * Returns true if the given object is an instance of RouteTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteTable.__pulumiType;
    }

    /**
     * One or more associations between the route table and Subnets.
     */
    public /*out*/ readonly linkRouteTables!: pulumi.Output<outputs.RouteTableLinkRouteTable[]>;
    /**
     * The ID of the Net for which you want to create a route table.
     */
    public readonly netId!: pulumi.Output<string>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    /**
     * Information about virtual gateways propagating routes.
     */
    public /*out*/ readonly routePropagatingVirtualGateways!: pulumi.Output<outputs.RouteTableRoutePropagatingVirtualGateway[]>;
    /**
     * The ID of the route table.
     */
    public /*out*/ readonly routeTableId!: pulumi.Output<string>;
    /**
     * One or more routes in the route table.
     */
    public /*out*/ readonly routes!: pulumi.Output<outputs.RouteTableRoute[]>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    public readonly tags!: pulumi.Output<outputs.RouteTableTag[] | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.RouteTableTimeouts | undefined>;

    /**
     * Create a RouteTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteTableArgs | RouteTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteTableState | undefined;
            resourceInputs["linkRouteTables"] = state ? state.linkRouteTables : undefined;
            resourceInputs["netId"] = state ? state.netId : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["routePropagatingVirtualGateways"] = state ? state.routePropagatingVirtualGateways : undefined;
            resourceInputs["routeTableId"] = state ? state.routeTableId : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as RouteTableArgs | undefined;
            if ((!args || args.netId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'netId'");
            }
            resourceInputs["netId"] = args ? args.netId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["linkRouteTables"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["routePropagatingVirtualGateways"] = undefined /*out*/;
            resourceInputs["routeTableId"] = undefined /*out*/;
            resourceInputs["routes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouteTable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouteTable resources.
 */
export interface RouteTableState {
    /**
     * One or more associations between the route table and Subnets.
     */
    linkRouteTables?: pulumi.Input<pulumi.Input<inputs.RouteTableLinkRouteTable>[]>;
    /**
     * The ID of the Net for which you want to create a route table.
     */
    netId?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    /**
     * Information about virtual gateways propagating routes.
     */
    routePropagatingVirtualGateways?: pulumi.Input<pulumi.Input<inputs.RouteTableRoutePropagatingVirtualGateway>[]>;
    /**
     * The ID of the route table.
     */
    routeTableId?: pulumi.Input<string>;
    /**
     * One or more routes in the route table.
     */
    routes?: pulumi.Input<pulumi.Input<inputs.RouteTableRoute>[]>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.RouteTableTag>[]>;
    timeouts?: pulumi.Input<inputs.RouteTableTimeouts>;
}

/**
 * The set of arguments for constructing a RouteTable resource.
 */
export interface RouteTableArgs {
    /**
     * The ID of the Net for which you want to create a route table.
     */
    netId: pulumi.Input<string>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.RouteTableTag>[]>;
    timeouts?: pulumi.Input<inputs.RouteTableTimeouts>;
}
