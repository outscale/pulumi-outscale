// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VpnConnection extends pulumi.CustomResource {
    /**
     * Get an existing VpnConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnConnectionState, opts?: pulumi.CustomResourceOptions): VpnConnection {
        return new VpnConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/vpnConnection:VpnConnection';

    /**
     * Returns true if the given object is an instance of VpnConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnConnection.__pulumiType;
    }

    public /*out*/ readonly clientGatewayConfiguration!: pulumi.Output<string>;
    public readonly clientGatewayId!: pulumi.Output<string>;
    public readonly connectionType!: pulumi.Output<string>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    public /*out*/ readonly routes!: pulumi.Output<outputs.VpnConnectionRoute[]>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly staticRoutesOnly!: pulumi.Output<boolean | undefined>;
    public readonly tags!: pulumi.Output<outputs.VpnConnectionTag[] | undefined>;
    public /*out*/ readonly vgwTelemetries!: pulumi.Output<outputs.VpnConnectionVgwTelemetry[]>;
    public readonly virtualGatewayId!: pulumi.Output<string>;
    public /*out*/ readonly vpnConnectionId!: pulumi.Output<string>;

    /**
     * Create a VpnConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnConnectionArgs | VpnConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnConnectionState | undefined;
            resourceInputs["clientGatewayConfiguration"] = state ? state.clientGatewayConfiguration : undefined;
            resourceInputs["clientGatewayId"] = state ? state.clientGatewayId : undefined;
            resourceInputs["connectionType"] = state ? state.connectionType : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["staticRoutesOnly"] = state ? state.staticRoutesOnly : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vgwTelemetries"] = state ? state.vgwTelemetries : undefined;
            resourceInputs["virtualGatewayId"] = state ? state.virtualGatewayId : undefined;
            resourceInputs["vpnConnectionId"] = state ? state.vpnConnectionId : undefined;
        } else {
            const args = argsOrState as VpnConnectionArgs | undefined;
            if ((!args || args.clientGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientGatewayId'");
            }
            if ((!args || args.connectionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionType'");
            }
            if ((!args || args.virtualGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualGatewayId'");
            }
            resourceInputs["clientGatewayId"] = args ? args.clientGatewayId : undefined;
            resourceInputs["connectionType"] = args ? args.connectionType : undefined;
            resourceInputs["staticRoutesOnly"] = args ? args.staticRoutesOnly : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["virtualGatewayId"] = args ? args.virtualGatewayId : undefined;
            resourceInputs["clientGatewayConfiguration"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["routes"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["vgwTelemetries"] = undefined /*out*/;
            resourceInputs["vpnConnectionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnConnection resources.
 */
export interface VpnConnectionState {
    clientGatewayConfiguration?: pulumi.Input<string>;
    clientGatewayId?: pulumi.Input<string>;
    connectionType?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    routes?: pulumi.Input<pulumi.Input<inputs.VpnConnectionRoute>[]>;
    state?: pulumi.Input<string>;
    staticRoutesOnly?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.VpnConnectionTag>[]>;
    vgwTelemetries?: pulumi.Input<pulumi.Input<inputs.VpnConnectionVgwTelemetry>[]>;
    virtualGatewayId?: pulumi.Input<string>;
    vpnConnectionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnConnection resource.
 */
export interface VpnConnectionArgs {
    clientGatewayId: pulumi.Input<string>;
    connectionType: pulumi.Input<string>;
    staticRoutesOnly?: pulumi.Input<boolean>;
    tags?: pulumi.Input<pulumi.Input<inputs.VpnConnectionTag>[]>;
    virtualGatewayId: pulumi.Input<string>;
}
