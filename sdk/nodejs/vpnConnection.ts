// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages a VPN connection.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPN-Connections.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vpnconnection).
 *
 * ## Example Usage
 * ### Required resources
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const clientGateway01 = new outscale.ClientGateway("clientGateway01", {
 *     bgpAsn: 65000,
 *     connectionType: "ipsec.1",
 *     publicIp: "111.11.11.111",
 * });
 * const virtualGateway01 = new outscale.VirtualGateway("virtualGateway01", {connectionType: "ipsec.1"});
 * ```
 * ### Create a VPN connection
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const vpnConnection01 = new outscale.VpnConnection("vpnConnection01", {
 *     clientGatewayId: outscale_client_gateway.client_gateway01.client_gateway_id,
 *     virtualGatewayId: outscale_virtual_gateway.virtual_gateway01.virtual_gateway_id,
 *     connectionType: "ipsec.1",
 *     staticRoutesOnly: true,
 *     tags: [{
 *         key: "Name",
 *         value: "vpn01",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * A VPN connection can be imported using its ID. For exampleconsole
 *
 * ```sh
 *  $ pulumi import outscale:index/vpnConnection:VpnConnection ImportedVPN vpn-12345678
 * ```
 */
export class VpnConnection extends pulumi.CustomResource {
    /**
     * Get an existing VpnConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnConnectionState, opts?: pulumi.CustomResourceOptions): VpnConnection {
        return new VpnConnection(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/vpnConnection:VpnConnection';

    /**
     * Returns true if the given object is an instance of VpnConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnConnection {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnConnection.__pulumiType;
    }

    /**
     * Example configuration for the client gateway.
     */
    public /*out*/ readonly clientGatewayConfiguration!: pulumi.Output<string>;
    /**
     * The ID of the client gateway.
     */
    public readonly clientGatewayId!: pulumi.Output<string>;
    /**
     * The type of VPN connection (only `ipsec.1` is supported).
     */
    public readonly connectionType!: pulumi.Output<string>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    /**
     * Information about one or more static routes associated with the VPN connection, if any.
     */
    public /*out*/ readonly routes!: pulumi.Output<outputs.VpnConnectionRoute[]>;
    /**
     * The state of the IPSEC tunnel (`UP` \| `DOWN`).
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
     */
    public readonly staticRoutesOnly!: pulumi.Output<boolean | undefined>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    public readonly tags!: pulumi.Output<outputs.VpnConnectionTag[] | undefined>;
    /**
     * Information about the current state of one or more of the VPN tunnels.
     */
    public /*out*/ readonly vgwTelemetries!: pulumi.Output<outputs.VpnConnectionVgwTelemetry[]>;
    /**
     * The ID of the virtual gateway.
     */
    public readonly virtualGatewayId!: pulumi.Output<string>;
    /**
     * The ID of the VPN connection.
     */
    public /*out*/ readonly vpnConnectionId!: pulumi.Output<string>;

    /**
     * Create a VpnConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnConnectionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnConnectionArgs | VpnConnectionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnConnectionState | undefined;
            resourceInputs["clientGatewayConfiguration"] = state ? state.clientGatewayConfiguration : undefined;
            resourceInputs["clientGatewayId"] = state ? state.clientGatewayId : undefined;
            resourceInputs["connectionType"] = state ? state.connectionType : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["routes"] = state ? state.routes : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["staticRoutesOnly"] = state ? state.staticRoutesOnly : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["vgwTelemetries"] = state ? state.vgwTelemetries : undefined;
            resourceInputs["virtualGatewayId"] = state ? state.virtualGatewayId : undefined;
            resourceInputs["vpnConnectionId"] = state ? state.vpnConnectionId : undefined;
        } else {
            const args = argsOrState as VpnConnectionArgs | undefined;
            if ((!args || args.clientGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientGatewayId'");
            }
            if ((!args || args.connectionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionType'");
            }
            if ((!args || args.virtualGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualGatewayId'");
            }
            resourceInputs["clientGatewayId"] = args ? args.clientGatewayId : undefined;
            resourceInputs["connectionType"] = args ? args.connectionType : undefined;
            resourceInputs["staticRoutesOnly"] = args ? args.staticRoutesOnly : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["virtualGatewayId"] = args ? args.virtualGatewayId : undefined;
            resourceInputs["clientGatewayConfiguration"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["routes"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["vgwTelemetries"] = undefined /*out*/;
            resourceInputs["vpnConnectionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnConnection.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnConnection resources.
 */
export interface VpnConnectionState {
    /**
     * Example configuration for the client gateway.
     */
    clientGatewayConfiguration?: pulumi.Input<string>;
    /**
     * The ID of the client gateway.
     */
    clientGatewayId?: pulumi.Input<string>;
    /**
     * The type of VPN connection (only `ipsec.1` is supported).
     */
    connectionType?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    /**
     * Information about one or more static routes associated with the VPN connection, if any.
     */
    routes?: pulumi.Input<pulumi.Input<inputs.VpnConnectionRoute>[]>;
    /**
     * The state of the IPSEC tunnel (`UP` \| `DOWN`).
     */
    state?: pulumi.Input<string>;
    /**
     * If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
     */
    staticRoutesOnly?: pulumi.Input<boolean>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.VpnConnectionTag>[]>;
    /**
     * Information about the current state of one or more of the VPN tunnels.
     */
    vgwTelemetries?: pulumi.Input<pulumi.Input<inputs.VpnConnectionVgwTelemetry>[]>;
    /**
     * The ID of the virtual gateway.
     */
    virtualGatewayId?: pulumi.Input<string>;
    /**
     * The ID of the VPN connection.
     */
    vpnConnectionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnConnection resource.
 */
export interface VpnConnectionArgs {
    /**
     * The ID of the client gateway.
     */
    clientGatewayId: pulumi.Input<string>;
    /**
     * The type of VPN connection (only `ipsec.1` is supported).
     */
    connectionType: pulumi.Input<string>;
    /**
     * If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
     */
    staticRoutesOnly?: pulumi.Input<boolean>;
    /**
     * A tag to add to this resource. You can specify this argument several times.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.VpnConnectionTag>[]>;
    /**
     * The ID of the virtual gateway.
     */
    virtualGatewayId: pulumi.Input<string>;
}
