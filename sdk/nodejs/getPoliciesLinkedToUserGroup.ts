// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides information about a link policy to user group.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Policies.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#readmanagedpolicieslinkedtousergroup).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const managedPoliciesLinkedToUserGroup = outscale.getPoliciesLinkedToUserGroup({
 *     userGroupName: "user_group_name",
 *     filters: [
 *         {
 *             name: "user_group_ids",
 *             values: [
 *                 "XXXXXXX",
 *                 "YYYYYY",
 *             ],
 *         },
 *         {
 *             name: "path_prefix",
 *             values: ["/test/"],
 *         },
 *     ],
 * });
 * ```
 */
export function getPoliciesLinkedToUserGroup(args: GetPoliciesLinkedToUserGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetPoliciesLinkedToUserGroupResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("outscale:index/getPoliciesLinkedToUserGroup:getPoliciesLinkedToUserGroup", {
        "filters": args.filters,
        "userGroupName": args.userGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getPoliciesLinkedToUserGroup.
 */
export interface GetPoliciesLinkedToUserGroupArgs {
    filters?: inputs.GetPoliciesLinkedToUserGroupFilter[];
    /**
     * The name of the group.
     */
    userGroupName: string;
}

/**
 * A collection of values returned by getPoliciesLinkedToUserGroup.
 */
export interface GetPoliciesLinkedToUserGroupResult {
    readonly filters?: outputs.GetPoliciesLinkedToUserGroupFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly policies: outputs.GetPoliciesLinkedToUserGroupPolicy[];
    readonly userGroupName: string;
}
/**
 * Provides information about a link policy to user group.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Policies.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#readmanagedpolicieslinkedtousergroup).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const managedPoliciesLinkedToUserGroup = outscale.getPoliciesLinkedToUserGroup({
 *     userGroupName: "user_group_name",
 *     filters: [
 *         {
 *             name: "user_group_ids",
 *             values: [
 *                 "XXXXXXX",
 *                 "YYYYYY",
 *             ],
 *         },
 *         {
 *             name: "path_prefix",
 *             values: ["/test/"],
 *         },
 *     ],
 * });
 * ```
 */
export function getPoliciesLinkedToUserGroupOutput(args: GetPoliciesLinkedToUserGroupOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetPoliciesLinkedToUserGroupResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("outscale:index/getPoliciesLinkedToUserGroup:getPoliciesLinkedToUserGroup", {
        "filters": args.filters,
        "userGroupName": args.userGroupName,
    }, opts);
}

/**
 * A collection of arguments for invoking getPoliciesLinkedToUserGroup.
 */
export interface GetPoliciesLinkedToUserGroupOutputArgs {
    filters?: pulumi.Input<pulumi.Input<inputs.GetPoliciesLinkedToUserGroupFilterArgs>[]>;
    /**
     * The name of the group.
     */
    userGroupName: pulumi.Input<string>;
}
