// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides information about a virtual gateway.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Virtual-Gateways.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-virtualgateway).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const virtualGateway01 = outscale.getVirtualGateway({
 *     filters: [{
 *         name: "virtual_gateway_ids",
 *         values: ["vgw-12345678"],
 *     }],
 * });
 * ```
 */
export function getVirtualGateway(args?: GetVirtualGatewayArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualGatewayResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("outscale:index/getVirtualGateway:getVirtualGateway", {
        "connectionType": args.connectionType,
        "filters": args.filters,
        "state": args.state,
        "virtualGatewayId": args.virtualGatewayId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualGateway.
 */
export interface GetVirtualGatewayArgs {
    /**
     * The type of VPN connection supported by the virtual gateway (always `ipsec.1`).
     */
    connectionType?: string;
    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     */
    filters?: inputs.GetVirtualGatewayFilter[];
    /**
     * The state of the virtual gateway (`pending` \| `available` \| `deleting` \| `deleted`).
     */
    state?: string;
    /**
     * The ID of the virtual gateway.
     */
    virtualGatewayId?: string;
}

/**
 * A collection of values returned by getVirtualGateway.
 */
export interface GetVirtualGatewayResult {
    /**
     * The type of VPN connection supported by the virtual gateway (always `ipsec.1`).
     */
    readonly connectionType: string;
    readonly filters?: outputs.GetVirtualGatewayFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The Net to which the virtual gateway is attached.
     */
    readonly netToVirtualGatewayLinks: outputs.GetVirtualGatewayNetToVirtualGatewayLink[];
    readonly requestId: string;
    /**
     * The state of the virtual gateway (`pending` \| `available` \| `deleting` \| `deleted`).
     */
    readonly state: string;
    /**
     * One or more tags associated with the virtual gateway.
     */
    readonly tags: outputs.GetVirtualGatewayTag[];
    /**
     * The ID of the virtual gateway.
     */
    readonly virtualGatewayId: string;
}
/**
 * Provides information about a virtual gateway.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Virtual-Gateways.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-virtualgateway).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const virtualGateway01 = outscale.getVirtualGateway({
 *     filters: [{
 *         name: "virtual_gateway_ids",
 *         values: ["vgw-12345678"],
 *     }],
 * });
 * ```
 */
export function getVirtualGatewayOutput(args?: GetVirtualGatewayOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetVirtualGatewayResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("outscale:index/getVirtualGateway:getVirtualGateway", {
        "connectionType": args.connectionType,
        "filters": args.filters,
        "state": args.state,
        "virtualGatewayId": args.virtualGatewayId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualGateway.
 */
export interface GetVirtualGatewayOutputArgs {
    /**
     * The type of VPN connection supported by the virtual gateway (always `ipsec.1`).
     */
    connectionType?: pulumi.Input<string>;
    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     */
    filters?: pulumi.Input<pulumi.Input<inputs.GetVirtualGatewayFilterArgs>[]>;
    /**
     * The state of the virtual gateway (`pending` \| `available` \| `deleting` \| `deleted`).
     */
    state?: pulumi.Input<string>;
    /**
     * The ID of the virtual gateway.
     */
    virtualGatewayId?: pulumi.Input<string>;
}
