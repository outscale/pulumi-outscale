// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Route extends pulumi.CustomResource {
    /**
     * Get an existing Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteState, opts?: pulumi.CustomResourceOptions): Route {
        return new Route(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/route:Route';

    /**
     * Returns true if the given object is an instance of Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Route {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route.__pulumiType;
    }

    public readonly awaitActiveState!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly creationMethod!: pulumi.Output<string>;
    public readonly destinationIpRange!: pulumi.Output<string>;
    public /*out*/ readonly destinationServiceId!: pulumi.Output<string>;
    public readonly gatewayId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly natAccessPoint!: pulumi.Output<string>;
    public readonly natServiceId!: pulumi.Output<string | undefined>;
    public readonly netPeeringId!: pulumi.Output<string | undefined>;
    public readonly nicId!: pulumi.Output<string>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    public readonly routeTableId!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly vmAccountId!: pulumi.Output<string>;
    public readonly vmId!: pulumi.Output<string>;

    /**
     * Create a Route resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteArgs | RouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteState | undefined;
            resourceInputs["awaitActiveState"] = state ? state.awaitActiveState : undefined;
            resourceInputs["creationMethod"] = state ? state.creationMethod : undefined;
            resourceInputs["destinationIpRange"] = state ? state.destinationIpRange : undefined;
            resourceInputs["destinationServiceId"] = state ? state.destinationServiceId : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["natAccessPoint"] = state ? state.natAccessPoint : undefined;
            resourceInputs["natServiceId"] = state ? state.natServiceId : undefined;
            resourceInputs["netPeeringId"] = state ? state.netPeeringId : undefined;
            resourceInputs["nicId"] = state ? state.nicId : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["routeTableId"] = state ? state.routeTableId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["vmAccountId"] = state ? state.vmAccountId : undefined;
            resourceInputs["vmId"] = state ? state.vmId : undefined;
        } else {
            const args = argsOrState as RouteArgs | undefined;
            if ((!args || args.destinationIpRange === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationIpRange'");
            }
            if ((!args || args.routeTableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeTableId'");
            }
            resourceInputs["awaitActiveState"] = args ? args.awaitActiveState : undefined;
            resourceInputs["destinationIpRange"] = args ? args.destinationIpRange : undefined;
            resourceInputs["gatewayId"] = args ? args.gatewayId : undefined;
            resourceInputs["natServiceId"] = args ? args.natServiceId : undefined;
            resourceInputs["netPeeringId"] = args ? args.netPeeringId : undefined;
            resourceInputs["nicId"] = args ? args.nicId : undefined;
            resourceInputs["routeTableId"] = args ? args.routeTableId : undefined;
            resourceInputs["vmId"] = args ? args.vmId : undefined;
            resourceInputs["creationMethod"] = undefined /*out*/;
            resourceInputs["destinationServiceId"] = undefined /*out*/;
            resourceInputs["natAccessPoint"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["vmAccountId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Route.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Route resources.
 */
export interface RouteState {
    awaitActiveState?: pulumi.Input<boolean>;
    creationMethod?: pulumi.Input<string>;
    destinationIpRange?: pulumi.Input<string>;
    destinationServiceId?: pulumi.Input<string>;
    gatewayId?: pulumi.Input<string>;
    natAccessPoint?: pulumi.Input<string>;
    natServiceId?: pulumi.Input<string>;
    netPeeringId?: pulumi.Input<string>;
    nicId?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    routeTableId?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    vmAccountId?: pulumi.Input<string>;
    vmId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Route resource.
 */
export interface RouteArgs {
    awaitActiveState?: pulumi.Input<boolean>;
    destinationIpRange: pulumi.Input<string>;
    gatewayId?: pulumi.Input<string>;
    natServiceId?: pulumi.Input<string>;
    netPeeringId?: pulumi.Input<string>;
    nicId?: pulumi.Input<string>;
    routeTableId: pulumi.Input<string>;
    vmId?: pulumi.Input<string>;
}
