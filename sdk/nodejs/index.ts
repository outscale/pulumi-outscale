// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessKeyArgs, AccessKeyState } from "./accessKey";
export type AccessKey = import("./accessKey").AccessKey;
export const AccessKey: typeof import("./accessKey").AccessKey = null as any;
utilities.lazyLoad(exports, ["AccessKey"], () => require("./accessKey"));

export { ApiAccessPolicyArgs, ApiAccessPolicyState } from "./apiAccessPolicy";
export type ApiAccessPolicy = import("./apiAccessPolicy").ApiAccessPolicy;
export const ApiAccessPolicy: typeof import("./apiAccessPolicy").ApiAccessPolicy = null as any;
utilities.lazyLoad(exports, ["ApiAccessPolicy"], () => require("./apiAccessPolicy"));

export { ApiAccessRuleArgs, ApiAccessRuleState } from "./apiAccessRule";
export type ApiAccessRule = import("./apiAccessRule").ApiAccessRule;
export const ApiAccessRule: typeof import("./apiAccessRule").ApiAccessRule = null as any;
utilities.lazyLoad(exports, ["ApiAccessRule"], () => require("./apiAccessRule"));

export { CaArgs, CaState } from "./ca";
export type Ca = import("./ca").Ca;
export const Ca: typeof import("./ca").Ca = null as any;
utilities.lazyLoad(exports, ["Ca"], () => require("./ca"));

export { ClientGatewayArgs, ClientGatewayState } from "./clientGateway";
export type ClientGateway = import("./clientGateway").ClientGateway;
export const ClientGateway: typeof import("./clientGateway").ClientGateway = null as any;
utilities.lazyLoad(exports, ["ClientGateway"], () => require("./clientGateway"));

export { DhcpOptionArgs, DhcpOptionState } from "./dhcpOption";
export type DhcpOption = import("./dhcpOption").DhcpOption;
export const DhcpOption: typeof import("./dhcpOption").DhcpOption = null as any;
utilities.lazyLoad(exports, ["DhcpOption"], () => require("./dhcpOption"));

export { FlexibleGpuArgs, FlexibleGpuState } from "./flexibleGpu";
export type FlexibleGpu = import("./flexibleGpu").FlexibleGpu;
export const FlexibleGpu: typeof import("./flexibleGpu").FlexibleGpu = null as any;
utilities.lazyLoad(exports, ["FlexibleGpu"], () => require("./flexibleGpu"));

export { FlexibleGpuLinkArgs, FlexibleGpuLinkState } from "./flexibleGpuLink";
export type FlexibleGpuLink = import("./flexibleGpuLink").FlexibleGpuLink;
export const FlexibleGpuLink: typeof import("./flexibleGpuLink").FlexibleGpuLink = null as any;
utilities.lazyLoad(exports, ["FlexibleGpuLink"], () => require("./flexibleGpuLink"));

export { GetAccessKeyArgs, GetAccessKeyResult, GetAccessKeyOutputArgs } from "./getAccessKey";
export const getAccessKey: typeof import("./getAccessKey").getAccessKey = null as any;
export const getAccessKeyOutput: typeof import("./getAccessKey").getAccessKeyOutput = null as any;
utilities.lazyLoad(exports, ["getAccessKey","getAccessKeyOutput"], () => require("./getAccessKey"));

export { GetAccessKeysArgs, GetAccessKeysResult, GetAccessKeysOutputArgs } from "./getAccessKeys";
export const getAccessKeys: typeof import("./getAccessKeys").getAccessKeys = null as any;
export const getAccessKeysOutput: typeof import("./getAccessKeys").getAccessKeysOutput = null as any;
utilities.lazyLoad(exports, ["getAccessKeys","getAccessKeysOutput"], () => require("./getAccessKeys"));

export { GetAccountResult } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
export const getAccountOutput: typeof import("./getAccount").getAccountOutput = null as any;
utilities.lazyLoad(exports, ["getAccount","getAccountOutput"], () => require("./getAccount"));

export { GetAccountsResult } from "./getAccounts";
export const getAccounts: typeof import("./getAccounts").getAccounts = null as any;
export const getAccountsOutput: typeof import("./getAccounts").getAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getAccounts","getAccountsOutput"], () => require("./getAccounts"));

export { GetApiAccessPolicyResult } from "./getApiAccessPolicy";
export const getApiAccessPolicy: typeof import("./getApiAccessPolicy").getApiAccessPolicy = null as any;
export const getApiAccessPolicyOutput: typeof import("./getApiAccessPolicy").getApiAccessPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApiAccessPolicy","getApiAccessPolicyOutput"], () => require("./getApiAccessPolicy"));

export { GetApiAccessRuleArgs, GetApiAccessRuleResult, GetApiAccessRuleOutputArgs } from "./getApiAccessRule";
export const getApiAccessRule: typeof import("./getApiAccessRule").getApiAccessRule = null as any;
export const getApiAccessRuleOutput: typeof import("./getApiAccessRule").getApiAccessRuleOutput = null as any;
utilities.lazyLoad(exports, ["getApiAccessRule","getApiAccessRuleOutput"], () => require("./getApiAccessRule"));

export { GetApiAccessRulesArgs, GetApiAccessRulesResult, GetApiAccessRulesOutputArgs } from "./getApiAccessRules";
export const getApiAccessRules: typeof import("./getApiAccessRules").getApiAccessRules = null as any;
export const getApiAccessRulesOutput: typeof import("./getApiAccessRules").getApiAccessRulesOutput = null as any;
utilities.lazyLoad(exports, ["getApiAccessRules","getApiAccessRulesOutput"], () => require("./getApiAccessRules"));

export { GetCaArgs, GetCaResult, GetCaOutputArgs } from "./getCa";
export const getCa: typeof import("./getCa").getCa = null as any;
export const getCaOutput: typeof import("./getCa").getCaOutput = null as any;
utilities.lazyLoad(exports, ["getCa","getCaOutput"], () => require("./getCa"));

export { GetCasArgs, GetCasResult, GetCasOutputArgs } from "./getCas";
export const getCas: typeof import("./getCas").getCas = null as any;
export const getCasOutput: typeof import("./getCas").getCasOutput = null as any;
utilities.lazyLoad(exports, ["getCas","getCasOutput"], () => require("./getCas"));

export { GetClientGatewayArgs, GetClientGatewayResult, GetClientGatewayOutputArgs } from "./getClientGateway";
export const getClientGateway: typeof import("./getClientGateway").getClientGateway = null as any;
export const getClientGatewayOutput: typeof import("./getClientGateway").getClientGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getClientGateway","getClientGatewayOutput"], () => require("./getClientGateway"));

export { GetClientGatewaysArgs, GetClientGatewaysResult, GetClientGatewaysOutputArgs } from "./getClientGateways";
export const getClientGateways: typeof import("./getClientGateways").getClientGateways = null as any;
export const getClientGatewaysOutput: typeof import("./getClientGateways").getClientGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getClientGateways","getClientGatewaysOutput"], () => require("./getClientGateways"));

export { GetDhcpOptionArgs, GetDhcpOptionResult, GetDhcpOptionOutputArgs } from "./getDhcpOption";
export const getDhcpOption: typeof import("./getDhcpOption").getDhcpOption = null as any;
export const getDhcpOptionOutput: typeof import("./getDhcpOption").getDhcpOptionOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpOption","getDhcpOptionOutput"], () => require("./getDhcpOption"));

export { GetDhcpOptionsArgs, GetDhcpOptionsResult, GetDhcpOptionsOutputArgs } from "./getDhcpOptions";
export const getDhcpOptions: typeof import("./getDhcpOptions").getDhcpOptions = null as any;
export const getDhcpOptionsOutput: typeof import("./getDhcpOptions").getDhcpOptionsOutput = null as any;
utilities.lazyLoad(exports, ["getDhcpOptions","getDhcpOptionsOutput"], () => require("./getDhcpOptions"));

export { GetFlexibleGpuArgs, GetFlexibleGpuResult, GetFlexibleGpuOutputArgs } from "./getFlexibleGpu";
export const getFlexibleGpu: typeof import("./getFlexibleGpu").getFlexibleGpu = null as any;
export const getFlexibleGpuOutput: typeof import("./getFlexibleGpu").getFlexibleGpuOutput = null as any;
utilities.lazyLoad(exports, ["getFlexibleGpu","getFlexibleGpuOutput"], () => require("./getFlexibleGpu"));

export { GetFlexibleGpuCatalogArgs, GetFlexibleGpuCatalogResult, GetFlexibleGpuCatalogOutputArgs } from "./getFlexibleGpuCatalog";
export const getFlexibleGpuCatalog: typeof import("./getFlexibleGpuCatalog").getFlexibleGpuCatalog = null as any;
export const getFlexibleGpuCatalogOutput: typeof import("./getFlexibleGpuCatalog").getFlexibleGpuCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getFlexibleGpuCatalog","getFlexibleGpuCatalogOutput"], () => require("./getFlexibleGpuCatalog"));

export { GetFlexibleGpusArgs, GetFlexibleGpusResult, GetFlexibleGpusOutputArgs } from "./getFlexibleGpus";
export const getFlexibleGpus: typeof import("./getFlexibleGpus").getFlexibleGpus = null as any;
export const getFlexibleGpusOutput: typeof import("./getFlexibleGpus").getFlexibleGpusOutput = null as any;
utilities.lazyLoad(exports, ["getFlexibleGpus","getFlexibleGpusOutput"], () => require("./getFlexibleGpus"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetImageExportTaskArgs, GetImageExportTaskResult, GetImageExportTaskOutputArgs } from "./getImageExportTask";
export const getImageExportTask: typeof import("./getImageExportTask").getImageExportTask = null as any;
export const getImageExportTaskOutput: typeof import("./getImageExportTask").getImageExportTaskOutput = null as any;
utilities.lazyLoad(exports, ["getImageExportTask","getImageExportTaskOutput"], () => require("./getImageExportTask"));

export { GetImageExportTasksArgs, GetImageExportTasksResult, GetImageExportTasksOutputArgs } from "./getImageExportTasks";
export const getImageExportTasks: typeof import("./getImageExportTasks").getImageExportTasks = null as any;
export const getImageExportTasksOutput: typeof import("./getImageExportTasks").getImageExportTasksOutput = null as any;
utilities.lazyLoad(exports, ["getImageExportTasks","getImageExportTasksOutput"], () => require("./getImageExportTasks"));

export { GetImagesArgs, GetImagesResult, GetImagesOutputArgs } from "./getImages";
export const getImages: typeof import("./getImages").getImages = null as any;
export const getImagesOutput: typeof import("./getImages").getImagesOutput = null as any;
utilities.lazyLoad(exports, ["getImages","getImagesOutput"], () => require("./getImages"));

export { GetInternetServiceArgs, GetInternetServiceResult, GetInternetServiceOutputArgs } from "./getInternetService";
export const getInternetService: typeof import("./getInternetService").getInternetService = null as any;
export const getInternetServiceOutput: typeof import("./getInternetService").getInternetServiceOutput = null as any;
utilities.lazyLoad(exports, ["getInternetService","getInternetServiceOutput"], () => require("./getInternetService"));

export { GetInternetServicesArgs, GetInternetServicesResult, GetInternetServicesOutputArgs } from "./getInternetServices";
export const getInternetServices: typeof import("./getInternetServices").getInternetServices = null as any;
export const getInternetServicesOutput: typeof import("./getInternetServices").getInternetServicesOutput = null as any;
utilities.lazyLoad(exports, ["getInternetServices","getInternetServicesOutput"], () => require("./getInternetServices"));

export { GetKeypairArgs, GetKeypairResult, GetKeypairOutputArgs } from "./getKeypair";
export const getKeypair: typeof import("./getKeypair").getKeypair = null as any;
export const getKeypairOutput: typeof import("./getKeypair").getKeypairOutput = null as any;
utilities.lazyLoad(exports, ["getKeypair","getKeypairOutput"], () => require("./getKeypair"));

export { GetKeypairsArgs, GetKeypairsResult, GetKeypairsOutputArgs } from "./getKeypairs";
export const getKeypairs: typeof import("./getKeypairs").getKeypairs = null as any;
export const getKeypairsOutput: typeof import("./getKeypairs").getKeypairsOutput = null as any;
utilities.lazyLoad(exports, ["getKeypairs","getKeypairsOutput"], () => require("./getKeypairs"));

export { GetLoadBalancerArgs, GetLoadBalancerResult, GetLoadBalancerOutputArgs } from "./getLoadBalancer";
export const getLoadBalancer: typeof import("./getLoadBalancer").getLoadBalancer = null as any;
export const getLoadBalancerOutput: typeof import("./getLoadBalancer").getLoadBalancerOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancer","getLoadBalancerOutput"], () => require("./getLoadBalancer"));

export { GetLoadBalancerTagsArgs, GetLoadBalancerTagsResult, GetLoadBalancerTagsOutputArgs } from "./getLoadBalancerTags";
export const getLoadBalancerTags: typeof import("./getLoadBalancerTags").getLoadBalancerTags = null as any;
export const getLoadBalancerTagsOutput: typeof import("./getLoadBalancerTags").getLoadBalancerTagsOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerTags","getLoadBalancerTagsOutput"], () => require("./getLoadBalancerTags"));

export { GetLoadBalancerVmHealthArgs, GetLoadBalancerVmHealthResult, GetLoadBalancerVmHealthOutputArgs } from "./getLoadBalancerVmHealth";
export const getLoadBalancerVmHealth: typeof import("./getLoadBalancerVmHealth").getLoadBalancerVmHealth = null as any;
export const getLoadBalancerVmHealthOutput: typeof import("./getLoadBalancerVmHealth").getLoadBalancerVmHealthOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancerVmHealth","getLoadBalancerVmHealthOutput"], () => require("./getLoadBalancerVmHealth"));

export { GetLoadBalancersArgs, GetLoadBalancersResult, GetLoadBalancersOutputArgs } from "./getLoadBalancers";
export const getLoadBalancers: typeof import("./getLoadBalancers").getLoadBalancers = null as any;
export const getLoadBalancersOutput: typeof import("./getLoadBalancers").getLoadBalancersOutput = null as any;
utilities.lazyLoad(exports, ["getLoadBalancers","getLoadBalancersOutput"], () => require("./getLoadBalancers"));

export { GetNatServiceArgs, GetNatServiceResult, GetNatServiceOutputArgs } from "./getNatService";
export const getNatService: typeof import("./getNatService").getNatService = null as any;
export const getNatServiceOutput: typeof import("./getNatService").getNatServiceOutput = null as any;
utilities.lazyLoad(exports, ["getNatService","getNatServiceOutput"], () => require("./getNatService"));

export { GetNatServicesArgs, GetNatServicesResult, GetNatServicesOutputArgs } from "./getNatServices";
export const getNatServices: typeof import("./getNatServices").getNatServices = null as any;
export const getNatServicesOutput: typeof import("./getNatServices").getNatServicesOutput = null as any;
utilities.lazyLoad(exports, ["getNatServices","getNatServicesOutput"], () => require("./getNatServices"));

export { GetNetArgs, GetNetResult, GetNetOutputArgs } from "./getNet";
export const getNet: typeof import("./getNet").getNet = null as any;
export const getNetOutput: typeof import("./getNet").getNetOutput = null as any;
utilities.lazyLoad(exports, ["getNet","getNetOutput"], () => require("./getNet"));

export { GetNetAccessPointArgs, GetNetAccessPointResult, GetNetAccessPointOutputArgs } from "./getNetAccessPoint";
export const getNetAccessPoint: typeof import("./getNetAccessPoint").getNetAccessPoint = null as any;
export const getNetAccessPointOutput: typeof import("./getNetAccessPoint").getNetAccessPointOutput = null as any;
utilities.lazyLoad(exports, ["getNetAccessPoint","getNetAccessPointOutput"], () => require("./getNetAccessPoint"));

export { GetNetAccessPointServicesArgs, GetNetAccessPointServicesResult, GetNetAccessPointServicesOutputArgs } from "./getNetAccessPointServices";
export const getNetAccessPointServices: typeof import("./getNetAccessPointServices").getNetAccessPointServices = null as any;
export const getNetAccessPointServicesOutput: typeof import("./getNetAccessPointServices").getNetAccessPointServicesOutput = null as any;
utilities.lazyLoad(exports, ["getNetAccessPointServices","getNetAccessPointServicesOutput"], () => require("./getNetAccessPointServices"));

export { GetNetAccessPointsArgs, GetNetAccessPointsResult, GetNetAccessPointsOutputArgs } from "./getNetAccessPoints";
export const getNetAccessPoints: typeof import("./getNetAccessPoints").getNetAccessPoints = null as any;
export const getNetAccessPointsOutput: typeof import("./getNetAccessPoints").getNetAccessPointsOutput = null as any;
utilities.lazyLoad(exports, ["getNetAccessPoints","getNetAccessPointsOutput"], () => require("./getNetAccessPoints"));

export { GetNetAttributesArgs, GetNetAttributesResult, GetNetAttributesOutputArgs } from "./getNetAttributes";
export const getNetAttributes: typeof import("./getNetAttributes").getNetAttributes = null as any;
export const getNetAttributesOutput: typeof import("./getNetAttributes").getNetAttributesOutput = null as any;
utilities.lazyLoad(exports, ["getNetAttributes","getNetAttributesOutput"], () => require("./getNetAttributes"));

export { GetNetPeeringArgs, GetNetPeeringResult, GetNetPeeringOutputArgs } from "./getNetPeering";
export const getNetPeering: typeof import("./getNetPeering").getNetPeering = null as any;
export const getNetPeeringOutput: typeof import("./getNetPeering").getNetPeeringOutput = null as any;
utilities.lazyLoad(exports, ["getNetPeering","getNetPeeringOutput"], () => require("./getNetPeering"));

export { GetNetPeeringsArgs, GetNetPeeringsResult, GetNetPeeringsOutputArgs } from "./getNetPeerings";
export const getNetPeerings: typeof import("./getNetPeerings").getNetPeerings = null as any;
export const getNetPeeringsOutput: typeof import("./getNetPeerings").getNetPeeringsOutput = null as any;
utilities.lazyLoad(exports, ["getNetPeerings","getNetPeeringsOutput"], () => require("./getNetPeerings"));

export { GetNetsArgs, GetNetsResult, GetNetsOutputArgs } from "./getNets";
export const getNets: typeof import("./getNets").getNets = null as any;
export const getNetsOutput: typeof import("./getNets").getNetsOutput = null as any;
utilities.lazyLoad(exports, ["getNets","getNetsOutput"], () => require("./getNets"));

export { GetNicArgs, GetNicResult, GetNicOutputArgs } from "./getNic";
export const getNic: typeof import("./getNic").getNic = null as any;
export const getNicOutput: typeof import("./getNic").getNicOutput = null as any;
utilities.lazyLoad(exports, ["getNic","getNicOutput"], () => require("./getNic"));

export { GetNicsArgs, GetNicsResult, GetNicsOutputArgs } from "./getNics";
export const getNics: typeof import("./getNics").getNics = null as any;
export const getNicsOutput: typeof import("./getNics").getNicsOutput = null as any;
utilities.lazyLoad(exports, ["getNics","getNicsOutput"], () => require("./getNics"));

export { GetProductTypeArgs, GetProductTypeResult, GetProductTypeOutputArgs } from "./getProductType";
export const getProductType: typeof import("./getProductType").getProductType = null as any;
export const getProductTypeOutput: typeof import("./getProductType").getProductTypeOutput = null as any;
utilities.lazyLoad(exports, ["getProductType","getProductTypeOutput"], () => require("./getProductType"));

export { GetProductTypesArgs, GetProductTypesResult, GetProductTypesOutputArgs } from "./getProductTypes";
export const getProductTypes: typeof import("./getProductTypes").getProductTypes = null as any;
export const getProductTypesOutput: typeof import("./getProductTypes").getProductTypesOutput = null as any;
utilities.lazyLoad(exports, ["getProductTypes","getProductTypesOutput"], () => require("./getProductTypes"));

export { GetPublicIpArgs, GetPublicIpResult, GetPublicIpOutputArgs } from "./getPublicIp";
export const getPublicIp: typeof import("./getPublicIp").getPublicIp = null as any;
export const getPublicIpOutput: typeof import("./getPublicIp").getPublicIpOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIp","getPublicIpOutput"], () => require("./getPublicIp"));

export { GetPublicIpsArgs, GetPublicIpsResult, GetPublicIpsOutputArgs } from "./getPublicIps";
export const getPublicIps: typeof import("./getPublicIps").getPublicIps = null as any;
export const getPublicIpsOutput: typeof import("./getPublicIps").getPublicIpsOutput = null as any;
utilities.lazyLoad(exports, ["getPublicIps","getPublicIpsOutput"], () => require("./getPublicIps"));

export { GetPulicCatalogResult } from "./getPulicCatalog";
export const getPulicCatalog: typeof import("./getPulicCatalog").getPulicCatalog = null as any;
export const getPulicCatalogOutput: typeof import("./getPulicCatalog").getPulicCatalogOutput = null as any;
utilities.lazyLoad(exports, ["getPulicCatalog","getPulicCatalogOutput"], () => require("./getPulicCatalog"));

export { GetQuotaArgs, GetQuotaResult, GetQuotaOutputArgs } from "./getQuota";
export const getQuota: typeof import("./getQuota").getQuota = null as any;
export const getQuotaOutput: typeof import("./getQuota").getQuotaOutput = null as any;
utilities.lazyLoad(exports, ["getQuota","getQuotaOutput"], () => require("./getQuota"));

export { GetQuotasArgs, GetQuotasResult, GetQuotasOutputArgs } from "./getQuotas";
export const getQuotas: typeof import("./getQuotas").getQuotas = null as any;
export const getQuotasOutput: typeof import("./getQuotas").getQuotasOutput = null as any;
utilities.lazyLoad(exports, ["getQuotas","getQuotasOutput"], () => require("./getQuotas"));

export { GetRegionsResult } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetRouteTableArgs, GetRouteTableResult, GetRouteTableOutputArgs } from "./getRouteTable";
export const getRouteTable: typeof import("./getRouteTable").getRouteTable = null as any;
export const getRouteTableOutput: typeof import("./getRouteTable").getRouteTableOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTable","getRouteTableOutput"], () => require("./getRouteTable"));

export { GetRouteTablesArgs, GetRouteTablesResult, GetRouteTablesOutputArgs } from "./getRouteTables";
export const getRouteTables: typeof import("./getRouteTables").getRouteTables = null as any;
export const getRouteTablesOutput: typeof import("./getRouteTables").getRouteTablesOutput = null as any;
utilities.lazyLoad(exports, ["getRouteTables","getRouteTablesOutput"], () => require("./getRouteTables"));

export { GetSecurityGroupArgs, GetSecurityGroupResult, GetSecurityGroupOutputArgs } from "./getSecurityGroup";
export const getSecurityGroup: typeof import("./getSecurityGroup").getSecurityGroup = null as any;
export const getSecurityGroupOutput: typeof import("./getSecurityGroup").getSecurityGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroup","getSecurityGroupOutput"], () => require("./getSecurityGroup"));

export { GetSecurityGroupsArgs, GetSecurityGroupsResult, GetSecurityGroupsOutputArgs } from "./getSecurityGroups";
export const getSecurityGroups: typeof import("./getSecurityGroups").getSecurityGroups = null as any;
export const getSecurityGroupsOutput: typeof import("./getSecurityGroups").getSecurityGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityGroups","getSecurityGroupsOutput"], () => require("./getSecurityGroups"));

export { GetServerCertificateArgs, GetServerCertificateResult, GetServerCertificateOutputArgs } from "./getServerCertificate";
export const getServerCertificate: typeof import("./getServerCertificate").getServerCertificate = null as any;
export const getServerCertificateOutput: typeof import("./getServerCertificate").getServerCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getServerCertificate","getServerCertificateOutput"], () => require("./getServerCertificate"));

export { GetServerCertificatesArgs, GetServerCertificatesResult, GetServerCertificatesOutputArgs } from "./getServerCertificates";
export const getServerCertificates: typeof import("./getServerCertificates").getServerCertificates = null as any;
export const getServerCertificatesOutput: typeof import("./getServerCertificates").getServerCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getServerCertificates","getServerCertificatesOutput"], () => require("./getServerCertificates"));

export { GetSnapshotArgs, GetSnapshotResult, GetSnapshotOutputArgs } from "./getSnapshot";
export const getSnapshot: typeof import("./getSnapshot").getSnapshot = null as any;
export const getSnapshotOutput: typeof import("./getSnapshot").getSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshot","getSnapshotOutput"], () => require("./getSnapshot"));

export { GetSnapshotExportTaskArgs, GetSnapshotExportTaskResult, GetSnapshotExportTaskOutputArgs } from "./getSnapshotExportTask";
export const getSnapshotExportTask: typeof import("./getSnapshotExportTask").getSnapshotExportTask = null as any;
export const getSnapshotExportTaskOutput: typeof import("./getSnapshotExportTask").getSnapshotExportTaskOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshotExportTask","getSnapshotExportTaskOutput"], () => require("./getSnapshotExportTask"));

export { GetSnapshotExportTasksArgs, GetSnapshotExportTasksResult, GetSnapshotExportTasksOutputArgs } from "./getSnapshotExportTasks";
export const getSnapshotExportTasks: typeof import("./getSnapshotExportTasks").getSnapshotExportTasks = null as any;
export const getSnapshotExportTasksOutput: typeof import("./getSnapshotExportTasks").getSnapshotExportTasksOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshotExportTasks","getSnapshotExportTasksOutput"], () => require("./getSnapshotExportTasks"));

export { GetSnapshotsArgs, GetSnapshotsResult, GetSnapshotsOutputArgs } from "./getSnapshots";
export const getSnapshots: typeof import("./getSnapshots").getSnapshots = null as any;
export const getSnapshotsOutput: typeof import("./getSnapshots").getSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getSnapshots","getSnapshotsOutput"], () => require("./getSnapshots"));

export { GetSubnetArgs, GetSubnetResult, GetSubnetOutputArgs } from "./getSubnet";
export const getSubnet: typeof import("./getSubnet").getSubnet = null as any;
export const getSubnetOutput: typeof import("./getSubnet").getSubnetOutput = null as any;
utilities.lazyLoad(exports, ["getSubnet","getSubnetOutput"], () => require("./getSubnet"));

export { GetSubnetsArgs, GetSubnetsResult, GetSubnetsOutputArgs } from "./getSubnets";
export const getSubnets: typeof import("./getSubnets").getSubnets = null as any;
export const getSubnetsOutput: typeof import("./getSubnets").getSubnetsOutput = null as any;
utilities.lazyLoad(exports, ["getSubnets","getSubnetsOutput"], () => require("./getSubnets"));

export { GetSubregionsArgs, GetSubregionsResult, GetSubregionsOutputArgs } from "./getSubregions";
export const getSubregions: typeof import("./getSubregions").getSubregions = null as any;
export const getSubregionsOutput: typeof import("./getSubregions").getSubregionsOutput = null as any;
utilities.lazyLoad(exports, ["getSubregions","getSubregionsOutput"], () => require("./getSubregions"));

export { GetTagArgs, GetTagResult, GetTagOutputArgs } from "./getTag";
export const getTag: typeof import("./getTag").getTag = null as any;
export const getTagOutput: typeof import("./getTag").getTagOutput = null as any;
utilities.lazyLoad(exports, ["getTag","getTagOutput"], () => require("./getTag"));

export { GetVirtualGatewayArgs, GetVirtualGatewayResult, GetVirtualGatewayOutputArgs } from "./getVirtualGateway";
export const getVirtualGateway: typeof import("./getVirtualGateway").getVirtualGateway = null as any;
export const getVirtualGatewayOutput: typeof import("./getVirtualGateway").getVirtualGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualGateway","getVirtualGatewayOutput"], () => require("./getVirtualGateway"));

export { GetVirtualGatewaysArgs, GetVirtualGatewaysResult, GetVirtualGatewaysOutputArgs } from "./getVirtualGateways";
export const getVirtualGateways: typeof import("./getVirtualGateways").getVirtualGateways = null as any;
export const getVirtualGatewaysOutput: typeof import("./getVirtualGateways").getVirtualGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualGateways","getVirtualGatewaysOutput"], () => require("./getVirtualGateways"));

export { GetVmArgs, GetVmResult, GetVmOutputArgs } from "./getVm";
export const getVm: typeof import("./getVm").getVm = null as any;
export const getVmOutput: typeof import("./getVm").getVmOutput = null as any;
utilities.lazyLoad(exports, ["getVm","getVmOutput"], () => require("./getVm"));

export { GetVmStateArgs, GetVmStateResult, GetVmStateOutputArgs } from "./getVmState";
export const getVmState: typeof import("./getVmState").getVmState = null as any;
export const getVmStateOutput: typeof import("./getVmState").getVmStateOutput = null as any;
utilities.lazyLoad(exports, ["getVmState","getVmStateOutput"], () => require("./getVmState"));

export { GetVmStatesArgs, GetVmStatesResult, GetVmStatesOutputArgs } from "./getVmStates";
export const getVmStates: typeof import("./getVmStates").getVmStates = null as any;
export const getVmStatesOutput: typeof import("./getVmStates").getVmStatesOutput = null as any;
utilities.lazyLoad(exports, ["getVmStates","getVmStatesOutput"], () => require("./getVmStates"));

export { GetVmTypesArgs, GetVmTypesResult, GetVmTypesOutputArgs } from "./getVmTypes";
export const getVmTypes: typeof import("./getVmTypes").getVmTypes = null as any;
export const getVmTypesOutput: typeof import("./getVmTypes").getVmTypesOutput = null as any;
utilities.lazyLoad(exports, ["getVmTypes","getVmTypesOutput"], () => require("./getVmTypes"));

export { GetVmsArgs, GetVmsResult, GetVmsOutputArgs } from "./getVms";
export const getVms: typeof import("./getVms").getVms = null as any;
export const getVmsOutput: typeof import("./getVms").getVmsOutput = null as any;
utilities.lazyLoad(exports, ["getVms","getVmsOutput"], () => require("./getVms"));

export { GetVolumeArgs, GetVolumeResult, GetVolumeOutputArgs } from "./getVolume";
export const getVolume: typeof import("./getVolume").getVolume = null as any;
export const getVolumeOutput: typeof import("./getVolume").getVolumeOutput = null as any;
utilities.lazyLoad(exports, ["getVolume","getVolumeOutput"], () => require("./getVolume"));

export { GetVolumesArgs, GetVolumesResult, GetVolumesOutputArgs } from "./getVolumes";
export const getVolumes: typeof import("./getVolumes").getVolumes = null as any;
export const getVolumesOutput: typeof import("./getVolumes").getVolumesOutput = null as any;
utilities.lazyLoad(exports, ["getVolumes","getVolumesOutput"], () => require("./getVolumes"));

export { GetVpnConnectionArgs, GetVpnConnectionResult, GetVpnConnectionOutputArgs } from "./getVpnConnection";
export const getVpnConnection: typeof import("./getVpnConnection").getVpnConnection = null as any;
export const getVpnConnectionOutput: typeof import("./getVpnConnection").getVpnConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getVpnConnection","getVpnConnectionOutput"], () => require("./getVpnConnection"));

export { GetVpnConnectionsArgs, GetVpnConnectionsResult, GetVpnConnectionsOutputArgs } from "./getVpnConnections";
export const getVpnConnections: typeof import("./getVpnConnections").getVpnConnections = null as any;
export const getVpnConnectionsOutput: typeof import("./getVpnConnections").getVpnConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getVpnConnections","getVpnConnectionsOutput"], () => require("./getVpnConnections"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { ImageExportTaskArgs, ImageExportTaskState } from "./imageExportTask";
export type ImageExportTask = import("./imageExportTask").ImageExportTask;
export const ImageExportTask: typeof import("./imageExportTask").ImageExportTask = null as any;
utilities.lazyLoad(exports, ["ImageExportTask"], () => require("./imageExportTask"));

export { ImageLaunchPermissionArgs, ImageLaunchPermissionState } from "./imageLaunchPermission";
export type ImageLaunchPermission = import("./imageLaunchPermission").ImageLaunchPermission;
export const ImageLaunchPermission: typeof import("./imageLaunchPermission").ImageLaunchPermission = null as any;
utilities.lazyLoad(exports, ["ImageLaunchPermission"], () => require("./imageLaunchPermission"));

export { InternetServiceArgs, InternetServiceState } from "./internetService";
export type InternetService = import("./internetService").InternetService;
export const InternetService: typeof import("./internetService").InternetService = null as any;
utilities.lazyLoad(exports, ["InternetService"], () => require("./internetService"));

export { InternetServiceLinkArgs, InternetServiceLinkState } from "./internetServiceLink";
export type InternetServiceLink = import("./internetServiceLink").InternetServiceLink;
export const InternetServiceLink: typeof import("./internetServiceLink").InternetServiceLink = null as any;
utilities.lazyLoad(exports, ["InternetServiceLink"], () => require("./internetServiceLink"));

export { KeypairArgs, KeypairState } from "./keypair";
export type Keypair = import("./keypair").Keypair;
export const Keypair: typeof import("./keypair").Keypair = null as any;
utilities.lazyLoad(exports, ["Keypair"], () => require("./keypair"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { LoadBalancerAttributesArgs, LoadBalancerAttributesState } from "./loadBalancerAttributes";
export type LoadBalancerAttributes = import("./loadBalancerAttributes").LoadBalancerAttributes;
export const LoadBalancerAttributes: typeof import("./loadBalancerAttributes").LoadBalancerAttributes = null as any;
utilities.lazyLoad(exports, ["LoadBalancerAttributes"], () => require("./loadBalancerAttributes"));

export { LoadBalancerPolicyArgs, LoadBalancerPolicyState } from "./loadBalancerPolicy";
export type LoadBalancerPolicy = import("./loadBalancerPolicy").LoadBalancerPolicy;
export const LoadBalancerPolicy: typeof import("./loadBalancerPolicy").LoadBalancerPolicy = null as any;
utilities.lazyLoad(exports, ["LoadBalancerPolicy"], () => require("./loadBalancerPolicy"));

export { LoadBalancerVmsArgs, LoadBalancerVmsState } from "./loadBalancerVms";
export type LoadBalancerVms = import("./loadBalancerVms").LoadBalancerVms;
export const LoadBalancerVms: typeof import("./loadBalancerVms").LoadBalancerVms = null as any;
utilities.lazyLoad(exports, ["LoadBalancerVms"], () => require("./loadBalancerVms"));

export { NatServiceArgs, NatServiceState } from "./natService";
export type NatService = import("./natService").NatService;
export const NatService: typeof import("./natService").NatService = null as any;
utilities.lazyLoad(exports, ["NatService"], () => require("./natService"));

export { NetArgs, NetState } from "./net";
export type Net = import("./net").Net;
export const Net: typeof import("./net").Net = null as any;
utilities.lazyLoad(exports, ["Net"], () => require("./net"));

export { NetAccessPointArgs, NetAccessPointState } from "./netAccessPoint";
export type NetAccessPoint = import("./netAccessPoint").NetAccessPoint;
export const NetAccessPoint: typeof import("./netAccessPoint").NetAccessPoint = null as any;
utilities.lazyLoad(exports, ["NetAccessPoint"], () => require("./netAccessPoint"));

export { NetAttributesArgs, NetAttributesState } from "./netAttributes";
export type NetAttributes = import("./netAttributes").NetAttributes;
export const NetAttributes: typeof import("./netAttributes").NetAttributes = null as any;
utilities.lazyLoad(exports, ["NetAttributes"], () => require("./netAttributes"));

export { NetPeeringArgs, NetPeeringState } from "./netPeering";
export type NetPeering = import("./netPeering").NetPeering;
export const NetPeering: typeof import("./netPeering").NetPeering = null as any;
utilities.lazyLoad(exports, ["NetPeering"], () => require("./netPeering"));

export { NetPeeringAcceptionArgs, NetPeeringAcceptionState } from "./netPeeringAcception";
export type NetPeeringAcception = import("./netPeeringAcception").NetPeeringAcception;
export const NetPeeringAcception: typeof import("./netPeeringAcception").NetPeeringAcception = null as any;
utilities.lazyLoad(exports, ["NetPeeringAcception"], () => require("./netPeeringAcception"));

export { NicArgs, NicState } from "./nic";
export type Nic = import("./nic").Nic;
export const Nic: typeof import("./nic").Nic = null as any;
utilities.lazyLoad(exports, ["Nic"], () => require("./nic"));

export { NicLinkArgs, NicLinkState } from "./nicLink";
export type NicLink = import("./nicLink").NicLink;
export const NicLink: typeof import("./nicLink").NicLink = null as any;
utilities.lazyLoad(exports, ["NicLink"], () => require("./nicLink"));

export { NicPrivateIpArgs, NicPrivateIpState } from "./nicPrivateIp";
export type NicPrivateIp = import("./nicPrivateIp").NicPrivateIp;
export const NicPrivateIp: typeof import("./nicPrivateIp").NicPrivateIp = null as any;
utilities.lazyLoad(exports, ["NicPrivateIp"], () => require("./nicPrivateIp"));

export { OutboundRuleArgs, OutboundRuleState } from "./outboundRule";
export type OutboundRule = import("./outboundRule").OutboundRule;
export const OutboundRule: typeof import("./outboundRule").OutboundRule = null as any;
utilities.lazyLoad(exports, ["OutboundRule"], () => require("./outboundRule"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PublicIpArgs, PublicIpState } from "./publicIp";
export type PublicIp = import("./publicIp").PublicIp;
export const PublicIp: typeof import("./publicIp").PublicIp = null as any;
utilities.lazyLoad(exports, ["PublicIp"], () => require("./publicIp"));

export { PublicIpLinkArgs, PublicIpLinkState } from "./publicIpLink";
export type PublicIpLink = import("./publicIpLink").PublicIpLink;
export const PublicIpLink: typeof import("./publicIpLink").PublicIpLink = null as any;
utilities.lazyLoad(exports, ["PublicIpLink"], () => require("./publicIpLink"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { RouteTableArgs, RouteTableState } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { RouteTableLinkArgs, RouteTableLinkState } from "./routeTableLink";
export type RouteTableLink = import("./routeTableLink").RouteTableLink;
export const RouteTableLink: typeof import("./routeTableLink").RouteTableLink = null as any;
utilities.lazyLoad(exports, ["RouteTableLink"], () => require("./routeTableLink"));

export { SecurityGroupArgs, SecurityGroupState } from "./securityGroup";
export type SecurityGroup = import("./securityGroup").SecurityGroup;
export const SecurityGroup: typeof import("./securityGroup").SecurityGroup = null as any;
utilities.lazyLoad(exports, ["SecurityGroup"], () => require("./securityGroup"));

export { SecurityGroupRuleArgs, SecurityGroupRuleState } from "./securityGroupRule";
export type SecurityGroupRule = import("./securityGroupRule").SecurityGroupRule;
export const SecurityGroupRule: typeof import("./securityGroupRule").SecurityGroupRule = null as any;
utilities.lazyLoad(exports, ["SecurityGroupRule"], () => require("./securityGroupRule"));

export { ServerCertificateArgs, ServerCertificateState } from "./serverCertificate";
export type ServerCertificate = import("./serverCertificate").ServerCertificate;
export const ServerCertificate: typeof import("./serverCertificate").ServerCertificate = null as any;
utilities.lazyLoad(exports, ["ServerCertificate"], () => require("./serverCertificate"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { SnapshotAttributesArgs, SnapshotAttributesState } from "./snapshotAttributes";
export type SnapshotAttributes = import("./snapshotAttributes").SnapshotAttributes;
export const SnapshotAttributes: typeof import("./snapshotAttributes").SnapshotAttributes = null as any;
utilities.lazyLoad(exports, ["SnapshotAttributes"], () => require("./snapshotAttributes"));

export { SnapshotExportTaskArgs, SnapshotExportTaskState } from "./snapshotExportTask";
export type SnapshotExportTask = import("./snapshotExportTask").SnapshotExportTask;
export const SnapshotExportTask: typeof import("./snapshotExportTask").SnapshotExportTask = null as any;
utilities.lazyLoad(exports, ["SnapshotExportTask"], () => require("./snapshotExportTask"));

export { SubnetArgs, SubnetState } from "./subnet";
export type Subnet = import("./subnet").Subnet;
export const Subnet: typeof import("./subnet").Subnet = null as any;
utilities.lazyLoad(exports, ["Subnet"], () => require("./subnet"));

export { TagArgs, TagState } from "./tag";
export type Tag = import("./tag").Tag;
export const Tag: typeof import("./tag").Tag = null as any;
utilities.lazyLoad(exports, ["Tag"], () => require("./tag"));

export { VirtualGatewayArgs, VirtualGatewayState } from "./virtualGateway";
export type VirtualGateway = import("./virtualGateway").VirtualGateway;
export const VirtualGateway: typeof import("./virtualGateway").VirtualGateway = null as any;
utilities.lazyLoad(exports, ["VirtualGateway"], () => require("./virtualGateway"));

export { VirtualGatewayLinkArgs, VirtualGatewayLinkState } from "./virtualGatewayLink";
export type VirtualGatewayLink = import("./virtualGatewayLink").VirtualGatewayLink;
export const VirtualGatewayLink: typeof import("./virtualGatewayLink").VirtualGatewayLink = null as any;
utilities.lazyLoad(exports, ["VirtualGatewayLink"], () => require("./virtualGatewayLink"));

export { VirtualGatewayRoutePropagationArgs, VirtualGatewayRoutePropagationState } from "./virtualGatewayRoutePropagation";
export type VirtualGatewayRoutePropagation = import("./virtualGatewayRoutePropagation").VirtualGatewayRoutePropagation;
export const VirtualGatewayRoutePropagation: typeof import("./virtualGatewayRoutePropagation").VirtualGatewayRoutePropagation = null as any;
utilities.lazyLoad(exports, ["VirtualGatewayRoutePropagation"], () => require("./virtualGatewayRoutePropagation"));

export { VmArgs, VmState } from "./vm";
export type Vm = import("./vm").Vm;
export const Vm: typeof import("./vm").Vm = null as any;
utilities.lazyLoad(exports, ["Vm"], () => require("./vm"));

export { VolumeArgs, VolumeState } from "./volume";
export type Volume = import("./volume").Volume;
export const Volume: typeof import("./volume").Volume = null as any;
utilities.lazyLoad(exports, ["Volume"], () => require("./volume"));

export { VolumesLinkArgs, VolumesLinkState } from "./volumesLink";
export type VolumesLink = import("./volumesLink").VolumesLink;
export const VolumesLink: typeof import("./volumesLink").VolumesLink = null as any;
utilities.lazyLoad(exports, ["VolumesLink"], () => require("./volumesLink"));

export { VpnConnectionArgs, VpnConnectionState } from "./vpnConnection";
export type VpnConnection = import("./vpnConnection").VpnConnection;
export const VpnConnection: typeof import("./vpnConnection").VpnConnection = null as any;
utilities.lazyLoad(exports, ["VpnConnection"], () => require("./vpnConnection"));

export { VpnConnectionRouteArgs, VpnConnectionRouteState } from "./vpnConnectionRoute";
export type VpnConnectionRoute = import("./vpnConnectionRoute").VpnConnectionRoute;
export const VpnConnectionRoute: typeof import("./vpnConnectionRoute").VpnConnectionRoute = null as any;
utilities.lazyLoad(exports, ["VpnConnectionRoute"], () => require("./vpnConnectionRoute"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "outscale:index/accessKey:AccessKey":
                return new AccessKey(name, <any>undefined, { urn })
            case "outscale:index/apiAccessPolicy:ApiAccessPolicy":
                return new ApiAccessPolicy(name, <any>undefined, { urn })
            case "outscale:index/apiAccessRule:ApiAccessRule":
                return new ApiAccessRule(name, <any>undefined, { urn })
            case "outscale:index/ca:Ca":
                return new Ca(name, <any>undefined, { urn })
            case "outscale:index/clientGateway:ClientGateway":
                return new ClientGateway(name, <any>undefined, { urn })
            case "outscale:index/dhcpOption:DhcpOption":
                return new DhcpOption(name, <any>undefined, { urn })
            case "outscale:index/flexibleGpu:FlexibleGpu":
                return new FlexibleGpu(name, <any>undefined, { urn })
            case "outscale:index/flexibleGpuLink:FlexibleGpuLink":
                return new FlexibleGpuLink(name, <any>undefined, { urn })
            case "outscale:index/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "outscale:index/imageExportTask:ImageExportTask":
                return new ImageExportTask(name, <any>undefined, { urn })
            case "outscale:index/imageLaunchPermission:ImageLaunchPermission":
                return new ImageLaunchPermission(name, <any>undefined, { urn })
            case "outscale:index/internetService:InternetService":
                return new InternetService(name, <any>undefined, { urn })
            case "outscale:index/internetServiceLink:InternetServiceLink":
                return new InternetServiceLink(name, <any>undefined, { urn })
            case "outscale:index/keypair:Keypair":
                return new Keypair(name, <any>undefined, { urn })
            case "outscale:index/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "outscale:index/loadBalancerAttributes:LoadBalancerAttributes":
                return new LoadBalancerAttributes(name, <any>undefined, { urn })
            case "outscale:index/loadBalancerPolicy:LoadBalancerPolicy":
                return new LoadBalancerPolicy(name, <any>undefined, { urn })
            case "outscale:index/loadBalancerVms:LoadBalancerVms":
                return new LoadBalancerVms(name, <any>undefined, { urn })
            case "outscale:index/natService:NatService":
                return new NatService(name, <any>undefined, { urn })
            case "outscale:index/net:Net":
                return new Net(name, <any>undefined, { urn })
            case "outscale:index/netAccessPoint:NetAccessPoint":
                return new NetAccessPoint(name, <any>undefined, { urn })
            case "outscale:index/netAttributes:NetAttributes":
                return new NetAttributes(name, <any>undefined, { urn })
            case "outscale:index/netPeering:NetPeering":
                return new NetPeering(name, <any>undefined, { urn })
            case "outscale:index/netPeeringAcception:NetPeeringAcception":
                return new NetPeeringAcception(name, <any>undefined, { urn })
            case "outscale:index/nic:Nic":
                return new Nic(name, <any>undefined, { urn })
            case "outscale:index/nicLink:NicLink":
                return new NicLink(name, <any>undefined, { urn })
            case "outscale:index/nicPrivateIp:NicPrivateIp":
                return new NicPrivateIp(name, <any>undefined, { urn })
            case "outscale:index/outboundRule:OutboundRule":
                return new OutboundRule(name, <any>undefined, { urn })
            case "outscale:index/publicIp:PublicIp":
                return new PublicIp(name, <any>undefined, { urn })
            case "outscale:index/publicIpLink:PublicIpLink":
                return new PublicIpLink(name, <any>undefined, { urn })
            case "outscale:index/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "outscale:index/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "outscale:index/routeTableLink:RouteTableLink":
                return new RouteTableLink(name, <any>undefined, { urn })
            case "outscale:index/securityGroup:SecurityGroup":
                return new SecurityGroup(name, <any>undefined, { urn })
            case "outscale:index/securityGroupRule:SecurityGroupRule":
                return new SecurityGroupRule(name, <any>undefined, { urn })
            case "outscale:index/serverCertificate:ServerCertificate":
                return new ServerCertificate(name, <any>undefined, { urn })
            case "outscale:index/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            case "outscale:index/snapshotAttributes:SnapshotAttributes":
                return new SnapshotAttributes(name, <any>undefined, { urn })
            case "outscale:index/snapshotExportTask:SnapshotExportTask":
                return new SnapshotExportTask(name, <any>undefined, { urn })
            case "outscale:index/subnet:Subnet":
                return new Subnet(name, <any>undefined, { urn })
            case "outscale:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "outscale:index/virtualGateway:VirtualGateway":
                return new VirtualGateway(name, <any>undefined, { urn })
            case "outscale:index/virtualGatewayLink:VirtualGatewayLink":
                return new VirtualGatewayLink(name, <any>undefined, { urn })
            case "outscale:index/virtualGatewayRoutePropagation:VirtualGatewayRoutePropagation":
                return new VirtualGatewayRoutePropagation(name, <any>undefined, { urn })
            case "outscale:index/vm:Vm":
                return new Vm(name, <any>undefined, { urn })
            case "outscale:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "outscale:index/volumesLink:VolumesLink":
                return new VolumesLink(name, <any>undefined, { urn })
            case "outscale:index/vpnConnection:VpnConnection":
                return new VpnConnection(name, <any>undefined, { urn })
            case "outscale:index/vpnConnectionRoute:VpnConnectionRoute":
                return new VpnConnectionRoute(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("outscale", "index/accessKey", _module)
pulumi.runtime.registerResourceModule("outscale", "index/apiAccessPolicy", _module)
pulumi.runtime.registerResourceModule("outscale", "index/apiAccessRule", _module)
pulumi.runtime.registerResourceModule("outscale", "index/ca", _module)
pulumi.runtime.registerResourceModule("outscale", "index/clientGateway", _module)
pulumi.runtime.registerResourceModule("outscale", "index/dhcpOption", _module)
pulumi.runtime.registerResourceModule("outscale", "index/flexibleGpu", _module)
pulumi.runtime.registerResourceModule("outscale", "index/flexibleGpuLink", _module)
pulumi.runtime.registerResourceModule("outscale", "index/image", _module)
pulumi.runtime.registerResourceModule("outscale", "index/imageExportTask", _module)
pulumi.runtime.registerResourceModule("outscale", "index/imageLaunchPermission", _module)
pulumi.runtime.registerResourceModule("outscale", "index/internetService", _module)
pulumi.runtime.registerResourceModule("outscale", "index/internetServiceLink", _module)
pulumi.runtime.registerResourceModule("outscale", "index/keypair", _module)
pulumi.runtime.registerResourceModule("outscale", "index/loadBalancer", _module)
pulumi.runtime.registerResourceModule("outscale", "index/loadBalancerAttributes", _module)
pulumi.runtime.registerResourceModule("outscale", "index/loadBalancerPolicy", _module)
pulumi.runtime.registerResourceModule("outscale", "index/loadBalancerVms", _module)
pulumi.runtime.registerResourceModule("outscale", "index/natService", _module)
pulumi.runtime.registerResourceModule("outscale", "index/net", _module)
pulumi.runtime.registerResourceModule("outscale", "index/netAccessPoint", _module)
pulumi.runtime.registerResourceModule("outscale", "index/netAttributes", _module)
pulumi.runtime.registerResourceModule("outscale", "index/netPeering", _module)
pulumi.runtime.registerResourceModule("outscale", "index/netPeeringAcception", _module)
pulumi.runtime.registerResourceModule("outscale", "index/nic", _module)
pulumi.runtime.registerResourceModule("outscale", "index/nicLink", _module)
pulumi.runtime.registerResourceModule("outscale", "index/nicPrivateIp", _module)
pulumi.runtime.registerResourceModule("outscale", "index/outboundRule", _module)
pulumi.runtime.registerResourceModule("outscale", "index/publicIp", _module)
pulumi.runtime.registerResourceModule("outscale", "index/publicIpLink", _module)
pulumi.runtime.registerResourceModule("outscale", "index/route", _module)
pulumi.runtime.registerResourceModule("outscale", "index/routeTable", _module)
pulumi.runtime.registerResourceModule("outscale", "index/routeTableLink", _module)
pulumi.runtime.registerResourceModule("outscale", "index/securityGroup", _module)
pulumi.runtime.registerResourceModule("outscale", "index/securityGroupRule", _module)
pulumi.runtime.registerResourceModule("outscale", "index/serverCertificate", _module)
pulumi.runtime.registerResourceModule("outscale", "index/snapshot", _module)
pulumi.runtime.registerResourceModule("outscale", "index/snapshotAttributes", _module)
pulumi.runtime.registerResourceModule("outscale", "index/snapshotExportTask", _module)
pulumi.runtime.registerResourceModule("outscale", "index/subnet", _module)
pulumi.runtime.registerResourceModule("outscale", "index/tag", _module)
pulumi.runtime.registerResourceModule("outscale", "index/virtualGateway", _module)
pulumi.runtime.registerResourceModule("outscale", "index/virtualGatewayLink", _module)
pulumi.runtime.registerResourceModule("outscale", "index/virtualGatewayRoutePropagation", _module)
pulumi.runtime.registerResourceModule("outscale", "index/vm", _module)
pulumi.runtime.registerResourceModule("outscale", "index/volume", _module)
pulumi.runtime.registerResourceModule("outscale", "index/volumesLink", _module)
pulumi.runtime.registerResourceModule("outscale", "index/vpnConnection", _module)
pulumi.runtime.registerResourceModule("outscale", "index/vpnConnectionRoute", _module)
pulumi.runtime.registerResourcePackage("outscale", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:outscale") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
