// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages load balancer VMs.
 *
 * > **Note:** Use only one `outscale.LoadBalancerVms` resource per load balancer, to avoid a conflict between the different lists of backend VMs.
 *
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-loadbalancer).
 *
 * ## Example Usage
 *
 * ### Required resources
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const outscaleVm01 = new outscale.Vm("outscale_vm01", {
 *     imageId: "ami-12345678",
 *     vmType: "tinav5.c1r1p2",
 *     keypairName: keypairName,
 * });
 * const outscaleVm02 = new outscale.Vm("outscale_vm02", {
 *     imageId: imageId,
 *     vmType: vmType,
 *     keypairName: keypairName,
 * });
 * const loadBalancer01 = new outscale.LoadBalancer("load_balancer01", {
 *     loadBalancerName: "load-balancer-for-backend-vms",
 *     subregionNames: [`${region}a`],
 *     listeners: [{
 *         backendPort: 80,
 *         backendProtocol: "TCP",
 *         loadBalancerProtocol: "TCP",
 *         loadBalancerPort: 80,
 *     }],
 *     tags: [{
 *         key: "name",
 *         value: "outscale_load_balancer01",
 *     }],
 * });
 * ```
 *
 * ### Register VMs with a load balancer
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const outscaleLoadBalancerVms01 = new outscale.LoadBalancerVms("outscale_load_balancer_vms01", {
 *     loadBalancerName: "load-balancer-for-backend-vms",
 *     backendVmIds: [
 *         outscaleVm01.vmId,
 *         outscaleVm02.vmId,
 *     ],
 * });
 * ```
 *
 * ### Register IPs with a load balancer
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as outscale from "@outscale/pulumi-outscale";
 *
 * const outscaleLoadBalancerVms01 = new outscale.LoadBalancerVms("outscale_load_balancer_vms01", {
 *     loadBalancerName: "load-balancer-for-backend-vms",
 *     backendIps: [
 *         outscaleVm01.publicIp,
 *         outscaleVm02.publicIp,
 *     ],
 * });
 * ```
 */
export class LoadBalancerVms extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerVms resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerVmsState, opts?: pulumi.CustomResourceOptions): LoadBalancerVms {
        return new LoadBalancerVms(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'outscale:index/loadBalancerVms:LoadBalancerVms';

    /**
     * Returns true if the given object is an instance of LoadBalancerVms.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancerVms {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancerVms.__pulumiType;
    }

    public readonly backendIps!: pulumi.Output<string[] | undefined>;
    /**
     * One or more IDs of backend VMs.<br />
     * Specifying the same ID several times has no effect as each backend VM has equal weight.
     */
    public readonly backendVmIds!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the load balancer.
     */
    public readonly loadBalancerName!: pulumi.Output<string>;
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    public readonly timeouts!: pulumi.Output<outputs.LoadBalancerVmsTimeouts | undefined>;

    /**
     * Create a LoadBalancerVms resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerVmsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerVmsArgs | LoadBalancerVmsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerVmsState | undefined;
            resourceInputs["backendIps"] = state ? state.backendIps : undefined;
            resourceInputs["backendVmIds"] = state ? state.backendVmIds : undefined;
            resourceInputs["loadBalancerName"] = state ? state.loadBalancerName : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as LoadBalancerVmsArgs | undefined;
            if ((!args || args.loadBalancerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerName'");
            }
            resourceInputs["backendIps"] = args ? args.backendIps : undefined;
            resourceInputs["backendVmIds"] = args ? args.backendVmIds : undefined;
            resourceInputs["loadBalancerName"] = args ? args.loadBalancerName : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["requestId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LoadBalancerVms.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancerVms resources.
 */
export interface LoadBalancerVmsState {
    backendIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more IDs of backend VMs.<br />
     * Specifying the same ID several times has no effect as each backend VM has equal weight.
     */
    backendVmIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the load balancer.
     */
    loadBalancerName?: pulumi.Input<string>;
    requestId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LoadBalancerVmsTimeouts>;
}

/**
 * The set of arguments for constructing a LoadBalancerVms resource.
 */
export interface LoadBalancerVmsArgs {
    backendIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more IDs of backend VMs.<br />
     * Specifying the same ID several times has no effect as each backend VM has equal weight.
     */
    backendVmIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the load balancer.
     */
    loadBalancerName: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.LoadBalancerVmsTimeouts>;
}
