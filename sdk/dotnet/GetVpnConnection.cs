// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetVpnConnection
    {
        /// <summary>
        /// Provides information about a VPN connection.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPN-Connections.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vpnconnection).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpnConnection01 = Outscale.GetVpnConnection.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetVpnConnectionFilterInputArgs
        ///             {
        ///                 Name = "vpn_connection_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "vpn-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVpnConnectionResult> InvokeAsync(GetVpnConnectionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpnConnectionResult>("outscale:index/getVpnConnection:getVpnConnection", args ?? new GetVpnConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a VPN connection.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPN-Connections.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vpnconnection).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpnConnection01 = Outscale.GetVpnConnection.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetVpnConnectionFilterInputArgs
        ///             {
        ///                 Name = "vpn_connection_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "vpn-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpnConnectionResult> Invoke(GetVpnConnectionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnConnectionResult>("outscale:index/getVpnConnection:getVpnConnection", args ?? new GetVpnConnectionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a VPN connection.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPN-Connections.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vpnconnection).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vpnConnection01 = Outscale.GetVpnConnection.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetVpnConnectionFilterInputArgs
        ///             {
        ///                 Name = "vpn_connection_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "vpn-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpnConnectionResult> Invoke(GetVpnConnectionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnConnectionResult>("outscale:index/getVpnConnection:getVpnConnection", args ?? new GetVpnConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpnConnectionArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVpnConnectionFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetVpnConnectionFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVpnConnectionFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
        /// </summary>
        [Input("staticRoutesOnly")]
        public bool? StaticRoutesOnly { get; set; }

        /// <summary>
        /// The ID of the VPN connection.
        /// </summary>
        [Input("vpnConnectionId")]
        public string? VpnConnectionId { get; set; }

        public GetVpnConnectionArgs()
        {
        }
        public static new GetVpnConnectionArgs Empty => new GetVpnConnectionArgs();
    }

    public sealed class GetVpnConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetVpnConnectionFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetVpnConnectionFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVpnConnectionFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
        /// </summary>
        [Input("staticRoutesOnly")]
        public Input<bool>? StaticRoutesOnly { get; set; }

        /// <summary>
        /// The ID of the VPN connection.
        /// </summary>
        [Input("vpnConnectionId")]
        public Input<string>? VpnConnectionId { get; set; }

        public GetVpnConnectionInvokeArgs()
        {
        }
        public static new GetVpnConnectionInvokeArgs Empty => new GetVpnConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpnConnectionResult
    {
        /// <summary>
        /// Example configuration for the client gateway.
        /// </summary>
        public readonly string ClientGatewayConfiguration;
        /// <summary>
        /// The ID of the client gateway used on the client end of the connection.
        /// </summary>
        public readonly string ClientGatewayId;
        /// <summary>
        /// The type of VPN connection (always `ipsec.1`).
        /// </summary>
        public readonly string ConnectionType;
        public readonly ImmutableArray<Outputs.GetVpnConnectionFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string RequestId;
        /// <summary>
        /// Information about one or more static routes associated with the VPN connection, if any.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnConnectionRouteResult> Routes;
        /// <summary>
        /// The state of the IPSEC tunnel (`UP` \| `DOWN`).
        /// </summary>
        public readonly string State;
        /// <summary>
        /// If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
        /// </summary>
        public readonly bool? StaticRoutesOnly;
        /// <summary>
        /// One or more tags associated with the VPN connection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnConnectionTagResult> Tags;
        /// <summary>
        /// Information about the current state of one or more of the VPN tunnels.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnConnectionVgwTelemetryResult> VgwTelemetries;
        /// <summary>
        /// The ID of the virtual gateway used on the OUTSCALE end of the connection.
        /// </summary>
        public readonly string VirtualGatewayId;
        /// <summary>
        /// The ID of the VPN connection.
        /// </summary>
        public readonly string? VpnConnectionId;

        [OutputConstructor]
        private GetVpnConnectionResult(
            string clientGatewayConfiguration,

            string clientGatewayId,

            string connectionType,

            ImmutableArray<Outputs.GetVpnConnectionFilterResult> filters,

            string id,

            string requestId,

            ImmutableArray<Outputs.GetVpnConnectionRouteResult> routes,

            string state,

            bool? staticRoutesOnly,

            ImmutableArray<Outputs.GetVpnConnectionTagResult> tags,

            ImmutableArray<Outputs.GetVpnConnectionVgwTelemetryResult> vgwTelemetries,

            string virtualGatewayId,

            string? vpnConnectionId)
        {
            ClientGatewayConfiguration = clientGatewayConfiguration;
            ClientGatewayId = clientGatewayId;
            ConnectionType = connectionType;
            Filters = filters;
            Id = id;
            RequestId = requestId;
            Routes = routes;
            State = state;
            StaticRoutesOnly = staticRoutesOnly;
            Tags = tags;
            VgwTelemetries = vgwTelemetries;
            VirtualGatewayId = virtualGatewayId;
            VpnConnectionId = vpnConnectionId;
        }
    }
}
