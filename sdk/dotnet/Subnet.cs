// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a Subnet.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Nets.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-subnet).
    /// 
    /// ## Example Usage
    /// 
    /// ### Required resource
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var net01 = new Outscale.Net("net01", new()
    ///     {
    ///         IpRange = "10.0.0.0/16",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Create a subnet
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var subnet01 = new Outscale.Subnet("subnet01", new()
    ///     {
    ///         NetId = net01.NetId,
    ///         IpRange = "10.0.0.0/18",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A subnet can be imported using its ID. For example:
    /// 
    /// console
    /// 
    /// ```sh
    /// $ pulumi import outscale:index/subnet:Subnet ImportedSubnet subnet-12345678
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/subnet:Subnet")]
    public partial class Subnet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The number of available IPs in the Subnets.
        /// </summary>
        [Output("availableIpsCount")]
        public Output<int> AvailableIpsCount { get; private set; } = null!;

        /// <summary>
        /// The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).&lt;br /&gt;
        /// The IP range of the Subnet can be either the same as the Net one if you create only a single Subnet in this Net, or a subset of the Net one. In case of several Subnets in a Net, their IP ranges must not overlap. The smallest Subnet you can create uses a /29 netmask (eight IPs). For more information, see [About Nets](https://docs.outscale.com/en/userguide/About-Nets.html).
        /// </summary>
        [Output("ipRange")]
        public Output<string> IpRange { get; private set; } = null!;

        /// <summary>
        /// If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.
        /// </summary>
        [Output("mapPublicIpOnLaunch")]
        public Output<bool> MapPublicIpOnLaunch { get; private set; } = null!;

        /// <summary>
        /// The ID of the Net for which you want to create a Subnet.
        /// </summary>
        [Output("netId")]
        public Output<string> NetId { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// The state of the Subnet (`pending` \| `available` \| `deleted`).
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subnet.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// The name of the Subregion in which you want to create the Subnet.
        /// </summary>
        [Output("subregionName")]
        public Output<string> SubregionName { get; private set; } = null!;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.SubnetTag>> Tags { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.SubnetTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a Subnet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Subnet(string name, SubnetArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/subnet:Subnet", name, args ?? new SubnetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Subnet(string name, Input<string> id, SubnetState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/subnet:Subnet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Subnet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Subnet Get(string name, Input<string> id, SubnetState? state = null, CustomResourceOptions? options = null)
        {
            return new Subnet(name, id, state, options);
        }
    }

    public sealed class SubnetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).&lt;br /&gt;
        /// The IP range of the Subnet can be either the same as the Net one if you create only a single Subnet in this Net, or a subset of the Net one. In case of several Subnets in a Net, their IP ranges must not overlap. The smallest Subnet you can create uses a /29 netmask (eight IPs). For more information, see [About Nets](https://docs.outscale.com/en/userguide/About-Nets.html).
        /// </summary>
        [Input("ipRange", required: true)]
        public Input<string> IpRange { get; set; } = null!;

        /// <summary>
        /// If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.
        /// </summary>
        [Input("mapPublicIpOnLaunch")]
        public Input<bool>? MapPublicIpOnLaunch { get; set; }

        /// <summary>
        /// The ID of the Net for which you want to create a Subnet.
        /// </summary>
        [Input("netId", required: true)]
        public Input<string> NetId { get; set; } = null!;

        /// <summary>
        /// The name of the Subregion in which you want to create the Subnet.
        /// </summary>
        [Input("subregionName")]
        public Input<string>? SubregionName { get; set; }

        [Input("tags")]
        private InputList<Inputs.SubnetTagArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.SubnetTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.SubnetTagArgs>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.SubnetTimeoutsArgs>? Timeouts { get; set; }

        public SubnetArgs()
        {
        }
        public static new SubnetArgs Empty => new SubnetArgs();
    }

    public sealed class SubnetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of available IPs in the Subnets.
        /// </summary>
        [Input("availableIpsCount")]
        public Input<int>? AvailableIpsCount { get; set; }

        /// <summary>
        /// The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).&lt;br /&gt;
        /// The IP range of the Subnet can be either the same as the Net one if you create only a single Subnet in this Net, or a subset of the Net one. In case of several Subnets in a Net, their IP ranges must not overlap. The smallest Subnet you can create uses a /29 netmask (eight IPs). For more information, see [About Nets](https://docs.outscale.com/en/userguide/About-Nets.html).
        /// </summary>
        [Input("ipRange")]
        public Input<string>? IpRange { get; set; }

        /// <summary>
        /// If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.
        /// </summary>
        [Input("mapPublicIpOnLaunch")]
        public Input<bool>? MapPublicIpOnLaunch { get; set; }

        /// <summary>
        /// The ID of the Net for which you want to create a Subnet.
        /// </summary>
        [Input("netId")]
        public Input<string>? NetId { get; set; }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The state of the Subnet (`pending` \| `available` \| `deleted`).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The ID of the Subnet.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// The name of the Subregion in which you want to create the Subnet.
        /// </summary>
        [Input("subregionName")]
        public Input<string>? SubregionName { get; set; }

        [Input("tags")]
        private InputList<Inputs.SubnetTagGetArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.SubnetTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.SubnetTagGetArgs>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.SubnetTimeoutsGetArgs>? Timeouts { get; set; }

        public SubnetState()
        {
        }
        public static new SubnetState Empty => new SubnetState();
    }
}
