// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale.Inputs
{

    public sealed class VmBlockDeviceMappingBsuArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// By default or if set to true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
        /// </summary>
        [Input("deleteOnVmDeletion")]
        public Input<bool>? DeleteOnVmDeletion { get; set; }

        /// <summary>
        /// The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
        /// </summary>
        [Input("iops")]
        public Input<int>? Iops { get; set; }

        /// <summary>
        /// The ID of the snapshot used to create the volume.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        [Input("tags")]
        private InputList<Inputs.VmBlockDeviceMappingBsuTagArgs>? _tags;

        /// <summary>
        /// One or more tags associated with the VM.
        /// </summary>
        public InputList<Inputs.VmBlockDeviceMappingBsuTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.VmBlockDeviceMappingBsuTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The size of the volume, in gibibytes (GiB).
        /// </summary>
        [Input("volumeSize")]
        public Input<int>? VolumeSize { get; set; }

        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public VmBlockDeviceMappingBsuArgs()
        {
        }
        public static new VmBlockDeviceMappingBsuArgs Empty => new VmBlockDeviceMappingBsuArgs();
    }
}
