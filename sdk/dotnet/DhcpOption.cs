// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a DHCP option.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-DHCP-Options.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-dhcpoption).
    /// 
    /// ## Example Usage
    /// ### Create a basic DHCP options set
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dhcpOption01 = new Outscale.DhcpOption("dhcpOption01", new()
    ///     {
    ///         DomainName = "MyCompany.com",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Create a complete DHCP options set
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dhcpOption02 = new Outscale.DhcpOption("dhcpOption02", new()
    ///     {
    ///         DomainName = "MyCompany.com",
    ///         DomainNameServers = new[]
    ///         {
    ///             "111.111.11.111",
    ///             "222.222.22.222",
    ///         },
    ///         NtpServers = new[]
    ///         {
    ///             "111.1.1.1",
    ///             "222.2.2.2",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new Outscale.Inputs.DhcpOptionTagArgs
    ///             {
    ///                 Key = "Name",
    ///                 Value = "DHCP01",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DHCP options can be imported using the DHCP option ID. For exampleconsole
    /// 
    /// ```sh
    ///  $ pulumi import outscale:index/dhcpOption:DhcpOption ImportedDhcpSet dopt-87654321
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/dhcpOption:DhcpOption")]
    public partial class DhcpOption : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If true, the DHCP options set is a default one. If false, it is not.
        /// </summary>
        [Output("default")]
        public Output<bool> Default { get; private set; } = null!;

        /// <summary>
        /// The ID of the DHCP options set.
        /// </summary>
        [Output("dhcpOptionsSetId")]
        public Output<string> DhcpOptionsSetId { get; private set; } = null!;

        /// <summary>
        /// Specify a domain name (for example, MyCompany.com). You can specify only one domain name. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, or `NtpServers`.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// The IPs of domain name servers. If no IPs are specified, the `OutscaleProvidedDNS` value is set by default. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, or `NtpServers`.
        /// </summary>
        [Output("domainNameServers")]
        public Output<ImmutableArray<string>> DomainNameServers { get; private set; } = null!;

        /// <summary>
        /// The IPs of the log servers. You must specify at least one of the following parameters: `domain_name`, `domain_name_servers`, `log_servers`, or `ntp_servers`.
        /// </summary>
        [Output("logServers")]
        public Output<ImmutableArray<string>> LogServers { get; private set; } = null!;

        /// <summary>
        /// The IPs of the Network Time Protocol (NTP) servers. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, or `NtpServers`.
        /// </summary>
        [Output("ntpServers")]
        public Output<ImmutableArray<string>> NtpServers { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.DhcpOptionTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a DhcpOption resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DhcpOption(string name, DhcpOptionArgs? args = null, CustomResourceOptions? options = null)
            : base("outscale:index/dhcpOption:DhcpOption", name, args ?? new DhcpOptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DhcpOption(string name, Input<string> id, DhcpOptionState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/dhcpOption:DhcpOption", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DhcpOption resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DhcpOption Get(string name, Input<string> id, DhcpOptionState? state = null, CustomResourceOptions? options = null)
        {
            return new DhcpOption(name, id, state, options);
        }
    }

    public sealed class DhcpOptionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify a domain name (for example, MyCompany.com). You can specify only one domain name. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, or `NtpServers`.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        [Input("domainNameServers")]
        private InputList<string>? _domainNameServers;

        /// <summary>
        /// The IPs of domain name servers. If no IPs are specified, the `OutscaleProvidedDNS` value is set by default. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, or `NtpServers`.
        /// </summary>
        public InputList<string> DomainNameServers
        {
            get => _domainNameServers ?? (_domainNameServers = new InputList<string>());
            set => _domainNameServers = value;
        }

        [Input("logServers")]
        private InputList<string>? _logServers;

        /// <summary>
        /// The IPs of the log servers. You must specify at least one of the following parameters: `domain_name`, `domain_name_servers`, `log_servers`, or `ntp_servers`.
        /// </summary>
        public InputList<string> LogServers
        {
            get => _logServers ?? (_logServers = new InputList<string>());
            set => _logServers = value;
        }

        [Input("ntpServers")]
        private InputList<string>? _ntpServers;

        /// <summary>
        /// The IPs of the Network Time Protocol (NTP) servers. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, or `NtpServers`.
        /// </summary>
        public InputList<string> NtpServers
        {
            get => _ntpServers ?? (_ntpServers = new InputList<string>());
            set => _ntpServers = value;
        }

        [Input("tags")]
        private InputList<Inputs.DhcpOptionTagArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.DhcpOptionTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.DhcpOptionTagArgs>());
            set => _tags = value;
        }

        public DhcpOptionArgs()
        {
        }
        public static new DhcpOptionArgs Empty => new DhcpOptionArgs();
    }

    public sealed class DhcpOptionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If true, the DHCP options set is a default one. If false, it is not.
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        /// <summary>
        /// The ID of the DHCP options set.
        /// </summary>
        [Input("dhcpOptionsSetId")]
        public Input<string>? DhcpOptionsSetId { get; set; }

        /// <summary>
        /// Specify a domain name (for example, MyCompany.com). You can specify only one domain name. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, or `NtpServers`.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        [Input("domainNameServers")]
        private InputList<string>? _domainNameServers;

        /// <summary>
        /// The IPs of domain name servers. If no IPs are specified, the `OutscaleProvidedDNS` value is set by default. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, or `NtpServers`.
        /// </summary>
        public InputList<string> DomainNameServers
        {
            get => _domainNameServers ?? (_domainNameServers = new InputList<string>());
            set => _domainNameServers = value;
        }

        [Input("logServers")]
        private InputList<string>? _logServers;

        /// <summary>
        /// The IPs of the log servers. You must specify at least one of the following parameters: `domain_name`, `domain_name_servers`, `log_servers`, or `ntp_servers`.
        /// </summary>
        public InputList<string> LogServers
        {
            get => _logServers ?? (_logServers = new InputList<string>());
            set => _logServers = value;
        }

        [Input("ntpServers")]
        private InputList<string>? _ntpServers;

        /// <summary>
        /// The IPs of the Network Time Protocol (NTP) servers. You must specify at least one of the following parameters: `DomainName`, `DomainNameServers`, or `NtpServers`.
        /// </summary>
        public InputList<string> NtpServers
        {
            get => _ntpServers ?? (_ntpServers = new InputList<string>());
            set => _ntpServers = value;
        }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        [Input("tags")]
        private InputList<Inputs.DhcpOptionTagGetArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.DhcpOptionTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.DhcpOptionTagGetArgs>());
            set => _tags = value;
        }

        public DhcpOptionState()
        {
        }
        public static new DhcpOptionState Empty => new DhcpOptionState();
    }
}
