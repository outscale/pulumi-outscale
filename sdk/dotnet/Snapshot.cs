// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a snapshot.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Snapshots.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-snapshot).
    /// 
    /// ## Example Usage
    /// ### Required resource
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var volume01 = new Outscale.Volume("volume01", new()
    ///     {
    ///         Size = 40,
    ///         SubregionName = $"{@var.Region}a",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Create a snapshot
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var snapshot01 = new Outscale.Snapshot("snapshot01", new()
    ///     {
    ///         VolumeId = outscale_volume.Volume01.Volume_id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Copy a snapshot
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var snapshot02 = new Outscale.Snapshot("snapshot02", new()
    ///     {
    ///         Description = "Terraform snapshot copy",
    ///         SourceRegionName = "eu-west-2",
    ///         SourceSnapshotId = "snap-12345678",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A snapshot can be imported using its ID. For exampleconsole
    /// 
    /// ```sh
    ///  $ pulumi import outscale:index/snapshot:Snapshot ImportedSnapshot snap-12345678
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/snapshot:Snapshot")]
    public partial class Snapshot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account alias of the owner of the snapshot.
        /// </summary>
        [Output("accountAlias")]
        public Output<string> AccountAlias { get; private set; } = null!;

        /// <summary>
        /// The account ID of the owner of the snapshot.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The date and time of creation of the snapshot.
        /// </summary>
        [Output("creationDate")]
        public Output<string> CreationDate { get; private set; } = null!;

        /// <summary>
        /// A description for the snapshot.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
        /// </summary>
        [Output("fileLocation")]
        public Output<string> FileLocation { get; private set; } = null!;

        /// <summary>
        /// Permissions for the resource.
        /// </summary>
        [Output("permissionsToCreateVolumes")]
        public Output<ImmutableArray<Outputs.SnapshotPermissionsToCreateVolume>> PermissionsToCreateVolumes { get; private set; } = null!;

        /// <summary>
        /// The progress of the snapshot, as a percentage.
        /// </summary>
        [Output("progress")]
        public Output<int> Progress { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// The ID of the snapshot.
        /// </summary>
        [Output("snapshotId")]
        public Output<string> SnapshotId { get; private set; } = null!;

        /// <summary>
        /// (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
        /// </summary>
        [Output("snapshotSize")]
        public Output<int> SnapshotSize { get; private set; } = null!;

        /// <summary>
        /// (When copying) The name of the source Region, which must be the same as the Region of your account.
        /// </summary>
        [Output("sourceRegionName")]
        public Output<string> SourceRegionName { get; private set; } = null!;

        /// <summary>
        /// (When copying) The ID of the snapshot you want to copy.
        /// </summary>
        [Output("sourceSnapshotId")]
        public Output<string> SourceSnapshotId { get; private set; } = null!;

        /// <summary>
        /// The state of the snapshot (`in-queue` \| `completed` \| `error`).
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.SnapshotTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// (When creating) The ID of the volume you want to create a snapshot of.
        /// </summary>
        [Output("volumeId")]
        public Output<string> VolumeId { get; private set; } = null!;

        /// <summary>
        /// The size of the volume used to create the snapshot, in gibibytes (GiB).
        /// </summary>
        [Output("volumeSize")]
        public Output<int> VolumeSize { get; private set; } = null!;


        /// <summary>
        /// Create a Snapshot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Snapshot(string name, SnapshotArgs? args = null, CustomResourceOptions? options = null)
            : base("outscale:index/snapshot:Snapshot", name, args ?? new SnapshotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Snapshot(string name, Input<string> id, SnapshotState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/snapshot:Snapshot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Snapshot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Snapshot Get(string name, Input<string> id, SnapshotState? state = null, CustomResourceOptions? options = null)
        {
            return new Snapshot(name, id, state, options);
        }
    }

    public sealed class SnapshotArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the snapshot.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
        /// </summary>
        [Input("fileLocation")]
        public Input<string>? FileLocation { get; set; }

        /// <summary>
        /// (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
        /// </summary>
        [Input("snapshotSize")]
        public Input<int>? SnapshotSize { get; set; }

        /// <summary>
        /// (When copying) The name of the source Region, which must be the same as the Region of your account.
        /// </summary>
        [Input("sourceRegionName")]
        public Input<string>? SourceRegionName { get; set; }

        /// <summary>
        /// (When copying) The ID of the snapshot you want to copy.
        /// </summary>
        [Input("sourceSnapshotId")]
        public Input<string>? SourceSnapshotId { get; set; }

        [Input("tags")]
        private InputList<Inputs.SnapshotTagArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.SnapshotTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.SnapshotTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// (When creating) The ID of the volume you want to create a snapshot of.
        /// </summary>
        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        public SnapshotArgs()
        {
        }
        public static new SnapshotArgs Empty => new SnapshotArgs();
    }

    public sealed class SnapshotState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account alias of the owner of the snapshot.
        /// </summary>
        [Input("accountAlias")]
        public Input<string>? AccountAlias { get; set; }

        /// <summary>
        /// The account ID of the owner of the snapshot.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The date and time of creation of the snapshot.
        /// </summary>
        [Input("creationDate")]
        public Input<string>? CreationDate { get; set; }

        /// <summary>
        /// A description for the snapshot.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
        /// </summary>
        [Input("fileLocation")]
        public Input<string>? FileLocation { get; set; }

        [Input("permissionsToCreateVolumes")]
        private InputList<Inputs.SnapshotPermissionsToCreateVolumeGetArgs>? _permissionsToCreateVolumes;

        /// <summary>
        /// Permissions for the resource.
        /// </summary>
        public InputList<Inputs.SnapshotPermissionsToCreateVolumeGetArgs> PermissionsToCreateVolumes
        {
            get => _permissionsToCreateVolumes ?? (_permissionsToCreateVolumes = new InputList<Inputs.SnapshotPermissionsToCreateVolumeGetArgs>());
            set => _permissionsToCreateVolumes = value;
        }

        /// <summary>
        /// The progress of the snapshot, as a percentage.
        /// </summary>
        [Input("progress")]
        public Input<int>? Progress { get; set; }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The ID of the snapshot.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
        /// </summary>
        [Input("snapshotSize")]
        public Input<int>? SnapshotSize { get; set; }

        /// <summary>
        /// (When copying) The name of the source Region, which must be the same as the Region of your account.
        /// </summary>
        [Input("sourceRegionName")]
        public Input<string>? SourceRegionName { get; set; }

        /// <summary>
        /// (When copying) The ID of the snapshot you want to copy.
        /// </summary>
        [Input("sourceSnapshotId")]
        public Input<string>? SourceSnapshotId { get; set; }

        /// <summary>
        /// The state of the snapshot (`in-queue` \| `completed` \| `error`).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputList<Inputs.SnapshotTagGetArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.SnapshotTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.SnapshotTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// (When creating) The ID of the volume you want to create a snapshot of.
        /// </summary>
        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        /// <summary>
        /// The size of the volume used to create the snapshot, in gibibytes (GiB).
        /// </summary>
        [Input("volumeSize")]
        public Input<int>? VolumeSize { get; set; }

        public SnapshotState()
        {
        }
        public static new SnapshotState Empty => new SnapshotState();
    }
}
