// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetLoadBalancer
    {
        /// <summary>
        /// Provides information about a load balancer.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-loadbalancer).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var loadBalancer01 = Outscale.GetLoadBalancer.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetLoadBalancerFilterInputArgs
        ///             {
        ///                 Name = "load_balancer_names",
        ///                 Values = new[]
        ///                 {
        ///                     "load_balancer01",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLoadBalancerResult> InvokeAsync(GetLoadBalancerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLoadBalancerResult>("outscale:index/getLoadBalancer:getLoadBalancer", args ?? new GetLoadBalancerArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a load balancer.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-loadbalancer).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var loadBalancer01 = Outscale.GetLoadBalancer.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetLoadBalancerFilterInputArgs
        ///             {
        ///                 Name = "load_balancer_names",
        ///                 Values = new[]
        ///                 {
        ///                     "load_balancer01",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLoadBalancerResult> Invoke(GetLoadBalancerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoadBalancerResult>("outscale:index/getLoadBalancer:getLoadBalancer", args ?? new GetLoadBalancerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a load balancer.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-loadbalancer).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var loadBalancer01 = Outscale.GetLoadBalancer.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetLoadBalancerFilterInputArgs
        ///             {
        ///                 Name = "load_balancer_names",
        ///                 Values = new[]
        ///                 {
        ///                     "load_balancer01",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLoadBalancerResult> Invoke(GetLoadBalancerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoadBalancerResult>("outscale:index/getLoadBalancer:getLoadBalancer", args ?? new GetLoadBalancerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoadBalancerArgs : global::Pulumi.InvokeArgs
    {
        [Input("accessLogs")]
        private List<Inputs.GetLoadBalancerAccessLogArgs>? _accessLogs;

        /// <summary>
        /// Information about access logs.
        /// </summary>
        public List<Inputs.GetLoadBalancerAccessLogArgs> AccessLogs
        {
            get => _accessLogs ?? (_accessLogs = new List<Inputs.GetLoadBalancerAccessLogArgs>());
            set => _accessLogs = value;
        }

        /// <summary>
        /// The DNS name of the load balancer.
        /// </summary>
        [Input("dnsName")]
        public string? DnsName { get; set; }

        [Input("filters")]
        private List<Inputs.GetLoadBalancerFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetLoadBalancerFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetLoadBalancerFilterArgs>());
            set => _filters = value;
        }

        [Input("healthChecks")]
        private List<Inputs.GetLoadBalancerHealthCheckArgs>? _healthChecks;

        /// <summary>
        /// Information about the health check configuration.
        /// </summary>
        public List<Inputs.GetLoadBalancerHealthCheckArgs> HealthChecks
        {
            get => _healthChecks ?? (_healthChecks = new List<Inputs.GetLoadBalancerHealthCheckArgs>());
            set => _healthChecks = value;
        }

        [Input("listeners")]
        private List<Inputs.GetLoadBalancerListenerArgs>? _listeners;

        /// <summary>
        /// The listeners for the load balancer.
        /// </summary>
        public List<Inputs.GetLoadBalancerListenerArgs> Listeners
        {
            get => _listeners ?? (_listeners = new List<Inputs.GetLoadBalancerListenerArgs>());
            set => _listeners = value;
        }

        /// <summary>
        /// The name of the load balancer.
        /// </summary>
        [Input("loadBalancerName")]
        public string? LoadBalancerName { get; set; }

        /// <summary>
        /// The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
        /// If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
        /// If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
        /// </summary>
        [Input("loadBalancerType")]
        public string? LoadBalancerType { get; set; }

        /// <summary>
        /// The ID of the Net for the load balancer.
        /// </summary>
        [Input("netId")]
        public string? NetId { get; set; }

        [Input("securityGroups")]
        private List<string>? _securityGroups;

        /// <summary>
        /// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
        /// </summary>
        public List<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new List<string>());
            set => _securityGroups = value;
        }

        [Input("subnets")]
        private List<string>? _subnets;

        /// <summary>
        /// The ID of the Subnet in which the load balancer was created.
        /// </summary>
        public List<string> Subnets
        {
            get => _subnets ?? (_subnets = new List<string>());
            set => _subnets = value;
        }

        [Input("tags")]
        private List<Inputs.GetLoadBalancerTagArgs>? _tags;

        /// <summary>
        /// One or more tags associated with the load balancer.
        /// </summary>
        public List<Inputs.GetLoadBalancerTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetLoadBalancerTagArgs>());
            set => _tags = value;
        }

        public GetLoadBalancerArgs()
        {
        }
        public static new GetLoadBalancerArgs Empty => new GetLoadBalancerArgs();
    }

    public sealed class GetLoadBalancerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("accessLogs")]
        private InputList<Inputs.GetLoadBalancerAccessLogInputArgs>? _accessLogs;

        /// <summary>
        /// Information about access logs.
        /// </summary>
        public InputList<Inputs.GetLoadBalancerAccessLogInputArgs> AccessLogs
        {
            get => _accessLogs ?? (_accessLogs = new InputList<Inputs.GetLoadBalancerAccessLogInputArgs>());
            set => _accessLogs = value;
        }

        /// <summary>
        /// The DNS name of the load balancer.
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetLoadBalancerFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetLoadBalancerFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetLoadBalancerFilterInputArgs>());
            set => _filters = value;
        }

        [Input("healthChecks")]
        private InputList<Inputs.GetLoadBalancerHealthCheckInputArgs>? _healthChecks;

        /// <summary>
        /// Information about the health check configuration.
        /// </summary>
        public InputList<Inputs.GetLoadBalancerHealthCheckInputArgs> HealthChecks
        {
            get => _healthChecks ?? (_healthChecks = new InputList<Inputs.GetLoadBalancerHealthCheckInputArgs>());
            set => _healthChecks = value;
        }

        [Input("listeners")]
        private InputList<Inputs.GetLoadBalancerListenerInputArgs>? _listeners;

        /// <summary>
        /// The listeners for the load balancer.
        /// </summary>
        public InputList<Inputs.GetLoadBalancerListenerInputArgs> Listeners
        {
            get => _listeners ?? (_listeners = new InputList<Inputs.GetLoadBalancerListenerInputArgs>());
            set => _listeners = value;
        }

        /// <summary>
        /// The name of the load balancer.
        /// </summary>
        [Input("loadBalancerName")]
        public Input<string>? LoadBalancerName { get; set; }

        /// <summary>
        /// The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
        /// If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
        /// If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
        /// </summary>
        [Input("loadBalancerType")]
        public Input<string>? LoadBalancerType { get; set; }

        /// <summary>
        /// The ID of the Net for the load balancer.
        /// </summary>
        [Input("netId")]
        public Input<string>? NetId { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        [Input("subnets")]
        private InputList<string>? _subnets;

        /// <summary>
        /// The ID of the Subnet in which the load balancer was created.
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        [Input("tags")]
        private InputList<Inputs.GetLoadBalancerTagInputArgs>? _tags;

        /// <summary>
        /// One or more tags associated with the load balancer.
        /// </summary>
        public InputList<Inputs.GetLoadBalancerTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetLoadBalancerTagInputArgs>());
            set => _tags = value;
        }

        public GetLoadBalancerInvokeArgs()
        {
        }
        public static new GetLoadBalancerInvokeArgs Empty => new GetLoadBalancerInvokeArgs();
    }


    [OutputType]
    public sealed class GetLoadBalancerResult
    {
        /// <summary>
        /// Information about access logs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancerAccessLogResult> AccessLogs;
        /// <summary>
        /// The stickiness policies defined for the load balancer.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancerApplicationStickyCookiePolicyResult> ApplicationStickyCookiePolicies;
        public readonly ImmutableArray<string> BackendIps;
        /// <summary>
        /// One or more IDs of backend VMs for the load balancer.
        /// </summary>
        public readonly ImmutableArray<string> BackendVmIds;
        /// <summary>
        /// The DNS name of the load balancer.
        /// </summary>
        public readonly string DnsName;
        public readonly ImmutableArray<Outputs.GetLoadBalancerFilterResult> Filters;
        /// <summary>
        /// Information about the health check configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancerHealthCheckResult> HealthChecks;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The listeners for the load balancer.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancerListenerResult> Listeners;
        /// <summary>
        /// The name of the load balancer.
        /// </summary>
        public readonly string LoadBalancerName;
        /// <summary>
        /// The policies defined for the load balancer.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancerLoadBalancerStickyCookiePolicyResult> LoadBalancerStickyCookiePolicies;
        /// <summary>
        /// The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
        /// If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
        /// If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
        /// </summary>
        public readonly string LoadBalancerType;
        /// <summary>
        /// The ID of the Net for the load balancer.
        /// </summary>
        public readonly string NetId;
        /// <summary>
        /// (internet-facing only) The public IP associated with the load balancer.
        /// </summary>
        public readonly string PublicIp;
        public readonly string RequestId;
        /// <summary>
        /// Whether secure cookies are enabled for the load balancer.
        /// </summary>
        public readonly bool SecuredCookies;
        /// <summary>
        /// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroups;
        /// <summary>
        /// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
        /// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancerSourceSecurityGroupResult> SourceSecurityGroups;
        /// <summary>
        /// The ID of the Subnet in which the load balancer was created.
        /// </summary>
        public readonly ImmutableArray<string> Subnets;
        /// <summary>
        /// The ID of the Subregion in which the load balancer was created.
        /// </summary>
        public readonly ImmutableArray<string> SubregionNames;
        /// <summary>
        /// One or more tags associated with the load balancer.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoadBalancerTagResult> Tags;

        [OutputConstructor]
        private GetLoadBalancerResult(
            ImmutableArray<Outputs.GetLoadBalancerAccessLogResult> accessLogs,

            ImmutableArray<Outputs.GetLoadBalancerApplicationStickyCookiePolicyResult> applicationStickyCookiePolicies,

            ImmutableArray<string> backendIps,

            ImmutableArray<string> backendVmIds,

            string dnsName,

            ImmutableArray<Outputs.GetLoadBalancerFilterResult> filters,

            ImmutableArray<Outputs.GetLoadBalancerHealthCheckResult> healthChecks,

            string id,

            ImmutableArray<Outputs.GetLoadBalancerListenerResult> listeners,

            string loadBalancerName,

            ImmutableArray<Outputs.GetLoadBalancerLoadBalancerStickyCookiePolicyResult> loadBalancerStickyCookiePolicies,

            string loadBalancerType,

            string netId,

            string publicIp,

            string requestId,

            bool securedCookies,

            ImmutableArray<string> securityGroups,

            ImmutableArray<Outputs.GetLoadBalancerSourceSecurityGroupResult> sourceSecurityGroups,

            ImmutableArray<string> subnets,

            ImmutableArray<string> subregionNames,

            ImmutableArray<Outputs.GetLoadBalancerTagResult> tags)
        {
            AccessLogs = accessLogs;
            ApplicationStickyCookiePolicies = applicationStickyCookiePolicies;
            BackendIps = backendIps;
            BackendVmIds = backendVmIds;
            DnsName = dnsName;
            Filters = filters;
            HealthChecks = healthChecks;
            Id = id;
            Listeners = listeners;
            LoadBalancerName = loadBalancerName;
            LoadBalancerStickyCookiePolicies = loadBalancerStickyCookiePolicies;
            LoadBalancerType = loadBalancerType;
            NetId = netId;
            PublicIp = publicIp;
            RequestId = requestId;
            SecuredCookies = securedCookies;
            SecurityGroups = securityGroups;
            SourceSecurityGroups = sourceSecurityGroups;
            Subnets = subnets;
            SubregionNames = subregionNames;
            Tags = tags;
        }
    }
}
