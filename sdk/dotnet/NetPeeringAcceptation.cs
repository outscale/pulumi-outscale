// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a Net peering acceptation.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Net-Peerings.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-netpeering).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var netPeeringAcceptation01 = new Outscale.NetPeeringAcceptation("net_peering_acceptation01", new()
    ///     {
    ///         NetPeeringId = netPeering01.NetPeeringId,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/netPeeringAcceptation:NetPeeringAcceptation")]
    public partial class NetPeeringAcceptation : global::Pulumi.CustomResource
    {
        [Output("accepterNetId")]
        public Output<string> AccepterNetId { get; private set; } = null!;

        /// <summary>
        /// Information about the accepter Net.
        /// </summary>
        [Output("accepterNets")]
        public Output<ImmutableArray<Outputs.NetPeeringAcceptationAccepterNet>> AccepterNets { get; private set; } = null!;

        [Output("accepterOwnerId")]
        public Output<string> AccepterOwnerId { get; private set; } = null!;

        /// <summary>
        /// The date and time (UTC) at which the Net peerings expire.
        /// </summary>
        [Output("expirationDate")]
        public Output<string> ExpirationDate { get; private set; } = null!;

        /// <summary>
        /// The ID of the Net peering you want to accept.
        /// </summary>
        [Output("netPeeringId")]
        public Output<string> NetPeeringId { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        [Output("sourceNetAccountId")]
        public Output<string> SourceNetAccountId { get; private set; } = null!;

        [Output("sourceNetId")]
        public Output<string> SourceNetId { get; private set; } = null!;

        /// <summary>
        /// Information about the source Net.
        /// </summary>
        [Output("sourceNets")]
        public Output<ImmutableArray<Outputs.NetPeeringAcceptationSourceNet>> SourceNets { get; private set; } = null!;

        /// <summary>
        /// Information about the state of the Net peering.
        /// </summary>
        [Output("states")]
        public Output<ImmutableArray<Outputs.NetPeeringAcceptationState>> States { get; private set; } = null!;

        /// <summary>
        /// One or more tags associated with the Net peering.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.NetPeeringAcceptationTag>> Tags { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.NetPeeringAcceptationTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a NetPeeringAcceptation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetPeeringAcceptation(string name, NetPeeringAcceptationArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/netPeeringAcceptation:NetPeeringAcceptation", name, args ?? new NetPeeringAcceptationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetPeeringAcceptation(string name, Input<string> id, NetPeeringAcceptationState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/netPeeringAcceptation:NetPeeringAcceptation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetPeeringAcceptation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetPeeringAcceptation Get(string name, Input<string> id, NetPeeringAcceptationState? state = null, CustomResourceOptions? options = null)
        {
            return new NetPeeringAcceptation(name, id, state, options);
        }
    }

    public sealed class NetPeeringAcceptationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Net peering you want to accept.
        /// </summary>
        [Input("netPeeringId", required: true)]
        public Input<string> NetPeeringId { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.NetPeeringAcceptationTimeoutsArgs>? Timeouts { get; set; }

        public NetPeeringAcceptationArgs()
        {
        }
        public static new NetPeeringAcceptationArgs Empty => new NetPeeringAcceptationArgs();
    }

    public sealed class NetPeeringAcceptationState : global::Pulumi.ResourceArgs
    {
        [Input("accepterNetId")]
        public Input<string>? AccepterNetId { get; set; }

        [Input("accepterNets")]
        private InputList<Inputs.NetPeeringAcceptationAccepterNetGetArgs>? _accepterNets;

        /// <summary>
        /// Information about the accepter Net.
        /// </summary>
        public InputList<Inputs.NetPeeringAcceptationAccepterNetGetArgs> AccepterNets
        {
            get => _accepterNets ?? (_accepterNets = new InputList<Inputs.NetPeeringAcceptationAccepterNetGetArgs>());
            set => _accepterNets = value;
        }

        [Input("accepterOwnerId")]
        public Input<string>? AccepterOwnerId { get; set; }

        /// <summary>
        /// The date and time (UTC) at which the Net peerings expire.
        /// </summary>
        [Input("expirationDate")]
        public Input<string>? ExpirationDate { get; set; }

        /// <summary>
        /// The ID of the Net peering you want to accept.
        /// </summary>
        [Input("netPeeringId")]
        public Input<string>? NetPeeringId { get; set; }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        [Input("sourceNetAccountId")]
        public Input<string>? SourceNetAccountId { get; set; }

        [Input("sourceNetId")]
        public Input<string>? SourceNetId { get; set; }

        [Input("sourceNets")]
        private InputList<Inputs.NetPeeringAcceptationSourceNetGetArgs>? _sourceNets;

        /// <summary>
        /// Information about the source Net.
        /// </summary>
        public InputList<Inputs.NetPeeringAcceptationSourceNetGetArgs> SourceNets
        {
            get => _sourceNets ?? (_sourceNets = new InputList<Inputs.NetPeeringAcceptationSourceNetGetArgs>());
            set => _sourceNets = value;
        }

        [Input("states")]
        private InputList<Inputs.NetPeeringAcceptationStateGetArgs>? _states;

        /// <summary>
        /// Information about the state of the Net peering.
        /// </summary>
        public InputList<Inputs.NetPeeringAcceptationStateGetArgs> States
        {
            get => _states ?? (_states = new InputList<Inputs.NetPeeringAcceptationStateGetArgs>());
            set => _states = value;
        }

        [Input("tags")]
        private InputList<Inputs.NetPeeringAcceptationTagGetArgs>? _tags;

        /// <summary>
        /// One or more tags associated with the Net peering.
        /// </summary>
        public InputList<Inputs.NetPeeringAcceptationTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NetPeeringAcceptationTagGetArgs>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.NetPeeringAcceptationTimeoutsGetArgs>? Timeouts { get; set; }

        public NetPeeringAcceptationState()
        {
        }
        public static new NetPeeringAcceptationState Empty => new NetPeeringAcceptationState();
    }
}
