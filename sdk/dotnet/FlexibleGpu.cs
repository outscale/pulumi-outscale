// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a flexible GPU.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-flexiblegpu).
    /// 
    /// ## Example Usage
    /// 
    /// ### Create a flexible GPU
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var flexibleGpu01 = new Outscale.FlexibleGpu("flexible_gpu01", new()
    ///     {
    ///         ModelName = modelName,
    ///         Generation = "v4",
    ///         SubregionName = $"{region}a",
    ///         DeleteOnVmDeletion = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A flexible GPU can be imported using its ID. For example:
    /// 
    /// console
    /// 
    /// ```sh
    /// $ pulumi import outscale:index/flexibleGpu:FlexibleGpu imported_fgpu fgpu-12345678
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/flexibleGpu:FlexibleGpu")]
    public partial class FlexibleGpu : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If true, the fGPU is deleted when the VM is terminated.
        /// </summary>
        [Output("deleteOnVmDeletion")]
        public Output<bool> DeleteOnVmDeletion { get; private set; } = null!;

        /// <summary>
        /// The ID of the fGPU.
        /// </summary>
        [Output("flexibleGpuId")]
        public Output<string> FlexibleGpuId { get; private set; } = null!;

        /// <summary>
        /// The processor generation that the fGPU must be compatible with. If not specified, the oldest possible processor generation is selected (as provided by [ReadFlexibleGpuCatalog](https://docs.outscale.com/api#readflexiblegpucatalog) for the specified model of fGPU).
        /// </summary>
        [Output("generation")]
        public Output<string> Generation { get; private set; } = null!;

        /// <summary>
        /// The model of fGPU you want to allocate. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
        /// </summary>
        [Output("modelName")]
        public Output<string> ModelName { get; private set; } = null!;

        /// <summary>
        /// The state of the fGPU (`allocated` \| `attaching` \| `attached` \| `detaching`).
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The Subregion in which you want to create the fGPU.
        /// </summary>
        [Output("subregionName")]
        public Output<string> SubregionName { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.FlexibleGpuTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// The ID of the VM the fGPU is attached to, if any.
        /// </summary>
        [Output("vmId")]
        public Output<string> VmId { get; private set; } = null!;


        /// <summary>
        /// Create a FlexibleGpu resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FlexibleGpu(string name, FlexibleGpuArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/flexibleGpu:FlexibleGpu", name, args ?? new FlexibleGpuArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FlexibleGpu(string name, Input<string> id, FlexibleGpuState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/flexibleGpu:FlexibleGpu", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FlexibleGpu resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FlexibleGpu Get(string name, Input<string> id, FlexibleGpuState? state = null, CustomResourceOptions? options = null)
        {
            return new FlexibleGpu(name, id, state, options);
        }
    }

    public sealed class FlexibleGpuArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If true, the fGPU is deleted when the VM is terminated.
        /// </summary>
        [Input("deleteOnVmDeletion")]
        public Input<bool>? DeleteOnVmDeletion { get; set; }

        /// <summary>
        /// The processor generation that the fGPU must be compatible with. If not specified, the oldest possible processor generation is selected (as provided by [ReadFlexibleGpuCatalog](https://docs.outscale.com/api#readflexiblegpucatalog) for the specified model of fGPU).
        /// </summary>
        [Input("generation")]
        public Input<string>? Generation { get; set; }

        /// <summary>
        /// The model of fGPU you want to allocate. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
        /// </summary>
        [Input("modelName", required: true)]
        public Input<string> ModelName { get; set; } = null!;

        /// <summary>
        /// The Subregion in which you want to create the fGPU.
        /// </summary>
        [Input("subregionName", required: true)]
        public Input<string> SubregionName { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.FlexibleGpuTimeoutsArgs>? Timeouts { get; set; }

        public FlexibleGpuArgs()
        {
        }
        public static new FlexibleGpuArgs Empty => new FlexibleGpuArgs();
    }

    public sealed class FlexibleGpuState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If true, the fGPU is deleted when the VM is terminated.
        /// </summary>
        [Input("deleteOnVmDeletion")]
        public Input<bool>? DeleteOnVmDeletion { get; set; }

        /// <summary>
        /// The ID of the fGPU.
        /// </summary>
        [Input("flexibleGpuId")]
        public Input<string>? FlexibleGpuId { get; set; }

        /// <summary>
        /// The processor generation that the fGPU must be compatible with. If not specified, the oldest possible processor generation is selected (as provided by [ReadFlexibleGpuCatalog](https://docs.outscale.com/api#readflexiblegpucatalog) for the specified model of fGPU).
        /// </summary>
        [Input("generation")]
        public Input<string>? Generation { get; set; }

        /// <summary>
        /// The model of fGPU you want to allocate. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
        /// </summary>
        [Input("modelName")]
        public Input<string>? ModelName { get; set; }

        /// <summary>
        /// The state of the fGPU (`allocated` \| `attaching` \| `attached` \| `detaching`).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The Subregion in which you want to create the fGPU.
        /// </summary>
        [Input("subregionName")]
        public Input<string>? SubregionName { get; set; }

        [Input("timeouts")]
        public Input<Inputs.FlexibleGpuTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// The ID of the VM the fGPU is attached to, if any.
        /// </summary>
        [Input("vmId")]
        public Input<string>? VmId { get; set; }

        public FlexibleGpuState()
        {
        }
        public static new FlexibleGpuState Empty => new FlexibleGpuState();
    }
}
