// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a flexible GPU link.
    /// 
    /// When linking a flexible GPU to a VM, the VM will automatically be stopped and started again.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-flexiblegpu).
    /// 
    /// ## Example Usage
    /// 
    /// ### Required resources
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vm01 = new Outscale.Vm("vm01", new()
    ///     {
    ///         ImageId = "ami-12345678",
    ///         VmType = "tinav5.c1r1p2",
    ///         KeypairName = keypairName,
    ///         PlacementSubregionName = "eu-west-2a",
    ///     });
    /// 
    ///     var flexibleGpu01 = new Outscale.FlexibleGpu("flexible_gpu01", new()
    ///     {
    ///         ModelName = modelName,
    ///         Generation = "v4",
    ///         SubregionName = "eu-west-2a",
    ///         DeleteOnVmDeletion = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Create a flexible GPU link
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var linkFgpu01 = new Outscale.FlexibleGpuLink("link_fgpu01", new()
    ///     {
    ///         FlexibleGpuIds = new[]
    ///         {
    ///             flexibleGpu01.FlexibleGpuId,
    ///         },
    ///         VmId = vm01.VmId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A flexible GPU link can be imported using the flexible GPU ID. For example:
    /// 
    /// console
    /// 
    /// ```sh
    /// $ pulumi import outscale:index/flexibleGpuLink:FlexibleGpuLink imported_link_fgpu fgpu-12345678
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/flexibleGpuLink:FlexibleGpuLink")]
    public partial class FlexibleGpuLink : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Required) The ID of one or more fGPUs you want to attach.
        /// </summary>
        [Output("flexibleGpuIds")]
        public Output<ImmutableArray<string>> FlexibleGpuIds { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// The ID of the VM you want to attach the fGPU to.
        /// </summary>
        [Output("vmId")]
        public Output<string> VmId { get; private set; } = null!;


        /// <summary>
        /// Create a FlexibleGpuLink resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FlexibleGpuLink(string name, FlexibleGpuLinkArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/flexibleGpuLink:FlexibleGpuLink", name, args ?? new FlexibleGpuLinkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FlexibleGpuLink(string name, Input<string> id, FlexibleGpuLinkState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/flexibleGpuLink:FlexibleGpuLink", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FlexibleGpuLink resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FlexibleGpuLink Get(string name, Input<string> id, FlexibleGpuLinkState? state = null, CustomResourceOptions? options = null)
        {
            return new FlexibleGpuLink(name, id, state, options);
        }
    }

    public sealed class FlexibleGpuLinkArgs : global::Pulumi.ResourceArgs
    {
        [Input("flexibleGpuIds", required: true)]
        private InputList<string>? _flexibleGpuIds;

        /// <summary>
        /// (Required) The ID of one or more fGPUs you want to attach.
        /// </summary>
        public InputList<string> FlexibleGpuIds
        {
            get => _flexibleGpuIds ?? (_flexibleGpuIds = new InputList<string>());
            set => _flexibleGpuIds = value;
        }

        /// <summary>
        /// The ID of the VM you want to attach the fGPU to.
        /// </summary>
        [Input("vmId", required: true)]
        public Input<string> VmId { get; set; } = null!;

        public FlexibleGpuLinkArgs()
        {
        }
        public static new FlexibleGpuLinkArgs Empty => new FlexibleGpuLinkArgs();
    }

    public sealed class FlexibleGpuLinkState : global::Pulumi.ResourceArgs
    {
        [Input("flexibleGpuIds")]
        private InputList<string>? _flexibleGpuIds;

        /// <summary>
        /// (Required) The ID of one or more fGPUs you want to attach.
        /// </summary>
        public InputList<string> FlexibleGpuIds
        {
            get => _flexibleGpuIds ?? (_flexibleGpuIds = new InputList<string>());
            set => _flexibleGpuIds = value;
        }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The ID of the VM you want to attach the fGPU to.
        /// </summary>
        [Input("vmId")]
        public Input<string>? VmId { get; set; }

        public FlexibleGpuLinkState()
        {
        }
        public static new FlexibleGpuLinkState Empty => new FlexibleGpuLinkState();
    }
}
