// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a VPN connection.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPN-Connections.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vpnconnection).
    /// 
    /// ## Example Usage
    /// ### Required resources
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var clientGateway01 = new Outscale.ClientGateway("clientGateway01", new()
    ///     {
    ///         BgpAsn = 65000,
    ///         ConnectionType = "ipsec.1",
    ///         PublicIp = "111.11.11.111",
    ///     });
    /// 
    ///     var virtualGateway01 = new Outscale.VirtualGateway("virtualGateway01", new()
    ///     {
    ///         ConnectionType = "ipsec.1",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Create a VPN connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vpnConnection01 = new Outscale.VpnConnection("vpnConnection01", new()
    ///     {
    ///         ClientGatewayId = outscale_client_gateway.Client_gateway01.Client_gateway_id,
    ///         VirtualGatewayId = outscale_virtual_gateway.Virtual_gateway01.Virtual_gateway_id,
    ///         ConnectionType = "ipsec.1",
    ///         StaticRoutesOnly = true,
    ///         Tags = new[]
    ///         {
    ///             new Outscale.Inputs.VpnConnectionTagArgs
    ///             {
    ///                 Key = "Name",
    ///                 Value = "vpn01",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A VPN connection can be imported using its ID. For exampleconsole
    /// 
    /// ```sh
    ///  $ pulumi import outscale:index/vpnConnection:VpnConnection ImportedVPN vpn-12345678
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/vpnConnection:VpnConnection")]
    public partial class VpnConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Example configuration for the client gateway.
        /// </summary>
        [Output("clientGatewayConfiguration")]
        public Output<string> ClientGatewayConfiguration { get; private set; } = null!;

        /// <summary>
        /// The ID of the client gateway.
        /// </summary>
        [Output("clientGatewayId")]
        public Output<string> ClientGatewayId { get; private set; } = null!;

        /// <summary>
        /// The type of VPN connection (only `ipsec.1` is supported).
        /// </summary>
        [Output("connectionType")]
        public Output<string> ConnectionType { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// Information about one or more static routes associated with the VPN connection, if any.
        /// </summary>
        [Output("routes")]
        public Output<ImmutableArray<Outputs.VpnConnectionRoute>> Routes { get; private set; } = null!;

        /// <summary>
        /// The state of the IPSEC tunnel (`UP` \| `DOWN`).
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
        /// </summary>
        [Output("staticRoutesOnly")]
        public Output<bool?> StaticRoutesOnly { get; private set; } = null!;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.VpnConnectionTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Information about the current state of one or more of the VPN tunnels.
        /// </summary>
        [Output("vgwTelemetries")]
        public Output<ImmutableArray<Outputs.VpnConnectionVgwTelemetry>> VgwTelemetries { get; private set; } = null!;

        /// <summary>
        /// The ID of the virtual gateway.
        /// </summary>
        [Output("virtualGatewayId")]
        public Output<string> VirtualGatewayId { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPN connection.
        /// </summary>
        [Output("vpnConnectionId")]
        public Output<string> VpnConnectionId { get; private set; } = null!;


        /// <summary>
        /// Create a VpnConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpnConnection(string name, VpnConnectionArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/vpnConnection:VpnConnection", name, args ?? new VpnConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpnConnection(string name, Input<string> id, VpnConnectionState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/vpnConnection:VpnConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpnConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpnConnection Get(string name, Input<string> id, VpnConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new VpnConnection(name, id, state, options);
        }
    }

    public sealed class VpnConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the client gateway.
        /// </summary>
        [Input("clientGatewayId", required: true)]
        public Input<string> ClientGatewayId { get; set; } = null!;

        /// <summary>
        /// The type of VPN connection (only `ipsec.1` is supported).
        /// </summary>
        [Input("connectionType", required: true)]
        public Input<string> ConnectionType { get; set; } = null!;

        /// <summary>
        /// If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
        /// </summary>
        [Input("staticRoutesOnly")]
        public Input<bool>? StaticRoutesOnly { get; set; }

        [Input("tags")]
        private InputList<Inputs.VpnConnectionTagArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.VpnConnectionTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.VpnConnectionTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the virtual gateway.
        /// </summary>
        [Input("virtualGatewayId", required: true)]
        public Input<string> VirtualGatewayId { get; set; } = null!;

        public VpnConnectionArgs()
        {
        }
        public static new VpnConnectionArgs Empty => new VpnConnectionArgs();
    }

    public sealed class VpnConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Example configuration for the client gateway.
        /// </summary>
        [Input("clientGatewayConfiguration")]
        public Input<string>? ClientGatewayConfiguration { get; set; }

        /// <summary>
        /// The ID of the client gateway.
        /// </summary>
        [Input("clientGatewayId")]
        public Input<string>? ClientGatewayId { get; set; }

        /// <summary>
        /// The type of VPN connection (only `ipsec.1` is supported).
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        [Input("routes")]
        private InputList<Inputs.VpnConnectionRouteGetArgs>? _routes;

        /// <summary>
        /// Information about one or more static routes associated with the VPN connection, if any.
        /// </summary>
        public InputList<Inputs.VpnConnectionRouteGetArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.VpnConnectionRouteGetArgs>());
            set => _routes = value;
        }

        /// <summary>
        /// The state of the IPSEC tunnel (`UP` \| `DOWN`).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
        /// </summary>
        [Input("staticRoutesOnly")]
        public Input<bool>? StaticRoutesOnly { get; set; }

        [Input("tags")]
        private InputList<Inputs.VpnConnectionTagGetArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.VpnConnectionTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.VpnConnectionTagGetArgs>());
            set => _tags = value;
        }

        [Input("vgwTelemetries")]
        private InputList<Inputs.VpnConnectionVgwTelemetryGetArgs>? _vgwTelemetries;

        /// <summary>
        /// Information about the current state of one or more of the VPN tunnels.
        /// </summary>
        public InputList<Inputs.VpnConnectionVgwTelemetryGetArgs> VgwTelemetries
        {
            get => _vgwTelemetries ?? (_vgwTelemetries = new InputList<Inputs.VpnConnectionVgwTelemetryGetArgs>());
            set => _vgwTelemetries = value;
        }

        /// <summary>
        /// The ID of the virtual gateway.
        /// </summary>
        [Input("virtualGatewayId")]
        public Input<string>? VirtualGatewayId { get; set; }

        /// <summary>
        /// The ID of the VPN connection.
        /// </summary>
        [Input("vpnConnectionId")]
        public Input<string>? VpnConnectionId { get; set; }

        public VpnConnectionState()
        {
        }
        public static new VpnConnectionState Empty => new VpnConnectionState();
    }
}
