// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale.Outputs
{

    [OutputType]
    public sealed class LoadBalancerListenerRuleListenerRule
    {
        /// <summary>
        /// The type of action for the rule (always `forward`).
        /// </summary>
        public readonly string? Action;
        /// <summary>
        /// A host-name pattern for the rule, with a maximum length of 128 characters. This host-name pattern supports maximum three wildcards, and must not contain any special characters except `-.?`.
        /// </summary>
        public readonly string? HostNamePattern;
        /// <summary>
        /// The ID of the listener.
        /// </summary>
        public readonly int? ListenerId;
        /// <summary>
        /// The ID of the listener rule.
        /// </summary>
        public readonly int? ListenerRuleId;
        /// <summary>
        /// A human-readable name for the listener rule.
        /// </summary>
        public readonly string ListenerRuleName;
        /// <summary>
        /// A path pattern for the rule, with a maximum length of 128 characters. This path pattern supports maximum three wildcards, and must not contain any special characters except `_-.$/~&amp;quot;'@:+?`.
        /// </summary>
        public readonly string? PathPattern;
        /// <summary>
        /// The priority level of the listener rule, between `1` and `19999` both included. Each rule must have a unique priority level. Otherwise, an error is returned.
        /// </summary>
        public readonly int Priority;

        [OutputConstructor]
        private LoadBalancerListenerRuleListenerRule(
            string? action,

            string? hostNamePattern,

            int? listenerId,

            int? listenerRuleId,

            string listenerRuleName,

            string? pathPattern,

            int priority)
        {
            Action = action;
            HostNamePattern = hostNamePattern;
            ListenerId = listenerId;
            ListenerRuleId = listenerRuleId;
            ListenerRuleName = listenerRuleName;
            PathPattern = pathPattern;
            Priority = priority;
        }
    }
}
