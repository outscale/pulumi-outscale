// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale.Outputs
{

    [OutputType]
    public sealed class GetFlexibleGpusFlexibleGpusResult
    {
        /// <summary>
        /// If true, the fGPU is deleted when the VM is terminated.
        /// </summary>
        public readonly bool DeleteOnVmDeletion;
        /// <summary>
        /// The ID of the fGPU.
        /// </summary>
        public readonly string FlexibleGpuId;
        /// <summary>
        /// The compatible processor generation.
        /// </summary>
        public readonly string Generation;
        /// <summary>
        /// The model of fGPU. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
        /// </summary>
        public readonly string ModelName;
        /// <summary>
        /// The state of the fGPU (`allocated` \| `attaching` \| `attached` \| `detaching`).
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The Subregion where the fGPU is located.
        /// </summary>
        public readonly string SubregionName;
        /// <summary>
        /// The ID of the VM the fGPU is attached to, if any.
        /// </summary>
        public readonly string VmId;

        [OutputConstructor]
        private GetFlexibleGpusFlexibleGpusResult(
            bool deleteOnVmDeletion,

            string flexibleGpuId,

            string generation,

            string modelName,

            string state,

            string subregionName,

            string vmId)
        {
            DeleteOnVmDeletion = deleteOnVmDeletion;
            FlexibleGpuId = flexibleGpuId;
            Generation = generation;
            ModelName = modelName;
            State = state;
            SubregionName = subregionName;
            VmId = vmId;
        }
    }
}
