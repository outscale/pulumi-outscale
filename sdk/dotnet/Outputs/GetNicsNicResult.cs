// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale.Outputs
{

    [OutputType]
    public sealed class GetNicsNicResult
    {
        /// <summary>
        /// The account ID of the owner of the NIC.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// The description of the NIC.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
        /// </summary>
        public readonly bool IsSourceDestChecked;
        /// <summary>
        /// Information about the NIC attachment.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNicsNicLinkNicResult> LinkNics;
        /// <summary>
        /// Information about the public IP association.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNicsNicLinkPublicIpResult> LinkPublicIps;
        /// <summary>
        /// The Media Access Control (MAC) address of the NIC.
        /// </summary>
        public readonly string MacAddress;
        /// <summary>
        /// The ID of the Net for the NIC.
        /// </summary>
        public readonly string NetId;
        /// <summary>
        /// The ID of the NIC.
        /// </summary>
        public readonly string NicId;
        /// <summary>
        /// The name of the private DNS.
        /// </summary>
        public readonly string PrivateDnsName;
        /// <summary>
        /// The private IPs of the NIC.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNicsNicPrivateIpResult> PrivateIps;
        /// <summary>
        /// One or more IDs of security groups for the NIC.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNicsNicSecurityGroupResult> SecurityGroups;
        /// <summary>
        /// The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The ID of the Subnet.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// The Subregion in which the NIC is located.
        /// </summary>
        public readonly string SubregionName;
        /// <summary>
        /// The key/value combinations of the tags associated with the NICs, in the following format: `TAGKEY=TAGVALUE`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNicsNicTagResult> Tags;

        [OutputConstructor]
        private GetNicsNicResult(
            string accountId,

            string description,

            bool isSourceDestChecked,

            ImmutableArray<Outputs.GetNicsNicLinkNicResult> linkNics,

            ImmutableArray<Outputs.GetNicsNicLinkPublicIpResult> linkPublicIps,

            string macAddress,

            string netId,

            string nicId,

            string privateDnsName,

            ImmutableArray<Outputs.GetNicsNicPrivateIpResult> privateIps,

            ImmutableArray<Outputs.GetNicsNicSecurityGroupResult> securityGroups,

            string state,

            string subnetId,

            string subregionName,

            ImmutableArray<Outputs.GetNicsNicTagResult> tags)
        {
            AccountId = accountId;
            Description = description;
            IsSourceDestChecked = isSourceDestChecked;
            LinkNics = linkNics;
            LinkPublicIps = linkPublicIps;
            MacAddress = macAddress;
            NetId = netId;
            NicId = nicId;
            PrivateDnsName = privateDnsName;
            PrivateIps = privateIps;
            SecurityGroups = securityGroups;
            State = state;
            SubnetId = subnetId;
            SubregionName = subregionName;
            Tags = tags;
        }
    }
}
