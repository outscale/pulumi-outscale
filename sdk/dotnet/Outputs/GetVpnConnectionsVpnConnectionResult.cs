// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale.Outputs
{

    [OutputType]
    public sealed class GetVpnConnectionsVpnConnectionResult
    {
        /// <summary>
        /// Example configuration for the client gateway.
        /// </summary>
        public readonly string ClientGatewayConfiguration;
        /// <summary>
        /// The ID of the client gateway used on the client end of the connection.
        /// </summary>
        public readonly string ClientGatewayId;
        /// <summary>
        /// The type of VPN connection (always `ipsec.1`).
        /// </summary>
        public readonly string ConnectionType;
        /// <summary>
        /// Information about one or more static routes associated with the VPN connection, if any.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnConnectionsVpnConnectionRouteResult> Routes;
        /// <summary>
        /// The state of the IPSEC tunnel (`UP` \| `DOWN`).
        /// </summary>
        public readonly string State;
        /// <summary>
        /// If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
        /// </summary>
        public readonly bool? StaticRoutesOnly;
        /// <summary>
        /// One or more tags associated with the VPN connection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnConnectionsVpnConnectionTagResult> Tags;
        /// <summary>
        /// Information about the current state of one or more of the VPN tunnels.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnConnectionsVpnConnectionVgwTelemetryResult> VgwTelemetries;
        /// <summary>
        /// The ID of the virtual gateway used on the OUTSCALE end of the connection.
        /// </summary>
        public readonly string VirtualGatewayId;
        /// <summary>
        /// The ID of the VPN connection.
        /// </summary>
        public readonly string VpnConnectionId;

        [OutputConstructor]
        private GetVpnConnectionsVpnConnectionResult(
            string clientGatewayConfiguration,

            string clientGatewayId,

            string connectionType,

            ImmutableArray<Outputs.GetVpnConnectionsVpnConnectionRouteResult> routes,

            string state,

            bool? staticRoutesOnly,

            ImmutableArray<Outputs.GetVpnConnectionsVpnConnectionTagResult> tags,

            ImmutableArray<Outputs.GetVpnConnectionsVpnConnectionVgwTelemetryResult> vgwTelemetries,

            string virtualGatewayId,

            string vpnConnectionId)
        {
            ClientGatewayConfiguration = clientGatewayConfiguration;
            ClientGatewayId = clientGatewayId;
            ConnectionType = connectionType;
            Routes = routes;
            State = state;
            StaticRoutesOnly = staticRoutesOnly;
            Tags = tags;
            VgwTelemetries = vgwTelemetries;
            VirtualGatewayId = virtualGatewayId;
            VpnConnectionId = vpnConnectionId;
        }
    }
}
