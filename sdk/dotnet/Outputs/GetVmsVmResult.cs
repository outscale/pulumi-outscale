// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale.Outputs
{

    [OutputType]
    public sealed class GetVmsVmResult
    {
        public readonly ImmutableArray<Outputs.GetVmsVmActionsOnNextBootResult> ActionsOnNextBoots;
        /// <summary>
        /// The architecture of the VM (`i386` \| `x86_64`).
        /// </summary>
        public readonly string Architecture;
        /// <summary>
        /// The block device mapping of the VM.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVmsVmBlockDeviceMappingsCreatedResult> BlockDeviceMappingsCreateds;
        public readonly string BootMode;
        public readonly bool BsuOptimized;
        /// <summary>
        /// The idempotency token provided when launching the VM.
        /// </summary>
        public readonly string ClientToken;
        /// <summary>
        /// The date and time (UTC) at which the VM was created.
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// If true, you cannot delete the VM unless you change this parameter back to false.
        /// </summary>
        public readonly bool DeletionProtection;
        /// <summary>
        /// The hypervisor type of the VMs (`ovm` \| `xen`).
        /// </summary>
        public readonly string Hypervisor;
        /// <summary>
        /// The ID of the OMI used to create the VM.
        /// </summary>
        public readonly string ImageId;
        /// <summary>
        /// (Net only) If true, the source/destination check is enabled. If false, it is disabled.
        /// </summary>
        public readonly bool IsSourceDestChecked;
        /// <summary>
        /// The name of the keypair used when launching the VM.
        /// </summary>
        public readonly string KeypairName;
        /// <summary>
        /// The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
        /// </summary>
        public readonly int LaunchNumber;
        /// <summary>
        /// If true, nested virtualization is enabled. If false, it is disabled.
        /// </summary>
        public readonly bool NestedVirtualization;
        /// <summary>
        /// The ID of the Net for the NIC.
        /// </summary>
        public readonly string NetId;
        /// <summary>
        /// (Net only) The network interface cards (NICs) the VMs are attached to.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVmsVmNicResult> Nics;
        /// <summary>
        /// Indicates the operating system (OS) of the VM.
        /// </summary>
        public readonly string OsFamily;
        /// <summary>
        /// The performance of the VM (`medium` \| `high` \|  `highest`).
        /// </summary>
        public readonly string Performance;
        public readonly string PlacementSubregionName;
        public readonly string PlacementTenancy;
        public readonly ImmutableArray<Outputs.GetVmsVmPrimaryNicResult> PrimaryNics;
        /// <summary>
        /// The name of the private DNS.
        /// </summary>
        public readonly string PrivateDnsName;
        /// <summary>
        /// The primary private IP of the VM.
        /// </summary>
        public readonly string PrivateIp;
        /// <summary>
        /// The private IP or IPs of the NIC.
        /// </summary>
        public readonly ImmutableArray<string> PrivateIps;
        /// <summary>
        /// The product codes associated with the OMI used to create the VM.
        /// </summary>
        public readonly ImmutableArray<string> ProductCodes;
        /// <summary>
        /// The name of the public DNS.
        /// </summary>
        public readonly string PublicDnsName;
        /// <summary>
        /// The public IP of the VM.
        /// </summary>
        public readonly string PublicIp;
        public readonly string RequestId;
        /// <summary>
        /// The reservation ID of the VM.
        /// </summary>
        public readonly string ReservationId;
        /// <summary>
        /// The name of the root device for the VM (for example, `/dev/sda1`).
        /// </summary>
        public readonly string RootDeviceName;
        /// <summary>
        /// The type of root device used by the VM (always `bsu`).
        /// </summary>
        public readonly string RootDeviceType;
        /// <summary>
        /// The IDs of the security groups for the VMs (only in the public Cloud).
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// The names of the security groups for the VMs (only in the public Cloud).
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupNames;
        /// <summary>
        /// One or more security groups associated with the VM.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVmsVmSecurityGroupResult> SecurityGroups;
        /// <summary>
        /// The state of the VM (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The reason explaining the current state of the VM.
        /// </summary>
        public readonly string StateReason;
        /// <summary>
        /// The ID of the Subnet for the VM.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// One or more tags associated with the VM.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVmsVmTagResult> Tags;
        /// <summary>
        /// The Base64-encoded MIME user data.
        /// </summary>
        public readonly string UserData;
        /// <summary>
        /// The ID of the VM.
        /// </summary>
        public readonly string VmId;
        /// <summary>
        /// The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.
        /// </summary>
        public readonly string VmInitiatedShutdownBehavior;
        /// <summary>
        /// The type of VM. For more information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
        /// </summary>
        public readonly string VmType;

        [OutputConstructor]
        private GetVmsVmResult(
            ImmutableArray<Outputs.GetVmsVmActionsOnNextBootResult> actionsOnNextBoots,

            string architecture,

            ImmutableArray<Outputs.GetVmsVmBlockDeviceMappingsCreatedResult> blockDeviceMappingsCreateds,

            string bootMode,

            bool bsuOptimized,

            string clientToken,

            string creationDate,

            bool deletionProtection,

            string hypervisor,

            string imageId,

            bool isSourceDestChecked,

            string keypairName,

            int launchNumber,

            bool nestedVirtualization,

            string netId,

            ImmutableArray<Outputs.GetVmsVmNicResult> nics,

            string osFamily,

            string performance,

            string placementSubregionName,

            string placementTenancy,

            ImmutableArray<Outputs.GetVmsVmPrimaryNicResult> primaryNics,

            string privateDnsName,

            string privateIp,

            ImmutableArray<string> privateIps,

            ImmutableArray<string> productCodes,

            string publicDnsName,

            string publicIp,

            string requestId,

            string reservationId,

            string rootDeviceName,

            string rootDeviceType,

            ImmutableArray<string> securityGroupIds,

            ImmutableArray<string> securityGroupNames,

            ImmutableArray<Outputs.GetVmsVmSecurityGroupResult> securityGroups,

            string state,

            string stateReason,

            string subnetId,

            ImmutableArray<Outputs.GetVmsVmTagResult> tags,

            string userData,

            string vmId,

            string vmInitiatedShutdownBehavior,

            string vmType)
        {
            ActionsOnNextBoots = actionsOnNextBoots;
            Architecture = architecture;
            BlockDeviceMappingsCreateds = blockDeviceMappingsCreateds;
            BootMode = bootMode;
            BsuOptimized = bsuOptimized;
            ClientToken = clientToken;
            CreationDate = creationDate;
            DeletionProtection = deletionProtection;
            Hypervisor = hypervisor;
            ImageId = imageId;
            IsSourceDestChecked = isSourceDestChecked;
            KeypairName = keypairName;
            LaunchNumber = launchNumber;
            NestedVirtualization = nestedVirtualization;
            NetId = netId;
            Nics = nics;
            OsFamily = osFamily;
            Performance = performance;
            PlacementSubregionName = placementSubregionName;
            PlacementTenancy = placementTenancy;
            PrimaryNics = primaryNics;
            PrivateDnsName = privateDnsName;
            PrivateIp = privateIp;
            PrivateIps = privateIps;
            ProductCodes = productCodes;
            PublicDnsName = publicDnsName;
            PublicIp = publicIp;
            RequestId = requestId;
            ReservationId = reservationId;
            RootDeviceName = rootDeviceName;
            RootDeviceType = rootDeviceType;
            SecurityGroupIds = securityGroupIds;
            SecurityGroupNames = securityGroupNames;
            SecurityGroups = securityGroups;
            State = state;
            StateReason = stateReason;
            SubnetId = subnetId;
            Tags = tags;
            UserData = userData;
            VmId = vmId;
            VmInitiatedShutdownBehavior = vmInitiatedShutdownBehavior;
            VmType = vmType;
        }
    }
}
