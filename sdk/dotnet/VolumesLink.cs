// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a volume link.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Volumes.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-volume).
    /// 
    /// ## Example Usage
    /// ### Required resources
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var volume01 = new Outscale.Volume("volume01", new()
    ///     {
    ///         SubregionName = $"{@var.Region}a",
    ///         Size = 40,
    ///     });
    /// 
    ///     var vm01 = new Outscale.Vm("vm01", new()
    ///     {
    ///         ImageId = @var.Image_id,
    ///         VmType = @var.Vm_type,
    ///         KeypairName = @var.Keypair_name,
    ///         SecurityGroupIds = new[]
    ///         {
    ///             @var.Security_group_id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Link a volume to a VM
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var volumesLink01 = new Outscale.VolumesLink("volumesLink01", new()
    ///     {
    ///         DeviceName = "/dev/xvdc",
    ///         VolumeId = outscale_volume.Volume01.Id,
    ///         VmId = outscale_vm.Vm01.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A volume link can be imported using a volume ID. For exampleconsole
    /// 
    /// ```sh
    ///  $ pulumi import outscale:index/volumesLink:VolumesLink ImportedVolumeLink vol-12345678
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/volumesLink:VolumesLink")]
    public partial class VolumesLink : global::Pulumi.CustomResource
    {
        [Output("deleteOnVmTermination")]
        public Output<bool?> DeleteOnVmTermination { get; private set; } = null!;

        /// <summary>
        /// The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        /// </summary>
        [Output("deviceName")]
        public Output<string> DeviceName { get; private set; } = null!;

        [Output("forceUnlink")]
        public Output<bool> ForceUnlink { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// The state of the attachment of the volume (`attaching` | `detaching` | `attached` | `detached`).
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The ID of the VM you want to attach the volume to.
        /// </summary>
        [Output("vmId")]
        public Output<string> VmId { get; private set; } = null!;

        /// <summary>
        /// The ID of the volume you want to attach.
        /// </summary>
        [Output("volumeId")]
        public Output<string> VolumeId { get; private set; } = null!;


        /// <summary>
        /// Create a VolumesLink resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VolumesLink(string name, VolumesLinkArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/volumesLink:VolumesLink", name, args ?? new VolumesLinkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VolumesLink(string name, Input<string> id, VolumesLinkState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/volumesLink:VolumesLink", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VolumesLink resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VolumesLink Get(string name, Input<string> id, VolumesLinkState? state = null, CustomResourceOptions? options = null)
        {
            return new VolumesLink(name, id, state, options);
        }
    }

    public sealed class VolumesLinkArgs : global::Pulumi.ResourceArgs
    {
        [Input("deleteOnVmTermination")]
        public Input<bool>? DeleteOnVmTermination { get; set; }

        /// <summary>
        /// The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        /// </summary>
        [Input("deviceName", required: true)]
        public Input<string> DeviceName { get; set; } = null!;

        [Input("forceUnlink")]
        public Input<bool>? ForceUnlink { get; set; }

        /// <summary>
        /// The ID of the VM you want to attach the volume to.
        /// </summary>
        [Input("vmId", required: true)]
        public Input<string> VmId { get; set; } = null!;

        /// <summary>
        /// The ID of the volume you want to attach.
        /// </summary>
        [Input("volumeId", required: true)]
        public Input<string> VolumeId { get; set; } = null!;

        public VolumesLinkArgs()
        {
        }
        public static new VolumesLinkArgs Empty => new VolumesLinkArgs();
    }

    public sealed class VolumesLinkState : global::Pulumi.ResourceArgs
    {
        [Input("deleteOnVmTermination")]
        public Input<bool>? DeleteOnVmTermination { get; set; }

        /// <summary>
        /// The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
        /// </summary>
        [Input("deviceName")]
        public Input<string>? DeviceName { get; set; }

        [Input("forceUnlink")]
        public Input<bool>? ForceUnlink { get; set; }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The state of the attachment of the volume (`attaching` | `detaching` | `attached` | `detached`).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The ID of the VM you want to attach the volume to.
        /// </summary>
        [Input("vmId")]
        public Input<string>? VmId { get; set; }

        /// <summary>
        /// The ID of the volume you want to attach.
        /// </summary>
        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        public VolumesLinkState()
        {
        }
        public static new VolumesLinkState Empty => new VolumesLinkState();
    }
}
