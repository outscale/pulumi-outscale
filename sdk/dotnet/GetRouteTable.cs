// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetRouteTable
    {
        /// <summary>
        /// Provides information about a route table.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Route-Tables.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-routetable).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var routeTable01 = Outscale.GetRouteTable.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetRouteTableFilterInputArgs
        ///             {
        ///                 Name = "route_table_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "rtb-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRouteTableResult> InvokeAsync(GetRouteTableArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteTableResult>("outscale:index/getRouteTable:getRouteTable", args ?? new GetRouteTableArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a route table.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Route-Tables.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-routetable).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var routeTable01 = Outscale.GetRouteTable.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetRouteTableFilterInputArgs
        ///             {
        ///                 Name = "route_table_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "rtb-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteTableResult> Invoke(GetRouteTableInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteTableResult>("outscale:index/getRouteTable:getRouteTable", args ?? new GetRouteTableInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a route table.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Route-Tables.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-routetable).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var routeTable01 = Outscale.GetRouteTable.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetRouteTableFilterInputArgs
        ///             {
        ///                 Name = "route_table_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "rtb-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteTableResult> Invoke(GetRouteTableInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteTableResult>("outscale:index/getRouteTable:getRouteTable", args ?? new GetRouteTableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteTableArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetRouteTableFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetRouteTableFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRouteTableFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the route table.
        /// </summary>
        [Input("routeTableId")]
        public string? RouteTableId { get; set; }

        public GetRouteTableArgs()
        {
        }
        public static new GetRouteTableArgs Empty => new GetRouteTableArgs();
    }

    public sealed class GetRouteTableInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetRouteTableFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetRouteTableFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRouteTableFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the route table.
        /// </summary>
        [Input("routeTableId")]
        public Input<string>? RouteTableId { get; set; }

        public GetRouteTableInvokeArgs()
        {
        }
        public static new GetRouteTableInvokeArgs Empty => new GetRouteTableInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteTableResult
    {
        public readonly ImmutableArray<Outputs.GetRouteTableFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// One or more associations between the route table and Subnets.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteTableLinkRouteTableResult> LinkRouteTables;
        /// <summary>
        /// The ID of the Net for the route table.
        /// </summary>
        public readonly string NetId;
        public readonly string RequestId;
        /// <summary>
        /// Information about virtual gateways propagating routes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteTableRoutePropagatingVirtualGatewayResult> RoutePropagatingVirtualGateways;
        /// <summary>
        /// The ID of the route table.
        /// </summary>
        public readonly string RouteTableId;
        /// <summary>
        /// One or more routes in the route table.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteTableRouteResult> Routes;
        /// <summary>
        /// One or more tags associated with the route table.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteTableTagResult> Tags;

        [OutputConstructor]
        private GetRouteTableResult(
            ImmutableArray<Outputs.GetRouteTableFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetRouteTableLinkRouteTableResult> linkRouteTables,

            string netId,

            string requestId,

            ImmutableArray<Outputs.GetRouteTableRoutePropagatingVirtualGatewayResult> routePropagatingVirtualGateways,

            string routeTableId,

            ImmutableArray<Outputs.GetRouteTableRouteResult> routes,

            ImmutableArray<Outputs.GetRouteTableTagResult> tags)
        {
            Filters = filters;
            Id = id;
            LinkRouteTables = linkRouteTables;
            NetId = netId;
            RequestId = requestId;
            RoutePropagatingVirtualGateways = routePropagatingVirtualGateways;
            RouteTableId = routeTableId;
            Routes = routes;
            Tags = tags;
        }
    }
}
