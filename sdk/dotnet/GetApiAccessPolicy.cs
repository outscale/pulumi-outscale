// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetApiAccessPolicy
    {
        /// <summary>
        /// Provides information about the API access policy.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Your-API-Access-Policy.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-apiaccesspolicy).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var unique = Outscale.GetApiAccessPolicy.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetApiAccessPolicyResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetApiAccessPolicyResult>("outscale:index/getApiAccessPolicy:getApiAccessPolicy", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Provides information about the API access policy.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Your-API-Access-Policy.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-apiaccesspolicy).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var unique = Outscale.GetApiAccessPolicy.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetApiAccessPolicyResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetApiAccessPolicyResult>("outscale:index/getApiAccessPolicy:getApiAccessPolicy", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetApiAccessPolicyResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The maximum possible lifetime for your access keys, in seconds. If `0`, your access keys can have unlimited lifetimes.
        /// </summary>
        public readonly int MaxAccessKeyExpirationSeconds;
        public readonly string RequestId;
        /// <summary>
        /// If true, a trusted session is activated, allowing you to bypass Certificate Authorities (CAs) enforcement. For more information, see the `ApiKeyAuth` authentication scheme in the [Authentication](https://docs.outscale.com/api#authentication) section.
        /// </summary>
        public readonly bool RequireTrustedEnv;

        [OutputConstructor]
        private GetApiAccessPolicyResult(
            string id,

            int maxAccessKeyExpirationSeconds,

            string requestId,

            bool requireTrustedEnv)
        {
            Id = id;
            MaxAccessKeyExpirationSeconds = maxAccessKeyExpirationSeconds;
            RequestId = requestId;
            RequireTrustedEnv = requireTrustedEnv;
        }
    }
}
