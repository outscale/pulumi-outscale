// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetVirtualGateway
    {
        /// <summary>
        /// Provides information about a virtual gateway.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Virtual-Private-Gateways.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-virtualgateway).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var virtualGateway01 = Outscale.GetVirtualGateway.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetVirtualGatewayFilterInputArgs
        ///             {
        ///                 Name = "virtual_gateway_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "vgw-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVirtualGatewayResult> InvokeAsync(GetVirtualGatewayArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualGatewayResult>("outscale:index/getVirtualGateway:getVirtualGateway", args ?? new GetVirtualGatewayArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a virtual gateway.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Virtual-Private-Gateways.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-virtualgateway).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var virtualGateway01 = Outscale.GetVirtualGateway.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetVirtualGatewayFilterInputArgs
        ///             {
        ///                 Name = "virtual_gateway_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "vgw-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVirtualGatewayResult> Invoke(GetVirtualGatewayInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualGatewayResult>("outscale:index/getVirtualGateway:getVirtualGateway", args ?? new GetVirtualGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualGatewayArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of VPN connection supported by the virtual gateway (only `ipsec.1` is supported).
        /// </summary>
        [Input("connectionType")]
        public string? ConnectionType { get; set; }

        [Input("filters")]
        private List<Inputs.GetVirtualGatewayFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetVirtualGatewayFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVirtualGatewayFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The state of the virtual gateway (`pending` \| `available` \| `deleting` \| `deleted`).
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// The ID of the virtual gateway.
        /// </summary>
        [Input("virtualGatewayId")]
        public string? VirtualGatewayId { get; set; }

        public GetVirtualGatewayArgs()
        {
        }
        public static new GetVirtualGatewayArgs Empty => new GetVirtualGatewayArgs();
    }

    public sealed class GetVirtualGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of VPN connection supported by the virtual gateway (only `ipsec.1` is supported).
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetVirtualGatewayFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetVirtualGatewayFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVirtualGatewayFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The state of the virtual gateway (`pending` \| `available` \| `deleting` \| `deleted`).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The ID of the virtual gateway.
        /// </summary>
        [Input("virtualGatewayId")]
        public Input<string>? VirtualGatewayId { get; set; }

        public GetVirtualGatewayInvokeArgs()
        {
        }
        public static new GetVirtualGatewayInvokeArgs Empty => new GetVirtualGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualGatewayResult
    {
        /// <summary>
        /// The type of VPN connection supported by the virtual gateway (only `ipsec.1` is supported).
        /// </summary>
        public readonly string ConnectionType;
        public readonly ImmutableArray<Outputs.GetVirtualGatewayFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Net to which the virtual gateway is attached.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualGatewayNetToVirtualGatewayLinkResult> NetToVirtualGatewayLinks;
        public readonly string RequestId;
        /// <summary>
        /// The state of the virtual gateway (`pending` \| `available` \| `deleting` \| `deleted`).
        /// </summary>
        public readonly string State;
        /// <summary>
        /// One or more tags associated with the virtual gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualGatewayTagResult> Tags;
        /// <summary>
        /// The ID of the virtual gateway.
        /// </summary>
        public readonly string VirtualGatewayId;

        [OutputConstructor]
        private GetVirtualGatewayResult(
            string connectionType,

            ImmutableArray<Outputs.GetVirtualGatewayFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetVirtualGatewayNetToVirtualGatewayLinkResult> netToVirtualGatewayLinks,

            string requestId,

            string state,

            ImmutableArray<Outputs.GetVirtualGatewayTagResult> tags,

            string virtualGatewayId)
        {
            ConnectionType = connectionType;
            Filters = filters;
            Id = id;
            NetToVirtualGatewayLinks = netToVirtualGatewayLinks;
            RequestId = requestId;
            State = state;
            Tags = tags;
            VirtualGatewayId = virtualGatewayId;
        }
    }
}
