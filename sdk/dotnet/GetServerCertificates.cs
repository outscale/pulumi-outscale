// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetServerCertificates
    {
        /// <summary>
        /// Provides information about server certificates.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Server-Certificates-in-EIM.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-servercertificate).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Read specific server certificates
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var serverCertificates01 = Outscale.GetServerCertificates.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetServerCertificatesFilterInputArgs
        ///             {
        ///                 Name = "paths",
        ///                 Values = new[]
        ///                 {
        ///                     "&lt;PATH01&gt;",
        ///                     "&lt;PATH02&gt;",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Read all server certificates
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var allServerCertificates = Outscale.GetServerCertificates.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServerCertificatesResult> InvokeAsync(GetServerCertificatesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerCertificatesResult>("outscale:index/getServerCertificates:getServerCertificates", args ?? new GetServerCertificatesArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about server certificates.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Server-Certificates-in-EIM.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-servercertificate).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Read specific server certificates
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var serverCertificates01 = Outscale.GetServerCertificates.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetServerCertificatesFilterInputArgs
        ///             {
        ///                 Name = "paths",
        ///                 Values = new[]
        ///                 {
        ///                     "&lt;PATH01&gt;",
        ///                     "&lt;PATH02&gt;",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Read all server certificates
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var allServerCertificates = Outscale.GetServerCertificates.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetServerCertificatesResult> Invoke(GetServerCertificatesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerCertificatesResult>("outscale:index/getServerCertificates:getServerCertificates", args ?? new GetServerCertificatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerCertificatesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetServerCertificatesFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetServerCertificatesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetServerCertificatesFilterArgs>());
            set => _filters = value;
        }

        public GetServerCertificatesArgs()
        {
        }
        public static new GetServerCertificatesArgs Empty => new GetServerCertificatesArgs();
    }

    public sealed class GetServerCertificatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetServerCertificatesFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetServerCertificatesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetServerCertificatesFilterInputArgs>());
            set => _filters = value;
        }

        public GetServerCertificatesInvokeArgs()
        {
        }
        public static new GetServerCertificatesInvokeArgs Empty => new GetServerCertificatesInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerCertificatesResult
    {
        public readonly ImmutableArray<Outputs.GetServerCertificatesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string RequestId;
        /// <summary>
        /// Information about one or more server certificates.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerCertificatesServerCertificateResult> ServerCertificates;

        [OutputConstructor]
        private GetServerCertificatesResult(
            ImmutableArray<Outputs.GetServerCertificatesFilterResult> filters,

            string id,

            string requestId,

            ImmutableArray<Outputs.GetServerCertificatesServerCertificateResult> serverCertificates)
        {
            Filters = filters;
            Id = id;
            RequestId = requestId;
            ServerCertificates = serverCertificates;
        }
    }
}
