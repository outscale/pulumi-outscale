// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetPoliciesLinkedToUserGroup
    {
        /// <summary>
        /// Provides information about a link policy to user group.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Policies.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#readmanagedpolicieslinkedtousergroup).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var managedPoliciesLinkedToUserGroup = Outscale.GetPoliciesLinkedToUserGroup.Invoke(new()
        ///     {
        ///         UserGroupName = "user_group_name",
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetPoliciesLinkedToUserGroupFilterInputArgs
        ///             {
        ///                 Name = "user_group_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "XXXXXXX",
        ///                     "YYYYYY",
        ///                 },
        ///             },
        ///             new Outscale.Inputs.GetPoliciesLinkedToUserGroupFilterInputArgs
        ///             {
        ///                 Name = "path_prefix",
        ///                 Values = new[]
        ///                 {
        ///                     "/test/",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPoliciesLinkedToUserGroupResult> InvokeAsync(GetPoliciesLinkedToUserGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPoliciesLinkedToUserGroupResult>("outscale:index/getPoliciesLinkedToUserGroup:getPoliciesLinkedToUserGroup", args ?? new GetPoliciesLinkedToUserGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a link policy to user group.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Policies.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#readmanagedpolicieslinkedtousergroup).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var managedPoliciesLinkedToUserGroup = Outscale.GetPoliciesLinkedToUserGroup.Invoke(new()
        ///     {
        ///         UserGroupName = "user_group_name",
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetPoliciesLinkedToUserGroupFilterInputArgs
        ///             {
        ///                 Name = "user_group_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "XXXXXXX",
        ///                     "YYYYYY",
        ///                 },
        ///             },
        ///             new Outscale.Inputs.GetPoliciesLinkedToUserGroupFilterInputArgs
        ///             {
        ///                 Name = "path_prefix",
        ///                 Values = new[]
        ///                 {
        ///                     "/test/",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPoliciesLinkedToUserGroupResult> Invoke(GetPoliciesLinkedToUserGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPoliciesLinkedToUserGroupResult>("outscale:index/getPoliciesLinkedToUserGroup:getPoliciesLinkedToUserGroup", args ?? new GetPoliciesLinkedToUserGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a link policy to user group.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Policies.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#readmanagedpolicieslinkedtousergroup).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var managedPoliciesLinkedToUserGroup = Outscale.GetPoliciesLinkedToUserGroup.Invoke(new()
        ///     {
        ///         UserGroupName = "user_group_name",
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetPoliciesLinkedToUserGroupFilterInputArgs
        ///             {
        ///                 Name = "user_group_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "XXXXXXX",
        ///                     "YYYYYY",
        ///                 },
        ///             },
        ///             new Outscale.Inputs.GetPoliciesLinkedToUserGroupFilterInputArgs
        ///             {
        ///                 Name = "path_prefix",
        ///                 Values = new[]
        ///                 {
        ///                     "/test/",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPoliciesLinkedToUserGroupResult> Invoke(GetPoliciesLinkedToUserGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPoliciesLinkedToUserGroupResult>("outscale:index/getPoliciesLinkedToUserGroup:getPoliciesLinkedToUserGroup", args ?? new GetPoliciesLinkedToUserGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPoliciesLinkedToUserGroupArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetPoliciesLinkedToUserGroupFilterArgs>? _filters;
        public List<Inputs.GetPoliciesLinkedToUserGroupFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetPoliciesLinkedToUserGroupFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The name of the group.
        /// </summary>
        [Input("userGroupName", required: true)]
        public string UserGroupName { get; set; } = null!;

        public GetPoliciesLinkedToUserGroupArgs()
        {
        }
        public static new GetPoliciesLinkedToUserGroupArgs Empty => new GetPoliciesLinkedToUserGroupArgs();
    }

    public sealed class GetPoliciesLinkedToUserGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetPoliciesLinkedToUserGroupFilterInputArgs>? _filters;
        public InputList<Inputs.GetPoliciesLinkedToUserGroupFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetPoliciesLinkedToUserGroupFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The name of the group.
        /// </summary>
        [Input("userGroupName", required: true)]
        public Input<string> UserGroupName { get; set; } = null!;

        public GetPoliciesLinkedToUserGroupInvokeArgs()
        {
        }
        public static new GetPoliciesLinkedToUserGroupInvokeArgs Empty => new GetPoliciesLinkedToUserGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetPoliciesLinkedToUserGroupResult
    {
        public readonly ImmutableArray<Outputs.GetPoliciesLinkedToUserGroupFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetPoliciesLinkedToUserGroupPolicyResult> Policies;
        public readonly string UserGroupName;

        [OutputConstructor]
        private GetPoliciesLinkedToUserGroupResult(
            ImmutableArray<Outputs.GetPoliciesLinkedToUserGroupFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetPoliciesLinkedToUserGroupPolicyResult> policies,

            string userGroupName)
        {
            Filters = filters;
            Id = id;
            Policies = policies;
            UserGroupName = userGroupName;
        }
    }
}
