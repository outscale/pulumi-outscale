// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetVmTypes
    {
        /// <summary>
        /// Provides information about VM types.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/Instance-Types.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#readvmtypes).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### All types of VMs
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var allVmTypes = Outscale.GetVmTypes.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### VMs optimized for Block Storage Unit (BSU)
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vmTypes01 = Outscale.GetVmTypes.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetVmTypesFilterInputArgs
        ///             {
        ///                 Name = "bsu_optimized",
        ///                 Values = new[]
        ///                 {
        ///                     "true",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Specific VM type
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vmTypes02 = Outscale.GetVmTypes.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetVmTypesFilterInputArgs
        ///             {
        ///                 Name = "vm_type_names",
        ///                 Values = new[]
        ///                 {
        ///                     "m3.large",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVmTypesResult> InvokeAsync(GetVmTypesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVmTypesResult>("outscale:index/getVmTypes:getVmTypes", args ?? new GetVmTypesArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about VM types.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/Instance-Types.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#readvmtypes).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### All types of VMs
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var allVmTypes = Outscale.GetVmTypes.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### VMs optimized for Block Storage Unit (BSU)
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vmTypes01 = Outscale.GetVmTypes.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetVmTypesFilterInputArgs
        ///             {
        ///                 Name = "bsu_optimized",
        ///                 Values = new[]
        ///                 {
        ///                     "true",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Specific VM type
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vmTypes02 = Outscale.GetVmTypes.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetVmTypesFilterInputArgs
        ///             {
        ///                 Name = "vm_type_names",
        ///                 Values = new[]
        ///                 {
        ///                     "m3.large",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVmTypesResult> Invoke(GetVmTypesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVmTypesResult>("outscale:index/getVmTypes:getVmTypes", args ?? new GetVmTypesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVmTypesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVmTypesFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetVmTypesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVmTypesFilterArgs>());
            set => _filters = value;
        }

        public GetVmTypesArgs()
        {
        }
        public static new GetVmTypesArgs Empty => new GetVmTypesArgs();
    }

    public sealed class GetVmTypesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetVmTypesFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetVmTypesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVmTypesFilterInputArgs>());
            set => _filters = value;
        }

        public GetVmTypesInvokeArgs()
        {
        }
        public static new GetVmTypesInvokeArgs Empty => new GetVmTypesInvokeArgs();
    }


    [OutputType]
    public sealed class GetVmTypesResult
    {
        public readonly ImmutableArray<Outputs.GetVmTypesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string RequestId;
        /// <summary>
        /// Information about one or more VM types.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVmTypesVmTypeResult> VmTypes;

        [OutputConstructor]
        private GetVmTypesResult(
            ImmutableArray<Outputs.GetVmTypesFilterResult> filters,

            string id,

            string requestId,

            ImmutableArray<Outputs.GetVmTypesVmTypeResult> vmTypes)
        {
            Filters = filters;
            Id = id;
            RequestId = requestId;
            VmTypes = vmTypes;
        }
    }
}
