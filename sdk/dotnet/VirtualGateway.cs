// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a virtual gateway.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Virtual-Private-Gateways.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-virtualgateway).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var virtualGateway01 = new Outscale.VirtualGateway("virtualGateway01", new()
    ///     {
    ///         ConnectionType = "ipsec.1",
    ///         Tags = new[]
    ///         {
    ///             new Outscale.Inputs.VirtualGatewayTagArgs
    ///             {
    ///                 Key = "name",
    ///                 Value = "terraform-virtual-gateway",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A virtual gateway can be imported using its ID. For exampleconsole
    /// 
    /// ```sh
    ///  $ pulumi import outscale:index/virtualGateway:VirtualGateway ImportedVirtualGateway vgw-12345678
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/virtualGateway:VirtualGateway")]
    public partial class VirtualGateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The type of VPN connection supported by the virtual gateway (only `ipsec.1` is supported).
        /// </summary>
        [Output("connectionType")]
        public Output<string> ConnectionType { get; private set; } = null!;

        /// <summary>
        /// The Net to which the virtual gateway is attached.
        /// </summary>
        [Output("netToVirtualGatewayLinks")]
        public Output<ImmutableArray<Outputs.VirtualGatewayNetToVirtualGatewayLink>> NetToVirtualGatewayLinks { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// The state of the virtual gateway (`pending` \| `available` \| `deleting` \| `deleted`).
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.VirtualGatewayTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The ID of the virtual gateway.
        /// </summary>
        [Output("virtualGatewayId")]
        public Output<string> VirtualGatewayId { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualGateway(string name, VirtualGatewayArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/virtualGateway:VirtualGateway", name, args ?? new VirtualGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualGateway(string name, Input<string> id, VirtualGatewayState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/virtualGateway:VirtualGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualGateway Get(string name, Input<string> id, VirtualGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualGateway(name, id, state, options);
        }
    }

    public sealed class VirtualGatewayArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of VPN connection supported by the virtual gateway (only `ipsec.1` is supported).
        /// </summary>
        [Input("connectionType", required: true)]
        public Input<string> ConnectionType { get; set; } = null!;

        [Input("netToVirtualGatewayLinks")]
        private InputList<Inputs.VirtualGatewayNetToVirtualGatewayLinkArgs>? _netToVirtualGatewayLinks;

        /// <summary>
        /// The Net to which the virtual gateway is attached.
        /// </summary>
        public InputList<Inputs.VirtualGatewayNetToVirtualGatewayLinkArgs> NetToVirtualGatewayLinks
        {
            get => _netToVirtualGatewayLinks ?? (_netToVirtualGatewayLinks = new InputList<Inputs.VirtualGatewayNetToVirtualGatewayLinkArgs>());
            set => _netToVirtualGatewayLinks = value;
        }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The state of the virtual gateway (`pending` \| `available` \| `deleting` \| `deleted`).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputList<Inputs.VirtualGatewayTagArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.VirtualGatewayTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.VirtualGatewayTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the virtual gateway.
        /// </summary>
        [Input("virtualGatewayId")]
        public Input<string>? VirtualGatewayId { get; set; }

        public VirtualGatewayArgs()
        {
        }
        public static new VirtualGatewayArgs Empty => new VirtualGatewayArgs();
    }

    public sealed class VirtualGatewayState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The type of VPN connection supported by the virtual gateway (only `ipsec.1` is supported).
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        [Input("netToVirtualGatewayLinks")]
        private InputList<Inputs.VirtualGatewayNetToVirtualGatewayLinkGetArgs>? _netToVirtualGatewayLinks;

        /// <summary>
        /// The Net to which the virtual gateway is attached.
        /// </summary>
        public InputList<Inputs.VirtualGatewayNetToVirtualGatewayLinkGetArgs> NetToVirtualGatewayLinks
        {
            get => _netToVirtualGatewayLinks ?? (_netToVirtualGatewayLinks = new InputList<Inputs.VirtualGatewayNetToVirtualGatewayLinkGetArgs>());
            set => _netToVirtualGatewayLinks = value;
        }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The state of the virtual gateway (`pending` \| `available` \| `deleting` \| `deleted`).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputList<Inputs.VirtualGatewayTagGetArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.VirtualGatewayTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.VirtualGatewayTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the virtual gateway.
        /// </summary>
        [Input("virtualGatewayId")]
        public Input<string>? VirtualGatewayId { get; set; }

        public VirtualGatewayState()
        {
        }
        public static new VirtualGatewayState Empty => new VirtualGatewayState();
    }
}
