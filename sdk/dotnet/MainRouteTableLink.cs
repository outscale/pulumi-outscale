// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a main route table link.
    /// 
    /// &gt; **Note:** On Net creation, the OUTSCALE API always creates an initial main route table. The `main_route_table_link`resource records the ID of the inital route table under the `default_route_table_id` attribute. The "Destroy" action for a `main_route_table_link` consists of resetting the original route table as the main route table for the Net. The additional route table must remain intact in order for the `main_route_table_link` destroy to work properly.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Route-Tables.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-routetable).
    /// 
    /// ## Example Usage
    /// 
    /// ### Required resources
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var net01 = new Outscale.Net("net01", new()
    ///     {
    ///         IpRange = "10.0.0.0/16",
    ///     });
    /// 
    ///     var subnet01 = new Outscale.Subnet("subnet01", new()
    ///     {
    ///         NetId = net01.NetId,
    ///         IpRange = "10.0.0.0/18",
    ///     });
    /// 
    ///     var routeTable01 = new Outscale.RouteTable("route_table01", new()
    ///     {
    ///         NetId = net01.NetId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Link a main route table
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Outscale.MainRouteTableLink("main", new()
    ///     {
    ///         NetId = net01.NetId,
    ///         RouteTableId = routeTable01.RouteTableId,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/mainRouteTableLink:MainRouteTableLink")]
    public partial class MainRouteTableLink : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the default route table.
        /// </summary>
        [Output("defaultRouteTableId")]
        public Output<string> DefaultRouteTableId { get; private set; } = null!;

        /// <summary>
        /// The ID of the association between the route table and the Subnet.
        /// </summary>
        [Output("linkRouteTableId")]
        public Output<string> LinkRouteTableId { get; private set; } = null!;

        /// <summary>
        /// If true, the route table is the main one.
        /// </summary>
        [Output("main")]
        public Output<bool> Main { get; private set; } = null!;

        /// <summary>
        /// The ID of the Net.
        /// </summary>
        [Output("netId")]
        public Output<string> NetId { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// The ID of the route table.
        /// </summary>
        [Output("routeTableId")]
        public Output<string> RouteTableId { get; private set; } = null!;

        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.MainRouteTableLinkTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a MainRouteTableLink resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MainRouteTableLink(string name, MainRouteTableLinkArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/mainRouteTableLink:MainRouteTableLink", name, args ?? new MainRouteTableLinkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MainRouteTableLink(string name, Input<string> id, MainRouteTableLinkState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/mainRouteTableLink:MainRouteTableLink", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MainRouteTableLink resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MainRouteTableLink Get(string name, Input<string> id, MainRouteTableLinkState? state = null, CustomResourceOptions? options = null)
        {
            return new MainRouteTableLink(name, id, state, options);
        }
    }

    public sealed class MainRouteTableLinkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Net.
        /// </summary>
        [Input("netId", required: true)]
        public Input<string> NetId { get; set; } = null!;

        /// <summary>
        /// The ID of the route table.
        /// </summary>
        [Input("routeTableId", required: true)]
        public Input<string> RouteTableId { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.MainRouteTableLinkTimeoutsArgs>? Timeouts { get; set; }

        public MainRouteTableLinkArgs()
        {
        }
        public static new MainRouteTableLinkArgs Empty => new MainRouteTableLinkArgs();
    }

    public sealed class MainRouteTableLinkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the default route table.
        /// </summary>
        [Input("defaultRouteTableId")]
        public Input<string>? DefaultRouteTableId { get; set; }

        /// <summary>
        /// The ID of the association between the route table and the Subnet.
        /// </summary>
        [Input("linkRouteTableId")]
        public Input<string>? LinkRouteTableId { get; set; }

        /// <summary>
        /// If true, the route table is the main one.
        /// </summary>
        [Input("main")]
        public Input<bool>? Main { get; set; }

        /// <summary>
        /// The ID of the Net.
        /// </summary>
        [Input("netId")]
        public Input<string>? NetId { get; set; }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The ID of the route table.
        /// </summary>
        [Input("routeTableId")]
        public Input<string>? RouteTableId { get; set; }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("timeouts")]
        public Input<Inputs.MainRouteTableLinkTimeoutsGetArgs>? Timeouts { get; set; }

        public MainRouteTableLinkState()
        {
        }
        public static new MainRouteTableLinkState Empty => new MainRouteTableLinkState();
    }
}
