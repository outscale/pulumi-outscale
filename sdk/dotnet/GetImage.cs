// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetImage
    {
        /// <summary>
        /// Provides information about an image.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-OMIs.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-image).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var image01 = Outscale.GetImage.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetImageFilterInputArgs
        ///             {
        ///                 Name = "image_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "ami-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetImageResult> InvokeAsync(GetImageArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("outscale:index/getImage:getImage", args ?? new GetImageArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about an image.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-OMIs.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-image).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var image01 = Outscale.GetImage.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetImageFilterInputArgs
        ///             {
        ///                 Name = "image_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "ami-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetImageResult> Invoke(GetImageInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("outscale:index/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about an image.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-OMIs.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-image).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var image01 = Outscale.GetImage.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetImageFilterInputArgs
        ///             {
        ///                 Name = "image_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "ami-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetImageResult> Invoke(GetImageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("outscale:index/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageArgs : global::Pulumi.InvokeArgs
    {
        [Input("blockDeviceMappings")]
        private List<Inputs.GetImageBlockDeviceMappingArgs>? _blockDeviceMappings;

        /// <summary>
        /// One or more block device mappings.
        /// </summary>
        public List<Inputs.GetImageBlockDeviceMappingArgs> BlockDeviceMappings
        {
            get => _blockDeviceMappings ?? (_blockDeviceMappings = new List<Inputs.GetImageBlockDeviceMappingArgs>());
            set => _blockDeviceMappings = value;
        }

        [Input("filters")]
        private List<Inputs.GetImageFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetImageFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetImageFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the OMI.
        /// </summary>
        [Input("imageId")]
        public string? ImageId { get; set; }

        [Input("permissions")]
        private List<string>? _permissions;
        public List<string> Permissions
        {
            get => _permissions ?? (_permissions = new List<string>());
            set => _permissions = value;
        }

        public GetImageArgs()
        {
        }
        public static new GetImageArgs Empty => new GetImageArgs();
    }

    public sealed class GetImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("blockDeviceMappings")]
        private InputList<Inputs.GetImageBlockDeviceMappingInputArgs>? _blockDeviceMappings;

        /// <summary>
        /// One or more block device mappings.
        /// </summary>
        public InputList<Inputs.GetImageBlockDeviceMappingInputArgs> BlockDeviceMappings
        {
            get => _blockDeviceMappings ?? (_blockDeviceMappings = new InputList<Inputs.GetImageBlockDeviceMappingInputArgs>());
            set => _blockDeviceMappings = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetImageFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetImageFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetImageFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the OMI.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        [Input("permissions")]
        private InputList<string>? _permissions;
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        public GetImageInvokeArgs()
        {
        }
        public static new GetImageInvokeArgs Empty => new GetImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageResult
    {
        /// <summary>
        /// The account alias of the owner of the OMI.
        /// </summary>
        public readonly string AccountAlias;
        /// <summary>
        /// The account ID of the owner of the OMI.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// The architecture of the OMI.
        /// </summary>
        public readonly string Architecture;
        /// <summary>
        /// One or more block device mappings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImageBlockDeviceMappingResult> BlockDeviceMappings;
        /// <summary>
        /// The date and time (UTC) at which the OMI was created.
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// The description of the OMI.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The location from which the OMI files were created.
        /// </summary>
        public readonly string FileLocation;
        public readonly ImmutableArray<Outputs.GetImageFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the OMI.
        /// </summary>
        public readonly string? ImageId;
        /// <summary>
        /// The name of the OMI.
        /// </summary>
        public readonly string ImageName;
        /// <summary>
        /// The type of the OMI.
        /// </summary>
        public readonly string ImageType;
        public readonly bool IsPublic;
        public readonly ImmutableArray<string> Permissions;
        /// <summary>
        /// Permissions for the resource.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImagePermissionsToLaunchResult> PermissionsToLaunches;
        /// <summary>
        /// The product codes associated with the OMI.
        /// </summary>
        public readonly ImmutableArray<string> ProductCodes;
        public readonly string RequestId;
        /// <summary>
        /// The name of the root device.
        /// </summary>
        public readonly string RootDeviceName;
        /// <summary>
        /// The type of root device used by the OMI (always `bsu`).
        /// </summary>
        public readonly string RootDeviceType;
        /// <summary>
        /// The state of the OMI (`pending` \| `available` \| `failed`).
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Information about the change of state.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImageStateCommentResult> StateComments;
        /// <summary>
        /// One or more tags associated with the OMI.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImageTagResult> Tags;

        [OutputConstructor]
        private GetImageResult(
            string accountAlias,

            string accountId,

            string architecture,

            ImmutableArray<Outputs.GetImageBlockDeviceMappingResult> blockDeviceMappings,

            string creationDate,

            string description,

            string fileLocation,

            ImmutableArray<Outputs.GetImageFilterResult> filters,

            string id,

            string? imageId,

            string imageName,

            string imageType,

            bool isPublic,

            ImmutableArray<string> permissions,

            ImmutableArray<Outputs.GetImagePermissionsToLaunchResult> permissionsToLaunches,

            ImmutableArray<string> productCodes,

            string requestId,

            string rootDeviceName,

            string rootDeviceType,

            string state,

            ImmutableArray<Outputs.GetImageStateCommentResult> stateComments,

            ImmutableArray<Outputs.GetImageTagResult> tags)
        {
            AccountAlias = accountAlias;
            AccountId = accountId;
            Architecture = architecture;
            BlockDeviceMappings = blockDeviceMappings;
            CreationDate = creationDate;
            Description = description;
            FileLocation = fileLocation;
            Filters = filters;
            Id = id;
            ImageId = imageId;
            ImageName = imageName;
            ImageType = imageType;
            IsPublic = isPublic;
            Permissions = permissions;
            PermissionsToLaunches = permissionsToLaunches;
            ProductCodes = productCodes;
            RequestId = requestId;
            RootDeviceName = rootDeviceName;
            RootDeviceType = rootDeviceType;
            State = state;
            StateComments = stateComments;
            Tags = tags;
        }
    }
}
