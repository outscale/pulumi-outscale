// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a load balancer policy.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-loadbalancerpolicy).
    /// 
    /// ## Example Usage
    /// 
    /// ### Create a load balancer policy based on browser
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var loadBalancer01 = new Outscale.LoadBalancer("load_balancer01", new()
    ///     {
    ///         LoadBalancerName = "terraform-lb-for-browser-policy",
    ///         SubregionNames = new[]
    ///         {
    ///             "eu-west-2a",
    ///         },
    ///         Listeners = new[]
    ///         {
    ///             new Outscale.Inputs.LoadBalancerListenerArgs
    ///             {
    ///                 BackendPort = 8080,
    ///                 BackendProtocol = "HTTP",
    ///                 LoadBalancerPort = 8080,
    ///                 LoadBalancerProtocol = "HTTP",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var loadBalancerPolicy01 = new Outscale.LoadBalancerPolicy("load_balancer_policy01", new()
    ///     {
    ///         LoadBalancerName = "terraform-lb-for-browser-policy",
    ///         PolicyName = "terraform-lb-browser-policy",
    ///         PolicyType = "load_balancer",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Create a load balancer policy based on application cookie
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var loadBalancer02 = new Outscale.LoadBalancer("load_balancer02", new()
    ///     {
    ///         LoadBalancerName = "terraform-lb-for-app-policy",
    ///         SubregionNames = new[]
    ///         {
    ///             $"{region}b",
    ///         },
    ///         Listeners = new[]
    ///         {
    ///             new Outscale.Inputs.LoadBalancerListenerArgs
    ///             {
    ///                 LoadBalancerPort = 80,
    ///                 LoadBalancerProtocol = "TCP",
    ///                 BackendPort = 80,
    ///                 BackendProtocol = "TCP",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var loadBalancerPolicy02 = new Outscale.LoadBalancerPolicy("load_balancer_policy02", new()
    ///     {
    ///         LoadBalancerName = loadBalancer02.LoadBalancerName,
    ///         PolicyName = "terraform-lb-app-policy",
    ///         PolicyType = "app",
    ///         CookieName = "cookie01",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             loadBalancer02,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/loadBalancerPolicy:LoadBalancerPolicy")]
    public partial class LoadBalancerPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Information about access logs.
        /// </summary>
        [Output("accessLogs")]
        public Output<ImmutableArray<Outputs.LoadBalancerPolicyAccessLog>> AccessLogs { get; private set; } = null!;

        /// <summary>
        /// The stickiness policies defined for the load balancer.
        /// </summary>
        [Output("applicationStickyCookiePolicies")]
        public Output<ImmutableArray<Outputs.LoadBalancerPolicyApplicationStickyCookiePolicy>> ApplicationStickyCookiePolicies { get; private set; } = null!;

        /// <summary>
        /// One or more IDs of backend VMs for the load balancer.
        /// </summary>
        [Output("backendVmIds")]
        public Output<ImmutableArray<string>> BackendVmIds { get; private set; } = null!;

        [Output("cookieExpirationPeriod")]
        public Output<int> CookieExpirationPeriod { get; private set; } = null!;

        /// <summary>
        /// The name of the application cookie used for stickiness. This parameter is required if you create a stickiness policy based on an application-generated cookie.
        /// </summary>
        [Output("cookieName")]
        public Output<string> CookieName { get; private set; } = null!;

        /// <summary>
        /// The DNS name of the load balancer.
        /// </summary>
        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        /// <summary>
        /// Information about the health check configuration.
        /// </summary>
        [Output("healthChecks")]
        public Output<ImmutableArray<Outputs.LoadBalancerPolicyHealthCheck>> HealthChecks { get; private set; } = null!;

        /// <summary>
        /// The listeners for the load balancer.
        /// </summary>
        [Output("listeners")]
        public Output<ImmutableArray<Outputs.LoadBalancerPolicyListener>> Listeners { get; private set; } = null!;

        /// <summary>
        /// The name of the load balancer for which you want to create a policy.
        /// </summary>
        [Output("loadBalancerName")]
        public Output<string> LoadBalancerName { get; private set; } = null!;

        /// <summary>
        /// The policies defined for the load balancer.
        /// </summary>
        [Output("loadBalancerStickyCookiePolicies")]
        public Output<ImmutableArray<Outputs.LoadBalancerPolicyLoadBalancerStickyCookiePolicy>> LoadBalancerStickyCookiePolicies { get; private set; } = null!;

        /// <summary>
        /// The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
        /// If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
        /// If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
        /// </summary>
        [Output("loadBalancerType")]
        public Output<string> LoadBalancerType { get; private set; } = null!;

        /// <summary>
        /// The ID of the Net for the load balancer.
        /// </summary>
        [Output("netId")]
        public Output<string> NetId { get; private set; } = null!;

        /// <summary>
        /// The unique name of the policy, with a maximum length of 32 alphanumeric characters and dashes (`-`).
        /// </summary>
        [Output("policyName")]
        public Output<string> PolicyName { get; private set; } = null!;

        /// <summary>
        /// The type of stickiness policy you want to create: `app` or `load_balancer`.
        /// </summary>
        [Output("policyType")]
        public Output<string> PolicyType { get; private set; } = null!;

        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        [Output("securedCookies")]
        public Output<bool> SecuredCookies { get; private set; } = null!;

        /// <summary>
        /// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
        /// </summary>
        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        /// <summary>
        /// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
        /// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
        /// </summary>
        [Output("sourceSecurityGroups")]
        public Output<ImmutableArray<Outputs.LoadBalancerPolicySourceSecurityGroup>> SourceSecurityGroups { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subnet in which the load balancer was created.
        /// </summary>
        [Output("subnets")]
        public Output<ImmutableArray<string>> Subnets { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subregion in which the load balancer was created.
        /// </summary>
        [Output("subregionNames")]
        public Output<ImmutableArray<string>> SubregionNames { get; private set; } = null!;

        /// <summary>
        /// One or more tags associated with the load balancer.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.LoadBalancerPolicyTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a LoadBalancerPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadBalancerPolicy(string name, LoadBalancerPolicyArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/loadBalancerPolicy:LoadBalancerPolicy", name, args ?? new LoadBalancerPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadBalancerPolicy(string name, Input<string> id, LoadBalancerPolicyState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/loadBalancerPolicy:LoadBalancerPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadBalancerPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadBalancerPolicy Get(string name, Input<string> id, LoadBalancerPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadBalancerPolicy(name, id, state, options);
        }
    }

    public sealed class LoadBalancerPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessLogs")]
        private InputList<Inputs.LoadBalancerPolicyAccessLogArgs>? _accessLogs;

        /// <summary>
        /// Information about access logs.
        /// </summary>
        public InputList<Inputs.LoadBalancerPolicyAccessLogArgs> AccessLogs
        {
            get => _accessLogs ?? (_accessLogs = new InputList<Inputs.LoadBalancerPolicyAccessLogArgs>());
            set => _accessLogs = value;
        }

        [Input("backendVmIds")]
        private InputList<string>? _backendVmIds;

        /// <summary>
        /// One or more IDs of backend VMs for the load balancer.
        /// </summary>
        public InputList<string> BackendVmIds
        {
            get => _backendVmIds ?? (_backendVmIds = new InputList<string>());
            set => _backendVmIds = value;
        }

        [Input("cookieExpirationPeriod")]
        public Input<int>? CookieExpirationPeriod { get; set; }

        /// <summary>
        /// The name of the application cookie used for stickiness. This parameter is required if you create a stickiness policy based on an application-generated cookie.
        /// </summary>
        [Input("cookieName")]
        public Input<string>? CookieName { get; set; }

        /// <summary>
        /// The name of the load balancer for which you want to create a policy.
        /// </summary>
        [Input("loadBalancerName", required: true)]
        public Input<string> LoadBalancerName { get; set; } = null!;

        /// <summary>
        /// The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
        /// If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
        /// If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
        /// </summary>
        [Input("loadBalancerType")]
        public Input<string>? LoadBalancerType { get; set; }

        /// <summary>
        /// The unique name of the policy, with a maximum length of 32 alphanumeric characters and dashes (`-`).
        /// </summary>
        [Input("policyName", required: true)]
        public Input<string> PolicyName { get; set; } = null!;

        /// <summary>
        /// The type of stickiness policy you want to create: `app` or `load_balancer`.
        /// </summary>
        [Input("policyType", required: true)]
        public Input<string> PolicyType { get; set; } = null!;

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        [Input("subnets")]
        private InputList<string>? _subnets;

        /// <summary>
        /// The ID of the Subnet in which the load balancer was created.
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        [Input("subregionNames")]
        private InputList<string>? _subregionNames;

        /// <summary>
        /// The ID of the Subregion in which the load balancer was created.
        /// </summary>
        public InputList<string> SubregionNames
        {
            get => _subregionNames ?? (_subregionNames = new InputList<string>());
            set => _subregionNames = value;
        }

        [Input("tags")]
        private InputList<Inputs.LoadBalancerPolicyTagArgs>? _tags;

        /// <summary>
        /// One or more tags associated with the load balancer.
        /// </summary>
        public InputList<Inputs.LoadBalancerPolicyTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LoadBalancerPolicyTagArgs>());
            set => _tags = value;
        }

        public LoadBalancerPolicyArgs()
        {
        }
        public static new LoadBalancerPolicyArgs Empty => new LoadBalancerPolicyArgs();
    }

    public sealed class LoadBalancerPolicyState : global::Pulumi.ResourceArgs
    {
        [Input("accessLogs")]
        private InputList<Inputs.LoadBalancerPolicyAccessLogGetArgs>? _accessLogs;

        /// <summary>
        /// Information about access logs.
        /// </summary>
        public InputList<Inputs.LoadBalancerPolicyAccessLogGetArgs> AccessLogs
        {
            get => _accessLogs ?? (_accessLogs = new InputList<Inputs.LoadBalancerPolicyAccessLogGetArgs>());
            set => _accessLogs = value;
        }

        [Input("applicationStickyCookiePolicies")]
        private InputList<Inputs.LoadBalancerPolicyApplicationStickyCookiePolicyGetArgs>? _applicationStickyCookiePolicies;

        /// <summary>
        /// The stickiness policies defined for the load balancer.
        /// </summary>
        public InputList<Inputs.LoadBalancerPolicyApplicationStickyCookiePolicyGetArgs> ApplicationStickyCookiePolicies
        {
            get => _applicationStickyCookiePolicies ?? (_applicationStickyCookiePolicies = new InputList<Inputs.LoadBalancerPolicyApplicationStickyCookiePolicyGetArgs>());
            set => _applicationStickyCookiePolicies = value;
        }

        [Input("backendVmIds")]
        private InputList<string>? _backendVmIds;

        /// <summary>
        /// One or more IDs of backend VMs for the load balancer.
        /// </summary>
        public InputList<string> BackendVmIds
        {
            get => _backendVmIds ?? (_backendVmIds = new InputList<string>());
            set => _backendVmIds = value;
        }

        [Input("cookieExpirationPeriod")]
        public Input<int>? CookieExpirationPeriod { get; set; }

        /// <summary>
        /// The name of the application cookie used for stickiness. This parameter is required if you create a stickiness policy based on an application-generated cookie.
        /// </summary>
        [Input("cookieName")]
        public Input<string>? CookieName { get; set; }

        /// <summary>
        /// The DNS name of the load balancer.
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        [Input("healthChecks")]
        private InputList<Inputs.LoadBalancerPolicyHealthCheckGetArgs>? _healthChecks;

        /// <summary>
        /// Information about the health check configuration.
        /// </summary>
        public InputList<Inputs.LoadBalancerPolicyHealthCheckGetArgs> HealthChecks
        {
            get => _healthChecks ?? (_healthChecks = new InputList<Inputs.LoadBalancerPolicyHealthCheckGetArgs>());
            set => _healthChecks = value;
        }

        [Input("listeners")]
        private InputList<Inputs.LoadBalancerPolicyListenerGetArgs>? _listeners;

        /// <summary>
        /// The listeners for the load balancer.
        /// </summary>
        public InputList<Inputs.LoadBalancerPolicyListenerGetArgs> Listeners
        {
            get => _listeners ?? (_listeners = new InputList<Inputs.LoadBalancerPolicyListenerGetArgs>());
            set => _listeners = value;
        }

        /// <summary>
        /// The name of the load balancer for which you want to create a policy.
        /// </summary>
        [Input("loadBalancerName")]
        public Input<string>? LoadBalancerName { get; set; }

        [Input("loadBalancerStickyCookiePolicies")]
        private InputList<Inputs.LoadBalancerPolicyLoadBalancerStickyCookiePolicyGetArgs>? _loadBalancerStickyCookiePolicies;

        /// <summary>
        /// The policies defined for the load balancer.
        /// </summary>
        public InputList<Inputs.LoadBalancerPolicyLoadBalancerStickyCookiePolicyGetArgs> LoadBalancerStickyCookiePolicies
        {
            get => _loadBalancerStickyCookiePolicies ?? (_loadBalancerStickyCookiePolicies = new InputList<Inputs.LoadBalancerPolicyLoadBalancerStickyCookiePolicyGetArgs>());
            set => _loadBalancerStickyCookiePolicies = value;
        }

        /// <summary>
        /// The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
        /// If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
        /// If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
        /// </summary>
        [Input("loadBalancerType")]
        public Input<string>? LoadBalancerType { get; set; }

        /// <summary>
        /// The ID of the Net for the load balancer.
        /// </summary>
        [Input("netId")]
        public Input<string>? NetId { get; set; }

        /// <summary>
        /// The unique name of the policy, with a maximum length of 32 alphanumeric characters and dashes (`-`).
        /// </summary>
        [Input("policyName")]
        public Input<string>? PolicyName { get; set; }

        /// <summary>
        /// The type of stickiness policy you want to create: `app` or `load_balancer`.
        /// </summary>
        [Input("policyType")]
        public Input<string>? PolicyType { get; set; }

        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        [Input("securedCookies")]
        public Input<bool>? SecuredCookies { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        [Input("sourceSecurityGroups")]
        private InputList<Inputs.LoadBalancerPolicySourceSecurityGroupGetArgs>? _sourceSecurityGroups;

        /// <summary>
        /// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
        /// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
        /// </summary>
        public InputList<Inputs.LoadBalancerPolicySourceSecurityGroupGetArgs> SourceSecurityGroups
        {
            get => _sourceSecurityGroups ?? (_sourceSecurityGroups = new InputList<Inputs.LoadBalancerPolicySourceSecurityGroupGetArgs>());
            set => _sourceSecurityGroups = value;
        }

        [Input("subnets")]
        private InputList<string>? _subnets;

        /// <summary>
        /// The ID of the Subnet in which the load balancer was created.
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        [Input("subregionNames")]
        private InputList<string>? _subregionNames;

        /// <summary>
        /// The ID of the Subregion in which the load balancer was created.
        /// </summary>
        public InputList<string> SubregionNames
        {
            get => _subregionNames ?? (_subregionNames = new InputList<string>());
            set => _subregionNames = value;
        }

        [Input("tags")]
        private InputList<Inputs.LoadBalancerPolicyTagGetArgs>? _tags;

        /// <summary>
        /// One or more tags associated with the load balancer.
        /// </summary>
        public InputList<Inputs.LoadBalancerPolicyTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LoadBalancerPolicyTagGetArgs>());
            set => _tags = value;
        }

        public LoadBalancerPolicyState()
        {
        }
        public static new LoadBalancerPolicyState Empty => new LoadBalancerPolicyState();
    }
}
