// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a NAT service.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-NAT-Gateways.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-natservice).
    /// 
    /// ## Example Usage
    /// ### Required resources
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var net01 = new Outscale.Net("net01", new()
    ///     {
    ///         IpRange = "10.0.0.0/16",
    ///     });
    /// 
    ///     var subnet01 = new Outscale.Subnet("subnet01", new()
    ///     {
    ///         NetId = net01.NetId,
    ///         IpRange = "10.0.0.0/18",
    ///     });
    /// 
    ///     var routeTable01 = new Outscale.RouteTable("routeTable01", new()
    ///     {
    ///         NetId = net01.NetId,
    ///     });
    /// 
    ///     var outscaleRouteTableLink01 = new Outscale.RouteTableLink("outscaleRouteTableLink01", new()
    ///     {
    ///         SubnetId = subnet01.SubnetId,
    ///         RouteTableId = routeTable01.RouteTableId,
    ///     });
    /// 
    ///     var internetService01 = new Outscale.InternetService("internetService01");
    /// 
    ///     var internetServiceLink01 = new Outscale.InternetServiceLink("internetServiceLink01", new()
    ///     {
    ///         NetId = net01.NetId,
    ///         InternetServiceId = internetService01.InternetServiceId,
    ///     });
    /// 
    ///     var route01 = new Outscale.Route("route01", new()
    ///     {
    ///         DestinationIpRange = "0.0.0.0/0",
    ///         GatewayId = internetService01.InternetServiceId,
    ///         RouteTableId = routeTable01.RouteTableId,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             internetServiceLink01,
    ///         },
    ///     });
    /// 
    ///     var publicIp01 = new Outscale.PublicIp("publicIp01");
    /// 
    /// });
    /// ```
    /// ### Create a NAT service
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var natService01 = new Outscale.NatService("natService01", new()
    ///     {
    ///         SubnetId = outscale_subnet.Subnet01.Subnet_id,
    ///         PublicIpId = outscale_public_ip.Public_ip01.Public_ip_id,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             outscale_route.Route01,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A NAT service can be imported using its ID. For exampleconsole
    /// 
    /// ```sh
    ///  $ pulumi import outscale:index/natService:NatService ImportedNatService nat-87654321
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/natService:NatService")]
    public partial class NatService : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the NAT service.
        /// </summary>
        [Output("natServiceId")]
        public Output<string> NatServiceId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Net in which the NAT service is.
        /// </summary>
        [Output("netId")]
        public Output<string> NetId { get; private set; } = null!;

        /// <summary>
        /// The allocation ID of the public IP to associate with the NAT service.&lt;br /&gt;
        /// If the public IP is already associated with another resource, you must first disassociate it.
        /// </summary>
        [Output("publicIpId")]
        public Output<string> PublicIpId { get; private set; } = null!;

        /// <summary>
        /// Information about the public IP or IPs associated with the NAT service.
        /// </summary>
        [Output("publicIps")]
        public Output<ImmutableArray<Outputs.NatServicePublicIp>> PublicIps { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subnet in which you want to create the NAT service.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.NatServiceTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a NatService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NatService(string name, NatServiceArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/natService:NatService", name, args ?? new NatServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NatService(string name, Input<string> id, NatServiceState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/natService:NatService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NatService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NatService Get(string name, Input<string> id, NatServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new NatService(name, id, state, options);
        }
    }

    public sealed class NatServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The allocation ID of the public IP to associate with the NAT service.&lt;br /&gt;
        /// If the public IP is already associated with another resource, you must first disassociate it.
        /// </summary>
        [Input("publicIpId", required: true)]
        public Input<string> PublicIpId { get; set; } = null!;

        /// <summary>
        /// The ID of the Subnet in which you want to create the NAT service.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.NatServiceTagArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.NatServiceTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NatServiceTagArgs>());
            set => _tags = value;
        }

        public NatServiceArgs()
        {
        }
        public static new NatServiceArgs Empty => new NatServiceArgs();
    }

    public sealed class NatServiceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the NAT service.
        /// </summary>
        [Input("natServiceId")]
        public Input<string>? NatServiceId { get; set; }

        /// <summary>
        /// The ID of the Net in which the NAT service is.
        /// </summary>
        [Input("netId")]
        public Input<string>? NetId { get; set; }

        /// <summary>
        /// The allocation ID of the public IP to associate with the NAT service.&lt;br /&gt;
        /// If the public IP is already associated with another resource, you must first disassociate it.
        /// </summary>
        [Input("publicIpId")]
        public Input<string>? PublicIpId { get; set; }

        [Input("publicIps")]
        private InputList<Inputs.NatServicePublicIpGetArgs>? _publicIps;

        /// <summary>
        /// Information about the public IP or IPs associated with the NAT service.
        /// </summary>
        public InputList<Inputs.NatServicePublicIpGetArgs> PublicIps
        {
            get => _publicIps ?? (_publicIps = new InputList<Inputs.NatServicePublicIpGetArgs>());
            set => _publicIps = value;
        }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The ID of the Subnet in which you want to create the NAT service.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputList<Inputs.NatServiceTagGetArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.NatServiceTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NatServiceTagGetArgs>());
            set => _tags = value;
        }

        public NatServiceState()
        {
        }
        public static new NatServiceState Empty => new NatServiceState();
    }
}
