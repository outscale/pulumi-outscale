// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetNic
    {
        /// <summary>
        /// Provides information about a network interface card (NIC).
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-FNIs.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-nic).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nic01 = Outscale.GetNic.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetNicFilterInputArgs
        ///             {
        ///                 Name = "nic_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "eni-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNicResult> InvokeAsync(GetNicArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNicResult>("outscale:index/getNic:getNic", args ?? new GetNicArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a network interface card (NIC).
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-FNIs.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-nic).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var nic01 = Outscale.GetNic.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetNicFilterInputArgs
        ///             {
        ///                 Name = "nic_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "eni-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNicResult> Invoke(GetNicInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNicResult>("outscale:index/getNic:getNic", args ?? new GetNicInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNicArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetNicFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetNicFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetNicFilterArgs>());
            set => _filters = value;
        }

        public GetNicArgs()
        {
        }
        public static new GetNicArgs Empty => new GetNicArgs();
    }

    public sealed class GetNicInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetNicFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetNicFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetNicFilterInputArgs>());
            set => _filters = value;
        }

        public GetNicInvokeArgs()
        {
        }
        public static new GetNicInvokeArgs Empty => new GetNicInvokeArgs();
    }


    [OutputType]
    public sealed class GetNicResult
    {
        /// <summary>
        /// The account ID of the owner of the NIC.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// The description of the NIC.
        /// </summary>
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetNicFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
        /// </summary>
        public readonly bool IsSourceDestChecked;
        /// <summary>
        /// Information about the NIC attachment.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNicLinkNicResult> LinkNics;
        /// <summary>
        /// Information about the public IP association.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNicLinkPublicIpResult> LinkPublicIps;
        /// <summary>
        /// The Media Access Control (MAC) address of the NIC.
        /// </summary>
        public readonly string MacAddress;
        /// <summary>
        /// The ID of the Net for the NIC.
        /// </summary>
        public readonly string NetId;
        /// <summary>
        /// The ID of the NIC.
        /// </summary>
        public readonly string NicId;
        /// <summary>
        /// The name of the private DNS.
        /// </summary>
        public readonly string PrivateDnsName;
        /// <summary>
        /// The private IP of the NIC.
        /// </summary>
        public readonly string PrivateIp;
        /// <summary>
        /// The private IPs of the NIC.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNicPrivateIpResult> PrivateIps;
        public readonly string RequestId;
        public readonly bool RequesterManaged;
        /// <summary>
        /// The ID of the security group.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// One or more IDs of security groups for the NIC.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNicSecurityGroupResult> SecurityGroups;
        /// <summary>
        /// The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The ID of the Subnet.
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// The Subregion in which the NIC is located.
        /// </summary>
        public readonly string SubregionName;
        /// <summary>
        /// One or more tags associated with the NIC.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNicTagResult> Tags;

        [OutputConstructor]
        private GetNicResult(
            string accountId,

            string description,

            ImmutableArray<Outputs.GetNicFilterResult> filters,

            string id,

            bool isSourceDestChecked,

            ImmutableArray<Outputs.GetNicLinkNicResult> linkNics,

            ImmutableArray<Outputs.GetNicLinkPublicIpResult> linkPublicIps,

            string macAddress,

            string netId,

            string nicId,

            string privateDnsName,

            string privateIp,

            ImmutableArray<Outputs.GetNicPrivateIpResult> privateIps,

            string requestId,

            bool requesterManaged,

            ImmutableArray<string> securityGroupIds,

            ImmutableArray<Outputs.GetNicSecurityGroupResult> securityGroups,

            string state,

            string subnetId,

            string subregionName,

            ImmutableArray<Outputs.GetNicTagResult> tags)
        {
            AccountId = accountId;
            Description = description;
            Filters = filters;
            Id = id;
            IsSourceDestChecked = isSourceDestChecked;
            LinkNics = linkNics;
            LinkPublicIps = linkPublicIps;
            MacAddress = macAddress;
            NetId = netId;
            NicId = nicId;
            PrivateDnsName = privateDnsName;
            PrivateIp = privateIp;
            PrivateIps = privateIps;
            RequestId = requestId;
            RequesterManaged = requesterManaged;
            SecurityGroupIds = securityGroupIds;
            SecurityGroups = securityGroups;
            State = state;
            SubnetId = subnetId;
            SubregionName = subregionName;
            Tags = tags;
        }
    }
}
