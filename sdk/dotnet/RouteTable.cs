// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a route table.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Route-Tables.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-routetable).
    /// 
    /// ## Example Usage
    /// ### Required resource
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var net01 = new Outscale.Net("net01", new()
    ///     {
    ///         IpRange = "10.0.0.0/16",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Create a route table
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var routeTable01 = new Outscale.RouteTable("routeTable01", new()
    ///     {
    ///         NetId = outscale_net.Net01.Net_id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A route table can be imported using its ID. For exampleconsole
    /// 
    /// ```sh
    ///  $ pulumi import outscale:index/routeTable:RouteTable ImportedRouteTable rtb-12345678
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/routeTable:RouteTable")]
    public partial class RouteTable : global::Pulumi.CustomResource
    {
        /// <summary>
        /// One or more associations between the route table and Subnets.
        /// </summary>
        [Output("linkRouteTables")]
        public Output<ImmutableArray<Outputs.RouteTableLinkRouteTable>> LinkRouteTables { get; private set; } = null!;

        /// <summary>
        /// The ID of the Net for which you want to create a route table.
        /// </summary>
        [Output("netId")]
        public Output<string> NetId { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// Information about virtual gateways propagating routes.
        /// </summary>
        [Output("routePropagatingVirtualGateways")]
        public Output<ImmutableArray<Outputs.RouteTableRoutePropagatingVirtualGateway>> RoutePropagatingVirtualGateways { get; private set; } = null!;

        /// <summary>
        /// The ID of the route table.
        /// </summary>
        [Output("routeTableId")]
        public Output<string> RouteTableId { get; private set; } = null!;

        /// <summary>
        /// One or more routes in the route table.
        /// </summary>
        [Output("routes")]
        public Output<ImmutableArray<Outputs.RouteTableRoute>> Routes { get; private set; } = null!;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.RouteTableTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a RouteTable resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouteTable(string name, RouteTableArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/routeTable:RouteTable", name, args ?? new RouteTableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouteTable(string name, Input<string> id, RouteTableState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/routeTable:RouteTable", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouteTable resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouteTable Get(string name, Input<string> id, RouteTableState? state = null, CustomResourceOptions? options = null)
        {
            return new RouteTable(name, id, state, options);
        }
    }

    public sealed class RouteTableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Net for which you want to create a route table.
        /// </summary>
        [Input("netId", required: true)]
        public Input<string> NetId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.RouteTableTagArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.RouteTableTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.RouteTableTagArgs>());
            set => _tags = value;
        }

        public RouteTableArgs()
        {
        }
        public static new RouteTableArgs Empty => new RouteTableArgs();
    }

    public sealed class RouteTableState : global::Pulumi.ResourceArgs
    {
        [Input("linkRouteTables")]
        private InputList<Inputs.RouteTableLinkRouteTableGetArgs>? _linkRouteTables;

        /// <summary>
        /// One or more associations between the route table and Subnets.
        /// </summary>
        public InputList<Inputs.RouteTableLinkRouteTableGetArgs> LinkRouteTables
        {
            get => _linkRouteTables ?? (_linkRouteTables = new InputList<Inputs.RouteTableLinkRouteTableGetArgs>());
            set => _linkRouteTables = value;
        }

        /// <summary>
        /// The ID of the Net for which you want to create a route table.
        /// </summary>
        [Input("netId")]
        public Input<string>? NetId { get; set; }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        [Input("routePropagatingVirtualGateways")]
        private InputList<Inputs.RouteTableRoutePropagatingVirtualGatewayGetArgs>? _routePropagatingVirtualGateways;

        /// <summary>
        /// Information about virtual gateways propagating routes.
        /// </summary>
        public InputList<Inputs.RouteTableRoutePropagatingVirtualGatewayGetArgs> RoutePropagatingVirtualGateways
        {
            get => _routePropagatingVirtualGateways ?? (_routePropagatingVirtualGateways = new InputList<Inputs.RouteTableRoutePropagatingVirtualGatewayGetArgs>());
            set => _routePropagatingVirtualGateways = value;
        }

        /// <summary>
        /// The ID of the route table.
        /// </summary>
        [Input("routeTableId")]
        public Input<string>? RouteTableId { get; set; }

        [Input("routes")]
        private InputList<Inputs.RouteTableRouteGetArgs>? _routes;

        /// <summary>
        /// One or more routes in the route table.
        /// </summary>
        public InputList<Inputs.RouteTableRouteGetArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.RouteTableRouteGetArgs>());
            set => _routes = value;
        }

        [Input("tags")]
        private InputList<Inputs.RouteTableTagGetArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.RouteTableTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.RouteTableTagGetArgs>());
            set => _tags = value;
        }

        public RouteTableState()
        {
        }
        public static new RouteTableState Empty => new RouteTableState();
    }
}
