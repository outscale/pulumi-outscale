// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a NIC's private IPs.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-NICs.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-nic).
    /// 
    /// ## Example Usage
    /// 
    /// ### Required resources
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var net01 = new Outscale.Net("net01", new()
    ///     {
    ///         IpRange = "10.0.0.0/16",
    ///     });
    /// 
    ///     var subnet01 = new Outscale.Subnet("subnet01", new()
    ///     {
    ///         SubregionName = $"{region}a",
    ///         IpRange = "10.0.0.0/16",
    ///         NetId = net01.NetId,
    ///     });
    /// 
    ///     var nic01 = new Outscale.Nic("nic01", new()
    ///     {
    ///         SubnetId = subnet01.SubnetId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Link a specific secondary private IP address to a NIC
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var nicPrivateIp01 = new Outscale.NicPrivateIp("nic_private_ip01", new()
    ///     {
    ///         NicId = nic01.NicId,
    ///         PrivateIps = new[]
    ///         {
    ///             "10.0.12.34",
    ///             "10.0.12.35",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Link several automatic secondary private IP addresses to a NIC
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var nicPrivateIp02 = new Outscale.NicPrivateIp("nic_private_ip02", new()
    ///     {
    ///         NicId = nic01.NicId,
    ///         SecondaryPrivateIpCount = 2,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/nicPrivateIp:NicPrivateIp")]
    public partial class NicPrivateIp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
        /// </summary>
        [Output("allowRelink")]
        public Output<bool?> AllowRelink { get; private set; } = null!;

        /// <summary>
        /// The ID of the NIC.
        /// </summary>
        [Output("nicId")]
        public Output<string> NicId { get; private set; } = null!;

        [Output("primaryPrivateIp")]
        public Output<string> PrimaryPrivateIp { get; private set; } = null!;

        /// <summary>
        /// The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
        /// </summary>
        [Output("privateIps")]
        public Output<ImmutableArray<string>> PrivateIps { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// The number of secondary private IPs to assign to the NIC.
        /// </summary>
        [Output("secondaryPrivateIpCount")]
        public Output<int> SecondaryPrivateIpCount { get; private set; } = null!;


        /// <summary>
        /// Create a NicPrivateIp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NicPrivateIp(string name, NicPrivateIpArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/nicPrivateIp:NicPrivateIp", name, args ?? new NicPrivateIpArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NicPrivateIp(string name, Input<string> id, NicPrivateIpState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/nicPrivateIp:NicPrivateIp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NicPrivateIp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NicPrivateIp Get(string name, Input<string> id, NicPrivateIpState? state = null, CustomResourceOptions? options = null)
        {
            return new NicPrivateIp(name, id, state, options);
        }
    }

    public sealed class NicPrivateIpArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
        /// </summary>
        [Input("allowRelink")]
        public Input<bool>? AllowRelink { get; set; }

        /// <summary>
        /// The ID of the NIC.
        /// </summary>
        [Input("nicId", required: true)]
        public Input<string> NicId { get; set; } = null!;

        [Input("privateIps")]
        private InputList<string>? _privateIps;

        /// <summary>
        /// The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
        /// </summary>
        public InputList<string> PrivateIps
        {
            get => _privateIps ?? (_privateIps = new InputList<string>());
            set => _privateIps = value;
        }

        /// <summary>
        /// The number of secondary private IPs to assign to the NIC.
        /// </summary>
        [Input("secondaryPrivateIpCount")]
        public Input<int>? SecondaryPrivateIpCount { get; set; }

        public NicPrivateIpArgs()
        {
        }
        public static new NicPrivateIpArgs Empty => new NicPrivateIpArgs();
    }

    public sealed class NicPrivateIpState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
        /// </summary>
        [Input("allowRelink")]
        public Input<bool>? AllowRelink { get; set; }

        /// <summary>
        /// The ID of the NIC.
        /// </summary>
        [Input("nicId")]
        public Input<string>? NicId { get; set; }

        [Input("primaryPrivateIp")]
        public Input<string>? PrimaryPrivateIp { get; set; }

        [Input("privateIps")]
        private InputList<string>? _privateIps;

        /// <summary>
        /// The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
        /// </summary>
        public InputList<string> PrivateIps
        {
            get => _privateIps ?? (_privateIps = new InputList<string>());
            set => _privateIps = value;
        }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The number of secondary private IPs to assign to the NIC.
        /// </summary>
        [Input("secondaryPrivateIpCount")]
        public Input<int>? SecondaryPrivateIpCount { get; set; }

        public NicPrivateIpState()
        {
        }
        public static new NicPrivateIpState Empty => new NicPrivateIpState();
    }
}
