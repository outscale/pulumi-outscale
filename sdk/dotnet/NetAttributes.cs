// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages the attributes of a Net.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-DHCP-Options.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#updatenet).
    /// 
    /// ## Example Usage
    /// ### Required resource
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var net01 = new Outscale.Net("net01", new()
    ///     {
    ///         IpRange = "10.0.0.0/16",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Associate a DHCP option set to a Net
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var netAttributes01 = new Outscale.NetAttributes("netAttributes01", new()
    ///     {
    ///         NetId = outscale_net.Net01.Net_id,
    ///         DhcpOptionsSetId = @var.Dhcp_options_set_id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A Net attribute can be imported using the Net ID. For exampleconsole
    /// 
    /// ```sh
    ///  $ pulumi import outscale:index/netAttributes:NetAttributes ImportedNet vpc-12345678
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/netAttributes:NetAttributes")]
    public partial class NetAttributes : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the DHCP options set (or `default` if you want to associate the default one).
        /// </summary>
        [Output("dhcpOptionsSetId")]
        public Output<string> DhcpOptionsSetId { get; private set; } = null!;

        /// <summary>
        /// The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
        /// </summary>
        [Output("ipRange")]
        public Output<string> IpRange { get; private set; } = null!;

        /// <summary>
        /// The ID of the Net.
        /// </summary>
        [Output("netId")]
        public Output<string> NetId { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// The state of the Net (`pending` \| `available` \| `deleted`).
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// One or more tags associated with the Net.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.NetAttributesTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The VM tenancy in a Net.
        /// </summary>
        [Output("tenancy")]
        public Output<string> Tenancy { get; private set; } = null!;


        /// <summary>
        /// Create a NetAttributes resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetAttributes(string name, NetAttributesArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/netAttributes:NetAttributes", name, args ?? new NetAttributesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetAttributes(string name, Input<string> id, NetAttributesState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/netAttributes:NetAttributes", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetAttributes resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetAttributes Get(string name, Input<string> id, NetAttributesState? state = null, CustomResourceOptions? options = null)
        {
            return new NetAttributes(name, id, state, options);
        }
    }

    public sealed class NetAttributesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the DHCP options set (or `default` if you want to associate the default one).
        /// </summary>
        [Input("dhcpOptionsSetId")]
        public Input<string>? DhcpOptionsSetId { get; set; }

        /// <summary>
        /// The ID of the Net.
        /// </summary>
        [Input("netId", required: true)]
        public Input<string> NetId { get; set; } = null!;

        public NetAttributesArgs()
        {
        }
        public static new NetAttributesArgs Empty => new NetAttributesArgs();
    }

    public sealed class NetAttributesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the DHCP options set (or `default` if you want to associate the default one).
        /// </summary>
        [Input("dhcpOptionsSetId")]
        public Input<string>? DhcpOptionsSetId { get; set; }

        /// <summary>
        /// The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
        /// </summary>
        [Input("ipRange")]
        public Input<string>? IpRange { get; set; }

        /// <summary>
        /// The ID of the Net.
        /// </summary>
        [Input("netId")]
        public Input<string>? NetId { get; set; }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The state of the Net (`pending` \| `available` \| `deleted`).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputList<Inputs.NetAttributesTagGetArgs>? _tags;

        /// <summary>
        /// One or more tags associated with the Net.
        /// </summary>
        public InputList<Inputs.NetAttributesTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NetAttributesTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The VM tenancy in a Net.
        /// </summary>
        [Input("tenancy")]
        public Input<string>? Tenancy { get; set; }

        public NetAttributesState()
        {
        }
        public static new NetAttributesState Empty => new NetAttributesState();
    }
}
