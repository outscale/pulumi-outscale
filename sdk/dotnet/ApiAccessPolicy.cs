// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages the API access policy.
    /// 
    /// To activate a trusted session, first you must:
    /// * Set expiration dates to all your access keys.
    /// * Specify a Certificate Authority (CA) in all your API access rules.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Your-API-Access-Policy.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-apiaccesspolicy).
    /// 
    /// ## Example Usage
    /// 
    /// ### Require expiration dates for your access keys
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var unique = new Outscale.ApiAccessPolicy("unique", new()
    ///     {
    ///         MaxAccessKeyExpirationSeconds = 31536000,
    ///         RequireTrustedEnv = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Activate a trusted session
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var unique = new Outscale.ApiAccessPolicy("unique", new()
    ///     {
    ///         MaxAccessKeyExpirationSeconds = 3153600000,
    ///         RequireTrustedEnv = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Deactivate a trusted session
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var unique = new Outscale.ApiAccessPolicy("unique", new()
    ///     {
    ///         MaxAccessKeyExpirationSeconds = 0,
    ///         RequireTrustedEnv = false,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/apiAccessPolicy:ApiAccessPolicy")]
    public partial class ApiAccessPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The maximum possible lifetime for your access keys, in seconds (between `0` and `3153600000`, both included). If set to `O`, your access keys can have unlimited lifetimes, but a trusted session cannot be activated. Otherwise, all your access keys must have an expiration date. This value must be greater than the remaining lifetime of each access key of your account.
        /// </summary>
        [Output("maxAccessKeyExpirationSeconds")]
        public Output<int> MaxAccessKeyExpirationSeconds { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// If true, a trusted session is activated, provided that you specify the `max_access_key_expiration_seconds` parameter with a value greater than `0`.&lt;br /&gt;
        /// Enabling this will require you and all your users to log in to Cockpit v2 using the WebAuthn method for multi-factor authentication. For more information, see [About Authentication &gt; Multi-Factor Authentication](https://docs.outscale.com/en/userguide/About-Authentication.html#_multi_factor_authentication).
        /// </summary>
        [Output("requireTrustedEnv")]
        public Output<bool> RequireTrustedEnv { get; private set; } = null!;


        /// <summary>
        /// Create a ApiAccessPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApiAccessPolicy(string name, ApiAccessPolicyArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/apiAccessPolicy:ApiAccessPolicy", name, args ?? new ApiAccessPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApiAccessPolicy(string name, Input<string> id, ApiAccessPolicyState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/apiAccessPolicy:ApiAccessPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApiAccessPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApiAccessPolicy Get(string name, Input<string> id, ApiAccessPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ApiAccessPolicy(name, id, state, options);
        }
    }

    public sealed class ApiAccessPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum possible lifetime for your access keys, in seconds (between `0` and `3153600000`, both included). If set to `O`, your access keys can have unlimited lifetimes, but a trusted session cannot be activated. Otherwise, all your access keys must have an expiration date. This value must be greater than the remaining lifetime of each access key of your account.
        /// </summary>
        [Input("maxAccessKeyExpirationSeconds", required: true)]
        public Input<int> MaxAccessKeyExpirationSeconds { get; set; } = null!;

        /// <summary>
        /// If true, a trusted session is activated, provided that you specify the `max_access_key_expiration_seconds` parameter with a value greater than `0`.&lt;br /&gt;
        /// Enabling this will require you and all your users to log in to Cockpit v2 using the WebAuthn method for multi-factor authentication. For more information, see [About Authentication &gt; Multi-Factor Authentication](https://docs.outscale.com/en/userguide/About-Authentication.html#_multi_factor_authentication).
        /// </summary>
        [Input("requireTrustedEnv", required: true)]
        public Input<bool> RequireTrustedEnv { get; set; } = null!;

        public ApiAccessPolicyArgs()
        {
        }
        public static new ApiAccessPolicyArgs Empty => new ApiAccessPolicyArgs();
    }

    public sealed class ApiAccessPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum possible lifetime for your access keys, in seconds (between `0` and `3153600000`, both included). If set to `O`, your access keys can have unlimited lifetimes, but a trusted session cannot be activated. Otherwise, all your access keys must have an expiration date. This value must be greater than the remaining lifetime of each access key of your account.
        /// </summary>
        [Input("maxAccessKeyExpirationSeconds")]
        public Input<int>? MaxAccessKeyExpirationSeconds { get; set; }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// If true, a trusted session is activated, provided that you specify the `max_access_key_expiration_seconds` parameter with a value greater than `0`.&lt;br /&gt;
        /// Enabling this will require you and all your users to log in to Cockpit v2 using the WebAuthn method for multi-factor authentication. For more information, see [About Authentication &gt; Multi-Factor Authentication](https://docs.outscale.com/en/userguide/About-Authentication.html#_multi_factor_authentication).
        /// </summary>
        [Input("requireTrustedEnv")]
        public Input<bool>? RequireTrustedEnv { get; set; }

        public ApiAccessPolicyState()
        {
        }
        public static new ApiAccessPolicyState Empty => new ApiAccessPolicyState();
    }
}
