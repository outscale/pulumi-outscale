// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetKeypairs
    {
        /// <summary>
        /// Provides information about keypairs.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Keypairs.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-keypair).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var keypairs01 = Outscale.GetKeypairs.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetKeypairsFilterInputArgs
        ///             {
        ///                 Name = "keypair_names",
        ///                 Values = new[]
        ///                 {
        ///                     "terraform-keypair-01",
        ///                     "terraform-keypair-02",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetKeypairsResult> InvokeAsync(GetKeypairsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKeypairsResult>("outscale:index/getKeypairs:getKeypairs", args ?? new GetKeypairsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about keypairs.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Keypairs.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-keypair).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var keypairs01 = Outscale.GetKeypairs.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetKeypairsFilterInputArgs
        ///             {
        ///                 Name = "keypair_names",
        ///                 Values = new[]
        ///                 {
        ///                     "terraform-keypair-01",
        ///                     "terraform-keypair-02",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetKeypairsResult> Invoke(GetKeypairsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKeypairsResult>("outscale:index/getKeypairs:getKeypairs", args ?? new GetKeypairsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about keypairs.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Keypairs.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-keypair).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var keypairs01 = Outscale.GetKeypairs.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetKeypairsFilterInputArgs
        ///             {
        ///                 Name = "keypair_names",
        ///                 Values = new[]
        ///                 {
        ///                     "terraform-keypair-01",
        ///                     "terraform-keypair-02",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetKeypairsResult> Invoke(GetKeypairsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetKeypairsResult>("outscale:index/getKeypairs:getKeypairs", args ?? new GetKeypairsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKeypairsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetKeypairsFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetKeypairsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetKeypairsFilterArgs>());
            set => _filters = value;
        }

        [Input("keypairNames")]
        private List<string>? _keypairNames;
        public List<string> KeypairNames
        {
            get => _keypairNames ?? (_keypairNames = new List<string>());
            set => _keypairNames = value;
        }

        public GetKeypairsArgs()
        {
        }
        public static new GetKeypairsArgs Empty => new GetKeypairsArgs();
    }

    public sealed class GetKeypairsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetKeypairsFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetKeypairsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetKeypairsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("keypairNames")]
        private InputList<string>? _keypairNames;
        public InputList<string> KeypairNames
        {
            get => _keypairNames ?? (_keypairNames = new InputList<string>());
            set => _keypairNames = value;
        }

        public GetKeypairsInvokeArgs()
        {
        }
        public static new GetKeypairsInvokeArgs Empty => new GetKeypairsInvokeArgs();
    }


    [OutputType]
    public sealed class GetKeypairsResult
    {
        public readonly ImmutableArray<Outputs.GetKeypairsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> KeypairNames;
        /// <summary>
        /// Information about one or more keypairs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKeypairsKeypairResult> Keypairs;
        public readonly string RequestId;

        [OutputConstructor]
        private GetKeypairsResult(
            ImmutableArray<Outputs.GetKeypairsFilterResult> filters,

            string id,

            ImmutableArray<string> keypairNames,

            ImmutableArray<Outputs.GetKeypairsKeypairResult> keypairs,

            string requestId)
        {
            Filters = filters;
            Id = id;
            KeypairNames = keypairNames;
            Keypairs = keypairs;
            RequestId = requestId;
        }
    }
}
