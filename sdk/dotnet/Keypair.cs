// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a keypair.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Keypairs.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-keypair).
    /// 
    /// ## Example Usage
    /// 
    /// ### Create a keypair
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var keypair01 = new Outscale.Keypair("keypair01", new()
    ///     {
    ///         KeypairName = "terraform-keypair-create",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A keypair can be imported using its name. For example:
    /// 
    /// console
    /// 
    /// ```sh
    /// $ pulumi import outscale:index/keypair:Keypair ImportedKeypair keypair_id
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/keypair:Keypair")]
    public partial class Keypair : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The MD5 public key fingerprint, as specified in section 4 of RFC 4716.
        /// </summary>
        [Output("keypairFingerprint")]
        public Output<string> KeypairFingerprint { get; private set; } = null!;

        /// <summary>
        /// The ID of the keypair.
        /// </summary>
        [Output("keypairId")]
        public Output<string> KeypairId { get; private set; } = null!;

        /// <summary>
        /// A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
        /// </summary>
        [Output("keypairName")]
        public Output<string> KeypairName { get; private set; } = null!;

        /// <summary>
        /// The type of the keypair (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
        /// </summary>
        [Output("keypairType")]
        public Output<string> KeypairType { get; private set; } = null!;

        /// <summary>
        /// The private key, returned only if you are creating a keypair (not if you are importing). When you save this private key in a .rsa file, make sure you replace the `\n` escape sequences with real line breaks.
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// The public key to import in your account, if you are importing an existing keypair. This value must be Base64-encoded.
        /// </summary>
        [Output("publicKey")]
        public Output<string?> PublicKey { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.KeypairTag>> Tags { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.KeypairTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a Keypair resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Keypair(string name, KeypairArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/keypair:Keypair", name, args ?? new KeypairArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Keypair(string name, Input<string> id, KeypairState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/keypair:Keypair", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Keypair resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Keypair Get(string name, Input<string> id, KeypairState? state = null, CustomResourceOptions? options = null)
        {
            return new Keypair(name, id, state, options);
        }
    }

    public sealed class KeypairArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
        /// </summary>
        [Input("keypairName", required: true)]
        public Input<string> KeypairName { get; set; } = null!;

        /// <summary>
        /// The public key to import in your account, if you are importing an existing keypair. This value must be Base64-encoded.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        [Input("tags")]
        private InputList<Inputs.KeypairTagArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.KeypairTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.KeypairTagArgs>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.KeypairTimeoutsArgs>? Timeouts { get; set; }

        public KeypairArgs()
        {
        }
        public static new KeypairArgs Empty => new KeypairArgs();
    }

    public sealed class KeypairState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The MD5 public key fingerprint, as specified in section 4 of RFC 4716.
        /// </summary>
        [Input("keypairFingerprint")]
        public Input<string>? KeypairFingerprint { get; set; }

        /// <summary>
        /// The ID of the keypair.
        /// </summary>
        [Input("keypairId")]
        public Input<string>? KeypairId { get; set; }

        /// <summary>
        /// A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
        /// </summary>
        [Input("keypairName")]
        public Input<string>? KeypairName { get; set; }

        /// <summary>
        /// The type of the keypair (`ssh-rsa`, `ssh-ed25519`, `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, or `ecdsa-sha2-nistp521`).
        /// </summary>
        [Input("keypairType")]
        public Input<string>? KeypairType { get; set; }

        /// <summary>
        /// The private key, returned only if you are creating a keypair (not if you are importing). When you save this private key in a .rsa file, make sure you replace the `\n` escape sequences with real line breaks.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// The public key to import in your account, if you are importing an existing keypair. This value must be Base64-encoded.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        [Input("tags")]
        private InputList<Inputs.KeypairTagGetArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.KeypairTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.KeypairTagGetArgs>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.KeypairTimeoutsGetArgs>? Timeouts { get; set; }

        public KeypairState()
        {
        }
        public static new KeypairState Empty => new KeypairState();
    }
}
