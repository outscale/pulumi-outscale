// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a Net peering.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Net-Peerings.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-netpeering).
    /// 
    /// ## Example Usage
    /// 
    /// ### Required resources
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var net01 = new Outscale.Net("net01", new()
    ///     {
    ///         IpRange = "10.10.0.0/24",
    ///     });
    /// 
    ///     var net02 = new Outscale.Net("net02", new()
    ///     {
    ///         IpRange = "10.31.0.0/16",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Peer Nets
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var netPeering01 = new Outscale.NetPeering("net_peering01", new()
    ///     {
    ///         AccepterNetId = net01.NetId,
    ///         SourceNetId = net02.NetId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A Net peering can be imported using its ID. For example:
    /// 
    /// console
    /// 
    /// ```sh
    /// $ pulumi import outscale:index/netPeering:NetPeering ImportedNetPeering pcx-12345678
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/netPeering:NetPeering")]
    public partial class NetPeering : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Net you want to connect with.
        /// </summary>
        [Output("accepterNetId")]
        public Output<string> AccepterNetId { get; private set; } = null!;

        /// <summary>
        /// Information about the accepter Net.
        /// </summary>
        [Output("accepterNets")]
        public Output<ImmutableArray<Outputs.NetPeeringAccepterNet>> AccepterNets { get; private set; } = null!;

        /// <summary>
        /// The account ID of the owner of the Net you want to connect with. By default, the account ID of the owner of the Net from which the peering request is sent. &lt;br /&gt;&lt;br/ &gt;
        /// This parameter is required if the Net you want to connect with does not belong to you.
        /// </summary>
        [Output("accepterOwnerId")]
        public Output<string> AccepterOwnerId { get; private set; } = null!;

        /// <summary>
        /// The date and time (UTC) at which the Net peerings expire.
        /// </summary>
        [Output("expirationDate")]
        public Output<string> ExpirationDate { get; private set; } = null!;

        /// <summary>
        /// The ID of the Net peering.
        /// </summary>
        [Output("netPeeringId")]
        public Output<string> NetPeeringId { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        [Output("sourceNetAccountId")]
        public Output<string> SourceNetAccountId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Net you send the peering request from.
        /// </summary>
        [Output("sourceNetId")]
        public Output<string> SourceNetId { get; private set; } = null!;

        /// <summary>
        /// Information about the source Net.
        /// </summary>
        [Output("sourceNets")]
        public Output<ImmutableArray<Outputs.NetPeeringSourceNet>> SourceNets { get; private set; } = null!;

        /// <summary>
        /// Information about the state of the Net peering.
        /// </summary>
        [Output("states")]
        public Output<ImmutableArray<Outputs.NetPeeringState>> States { get; private set; } = null!;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.NetPeeringTag>> Tags { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.NetPeeringTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a NetPeering resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetPeering(string name, NetPeeringArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/netPeering:NetPeering", name, args ?? new NetPeeringArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetPeering(string name, Input<string> id, NetPeeringState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/netPeering:NetPeering", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetPeering resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetPeering Get(string name, Input<string> id, NetPeeringState? state = null, CustomResourceOptions? options = null)
        {
            return new NetPeering(name, id, state, options);
        }
    }

    public sealed class NetPeeringArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Net you want to connect with.
        /// </summary>
        [Input("accepterNetId", required: true)]
        public Input<string> AccepterNetId { get; set; } = null!;

        /// <summary>
        /// The account ID of the owner of the Net you want to connect with. By default, the account ID of the owner of the Net from which the peering request is sent. &lt;br /&gt;&lt;br/ &gt;
        /// This parameter is required if the Net you want to connect with does not belong to you.
        /// </summary>
        [Input("accepterOwnerId")]
        public Input<string>? AccepterOwnerId { get; set; }

        [Input("sourceNetAccountId")]
        public Input<string>? SourceNetAccountId { get; set; }

        /// <summary>
        /// The ID of the Net you send the peering request from.
        /// </summary>
        [Input("sourceNetId", required: true)]
        public Input<string> SourceNetId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.NetPeeringTagArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.NetPeeringTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NetPeeringTagArgs>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.NetPeeringTimeoutsArgs>? Timeouts { get; set; }

        public NetPeeringArgs()
        {
        }
        public static new NetPeeringArgs Empty => new NetPeeringArgs();
    }

    public sealed class NetPeeringState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Net you want to connect with.
        /// </summary>
        [Input("accepterNetId")]
        public Input<string>? AccepterNetId { get; set; }

        [Input("accepterNets")]
        private InputList<Inputs.NetPeeringAccepterNetGetArgs>? _accepterNets;

        /// <summary>
        /// Information about the accepter Net.
        /// </summary>
        public InputList<Inputs.NetPeeringAccepterNetGetArgs> AccepterNets
        {
            get => _accepterNets ?? (_accepterNets = new InputList<Inputs.NetPeeringAccepterNetGetArgs>());
            set => _accepterNets = value;
        }

        /// <summary>
        /// The account ID of the owner of the Net you want to connect with. By default, the account ID of the owner of the Net from which the peering request is sent. &lt;br /&gt;&lt;br/ &gt;
        /// This parameter is required if the Net you want to connect with does not belong to you.
        /// </summary>
        [Input("accepterOwnerId")]
        public Input<string>? AccepterOwnerId { get; set; }

        /// <summary>
        /// The date and time (UTC) at which the Net peerings expire.
        /// </summary>
        [Input("expirationDate")]
        public Input<string>? ExpirationDate { get; set; }

        /// <summary>
        /// The ID of the Net peering.
        /// </summary>
        [Input("netPeeringId")]
        public Input<string>? NetPeeringId { get; set; }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        [Input("sourceNetAccountId")]
        public Input<string>? SourceNetAccountId { get; set; }

        /// <summary>
        /// The ID of the Net you send the peering request from.
        /// </summary>
        [Input("sourceNetId")]
        public Input<string>? SourceNetId { get; set; }

        [Input("sourceNets")]
        private InputList<Inputs.NetPeeringSourceNetGetArgs>? _sourceNets;

        /// <summary>
        /// Information about the source Net.
        /// </summary>
        public InputList<Inputs.NetPeeringSourceNetGetArgs> SourceNets
        {
            get => _sourceNets ?? (_sourceNets = new InputList<Inputs.NetPeeringSourceNetGetArgs>());
            set => _sourceNets = value;
        }

        [Input("states")]
        private InputList<Inputs.NetPeeringStateGetArgs>? _states;

        /// <summary>
        /// Information about the state of the Net peering.
        /// </summary>
        public InputList<Inputs.NetPeeringStateGetArgs> States
        {
            get => _states ?? (_states = new InputList<Inputs.NetPeeringStateGetArgs>());
            set => _states = value;
        }

        [Input("tags")]
        private InputList<Inputs.NetPeeringTagGetArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.NetPeeringTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NetPeeringTagGetArgs>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.NetPeeringTimeoutsGetArgs>? Timeouts { get; set; }

        public NetPeeringState()
        {
        }
        public static new NetPeeringState Empty => new NetPeeringState();
    }
}
