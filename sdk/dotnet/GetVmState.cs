// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetVmState
    {
        /// <summary>
        /// Provides information about a VM state.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Instance-Lifecycle.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#readvmsstate).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vmState01 = Outscale.GetVmState.Invoke(new()
        ///     {
        ///         AllVms = true,
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetVmStateFilterInputArgs
        ///             {
        ///                 Name = "vm_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "i-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVmStateResult> InvokeAsync(GetVmStateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVmStateResult>("outscale:index/getVmState:getVmState", args ?? new GetVmStateArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a VM state.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Instance-Lifecycle.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#readvmsstate).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var vmState01 = Outscale.GetVmState.Invoke(new()
        ///     {
        ///         AllVms = true,
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetVmStateFilterInputArgs
        ///             {
        ///                 Name = "vm_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "i-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVmStateResult> Invoke(GetVmStateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVmStateResult>("outscale:index/getVmState:getVmState", args ?? new GetVmStateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVmStateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// If true, includes the status of all VMs. By default or if set to false, only includes the status of running VMs.
        /// </summary>
        [Input("allVms")]
        public bool? AllVms { get; set; }

        [Input("filters")]
        private List<Inputs.GetVmStateFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetVmStateFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVmStateFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the VM.
        /// </summary>
        [Input("vmId")]
        public string? VmId { get; set; }

        public GetVmStateArgs()
        {
        }
        public static new GetVmStateArgs Empty => new GetVmStateArgs();
    }

    public sealed class GetVmStateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// If true, includes the status of all VMs. By default or if set to false, only includes the status of running VMs.
        /// </summary>
        [Input("allVms")]
        public Input<bool>? AllVms { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetVmStateFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetVmStateFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVmStateFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the VM.
        /// </summary>
        [Input("vmId")]
        public Input<string>? VmId { get; set; }

        public GetVmStateInvokeArgs()
        {
        }
        public static new GetVmStateInvokeArgs Empty => new GetVmStateInvokeArgs();
    }


    [OutputType]
    public sealed class GetVmStateResult
    {
        public readonly bool? AllVms;
        public readonly ImmutableArray<Outputs.GetVmStateFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// One or more scheduled events associated with the VM.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVmStateMaintenanceEventResult> MaintenanceEvents;
        public readonly string RequestId;
        /// <summary>
        /// The name of the Subregion of the VM.
        /// </summary>
        public readonly string SubregionName;
        /// <summary>
        /// The ID of the VM.
        /// </summary>
        public readonly string? VmId;
        /// <summary>
        /// The state of the VM (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
        /// </summary>
        public readonly string VmState;

        [OutputConstructor]
        private GetVmStateResult(
            bool? allVms,

            ImmutableArray<Outputs.GetVmStateFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetVmStateMaintenanceEventResult> maintenanceEvents,

            string requestId,

            string subregionName,

            string? vmId,

            string vmState)
        {
            AllVms = allVms;
            Filters = filters;
            Id = id;
            MaintenanceEvents = maintenanceEvents;
            RequestId = requestId;
            SubregionName = subregionName;
            VmId = vmId;
            VmState = vmState;
        }
    }
}
