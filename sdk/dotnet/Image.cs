// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages an image.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-OMIs.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-image).
    /// 
    /// ## Example Usage
    /// 
    /// ### Create an image
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image01 = new Outscale.Image("image01", new()
    ///     {
    ///         ImageName = "terraform-omi-create",
    ///         VmId = vmId,
    ///         NoReboot = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Import an image
    /// &gt; **Important** Make sure the manifest file is still valid.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image02 = new Outscale.Image("image02", new()
    ///     {
    ///         Description = "Terraform register OMI",
    ///         ImageName = "terraform-omi-register",
    ///         FileLocation = "&lt;URL&gt;",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Copy an image
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image03 = new Outscale.Image("image03", new()
    ///     {
    ///         Description = "Terraform copy OMI",
    ///         ImageName = "terraform-omi-copy",
    ///         SourceImageId = "ami-12345678",
    ///         SourceRegionName = "eu-west-2",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Create an image with a Block Storage Unit (BSU) volume
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image04 = new Outscale.Image("image04", new()
    ///     {
    ///         ImageName = "terraform-omi-bsu",
    ///         BlockDeviceMappings = new[]
    ///         {
    ///             new Outscale.Inputs.ImageBlockDeviceMappingArgs
    ///             {
    ///                 DeviceName = "/dev/sda1",
    ///                 Bsus = new[]
    ///                 {
    ///                     new Outscale.Inputs.ImageBlockDeviceMappingBsusArgs
    ///                     {
    ///                         SnapshotId = "snap-12345678",
    ///                         VolumeSize = 120,
    ///                         VolumeType = "io1",
    ///                         Iops = 150,
    ///                         DeleteOnVmDeletion = true,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         RootDeviceName = "/dev/sda1",
    ///         Description = "Terraform OMI with BSU",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// An image can be imported using its ID. For example:
    /// 
    /// console
    /// 
    /// ```sh
    /// $ pulumi import outscale:index/image:Image ImportedImage ami-12345678
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/image:Image")]
    public partial class Image : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account alias of the owner of the OMI.
        /// </summary>
        [Output("accountAlias")]
        public Output<string> AccountAlias { get; private set; } = null!;

        /// <summary>
        /// The account ID of the owner of the OMI.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// **When registering from a snapshot:** The architecture of the OMI (`i386` or `x86_64`).
        /// </summary>
        [Output("architecture")]
        public Output<string> Architecture { get; private set; } = null!;

        /// <summary>
        /// **(required) When registering from a snapshot:** One or more block device mappings.
        /// </summary>
        [Output("blockDeviceMappings")]
        public Output<ImmutableArray<Outputs.ImageBlockDeviceMapping>> BlockDeviceMappings { get; private set; } = null!;

        /// <summary>
        /// The date and time (UTC) at which the OMI was created.
        /// </summary>
        [Output("creationDate")]
        public Output<string> CreationDate { get; private set; } = null!;

        /// <summary>
        /// A description for the new OMI.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// **(required) When registering from a bucket by using a manifest file:** The pre-signed URL of the manifest file for the OMI you want to register. For more information, see [Creating a Pre-signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).
        /// </summary>
        [Output("fileLocation")]
        public Output<string> FileLocation { get; private set; } = null!;

        /// <summary>
        /// The ID of the OMI.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// A unique name for the new OMI.&lt;br /&gt;
        /// Constraints: 3-128 alphanumeric characters, underscores (`_`), spaces (` `), parentheses (`()`), slashes (`/`), periods (`.`), or dashes (`-`).
        /// </summary>
        [Output("imageName")]
        public Output<string> ImageName { get; private set; } = null!;

        /// <summary>
        /// The type of the OMI.
        /// </summary>
        [Output("imageType")]
        public Output<string> ImageType { get; private set; } = null!;

        [Output("isPublic")]
        public Output<bool> IsPublic { get; private set; } = null!;

        /// <summary>
        /// **When creating from a VM:** If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
        /// </summary>
        [Output("noReboot")]
        public Output<bool> NoReboot { get; private set; } = null!;

        /// <summary>
        /// Permissions for the resource.
        /// </summary>
        [Output("permissionsToLaunches")]
        public Output<ImmutableArray<Outputs.ImagePermissionsToLaunch>> PermissionsToLaunches { get; private set; } = null!;

        /// <summary>
        /// The product codes associated with the OMI.
        /// </summary>
        [Output("productCodes")]
        public Output<ImmutableArray<string>> ProductCodes { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// **(required) When registering from a snapshot:** The name of the root device for the new OMI.
        /// </summary>
        [Output("rootDeviceName")]
        public Output<string> RootDeviceName { get; private set; } = null!;

        /// <summary>
        /// The type of root device used by the OMI (always `bsu`).
        /// </summary>
        [Output("rootDeviceType")]
        public Output<string> RootDeviceType { get; private set; } = null!;

        /// <summary>
        /// **(required) When copying an OMI:** The ID of the OMI you want to copy.
        /// </summary>
        [Output("sourceImageId")]
        public Output<string> SourceImageId { get; private set; } = null!;

        /// <summary>
        /// **(required) When copying an OMI:** The name of the source Region (always the same as the Region of your account).
        /// </summary>
        [Output("sourceRegionName")]
        public Output<string?> SourceRegionName { get; private set; } = null!;

        /// <summary>
        /// The state of the OMI (`pending` \| `available` \| `failed`).
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Information about the change of state.
        /// </summary>
        [Output("stateComments")]
        public Output<ImmutableArray<Outputs.ImageStateComment>> StateComments { get; private set; } = null!;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.ImageTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// **(required) When creating from a VM:** The ID of the VM from which you want to create the OMI.
        /// </summary>
        [Output("vmId")]
        public Output<string> VmId { get; private set; } = null!;


        /// <summary>
        /// Create a Image resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Image(string name, ImageArgs? args = null, CustomResourceOptions? options = null)
            : base("outscale:index/image:Image", name, args ?? new ImageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Image(string name, Input<string> id, ImageState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/image:Image", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Image resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Image Get(string name, Input<string> id, ImageState? state = null, CustomResourceOptions? options = null)
        {
            return new Image(name, id, state, options);
        }
    }

    public sealed class ImageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// **When registering from a snapshot:** The architecture of the OMI (`i386` or `x86_64`).
        /// </summary>
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        [Input("blockDeviceMappings")]
        private InputList<Inputs.ImageBlockDeviceMappingArgs>? _blockDeviceMappings;

        /// <summary>
        /// **(required) When registering from a snapshot:** One or more block device mappings.
        /// </summary>
        public InputList<Inputs.ImageBlockDeviceMappingArgs> BlockDeviceMappings
        {
            get => _blockDeviceMappings ?? (_blockDeviceMappings = new InputList<Inputs.ImageBlockDeviceMappingArgs>());
            set => _blockDeviceMappings = value;
        }

        /// <summary>
        /// A description for the new OMI.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// **(required) When registering from a bucket by using a manifest file:** The pre-signed URL of the manifest file for the OMI you want to register. For more information, see [Creating a Pre-signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).
        /// </summary>
        [Input("fileLocation")]
        public Input<string>? FileLocation { get; set; }

        /// <summary>
        /// A unique name for the new OMI.&lt;br /&gt;
        /// Constraints: 3-128 alphanumeric characters, underscores (`_`), spaces (` `), parentheses (`()`), slashes (`/`), periods (`.`), or dashes (`-`).
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        /// <summary>
        /// **When creating from a VM:** If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
        /// </summary>
        [Input("noReboot")]
        public Input<bool>? NoReboot { get; set; }

        /// <summary>
        /// **(required) When registering from a snapshot:** The name of the root device for the new OMI.
        /// </summary>
        [Input("rootDeviceName")]
        public Input<string>? RootDeviceName { get; set; }

        /// <summary>
        /// **(required) When copying an OMI:** The ID of the OMI you want to copy.
        /// </summary>
        [Input("sourceImageId")]
        public Input<string>? SourceImageId { get; set; }

        /// <summary>
        /// **(required) When copying an OMI:** The name of the source Region (always the same as the Region of your account).
        /// </summary>
        [Input("sourceRegionName")]
        public Input<string>? SourceRegionName { get; set; }

        [Input("tags")]
        private InputList<Inputs.ImageTagArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.ImageTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ImageTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// **(required) When creating from a VM:** The ID of the VM from which you want to create the OMI.
        /// </summary>
        [Input("vmId")]
        public Input<string>? VmId { get; set; }

        public ImageArgs()
        {
        }
        public static new ImageArgs Empty => new ImageArgs();
    }

    public sealed class ImageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account alias of the owner of the OMI.
        /// </summary>
        [Input("accountAlias")]
        public Input<string>? AccountAlias { get; set; }

        /// <summary>
        /// The account ID of the owner of the OMI.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// **When registering from a snapshot:** The architecture of the OMI (`i386` or `x86_64`).
        /// </summary>
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        [Input("blockDeviceMappings")]
        private InputList<Inputs.ImageBlockDeviceMappingGetArgs>? _blockDeviceMappings;

        /// <summary>
        /// **(required) When registering from a snapshot:** One or more block device mappings.
        /// </summary>
        public InputList<Inputs.ImageBlockDeviceMappingGetArgs> BlockDeviceMappings
        {
            get => _blockDeviceMappings ?? (_blockDeviceMappings = new InputList<Inputs.ImageBlockDeviceMappingGetArgs>());
            set => _blockDeviceMappings = value;
        }

        /// <summary>
        /// The date and time (UTC) at which the OMI was created.
        /// </summary>
        [Input("creationDate")]
        public Input<string>? CreationDate { get; set; }

        /// <summary>
        /// A description for the new OMI.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// **(required) When registering from a bucket by using a manifest file:** The pre-signed URL of the manifest file for the OMI you want to register. For more information, see [Creating a Pre-signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).
        /// </summary>
        [Input("fileLocation")]
        public Input<string>? FileLocation { get; set; }

        /// <summary>
        /// The ID of the OMI.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// A unique name for the new OMI.&lt;br /&gt;
        /// Constraints: 3-128 alphanumeric characters, underscores (`_`), spaces (` `), parentheses (`()`), slashes (`/`), periods (`.`), or dashes (`-`).
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        /// <summary>
        /// The type of the OMI.
        /// </summary>
        [Input("imageType")]
        public Input<string>? ImageType { get; set; }

        [Input("isPublic")]
        public Input<bool>? IsPublic { get; set; }

        /// <summary>
        /// **When creating from a VM:** If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
        /// </summary>
        [Input("noReboot")]
        public Input<bool>? NoReboot { get; set; }

        [Input("permissionsToLaunches")]
        private InputList<Inputs.ImagePermissionsToLaunchGetArgs>? _permissionsToLaunches;

        /// <summary>
        /// Permissions for the resource.
        /// </summary>
        public InputList<Inputs.ImagePermissionsToLaunchGetArgs> PermissionsToLaunches
        {
            get => _permissionsToLaunches ?? (_permissionsToLaunches = new InputList<Inputs.ImagePermissionsToLaunchGetArgs>());
            set => _permissionsToLaunches = value;
        }

        [Input("productCodes")]
        private InputList<string>? _productCodes;

        /// <summary>
        /// The product codes associated with the OMI.
        /// </summary>
        public InputList<string> ProductCodes
        {
            get => _productCodes ?? (_productCodes = new InputList<string>());
            set => _productCodes = value;
        }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// **(required) When registering from a snapshot:** The name of the root device for the new OMI.
        /// </summary>
        [Input("rootDeviceName")]
        public Input<string>? RootDeviceName { get; set; }

        /// <summary>
        /// The type of root device used by the OMI (always `bsu`).
        /// </summary>
        [Input("rootDeviceType")]
        public Input<string>? RootDeviceType { get; set; }

        /// <summary>
        /// **(required) When copying an OMI:** The ID of the OMI you want to copy.
        /// </summary>
        [Input("sourceImageId")]
        public Input<string>? SourceImageId { get; set; }

        /// <summary>
        /// **(required) When copying an OMI:** The name of the source Region (always the same as the Region of your account).
        /// </summary>
        [Input("sourceRegionName")]
        public Input<string>? SourceRegionName { get; set; }

        /// <summary>
        /// The state of the OMI (`pending` \| `available` \| `failed`).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("stateComments")]
        private InputList<Inputs.ImageStateCommentGetArgs>? _stateComments;

        /// <summary>
        /// Information about the change of state.
        /// </summary>
        public InputList<Inputs.ImageStateCommentGetArgs> StateComments
        {
            get => _stateComments ?? (_stateComments = new InputList<Inputs.ImageStateCommentGetArgs>());
            set => _stateComments = value;
        }

        [Input("tags")]
        private InputList<Inputs.ImageTagGetArgs>? _tags;

        /// <summary>
        /// A tag to add to this resource. You can specify this argument several times.
        /// </summary>
        public InputList<Inputs.ImageTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ImageTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// **(required) When creating from a VM:** The ID of the VM from which you want to create the OMI.
        /// </summary>
        [Input("vmId")]
        public Input<string>? VmId { get; set; }

        public ImageState()
        {
        }
        public static new ImageState Empty => new ImageState();
    }
}
