// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetVolume
    {
        /// <summary>
        /// Provides information about a volume.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Volumes.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-volume).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var outscaleVolume01 = Outscale.GetVolume.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetVolumeFilterInputArgs
        ///             {
        ///                 Name = "volume_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "vol-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVolumeResult> InvokeAsync(GetVolumeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeResult>("outscale:index/getVolume:getVolume", args ?? new GetVolumeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a volume.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Volumes.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-volume).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var outscaleVolume01 = Outscale.GetVolume.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetVolumeFilterInputArgs
        ///             {
        ///                 Name = "volume_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "vol-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVolumeResult> Invoke(GetVolumeInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeResult>("outscale:index/getVolume:getVolume", args ?? new GetVolumeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVolumeFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetVolumeFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVolumeFilterArgs>());
            set => _filters = value;
        }

        [Input("requestId")]
        public string? RequestId { get; set; }

        /// <summary>
        /// The ID of the volume.
        /// </summary>
        [Input("volumeId")]
        public string? VolumeId { get; set; }

        public GetVolumeArgs()
        {
        }
        public static new GetVolumeArgs Empty => new GetVolumeArgs();
    }

    public sealed class GetVolumeInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetVolumeFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetVolumeFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVolumeFilterInputArgs>());
            set => _filters = value;
        }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The ID of the volume.
        /// </summary>
        [Input("volumeId")]
        public Input<string>? VolumeId { get; set; }

        public GetVolumeInvokeArgs()
        {
        }
        public static new GetVolumeInvokeArgs Empty => new GetVolumeInvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeResult
    {
        /// <summary>
        /// The date and time of creation of the volume.
        /// </summary>
        public readonly string CreationDate;
        public readonly ImmutableArray<Outputs.GetVolumeFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The number of I/O operations per second (IOPS):&lt;br /&gt;- For `io1` volumes, the number of provisioned IOPS.&lt;br /&gt;- For `gp2` volumes, the baseline performance of the volume.
        /// </summary>
        public readonly int Iops;
        /// <summary>
        /// Information about your volume attachment.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeLinkedVolumeResult> LinkedVolumes;
        public readonly string? RequestId;
        /// <summary>
        /// The size of the volume, in gibibytes (GiB).
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// The snapshot from which the volume was created.
        /// </summary>
        public readonly string SnapshotId;
        /// <summary>
        /// The state of the volume (`creating` \| `available` \| `in-use` \| `updating` \| `deleting` \| `error`).
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The Subregion in which the volume was created.
        /// </summary>
        public readonly string SubregionName;
        /// <summary>
        /// One or more tags associated with the volume.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVolumeTagResult> Tags;
        /// <summary>
        /// The ID of the volume.
        /// </summary>
        public readonly string? VolumeId;
        /// <summary>
        /// The type of the volume (`standard` \| `gp2` \| `io1`).
        /// </summary>
        public readonly string VolumeType;

        [OutputConstructor]
        private GetVolumeResult(
            string creationDate,

            ImmutableArray<Outputs.GetVolumeFilterResult> filters,

            string id,

            int iops,

            ImmutableArray<Outputs.GetVolumeLinkedVolumeResult> linkedVolumes,

            string? requestId,

            int size,

            string snapshotId,

            string state,

            string subregionName,

            ImmutableArray<Outputs.GetVolumeTagResult> tags,

            string? volumeId,

            string volumeType)
        {
            CreationDate = creationDate;
            Filters = filters;
            Id = id;
            Iops = iops;
            LinkedVolumes = linkedVolumes;
            RequestId = requestId;
            Size = size;
            SnapshotId = snapshotId;
            State = state;
            SubregionName = subregionName;
            Tags = tags;
            VolumeId = volumeId;
            VolumeType = volumeType;
        }
    }
}
