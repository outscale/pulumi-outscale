// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages load balancer attributes.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#updateloadbalancer).
    /// 
    /// ## Example Usage
    /// ### Required resource
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var loadBalancer01 = new Outscale.LoadBalancer("loadBalancer01", new()
    ///     {
    ///         Listeners = new[]
    ///         {
    ///             new Outscale.Inputs.LoadBalancerListenerArgs
    ///             {
    ///                 BackendPort = 80,
    ///                 BackendProtocol = "HTTP",
    ///                 LoadBalancerPort = 80,
    ///                 LoadBalancerProtocol = "HTTP",
    ///             },
    ///             new Outscale.Inputs.LoadBalancerListenerArgs
    ///             {
    ///                 BackendPort = 8080,
    ///                 BackendProtocol = "HTTPS",
    ///                 LoadBalancerPort = 8080,
    ///                 LoadBalancerProtocol = "HTTPS",
    ///                 ServerCertificateId = "arn:aws:iam::012345678910:server-certificate/MyCertificates/Certificate",
    ///             },
    ///             new Outscale.Inputs.LoadBalancerListenerArgs
    ///             {
    ///                 BackendPort = 1024,
    ///                 BackendProtocol = "TCP",
    ///                 LoadBalancerPort = 1024,
    ///                 LoadBalancerProtocol = "TCP",
    ///             },
    ///         },
    ///         LoadBalancerName = "terraform-load-balancer",
    ///         SubregionNames = new[]
    ///         {
    ///             "eu-west-2a",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new Outscale.Inputs.LoadBalancerTagArgs
    ///             {
    ///                 Key = "name",
    ///                 Value = "terraform-load-balancer",
    ///             },
    ///             new Outscale.Inputs.LoadBalancerTagArgs
    ///             {
    ///                 Key = "platform",
    ///                 Value = "eu-west-2",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Update health check
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var attributes01 = new Outscale.LoadBalancerAttributes("attributes01", new()
    ///     {
    ///         LoadBalancerName = outscale_load_balancer.Load_balancer01.Id,
    ///         HealthCheck = new Outscale.Inputs.LoadBalancerAttributesHealthCheckArgs
    ///         {
    ///             HealthyThreshold = 10,
    ///             CheckInterval = 30,
    ///             Path = "/index.html",
    ///             Port = 8080,
    ///             Protocol = "HTTPS",
    ///             Timeout = 5,
    ///             UnhealthyThreshold = 5,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Update access log
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var attributes02 = new Outscale.LoadBalancerAttributes("attributes02", new()
    ///     {
    ///         LoadBalancerName = outscale_load_balancer.Load_balancer01.Id,
    ///         AccessLog = new Outscale.Inputs.LoadBalancerAttributesAccessLogArgs
    ///         {
    ///             PublicationInterval = 5,
    ///             IsEnabled = true,
    ///             OsuBucketName = "terraform-access-logs",
    ///             OsuBucketPrefix = "access-logs-01234",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Update policies
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var attributes03 = new Outscale.LoadBalancerAttributes("attributes03", new()
    ///     {
    ///         LoadBalancerName = outscale_load_balancer.Load_balancer01.Id,
    ///         LoadBalancerPort = 80,
    ///         PolicyNames = new[]
    ///         {
    ///             "policy-name-01",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Update SSL certificate
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var attributes04 = new Outscale.LoadBalancerAttributes("attributes04", new()
    ///     {
    ///         LoadBalancerName = outscale_load_balancer.Load_balancer01.Id,
    ///         LoadBalancerPort = 8080,
    ///         ServerCertificateId = "arn:aws:iam::012345678910:server-certificate/MyCertificates/Certificate",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/loadBalancerAttributes:LoadBalancerAttributes")]
    public partial class LoadBalancerAttributes : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Information about access logs.
        /// </summary>
        [Output("accessLog")]
        public Output<Outputs.LoadBalancerAttributesAccessLog> AccessLog { get; private set; } = null!;

        /// <summary>
        /// The stickiness policies defined for the load balancer.
        /// </summary>
        [Output("applicationStickyCookiePolicies")]
        public Output<ImmutableArray<Outputs.LoadBalancerAttributesApplicationStickyCookiePolicy>> ApplicationStickyCookiePolicies { get; private set; } = null!;

        /// <summary>
        /// One or more IDs of back-end VMs for the load balancer.
        /// </summary>
        [Output("backendVmIds")]
        public Output<ImmutableArray<string>> BackendVmIds { get; private set; } = null!;

        /// <summary>
        /// The DNS name of the load balancer.
        /// </summary>
        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        /// <summary>
        /// Information about the health check configuration.
        /// </summary>
        [Output("healthCheck")]
        public Output<Outputs.LoadBalancerAttributesHealthCheck> HealthCheck { get; private set; } = null!;

        /// <summary>
        /// The listeners for the load balancer.
        /// </summary>
        [Output("listeners")]
        public Output<ImmutableArray<Outputs.LoadBalancerAttributesListener>> Listeners { get; private set; } = null!;

        /// <summary>
        /// The name of the load balancer.
        /// </summary>
        [Output("loadBalancerName")]
        public Output<string> LoadBalancerName { get; private set; } = null!;

        /// <summary>
        /// The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
        /// </summary>
        [Output("loadBalancerPort")]
        public Output<int?> LoadBalancerPort { get; private set; } = null!;

        /// <summary>
        /// The policies defined for the load balancer.
        /// </summary>
        [Output("loadBalancerStickyCookiePolicies")]
        public Output<ImmutableArray<Outputs.LoadBalancerAttributesLoadBalancerStickyCookiePolicy>> LoadBalancerStickyCookiePolicies { get; private set; } = null!;

        /// <summary>
        /// The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
        /// If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
        /// If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
        /// </summary>
        [Output("loadBalancerType")]
        public Output<string> LoadBalancerType { get; private set; } = null!;

        /// <summary>
        /// The name of the policy you want to enable for the listener.
        /// </summary>
        [Output("policyNames")]
        public Output<ImmutableArray<string>> PolicyNames { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
        /// </summary>
        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        /// <summary>
        /// The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
        /// </summary>
        [Output("serverCertificateId")]
        public Output<string?> ServerCertificateId { get; private set; } = null!;

        /// <summary>
        /// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
        /// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
        /// </summary>
        [Output("sourceSecurityGroups")]
        public Output<ImmutableArray<Outputs.LoadBalancerAttributesSourceSecurityGroup>> SourceSecurityGroups { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subnet in which the load balancer was created.
        /// </summary>
        [Output("subnets")]
        public Output<ImmutableArray<string>> Subnets { get; private set; } = null!;

        /// <summary>
        /// The ID of the Subregion in which the load balancer was created.
        /// </summary>
        [Output("subregionNames")]
        public Output<ImmutableArray<string>> SubregionNames { get; private set; } = null!;

        /// <summary>
        /// One or more tags associated with the load balancer.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.LoadBalancerAttributesTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a LoadBalancerAttributes resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoadBalancerAttributes(string name, LoadBalancerAttributesArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/loadBalancerAttributes:LoadBalancerAttributes", name, args ?? new LoadBalancerAttributesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoadBalancerAttributes(string name, Input<string> id, LoadBalancerAttributesState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/loadBalancerAttributes:LoadBalancerAttributes", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoadBalancerAttributes resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoadBalancerAttributes Get(string name, Input<string> id, LoadBalancerAttributesState? state = null, CustomResourceOptions? options = null)
        {
            return new LoadBalancerAttributes(name, id, state, options);
        }
    }

    public sealed class LoadBalancerAttributesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Information about access logs.
        /// </summary>
        [Input("accessLog")]
        public Input<Inputs.LoadBalancerAttributesAccessLogArgs>? AccessLog { get; set; }

        /// <summary>
        /// Information about the health check configuration.
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.LoadBalancerAttributesHealthCheckArgs>? HealthCheck { get; set; }

        /// <summary>
        /// The name of the load balancer.
        /// </summary>
        [Input("loadBalancerName", required: true)]
        public Input<string> LoadBalancerName { get; set; } = null!;

        /// <summary>
        /// The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
        /// </summary>
        [Input("loadBalancerPort")]
        public Input<int>? LoadBalancerPort { get; set; }

        [Input("policyNames")]
        private InputList<string>? _policyNames;

        /// <summary>
        /// The name of the policy you want to enable for the listener.
        /// </summary>
        public InputList<string> PolicyNames
        {
            get => _policyNames ?? (_policyNames = new InputList<string>());
            set => _policyNames = value;
        }

        /// <summary>
        /// The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
        /// </summary>
        [Input("serverCertificateId")]
        public Input<string>? ServerCertificateId { get; set; }

        [Input("tags")]
        private InputList<Inputs.LoadBalancerAttributesTagArgs>? _tags;

        /// <summary>
        /// One or more tags associated with the load balancer.
        /// </summary>
        public InputList<Inputs.LoadBalancerAttributesTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LoadBalancerAttributesTagArgs>());
            set => _tags = value;
        }

        public LoadBalancerAttributesArgs()
        {
        }
        public static new LoadBalancerAttributesArgs Empty => new LoadBalancerAttributesArgs();
    }

    public sealed class LoadBalancerAttributesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Information about access logs.
        /// </summary>
        [Input("accessLog")]
        public Input<Inputs.LoadBalancerAttributesAccessLogGetArgs>? AccessLog { get; set; }

        [Input("applicationStickyCookiePolicies")]
        private InputList<Inputs.LoadBalancerAttributesApplicationStickyCookiePolicyGetArgs>? _applicationStickyCookiePolicies;

        /// <summary>
        /// The stickiness policies defined for the load balancer.
        /// </summary>
        public InputList<Inputs.LoadBalancerAttributesApplicationStickyCookiePolicyGetArgs> ApplicationStickyCookiePolicies
        {
            get => _applicationStickyCookiePolicies ?? (_applicationStickyCookiePolicies = new InputList<Inputs.LoadBalancerAttributesApplicationStickyCookiePolicyGetArgs>());
            set => _applicationStickyCookiePolicies = value;
        }

        [Input("backendVmIds")]
        private InputList<string>? _backendVmIds;

        /// <summary>
        /// One or more IDs of back-end VMs for the load balancer.
        /// </summary>
        public InputList<string> BackendVmIds
        {
            get => _backendVmIds ?? (_backendVmIds = new InputList<string>());
            set => _backendVmIds = value;
        }

        /// <summary>
        /// The DNS name of the load balancer.
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        /// <summary>
        /// Information about the health check configuration.
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.LoadBalancerAttributesHealthCheckGetArgs>? HealthCheck { get; set; }

        [Input("listeners")]
        private InputList<Inputs.LoadBalancerAttributesListenerGetArgs>? _listeners;

        /// <summary>
        /// The listeners for the load balancer.
        /// </summary>
        public InputList<Inputs.LoadBalancerAttributesListenerGetArgs> Listeners
        {
            get => _listeners ?? (_listeners = new InputList<Inputs.LoadBalancerAttributesListenerGetArgs>());
            set => _listeners = value;
        }

        /// <summary>
        /// The name of the load balancer.
        /// </summary>
        [Input("loadBalancerName")]
        public Input<string>? LoadBalancerName { get; set; }

        /// <summary>
        /// The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
        /// </summary>
        [Input("loadBalancerPort")]
        public Input<int>? LoadBalancerPort { get; set; }

        [Input("loadBalancerStickyCookiePolicies")]
        private InputList<Inputs.LoadBalancerAttributesLoadBalancerStickyCookiePolicyGetArgs>? _loadBalancerStickyCookiePolicies;

        /// <summary>
        /// The policies defined for the load balancer.
        /// </summary>
        public InputList<Inputs.LoadBalancerAttributesLoadBalancerStickyCookiePolicyGetArgs> LoadBalancerStickyCookiePolicies
        {
            get => _loadBalancerStickyCookiePolicies ?? (_loadBalancerStickyCookiePolicies = new InputList<Inputs.LoadBalancerAttributesLoadBalancerStickyCookiePolicyGetArgs>());
            set => _loadBalancerStickyCookiePolicies = value;
        }

        /// <summary>
        /// The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
        /// If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
        /// If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
        /// </summary>
        [Input("loadBalancerType")]
        public Input<string>? LoadBalancerType { get; set; }

        [Input("policyNames")]
        private InputList<string>? _policyNames;

        /// <summary>
        /// The name of the policy you want to enable for the listener.
        /// </summary>
        public InputList<string> PolicyNames
        {
            get => _policyNames ?? (_policyNames = new InputList<string>());
            set => _policyNames = value;
        }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
        /// </summary>
        [Input("serverCertificateId")]
        public Input<string>? ServerCertificateId { get; set; }

        [Input("sourceSecurityGroups")]
        private InputList<Inputs.LoadBalancerAttributesSourceSecurityGroupGetArgs>? _sourceSecurityGroups;

        /// <summary>
        /// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
        /// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
        /// </summary>
        public InputList<Inputs.LoadBalancerAttributesSourceSecurityGroupGetArgs> SourceSecurityGroups
        {
            get => _sourceSecurityGroups ?? (_sourceSecurityGroups = new InputList<Inputs.LoadBalancerAttributesSourceSecurityGroupGetArgs>());
            set => _sourceSecurityGroups = value;
        }

        [Input("subnets")]
        private InputList<string>? _subnets;

        /// <summary>
        /// The ID of the Subnet in which the load balancer was created.
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        [Input("subregionNames")]
        private InputList<string>? _subregionNames;

        /// <summary>
        /// The ID of the Subregion in which the load balancer was created.
        /// </summary>
        public InputList<string> SubregionNames
        {
            get => _subregionNames ?? (_subregionNames = new InputList<string>());
            set => _subregionNames = value;
        }

        [Input("tags")]
        private InputList<Inputs.LoadBalancerAttributesTagGetArgs>? _tags;

        /// <summary>
        /// One or more tags associated with the load balancer.
        /// </summary>
        public InputList<Inputs.LoadBalancerAttributesTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.LoadBalancerAttributesTagGetArgs>());
            set => _tags = value;
        }

        public LoadBalancerAttributesState()
        {
        }
        public static new LoadBalancerAttributesState Empty => new LoadBalancerAttributesState();
    }
}
