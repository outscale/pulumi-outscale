// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetNetPeering
    {
        /// <summary>
        /// Provides information about a Net peering.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPC-Peering-Connections.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-netpeering).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var netPeering01 = Outscale.GetNetPeering.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetNetPeeringFilterInputArgs
        ///             {
        ///                 Name = "net_peering_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "pcx-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNetPeeringResult> InvokeAsync(GetNetPeeringArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetPeeringResult>("outscale:index/getNetPeering:getNetPeering", args ?? new GetNetPeeringArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a Net peering.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPC-Peering-Connections.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-netpeering).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var netPeering01 = Outscale.GetNetPeering.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetNetPeeringFilterInputArgs
        ///             {
        ///                 Name = "net_peering_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "pcx-12345678",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNetPeeringResult> Invoke(GetNetPeeringInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetPeeringResult>("outscale:index/getNetPeering:getNetPeering", args ?? new GetNetPeeringInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetPeeringArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetNetPeeringFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetNetPeeringFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetNetPeeringFilterArgs>());
            set => _filters = value;
        }

        public GetNetPeeringArgs()
        {
        }
        public static new GetNetPeeringArgs Empty => new GetNetPeeringArgs();
    }

    public sealed class GetNetPeeringInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetNetPeeringFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetNetPeeringFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetNetPeeringFilterInputArgs>());
            set => _filters = value;
        }

        public GetNetPeeringInvokeArgs()
        {
        }
        public static new GetNetPeeringInvokeArgs Empty => new GetNetPeeringInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetPeeringResult
    {
        /// <summary>
        /// Information about the accepter Net.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetPeeringAccepterNetResult> AccepterNets;
        public readonly ImmutableArray<Outputs.GetNetPeeringFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the Net peering.
        /// </summary>
        public readonly string NetPeeringId;
        public readonly string RequestId;
        /// <summary>
        /// Information about the source Net.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetPeeringSourceNetResult> SourceNets;
        /// <summary>
        /// Information about the state of the Net peering.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetPeeringStateResult> States;
        /// <summary>
        /// One or more tags associated with the Net peering.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetPeeringTagResult> Tags;

        [OutputConstructor]
        private GetNetPeeringResult(
            ImmutableArray<Outputs.GetNetPeeringAccepterNetResult> accepterNets,

            ImmutableArray<Outputs.GetNetPeeringFilterResult> filters,

            string id,

            string netPeeringId,

            string requestId,

            ImmutableArray<Outputs.GetNetPeeringSourceNetResult> sourceNets,

            ImmutableArray<Outputs.GetNetPeeringStateResult> states,

            ImmutableArray<Outputs.GetNetPeeringTagResult> tags)
        {
            AccepterNets = accepterNets;
            Filters = filters;
            Id = id;
            NetPeeringId = netPeeringId;
            RequestId = requestId;
            SourceNets = sourceNets;
            States = states;
            Tags = tags;
        }
    }
}
