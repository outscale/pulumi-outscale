// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetProductType
    {
        /// <summary>
        /// Provides information about a product type.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/Software-Licenses.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-producttype).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var productType01 = Outscale.GetProductType.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetProductTypeFilterInputArgs
        ///             {
        ///                 Name = "product_type_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "0001",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetProductTypeResult> InvokeAsync(GetProductTypeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProductTypeResult>("outscale:index/getProductType:getProductType", args ?? new GetProductTypeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a product type.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/Software-Licenses.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-producttype).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var productType01 = Outscale.GetProductType.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetProductTypeFilterInputArgs
        ///             {
        ///                 Name = "product_type_ids",
        ///                 Values = new[]
        ///                 {
        ///                     "0001",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetProductTypeResult> Invoke(GetProductTypeInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProductTypeResult>("outscale:index/getProductType:getProductType", args ?? new GetProductTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProductTypeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetProductTypeFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetProductTypeFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetProductTypeFilterArgs>());
            set => _filters = value;
        }

        public GetProductTypeArgs()
        {
        }
        public static new GetProductTypeArgs Empty => new GetProductTypeArgs();
    }

    public sealed class GetProductTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetProductTypeFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetProductTypeFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetProductTypeFilterInputArgs>());
            set => _filters = value;
        }

        public GetProductTypeInvokeArgs()
        {
        }
        public static new GetProductTypeInvokeArgs Empty => new GetProductTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetProductTypeResult
    {
        /// <summary>
        /// The description of the product type.
        /// </summary>
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetProductTypeFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the product type.
        /// </summary>
        public readonly string ProductTypeId;
        public readonly string RequestId;
        /// <summary>
        /// The vendor of the product type.
        /// </summary>
        public readonly string Vendor;

        [OutputConstructor]
        private GetProductTypeResult(
            string description,

            ImmutableArray<Outputs.GetProductTypeFilterResult> filters,

            string id,

            string productTypeId,

            string requestId,

            string vendor)
        {
            Description = description;
            Filters = filters;
            Id = id;
            ProductTypeId = productTypeId;
            RequestId = requestId;
            Vendor = vendor;
        }
    }
}
