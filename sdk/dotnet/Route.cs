// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a route.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Route-Tables.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-route).
    /// 
    /// ## Example Usage
    /// 
    /// ### Required resources
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var net01 = new Outscale.Net("net01", new()
    ///     {
    ///         IpRange = "10.0.0.0/16",
    ///     });
    /// 
    ///     var routeTable01 = new Outscale.RouteTable("route_table01", new()
    ///     {
    ///         NetId = net01.NetId,
    ///     });
    /// 
    ///     var internetService01 = new Outscale.InternetService("internet_service01");
    /// 
    ///     var internetServiceLink01 = new Outscale.InternetServiceLink("internet_service_link01", new()
    ///     {
    ///         InternetServiceId = internetService01.InternetServiceId,
    ///         NetId = net01.NetId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Create a route to an Internet service
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var route01 = new Outscale.Route("route01", new()
    ///     {
    ///         GatewayId = internetService01.InternetServiceId,
    ///         DestinationIpRange = "0.0.0.0/0",
    ///         RouteTableId = routeTable01.RouteTableId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A route can be imported using the route table ID and the destination IP range. For example:
    /// 
    /// console
    /// 
    /// ```sh
    /// $ pulumi import outscale:index/route:Route outscale_routeImportedRoute rtb-12345678_10.0.0.0/0
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/route:Route")]
    public partial class Route : global::Pulumi.CustomResource
    {
        /// <summary>
        /// By default or if set to true, waits for the route to be in the `active` state to declare its successful creation.&lt;br /&gt;If false, the created route is in the `active` state if available, or the `blackhole` state if not available.
        /// </summary>
        [Output("awaitActiveState")]
        public Output<bool> AwaitActiveState { get; private set; } = null!;

        /// <summary>
        /// The method used to create the route.
        /// </summary>
        [Output("creationMethod")]
        public Output<string> CreationMethod { get; private set; } = null!;

        /// <summary>
        /// The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        /// </summary>
        [Output("destinationIpRange")]
        public Output<string> DestinationIpRange { get; private set; } = null!;

        /// <summary>
        /// The ID of the OUTSCALE service.
        /// </summary>
        [Output("destinationServiceId")]
        public Output<string> DestinationServiceId { get; private set; } = null!;

        /// <summary>
        /// The ID of an internet service or virtual gateway attached to your Net.
        /// </summary>
        [Output("gatewayId")]
        public Output<string> GatewayId { get; private set; } = null!;

        /// <summary>
        /// The ID of a NAT service.
        /// </summary>
        [Output("natServiceId")]
        public Output<string> NatServiceId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Net access point.
        /// </summary>
        [Output("netAccessPointId")]
        public Output<string> NetAccessPointId { get; private set; } = null!;

        /// <summary>
        /// The ID of a Net peering.
        /// </summary>
        [Output("netPeeringId")]
        public Output<string> NetPeeringId { get; private set; } = null!;

        /// <summary>
        /// The ID of a NIC.
        /// </summary>
        [Output("nicId")]
        public Output<string> NicId { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// The ID of the route table for which you want to create a route.
        /// </summary>
        [Output("routeTableId")]
        public Output<string> RouteTableId { get; private set; } = null!;

        /// <summary>
        /// The state of a route in the route table (always `active`).
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.RouteTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// The account ID of the owner of the VM.
        /// </summary>
        [Output("vmAccountId")]
        public Output<string> VmAccountId { get; private set; } = null!;

        /// <summary>
        /// The ID of a NAT VM in your Net (attached to exactly one NIC).
        /// </summary>
        [Output("vmId")]
        public Output<string> VmId { get; private set; } = null!;


        /// <summary>
        /// Create a Route resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Route(string name, RouteArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/route:Route", name, args ?? new RouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Route(string name, Input<string> id, RouteState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/route:Route", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Route resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Route Get(string name, Input<string> id, RouteState? state = null, CustomResourceOptions? options = null)
        {
            return new Route(name, id, state, options);
        }
    }

    public sealed class RouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// By default or if set to true, waits for the route to be in the `active` state to declare its successful creation.&lt;br /&gt;If false, the created route is in the `active` state if available, or the `blackhole` state if not available.
        /// </summary>
        [Input("awaitActiveState")]
        public Input<bool>? AwaitActiveState { get; set; }

        /// <summary>
        /// The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        /// </summary>
        [Input("destinationIpRange", required: true)]
        public Input<string> DestinationIpRange { get; set; } = null!;

        /// <summary>
        /// The ID of an internet service or virtual gateway attached to your Net.
        /// </summary>
        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        /// <summary>
        /// The ID of a NAT service.
        /// </summary>
        [Input("natServiceId")]
        public Input<string>? NatServiceId { get; set; }

        /// <summary>
        /// The ID of a Net peering.
        /// </summary>
        [Input("netPeeringId")]
        public Input<string>? NetPeeringId { get; set; }

        /// <summary>
        /// The ID of a NIC.
        /// </summary>
        [Input("nicId")]
        public Input<string>? NicId { get; set; }

        /// <summary>
        /// The ID of the route table for which you want to create a route.
        /// </summary>
        [Input("routeTableId", required: true)]
        public Input<string> RouteTableId { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.RouteTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// The ID of a NAT VM in your Net (attached to exactly one NIC).
        /// </summary>
        [Input("vmId")]
        public Input<string>? VmId { get; set; }

        public RouteArgs()
        {
        }
        public static new RouteArgs Empty => new RouteArgs();
    }

    public sealed class RouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// By default or if set to true, waits for the route to be in the `active` state to declare its successful creation.&lt;br /&gt;If false, the created route is in the `active` state if available, or the `blackhole` state if not available.
        /// </summary>
        [Input("awaitActiveState")]
        public Input<bool>? AwaitActiveState { get; set; }

        /// <summary>
        /// The method used to create the route.
        /// </summary>
        [Input("creationMethod")]
        public Input<string>? CreationMethod { get; set; }

        /// <summary>
        /// The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
        /// </summary>
        [Input("destinationIpRange")]
        public Input<string>? DestinationIpRange { get; set; }

        /// <summary>
        /// The ID of the OUTSCALE service.
        /// </summary>
        [Input("destinationServiceId")]
        public Input<string>? DestinationServiceId { get; set; }

        /// <summary>
        /// The ID of an internet service or virtual gateway attached to your Net.
        /// </summary>
        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        /// <summary>
        /// The ID of a NAT service.
        /// </summary>
        [Input("natServiceId")]
        public Input<string>? NatServiceId { get; set; }

        /// <summary>
        /// The ID of the Net access point.
        /// </summary>
        [Input("netAccessPointId")]
        public Input<string>? NetAccessPointId { get; set; }

        /// <summary>
        /// The ID of a Net peering.
        /// </summary>
        [Input("netPeeringId")]
        public Input<string>? NetPeeringId { get; set; }

        /// <summary>
        /// The ID of a NIC.
        /// </summary>
        [Input("nicId")]
        public Input<string>? NicId { get; set; }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The ID of the route table for which you want to create a route.
        /// </summary>
        [Input("routeTableId")]
        public Input<string>? RouteTableId { get; set; }

        /// <summary>
        /// The state of a route in the route table (always `active`).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("timeouts")]
        public Input<Inputs.RouteTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// The account ID of the owner of the VM.
        /// </summary>
        [Input("vmAccountId")]
        public Input<string>? VmAccountId { get; set; }

        /// <summary>
        /// The ID of a NAT VM in your Net (attached to exactly one NIC).
        /// </summary>
        [Input("vmId")]
        public Input<string>? VmId { get; set; }

        public RouteState()
        {
        }
        public static new RouteState Empty => new RouteState();
    }
}
