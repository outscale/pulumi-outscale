// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetPublicIp
    {
        /// <summary>
        /// Provides information about a public IP.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Public-IPs.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-publicip).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var publicIp01 = Outscale.GetPublicIp.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetPublicIpFilterInputArgs
        ///             {
        ///                 Name = "public_ips",
        ///                 Values = new[]
        ///                 {
        ///                     "111.11.111.1",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPublicIpResult> InvokeAsync(GetPublicIpArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPublicIpResult>("outscale:index/getPublicIp:getPublicIp", args ?? new GetPublicIpArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a public IP.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Public-IPs.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-publicip).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var publicIp01 = Outscale.GetPublicIp.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetPublicIpFilterInputArgs
        ///             {
        ///                 Name = "public_ips",
        ///                 Values = new[]
        ///                 {
        ///                     "111.11.111.1",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPublicIpResult> Invoke(GetPublicIpInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPublicIpResult>("outscale:index/getPublicIp:getPublicIp", args ?? new GetPublicIpInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a public IP.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Public-IPs.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-publicip).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var publicIp01 = Outscale.GetPublicIp.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetPublicIpFilterInputArgs
        ///             {
        ///                 Name = "public_ips",
        ///                 Values = new[]
        ///                 {
        ///                     "111.11.111.1",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPublicIpResult> Invoke(GetPublicIpInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPublicIpResult>("outscale:index/getPublicIp:getPublicIp", args ?? new GetPublicIpInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPublicIpArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetPublicIpFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetPublicIpFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetPublicIpFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The public IP.
        /// </summary>
        [Input("publicIp")]
        public string? PublicIp { get; set; }

        /// <summary>
        /// The allocation ID of the public IP.
        /// </summary>
        [Input("publicIpId")]
        public string? PublicIpId { get; set; }

        public GetPublicIpArgs()
        {
        }
        public static new GetPublicIpArgs Empty => new GetPublicIpArgs();
    }

    public sealed class GetPublicIpInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetPublicIpFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetPublicIpFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetPublicIpFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The public IP.
        /// </summary>
        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        /// <summary>
        /// The allocation ID of the public IP.
        /// </summary>
        [Input("publicIpId")]
        public Input<string>? PublicIpId { get; set; }

        public GetPublicIpInvokeArgs()
        {
        }
        public static new GetPublicIpInvokeArgs Empty => new GetPublicIpInvokeArgs();
    }


    [OutputType]
    public sealed class GetPublicIpResult
    {
        public readonly ImmutableArray<Outputs.GetPublicIpFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
        /// </summary>
        public readonly string LinkPublicIpId;
        /// <summary>
        /// The account ID of the owner of the NIC.
        /// </summary>
        public readonly string NicAccountId;
        /// <summary>
        /// The ID of the NIC the public IP is associated with (if any).
        /// </summary>
        public readonly string NicId;
        /// <summary>
        /// The private IP associated with the public IP.
        /// </summary>
        public readonly string PrivateIp;
        /// <summary>
        /// The public IP.
        /// </summary>
        public readonly string PublicIp;
        /// <summary>
        /// The allocation ID of the public IP.
        /// </summary>
        public readonly string PublicIpId;
        public readonly string RequestId;
        /// <summary>
        /// One or more tags associated with the public IP.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPublicIpTagResult> Tags;
        /// <summary>
        /// The ID of the VM the public IP is associated with (if any).
        /// </summary>
        public readonly string VmId;

        [OutputConstructor]
        private GetPublicIpResult(
            ImmutableArray<Outputs.GetPublicIpFilterResult> filters,

            string id,

            string linkPublicIpId,

            string nicAccountId,

            string nicId,

            string privateIp,

            string publicIp,

            string publicIpId,

            string requestId,

            ImmutableArray<Outputs.GetPublicIpTagResult> tags,

            string vmId)
        {
            Filters = filters;
            Id = id;
            LinkPublicIpId = linkPublicIpId;
            NicAccountId = nicAccountId;
            NicId = nicId;
            PrivateIp = privateIp;
            PublicIp = publicIp;
            PublicIpId = publicIpId;
            RequestId = requestId;
            Tags = tags;
            VmId = vmId;
        }
    }
}
