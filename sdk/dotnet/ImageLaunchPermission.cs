// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages an image launch permission.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-OMIs.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#updateimage).
    /// 
    /// ## Example Usage
    /// ### Add permissions
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image01 = new Outscale.ImageLaunchPermission("image01", new()
    ///     {
    ///         ImageId = "ami-12345678",
    ///         PermissionAdditions = new Outscale.Inputs.ImageLaunchPermissionPermissionAdditionsArgs
    ///         {
    ///             AccountIds = new[]
    ///             {
    ///                 "012345678910",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Remove permissions
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var image02 = new Outscale.ImageLaunchPermission("image02", new()
    ///     {
    ///         ImageId = "ami-12345678",
    ///         PermissionRemovals = new Outscale.Inputs.ImageLaunchPermissionPermissionRemovalsArgs
    ///         {
    ///             AccountIds = new[]
    ///             {
    ///                 "012345678910",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/imageLaunchPermission:ImageLaunchPermission")]
    public partial class ImageLaunchPermission : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the OMI.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the OMI you want to modify.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// Information about the users to whom you want to give permissions for the resource.
        /// </summary>
        [Output("permissionAdditions")]
        public Output<Outputs.ImageLaunchPermissionPermissionAdditions?> PermissionAdditions { get; private set; } = null!;

        /// <summary>
        /// Information about the users from whom you want to remove permissions for the resource.
        /// </summary>
        [Output("permissionRemovals")]
        public Output<Outputs.ImageLaunchPermissionPermissionRemovals?> PermissionRemovals { get; private set; } = null!;

        /// <summary>
        /// Permissions for the resource.
        /// </summary>
        [Output("permissionsToLaunches")]
        public Output<ImmutableArray<Outputs.ImageLaunchPermissionPermissionsToLaunch>> PermissionsToLaunches { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;


        /// <summary>
        /// Create a ImageLaunchPermission resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ImageLaunchPermission(string name, ImageLaunchPermissionArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/imageLaunchPermission:ImageLaunchPermission", name, args ?? new ImageLaunchPermissionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ImageLaunchPermission(string name, Input<string> id, ImageLaunchPermissionState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/imageLaunchPermission:ImageLaunchPermission", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ImageLaunchPermission resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ImageLaunchPermission Get(string name, Input<string> id, ImageLaunchPermissionState? state = null, CustomResourceOptions? options = null)
        {
            return new ImageLaunchPermission(name, id, state, options);
        }
    }

    public sealed class ImageLaunchPermissionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the OMI you want to modify.
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        /// <summary>
        /// Information about the users to whom you want to give permissions for the resource.
        /// </summary>
        [Input("permissionAdditions")]
        public Input<Inputs.ImageLaunchPermissionPermissionAdditionsArgs>? PermissionAdditions { get; set; }

        /// <summary>
        /// Information about the users from whom you want to remove permissions for the resource.
        /// </summary>
        [Input("permissionRemovals")]
        public Input<Inputs.ImageLaunchPermissionPermissionRemovalsArgs>? PermissionRemovals { get; set; }

        public ImageLaunchPermissionArgs()
        {
        }
        public static new ImageLaunchPermissionArgs Empty => new ImageLaunchPermissionArgs();
    }

    public sealed class ImageLaunchPermissionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the OMI.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the OMI you want to modify.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// Information about the users to whom you want to give permissions for the resource.
        /// </summary>
        [Input("permissionAdditions")]
        public Input<Inputs.ImageLaunchPermissionPermissionAdditionsGetArgs>? PermissionAdditions { get; set; }

        /// <summary>
        /// Information about the users from whom you want to remove permissions for the resource.
        /// </summary>
        [Input("permissionRemovals")]
        public Input<Inputs.ImageLaunchPermissionPermissionRemovalsGetArgs>? PermissionRemovals { get; set; }

        [Input("permissionsToLaunches")]
        private InputList<Inputs.ImageLaunchPermissionPermissionsToLaunchGetArgs>? _permissionsToLaunches;

        /// <summary>
        /// Permissions for the resource.
        /// </summary>
        public InputList<Inputs.ImageLaunchPermissionPermissionsToLaunchGetArgs> PermissionsToLaunches
        {
            get => _permissionsToLaunches ?? (_permissionsToLaunches = new InputList<Inputs.ImageLaunchPermissionPermissionsToLaunchGetArgs>());
            set => _permissionsToLaunches = value;
        }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        public ImageLaunchPermissionState()
        {
        }
        public static new ImageLaunchPermissionState Empty => new ImageLaunchPermissionState();
    }
}
