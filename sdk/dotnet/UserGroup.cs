// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a user group.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-EIM-Groups.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api.html#createusergroup).
    /// 
    /// ## Example Usage
    /// 
    /// ### Create a user group
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var group_1 = new Outscale.UserGroup("group-1", new()
    ///     {
    ///         UserGroupName = "Group-TF-test-1",
    ///         Path = "/terraform/",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Link a policy to a user group
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var group_1 = new Outscale.UserGroup("group-1", new()
    ///     {
    ///         UserGroupName = "Group-TF-test-1",
    ///         Policies = new[]
    ///         {
    ///             new Outscale.Inputs.UserGroupPolicyArgs
    ///             {
    ///                 PolicyOrn = policy_2.Orn,
    ///                 DefaultVersionId = "V2",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Add a user to a user group
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var group_1 = new Outscale.UserGroup("group-1", new()
    ///     {
    ///         UserGroupName = "Group-TF-test-1",
    ///         Users = new[]
    ///         {
    ///             new Outscale.Inputs.UserGroupUserArgs
    ///             {
    ///                 UserName = "user-name-1",
    ///                 Path = "/terraform/",
    ///             },
    ///             new Outscale.Inputs.UserGroupUserArgs
    ///             {
    ///                 UserName = "user-name-2",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A user group can be imported using its group ID. For example:
    /// 
    /// console
    /// 
    /// ```sh
    /// $ pulumi import outscale:index/userGroup:UserGroup group1 user_group_id
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/userGroup:UserGroup")]
    public partial class UserGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date and time (UTC) of creation of the user group.
        /// </summary>
        [Output("creationDate")]
        public Output<string> CreationDate { get; private set; } = null!;

        /// <summary>
        /// The date and time (UTC) of the last modification of the user group.
        /// </summary>
        [Output("lastModificationDate")]
        public Output<string> LastModificationDate { get; private set; } = null!;

        /// <summary>
        /// The Outscale Resource Name (ORN) of the user group. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        /// </summary>
        [Output("orn")]
        public Output<string> Orn { get; private set; } = null!;

        /// <summary>
        /// The path to the group. If not specified, it is set to a slash (`/`).
        /// </summary>
        [Output("path")]
        public Output<string?> Path { get; private set; } = null!;

        [Output("policies")]
        public Output<ImmutableArray<Outputs.UserGroupPolicy>> Policies { get; private set; } = null!;

        /// <summary>
        /// The ID of the user group.
        /// </summary>
        [Output("userGroupId")]
        public Output<string> UserGroupId { get; private set; } = null!;

        /// <summary>
        /// The name of the group.
        /// </summary>
        [Output("userGroupName")]
        public Output<string> UserGroupName { get; private set; } = null!;

        [Output("users")]
        public Output<ImmutableArray<Outputs.UserGroupUser>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a UserGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserGroup(string name, UserGroupArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/userGroup:UserGroup", name, args ?? new UserGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserGroup(string name, Input<string> id, UserGroupState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/userGroup:UserGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserGroup Get(string name, Input<string> id, UserGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new UserGroup(name, id, state, options);
        }
    }

    public sealed class UserGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The path to the group. If not specified, it is set to a slash (`/`).
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("policies")]
        private InputList<Inputs.UserGroupPolicyArgs>? _policies;
        public InputList<Inputs.UserGroupPolicyArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.UserGroupPolicyArgs>());
            set => _policies = value;
        }

        /// <summary>
        /// The name of the group.
        /// </summary>
        [Input("userGroupName", required: true)]
        public Input<string> UserGroupName { get; set; } = null!;

        [Input("users")]
        private InputList<Inputs.UserGroupUserArgs>? _users;
        public InputList<Inputs.UserGroupUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.UserGroupUserArgs>());
            set => _users = value;
        }

        public UserGroupArgs()
        {
        }
        public static new UserGroupArgs Empty => new UserGroupArgs();
    }

    public sealed class UserGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and time (UTC) of creation of the user group.
        /// </summary>
        [Input("creationDate")]
        public Input<string>? CreationDate { get; set; }

        /// <summary>
        /// The date and time (UTC) of the last modification of the user group.
        /// </summary>
        [Input("lastModificationDate")]
        public Input<string>? LastModificationDate { get; set; }

        /// <summary>
        /// The Outscale Resource Name (ORN) of the user group. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
        /// </summary>
        [Input("orn")]
        public Input<string>? Orn { get; set; }

        /// <summary>
        /// The path to the group. If not specified, it is set to a slash (`/`).
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("policies")]
        private InputList<Inputs.UserGroupPolicyGetArgs>? _policies;
        public InputList<Inputs.UserGroupPolicyGetArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.UserGroupPolicyGetArgs>());
            set => _policies = value;
        }

        /// <summary>
        /// The ID of the user group.
        /// </summary>
        [Input("userGroupId")]
        public Input<string>? UserGroupId { get; set; }

        /// <summary>
        /// The name of the group.
        /// </summary>
        [Input("userGroupName")]
        public Input<string>? UserGroupName { get; set; }

        [Input("users")]
        private InputList<Inputs.UserGroupUserGetArgs>? _users;
        public InputList<Inputs.UserGroupUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.UserGroupUserGetArgs>());
            set => _users = value;
        }

        public UserGroupState()
        {
        }
        public static new UserGroupState Empty => new UserGroupState();
    }
}
