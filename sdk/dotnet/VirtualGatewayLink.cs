// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    /// <summary>
    /// Manages a virtual gateway link.
    /// 
    /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Virtual-Private-Gateways.html).\
    /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-virtualgateway).
    /// 
    /// ## Example Usage
    /// ### Required resources
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var virtualGateway01 = new Outscale.VirtualGateway("virtualGateway01", new()
    ///     {
    ///         ConnectionType = "ipsec.1",
    ///     });
    /// 
    ///     var net01 = new Outscale.Net("net01", new()
    ///     {
    ///         IpRange = "10.0.0.0/16",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Link a virtual gateway to a Net
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Outscale = Pulumi.Outscale;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var virtualGatewayLink01 = new Outscale.VirtualGatewayLink("virtualGatewayLink01", new()
    ///     {
    ///         VirtualGatewayId = outscale_virtual_gateway.Virtual_gateway01.Virtual_gateway_id,
    ///         NetId = outscale_net.Net01.Net_id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A virtual gateway link can be imported using its virtual gateway ID. For exampleconsole
    /// 
    /// ```sh
    ///  $ pulumi import outscale:index/virtualGatewayLink:VirtualGatewayLink ImportedVirtualGatewayLink vgw-12345678
    /// ```
    /// </summary>
    [OutscaleResourceType("outscale:index/virtualGatewayLink:VirtualGatewayLink")]
    public partial class VirtualGatewayLink : global::Pulumi.CustomResource
    {
        [Output("dryRun")]
        public Output<string> DryRun { get; private set; } = null!;

        /// <summary>
        /// The ID of the Net to which you want to attach the virtual gateway.
        /// </summary>
        [Output("netId")]
        public Output<string> NetId { get; private set; } = null!;

        [Output("netToVirtualGatewayLinks")]
        public Output<ImmutableArray<Outputs.VirtualGatewayLinkNetToVirtualGatewayLink>> NetToVirtualGatewayLinks { get; private set; } = null!;

        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// The ID of the virtual gateway.
        /// </summary>
        [Output("virtualGatewayId")]
        public Output<string> VirtualGatewayId { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualGatewayLink resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualGatewayLink(string name, VirtualGatewayLinkArgs args, CustomResourceOptions? options = null)
            : base("outscale:index/virtualGatewayLink:VirtualGatewayLink", name, args ?? new VirtualGatewayLinkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualGatewayLink(string name, Input<string> id, VirtualGatewayLinkState? state = null, CustomResourceOptions? options = null)
            : base("outscale:index/virtualGatewayLink:VirtualGatewayLink", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualGatewayLink resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualGatewayLink Get(string name, Input<string> id, VirtualGatewayLinkState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualGatewayLink(name, id, state, options);
        }
    }

    public sealed class VirtualGatewayLinkArgs : global::Pulumi.ResourceArgs
    {
        [Input("dryRun")]
        public Input<string>? DryRun { get; set; }

        /// <summary>
        /// The ID of the Net to which you want to attach the virtual gateway.
        /// </summary>
        [Input("netId", required: true)]
        public Input<string> NetId { get; set; } = null!;

        /// <summary>
        /// The ID of the virtual gateway.
        /// </summary>
        [Input("virtualGatewayId", required: true)]
        public Input<string> VirtualGatewayId { get; set; } = null!;

        public VirtualGatewayLinkArgs()
        {
        }
        public static new VirtualGatewayLinkArgs Empty => new VirtualGatewayLinkArgs();
    }

    public sealed class VirtualGatewayLinkState : global::Pulumi.ResourceArgs
    {
        [Input("dryRun")]
        public Input<string>? DryRun { get; set; }

        /// <summary>
        /// The ID of the Net to which you want to attach the virtual gateway.
        /// </summary>
        [Input("netId")]
        public Input<string>? NetId { get; set; }

        [Input("netToVirtualGatewayLinks")]
        private InputList<Inputs.VirtualGatewayLinkNetToVirtualGatewayLinkGetArgs>? _netToVirtualGatewayLinks;
        public InputList<Inputs.VirtualGatewayLinkNetToVirtualGatewayLinkGetArgs> NetToVirtualGatewayLinks
        {
            get => _netToVirtualGatewayLinks ?? (_netToVirtualGatewayLinks = new InputList<Inputs.VirtualGatewayLinkNetToVirtualGatewayLinkGetArgs>());
            set => _netToVirtualGatewayLinks = value;
        }

        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The ID of the virtual gateway.
        /// </summary>
        [Input("virtualGatewayId")]
        public Input<string>? VirtualGatewayId { get; set; }

        public VirtualGatewayLinkState()
        {
        }
        public static new VirtualGatewayLinkState Empty => new VirtualGatewayLinkState();
    }
}
