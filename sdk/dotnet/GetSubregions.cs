// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Outscale
{
    public static class GetSubregions
    {
        /// <summary>
        /// Provides information about subregions.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Regions-and-Subregions.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#readsubregions).
        /// 
        /// ## Example Usage
        /// 
        /// ### List a specific Subregion in the current Region
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subregions01 = Outscale.GetSubregions.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetSubregionsFilterInputArgs
        ///             {
        ///                 Name = "subregion_names",
        ///                 Values = new[]
        ///                 {
        ///                     "eu-west-2a",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### List two specific Subregions in the current Region
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subregions02 = Outscale.GetSubregions.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetSubregionsFilterInputArgs
        ///             {
        ///                 Name = "subregion_names",
        ///                 Values = new[]
        ///                 {
        ///                     "eu-west-2a",
        ///                     "eu-west-2b",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ### List all accessible Subregions in the current Region
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all_subregions = Outscale.GetSubregions.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSubregionsResult> InvokeAsync(GetSubregionsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubregionsResult>("outscale:index/getSubregions:getSubregions", args ?? new GetSubregionsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about subregions.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Regions-and-Subregions.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#readsubregions).
        /// 
        /// ## Example Usage
        /// 
        /// ### List a specific Subregion in the current Region
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subregions01 = Outscale.GetSubregions.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetSubregionsFilterInputArgs
        ///             {
        ///                 Name = "subregion_names",
        ///                 Values = new[]
        ///                 {
        ///                     "eu-west-2a",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### List two specific Subregions in the current Region
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subregions02 = Outscale.GetSubregions.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetSubregionsFilterInputArgs
        ///             {
        ///                 Name = "subregion_names",
        ///                 Values = new[]
        ///                 {
        ///                     "eu-west-2a",
        ///                     "eu-west-2b",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ### List all accessible Subregions in the current Region
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all_subregions = Outscale.GetSubregions.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSubregionsResult> Invoke(GetSubregionsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubregionsResult>("outscale:index/getSubregions:getSubregions", args ?? new GetSubregionsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about subregions.
        /// 
        /// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Regions-and-Subregions.html).  
        /// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#readsubregions).
        /// 
        /// ## Example Usage
        /// 
        /// ### List a specific Subregion in the current Region
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subregions01 = Outscale.GetSubregions.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetSubregionsFilterInputArgs
        ///             {
        ///                 Name = "subregion_names",
        ///                 Values = new[]
        ///                 {
        ///                     "eu-west-2a",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### List two specific Subregions in the current Region
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var subregions02 = Outscale.GetSubregions.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Outscale.Inputs.GetSubregionsFilterInputArgs
        ///             {
        ///                 Name = "subregion_names",
        ///                 Values = new[]
        ///                 {
        ///                     "eu-west-2a",
        ///                     "eu-west-2b",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ### List all accessible Subregions in the current Region
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Outscale = Pulumi.Outscale;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var all_subregions = Outscale.GetSubregions.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSubregionsResult> Invoke(GetSubregionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubregionsResult>("outscale:index/getSubregions:getSubregions", args ?? new GetSubregionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubregionsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetSubregionsFilterArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public List<Inputs.GetSubregionsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSubregionsFilterArgs>());
            set => _filters = value;
        }

        public GetSubregionsArgs()
        {
        }
        public static new GetSubregionsArgs Empty => new GetSubregionsArgs();
    }

    public sealed class GetSubregionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetSubregionsFilterInputArgs>? _filters;

        /// <summary>
        /// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
        /// </summary>
        public InputList<Inputs.GetSubregionsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSubregionsFilterInputArgs>());
            set => _filters = value;
        }

        public GetSubregionsInvokeArgs()
        {
        }
        public static new GetSubregionsInvokeArgs Empty => new GetSubregionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubregionsResult
    {
        public readonly ImmutableArray<Outputs.GetSubregionsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string RequestId;
        /// <summary>
        /// Information about one or more Subregions.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSubregionsSubregionResult> Subregions;

        [OutputConstructor]
        private GetSubregionsResult(
            ImmutableArray<Outputs.GetSubregionsFilterResult> filters,

            string id,

            string requestId,

            ImmutableArray<Outputs.GetSubregionsSubregionResult> subregions)
        {
            Filters = filters;
            Id = id;
            RequestId = requestId;
            Subregions = subregions;
        }
    }
}
