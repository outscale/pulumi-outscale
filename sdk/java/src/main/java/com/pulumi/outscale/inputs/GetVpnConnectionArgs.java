// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.GetVpnConnectionFilterArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVpnConnectionArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVpnConnectionArgs Empty = new GetVpnConnectionArgs();

    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<GetVpnConnectionFilterArgs>> filters;

    /**
     * @return A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    public Optional<Output<List<GetVpnConnectionFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
     * 
     */
    @Import(name="staticRoutesOnly")
    private @Nullable Output<Boolean> staticRoutesOnly;

    /**
     * @return If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
     * 
     */
    public Optional<Output<Boolean>> staticRoutesOnly() {
        return Optional.ofNullable(this.staticRoutesOnly);
    }

    /**
     * The ID of the VPN connection.
     * 
     */
    @Import(name="vpnConnectionId")
    private @Nullable Output<String> vpnConnectionId;

    /**
     * @return The ID of the VPN connection.
     * 
     */
    public Optional<Output<String>> vpnConnectionId() {
        return Optional.ofNullable(this.vpnConnectionId);
    }

    private GetVpnConnectionArgs() {}

    private GetVpnConnectionArgs(GetVpnConnectionArgs $) {
        this.filters = $.filters;
        this.staticRoutesOnly = $.staticRoutesOnly;
        this.vpnConnectionId = $.vpnConnectionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVpnConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVpnConnectionArgs $;

        public Builder() {
            $ = new GetVpnConnectionArgs();
        }

        public Builder(GetVpnConnectionArgs defaults) {
            $ = new GetVpnConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<GetVpnConnectionFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(List<GetVpnConnectionFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(GetVpnConnectionFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param staticRoutesOnly If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
         * 
         * @return builder
         * 
         */
        public Builder staticRoutesOnly(@Nullable Output<Boolean> staticRoutesOnly) {
            $.staticRoutesOnly = staticRoutesOnly;
            return this;
        }

        /**
         * @param staticRoutesOnly If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
         * 
         * @return builder
         * 
         */
        public Builder staticRoutesOnly(Boolean staticRoutesOnly) {
            return staticRoutesOnly(Output.of(staticRoutesOnly));
        }

        /**
         * @param vpnConnectionId The ID of the VPN connection.
         * 
         * @return builder
         * 
         */
        public Builder vpnConnectionId(@Nullable Output<String> vpnConnectionId) {
            $.vpnConnectionId = vpnConnectionId;
            return this;
        }

        /**
         * @param vpnConnectionId The ID of the VPN connection.
         * 
         * @return builder
         * 
         */
        public Builder vpnConnectionId(String vpnConnectionId) {
            return vpnConnectionId(Output.of(vpnConnectionId));
        }

        public GetVpnConnectionArgs build() {
            return $;
        }
    }

}
