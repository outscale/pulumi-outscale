// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.GetLoadBalancerAccessLog;
import com.pulumi.outscale.inputs.GetLoadBalancerFilter;
import com.pulumi.outscale.inputs.GetLoadBalancerHealthCheck;
import com.pulumi.outscale.inputs.GetLoadBalancerListener;
import com.pulumi.outscale.inputs.GetLoadBalancerTag;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetLoadBalancerPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetLoadBalancerPlainArgs Empty = new GetLoadBalancerPlainArgs();

    /**
     * Information about access logs.
     * 
     */
    @Import(name="accessLogs")
    private @Nullable List<GetLoadBalancerAccessLog> accessLogs;

    /**
     * @return Information about access logs.
     * 
     */
    public Optional<List<GetLoadBalancerAccessLog>> accessLogs() {
        return Optional.ofNullable(this.accessLogs);
    }

    /**
     * One or more IDs of back-end VMs for the load balancer.
     * 
     */
    @Import(name="backendVmIds")
    private @Nullable List<String> backendVmIds;

    /**
     * @return One or more IDs of back-end VMs for the load balancer.
     * 
     */
    public Optional<List<String>> backendVmIds() {
        return Optional.ofNullable(this.backendVmIds);
    }

    /**
     * The DNS name of the load balancer.
     * 
     */
    @Import(name="dnsName")
    private @Nullable String dnsName;

    /**
     * @return The DNS name of the load balancer.
     * 
     */
    public Optional<String> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }

    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    @Import(name="filters")
    private @Nullable List<GetLoadBalancerFilter> filters;

    /**
     * @return A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    public Optional<List<GetLoadBalancerFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Information about the health check configuration.
     * 
     */
    @Import(name="healthChecks")
    private @Nullable List<GetLoadBalancerHealthCheck> healthChecks;

    /**
     * @return Information about the health check configuration.
     * 
     */
    public Optional<List<GetLoadBalancerHealthCheck>> healthChecks() {
        return Optional.ofNullable(this.healthChecks);
    }

    /**
     * The listeners for the load balancer.
     * 
     */
    @Import(name="listeners")
    private @Nullable List<GetLoadBalancerListener> listeners;

    /**
     * @return The listeners for the load balancer.
     * 
     */
    public Optional<List<GetLoadBalancerListener>> listeners() {
        return Optional.ofNullable(this.listeners);
    }

    /**
     * The name of the load balancer.
     * 
     */
    @Import(name="loadBalancerName")
    private @Nullable String loadBalancerName;

    /**
     * @return The name of the load balancer.
     * 
     */
    public Optional<String> loadBalancerName() {
        return Optional.ofNullable(this.loadBalancerName);
    }

    /**
     * The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
     * If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
     * If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
     * 
     */
    @Import(name="loadBalancerType")
    private @Nullable String loadBalancerType;

    /**
     * @return The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
     * If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
     * If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
     * 
     */
    public Optional<String> loadBalancerType() {
        return Optional.ofNullable(this.loadBalancerType);
    }

    /**
     * The ID of the Net for the load balancer.
     * 
     */
    @Import(name="netId")
    private @Nullable String netId;

    /**
     * @return The ID of the Net for the load balancer.
     * 
     */
    public Optional<String> netId() {
        return Optional.ofNullable(this.netId);
    }

    /**
     * One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
     * 
     */
    @Import(name="securityGroups")
    private @Nullable List<String> securityGroups;

    /**
     * @return One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
     * 
     */
    public Optional<List<String>> securityGroups() {
        return Optional.ofNullable(this.securityGroups);
    }

    /**
     * The ID of the Subnet in which the load balancer was created.
     * 
     */
    @Import(name="subnets")
    private @Nullable List<String> subnets;

    /**
     * @return The ID of the Subnet in which the load balancer was created.
     * 
     */
    public Optional<List<String>> subnets() {
        return Optional.ofNullable(this.subnets);
    }

    /**
     * One or more tags associated with the load balancer.
     * 
     */
    @Import(name="tags")
    private @Nullable List<GetLoadBalancerTag> tags;

    /**
     * @return One or more tags associated with the load balancer.
     * 
     */
    public Optional<List<GetLoadBalancerTag>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private GetLoadBalancerPlainArgs() {}

    private GetLoadBalancerPlainArgs(GetLoadBalancerPlainArgs $) {
        this.accessLogs = $.accessLogs;
        this.backendVmIds = $.backendVmIds;
        this.dnsName = $.dnsName;
        this.filters = $.filters;
        this.healthChecks = $.healthChecks;
        this.listeners = $.listeners;
        this.loadBalancerName = $.loadBalancerName;
        this.loadBalancerType = $.loadBalancerType;
        this.netId = $.netId;
        this.securityGroups = $.securityGroups;
        this.subnets = $.subnets;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLoadBalancerPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLoadBalancerPlainArgs $;

        public Builder() {
            $ = new GetLoadBalancerPlainArgs();
        }

        public Builder(GetLoadBalancerPlainArgs defaults) {
            $ = new GetLoadBalancerPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLogs Information about access logs.
         * 
         * @return builder
         * 
         */
        public Builder accessLogs(@Nullable List<GetLoadBalancerAccessLog> accessLogs) {
            $.accessLogs = accessLogs;
            return this;
        }

        /**
         * @param accessLogs Information about access logs.
         * 
         * @return builder
         * 
         */
        public Builder accessLogs(GetLoadBalancerAccessLog... accessLogs) {
            return accessLogs(List.of(accessLogs));
        }

        /**
         * @param backendVmIds One or more IDs of back-end VMs for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder backendVmIds(@Nullable List<String> backendVmIds) {
            $.backendVmIds = backendVmIds;
            return this;
        }

        /**
         * @param backendVmIds One or more IDs of back-end VMs for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder backendVmIds(String... backendVmIds) {
            return backendVmIds(List.of(backendVmIds));
        }

        /**
         * @param dnsName The DNS name of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder dnsName(@Nullable String dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable List<GetLoadBalancerFilter> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(GetLoadBalancerFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param healthChecks Information about the health check configuration.
         * 
         * @return builder
         * 
         */
        public Builder healthChecks(@Nullable List<GetLoadBalancerHealthCheck> healthChecks) {
            $.healthChecks = healthChecks;
            return this;
        }

        /**
         * @param healthChecks Information about the health check configuration.
         * 
         * @return builder
         * 
         */
        public Builder healthChecks(GetLoadBalancerHealthCheck... healthChecks) {
            return healthChecks(List.of(healthChecks));
        }

        /**
         * @param listeners The listeners for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder listeners(@Nullable List<GetLoadBalancerListener> listeners) {
            $.listeners = listeners;
            return this;
        }

        /**
         * @param listeners The listeners for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder listeners(GetLoadBalancerListener... listeners) {
            return listeners(List.of(listeners));
        }

        /**
         * @param loadBalancerName The name of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerName(@Nullable String loadBalancerName) {
            $.loadBalancerName = loadBalancerName;
            return this;
        }

        /**
         * @param loadBalancerType The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
         * If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
         * If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerType(@Nullable String loadBalancerType) {
            $.loadBalancerType = loadBalancerType;
            return this;
        }

        /**
         * @param netId The ID of the Net for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder netId(@Nullable String netId) {
            $.netId = netId;
            return this;
        }

        /**
         * @param securityGroups One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(@Nullable List<String> securityGroups) {
            $.securityGroups = securityGroups;
            return this;
        }

        /**
         * @param securityGroups One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }

        /**
         * @param subnets The ID of the Subnet in which the load balancer was created.
         * 
         * @return builder
         * 
         */
        public Builder subnets(@Nullable List<String> subnets) {
            $.subnets = subnets;
            return this;
        }

        /**
         * @param subnets The ID of the Subnet in which the load balancer was created.
         * 
         * @return builder
         * 
         */
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }

        /**
         * @param tags One or more tags associated with the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable List<GetLoadBalancerTag> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags One or more tags associated with the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder tags(GetLoadBalancerTag... tags) {
            return tags(List.of(tags));
        }

        public GetLoadBalancerPlainArgs build() {
            return $;
        }
    }

}
