// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.outscale.outputs.GetVpnConnectionsVpnConnectionRoute;
import com.pulumi.outscale.outputs.GetVpnConnectionsVpnConnectionTag;
import com.pulumi.outscale.outputs.GetVpnConnectionsVpnConnectionVgwTelemetry;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVpnConnectionsVpnConnection {
    /**
     * @return Example configuration for the client gateway.
     * 
     */
    private String clientGatewayConfiguration;
    /**
     * @return The ID of the client gateway used on the client end of the connection.
     * 
     */
    private String clientGatewayId;
    /**
     * @return The type of VPN connection (always `ipsec.1`).
     * 
     */
    private String connectionType;
    /**
     * @return Information about one or more static routes associated with the VPN connection, if any.
     * 
     */
    private List<GetVpnConnectionsVpnConnectionRoute> routes;
    /**
     * @return The state of the IPSEC tunnel (`UP` \| `DOWN`).
     * 
     */
    private String state;
    /**
     * @return If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
     * 
     */
    private @Nullable Boolean staticRoutesOnly;
    /**
     * @return The key/value combinations of the tags associated with the VPN connections, in the following format: `TAGKEY=TAGVALUE`.
     * 
     */
    private List<GetVpnConnectionsVpnConnectionTag> tags;
    /**
     * @return Information about the current state of one or more of the VPN tunnels.
     * 
     */
    private List<GetVpnConnectionsVpnConnectionVgwTelemetry> vgwTelemetries;
    /**
     * @return The ID of the virtual gateway used on the OUTSCALE end of the connection.
     * 
     */
    private String virtualGatewayId;
    /**
     * @return The ID of the VPN connection.
     * 
     */
    private String vpnConnectionId;

    private GetVpnConnectionsVpnConnection() {}
    /**
     * @return Example configuration for the client gateway.
     * 
     */
    public String clientGatewayConfiguration() {
        return this.clientGatewayConfiguration;
    }
    /**
     * @return The ID of the client gateway used on the client end of the connection.
     * 
     */
    public String clientGatewayId() {
        return this.clientGatewayId;
    }
    /**
     * @return The type of VPN connection (always `ipsec.1`).
     * 
     */
    public String connectionType() {
        return this.connectionType;
    }
    /**
     * @return Information about one or more static routes associated with the VPN connection, if any.
     * 
     */
    public List<GetVpnConnectionsVpnConnectionRoute> routes() {
        return this.routes;
    }
    /**
     * @return The state of the IPSEC tunnel (`UP` \| `DOWN`).
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
     * 
     */
    public Optional<Boolean> staticRoutesOnly() {
        return Optional.ofNullable(this.staticRoutesOnly);
    }
    /**
     * @return The key/value combinations of the tags associated with the VPN connections, in the following format: `TAGKEY=TAGVALUE`.
     * 
     */
    public List<GetVpnConnectionsVpnConnectionTag> tags() {
        return this.tags;
    }
    /**
     * @return Information about the current state of one or more of the VPN tunnels.
     * 
     */
    public List<GetVpnConnectionsVpnConnectionVgwTelemetry> vgwTelemetries() {
        return this.vgwTelemetries;
    }
    /**
     * @return The ID of the virtual gateway used on the OUTSCALE end of the connection.
     * 
     */
    public String virtualGatewayId() {
        return this.virtualGatewayId;
    }
    /**
     * @return The ID of the VPN connection.
     * 
     */
    public String vpnConnectionId() {
        return this.vpnConnectionId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVpnConnectionsVpnConnection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientGatewayConfiguration;
        private String clientGatewayId;
        private String connectionType;
        private List<GetVpnConnectionsVpnConnectionRoute> routes;
        private String state;
        private @Nullable Boolean staticRoutesOnly;
        private List<GetVpnConnectionsVpnConnectionTag> tags;
        private List<GetVpnConnectionsVpnConnectionVgwTelemetry> vgwTelemetries;
        private String virtualGatewayId;
        private String vpnConnectionId;
        public Builder() {}
        public Builder(GetVpnConnectionsVpnConnection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientGatewayConfiguration = defaults.clientGatewayConfiguration;
    	      this.clientGatewayId = defaults.clientGatewayId;
    	      this.connectionType = defaults.connectionType;
    	      this.routes = defaults.routes;
    	      this.state = defaults.state;
    	      this.staticRoutesOnly = defaults.staticRoutesOnly;
    	      this.tags = defaults.tags;
    	      this.vgwTelemetries = defaults.vgwTelemetries;
    	      this.virtualGatewayId = defaults.virtualGatewayId;
    	      this.vpnConnectionId = defaults.vpnConnectionId;
        }

        @CustomType.Setter
        public Builder clientGatewayConfiguration(String clientGatewayConfiguration) {
            this.clientGatewayConfiguration = Objects.requireNonNull(clientGatewayConfiguration);
            return this;
        }
        @CustomType.Setter
        public Builder clientGatewayId(String clientGatewayId) {
            this.clientGatewayId = Objects.requireNonNull(clientGatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(String connectionType) {
            this.connectionType = Objects.requireNonNull(connectionType);
            return this;
        }
        @CustomType.Setter
        public Builder routes(List<GetVpnConnectionsVpnConnectionRoute> routes) {
            this.routes = Objects.requireNonNull(routes);
            return this;
        }
        public Builder routes(GetVpnConnectionsVpnConnectionRoute... routes) {
            return routes(List.of(routes));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder staticRoutesOnly(@Nullable Boolean staticRoutesOnly) {
            this.staticRoutesOnly = staticRoutesOnly;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetVpnConnectionsVpnConnectionTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetVpnConnectionsVpnConnectionTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder vgwTelemetries(List<GetVpnConnectionsVpnConnectionVgwTelemetry> vgwTelemetries) {
            this.vgwTelemetries = Objects.requireNonNull(vgwTelemetries);
            return this;
        }
        public Builder vgwTelemetries(GetVpnConnectionsVpnConnectionVgwTelemetry... vgwTelemetries) {
            return vgwTelemetries(List.of(vgwTelemetries));
        }
        @CustomType.Setter
        public Builder virtualGatewayId(String virtualGatewayId) {
            this.virtualGatewayId = Objects.requireNonNull(virtualGatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder vpnConnectionId(String vpnConnectionId) {
            this.vpnConnectionId = Objects.requireNonNull(vpnConnectionId);
            return this;
        }
        public GetVpnConnectionsVpnConnection build() {
            final var o = new GetVpnConnectionsVpnConnection();
            o.clientGatewayConfiguration = clientGatewayConfiguration;
            o.clientGatewayId = clientGatewayId;
            o.connectionType = connectionType;
            o.routes = routes;
            o.state = state;
            o.staticRoutesOnly = staticRoutesOnly;
            o.tags = tags;
            o.vgwTelemetries = vgwTelemetries;
            o.virtualGatewayId = virtualGatewayId;
            o.vpnConnectionId = vpnConnectionId;
            return o;
        }
    }
}
