// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.NetAccessPointTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetAccessPointState extends com.pulumi.resources.ResourceArgs {

    public static final NetAccessPointState Empty = new NetAccessPointState();

    /**
     * The ID of the Net access point.
     * 
     */
    @Import(name="netAccessPointId")
    private @Nullable Output<String> netAccessPointId;

    /**
     * @return The ID of the Net access point.
     * 
     */
    public Optional<Output<String>> netAccessPointId() {
        return Optional.ofNullable(this.netAccessPointId);
    }

    /**
     * The ID of the Net.
     * 
     */
    @Import(name="netId")
    private @Nullable Output<String> netId;

    /**
     * @return The ID of the Net.
     * 
     */
    public Optional<Output<String>> netId() {
        return Optional.ofNullable(this.netId);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * One or more IDs of route tables to use for the connection.
     * 
     */
    @Import(name="routeTableIds")
    private @Nullable Output<List<String>> routeTableIds;

    /**
     * @return One or more IDs of route tables to use for the connection.
     * 
     */
    public Optional<Output<List<String>>> routeTableIds() {
        return Optional.ofNullable(this.routeTableIds);
    }

    /**
     * The name of the service (in the format `com.outscale.region.service`).
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The name of the service (in the format `com.outscale.region.service`).
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * The state of the Net access point (`pending` \| `available` \| `deleting` \| `deleted`).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the Net access point (`pending` \| `available` \| `deleting` \| `deleted`).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<NetAccessPointTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<NetAccessPointTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private NetAccessPointState() {}

    private NetAccessPointState(NetAccessPointState $) {
        this.netAccessPointId = $.netAccessPointId;
        this.netId = $.netId;
        this.requestId = $.requestId;
        this.routeTableIds = $.routeTableIds;
        this.serviceName = $.serviceName;
        this.state = $.state;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetAccessPointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetAccessPointState $;

        public Builder() {
            $ = new NetAccessPointState();
        }

        public Builder(NetAccessPointState defaults) {
            $ = new NetAccessPointState(Objects.requireNonNull(defaults));
        }

        /**
         * @param netAccessPointId The ID of the Net access point.
         * 
         * @return builder
         * 
         */
        public Builder netAccessPointId(@Nullable Output<String> netAccessPointId) {
            $.netAccessPointId = netAccessPointId;
            return this;
        }

        /**
         * @param netAccessPointId The ID of the Net access point.
         * 
         * @return builder
         * 
         */
        public Builder netAccessPointId(String netAccessPointId) {
            return netAccessPointId(Output.of(netAccessPointId));
        }

        /**
         * @param netId The ID of the Net.
         * 
         * @return builder
         * 
         */
        public Builder netId(@Nullable Output<String> netId) {
            $.netId = netId;
            return this;
        }

        /**
         * @param netId The ID of the Net.
         * 
         * @return builder
         * 
         */
        public Builder netId(String netId) {
            return netId(Output.of(netId));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param routeTableIds One or more IDs of route tables to use for the connection.
         * 
         * @return builder
         * 
         */
        public Builder routeTableIds(@Nullable Output<List<String>> routeTableIds) {
            $.routeTableIds = routeTableIds;
            return this;
        }

        /**
         * @param routeTableIds One or more IDs of route tables to use for the connection.
         * 
         * @return builder
         * 
         */
        public Builder routeTableIds(List<String> routeTableIds) {
            return routeTableIds(Output.of(routeTableIds));
        }

        /**
         * @param routeTableIds One or more IDs of route tables to use for the connection.
         * 
         * @return builder
         * 
         */
        public Builder routeTableIds(String... routeTableIds) {
            return routeTableIds(List.of(routeTableIds));
        }

        /**
         * @param serviceName The name of the service (in the format `com.outscale.region.service`).
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The name of the service (in the format `com.outscale.region.service`).
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param state The state of the Net access point (`pending` \| `available` \| `deleting` \| `deleted`).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the Net access point (`pending` \| `available` \| `deleting` \| `deleted`).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<NetAccessPointTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<NetAccessPointTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(NetAccessPointTagArgs... tags) {
            return tags(List.of(tags));
        }

        public NetAccessPointState build() {
            return $;
        }
    }

}
