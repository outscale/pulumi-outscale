// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVolumesVolumeLinkedVolume {
    /**
     * @return If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
     * 
     */
    private Boolean deleteOnVmDeletion;
    /**
     * @return The name of the device.
     * 
     */
    private String deviceName;
    /**
     * @return The state of the volume (`creating` \| `available` \| `in-use` \| `updating` \| `deleting` \| `error`).
     * 
     */
    private String state;
    /**
     * @return The ID of the VM.
     * 
     */
    private String vmId;
    /**
     * @return The ID of the volume.
     * 
     */
    private String volumeId;

    private GetVolumesVolumeLinkedVolume() {}
    /**
     * @return If true, the volume is deleted when terminating the VM. If false, the volume is not deleted when terminating the VM.
     * 
     */
    public Boolean deleteOnVmDeletion() {
        return this.deleteOnVmDeletion;
    }
    /**
     * @return The name of the device.
     * 
     */
    public String deviceName() {
        return this.deviceName;
    }
    /**
     * @return The state of the volume (`creating` \| `available` \| `in-use` \| `updating` \| `deleting` \| `error`).
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The ID of the VM.
     * 
     */
    public String vmId() {
        return this.vmId;
    }
    /**
     * @return The ID of the volume.
     * 
     */
    public String volumeId() {
        return this.volumeId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumesVolumeLinkedVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean deleteOnVmDeletion;
        private String deviceName;
        private String state;
        private String vmId;
        private String volumeId;
        public Builder() {}
        public Builder(GetVolumesVolumeLinkedVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteOnVmDeletion = defaults.deleteOnVmDeletion;
    	      this.deviceName = defaults.deviceName;
    	      this.state = defaults.state;
    	      this.vmId = defaults.vmId;
    	      this.volumeId = defaults.volumeId;
        }

        @CustomType.Setter
        public Builder deleteOnVmDeletion(Boolean deleteOnVmDeletion) {
            this.deleteOnVmDeletion = Objects.requireNonNull(deleteOnVmDeletion);
            return this;
        }
        @CustomType.Setter
        public Builder deviceName(String deviceName) {
            this.deviceName = Objects.requireNonNull(deviceName);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder vmId(String vmId) {
            this.vmId = Objects.requireNonNull(vmId);
            return this;
        }
        @CustomType.Setter
        public Builder volumeId(String volumeId) {
            this.volumeId = Objects.requireNonNull(volumeId);
            return this;
        }
        public GetVolumesVolumeLinkedVolume build() {
            final var o = new GetVolumesVolumeLinkedVolume();
            o.deleteOnVmDeletion = deleteOnVmDeletion;
            o.deviceName = deviceName;
            o.state = state;
            o.vmId = vmId;
            o.volumeId = volumeId;
            return o;
        }
    }
}
