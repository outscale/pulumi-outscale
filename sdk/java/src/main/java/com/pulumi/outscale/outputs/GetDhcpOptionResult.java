// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.outscale.outputs.GetDhcpOptionFilter;
import com.pulumi.outscale.outputs.GetDhcpOptionTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetDhcpOptionResult {
    /**
     * @return If true, the DHCP options set is a default one. If false, it is not.
     * 
     */
    private Boolean default_;
    /**
     * @return The ID of the DHCP options set.
     * 
     */
    private String dhcpOptionsSetId;
    /**
     * @return The domain name.
     * 
     */
    private String domainName;
    /**
     * @return One or more IPs for the domain name servers.
     * 
     */
    private List<String> domainNameServers;
    private @Nullable List<GetDhcpOptionFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return One or more IPs for the log servers.
     * 
     */
    private List<String> logServers;
    /**
     * @return One or more IPs for the NTP servers.
     * 
     */
    private List<String> ntpServers;
    private String requestId;
    /**
     * @return One or more tags associated with the DHCP options set.
     * 
     */
    private List<GetDhcpOptionTag> tags;

    private GetDhcpOptionResult() {}
    /**
     * @return If true, the DHCP options set is a default one. If false, it is not.
     * 
     */
    public Boolean default_() {
        return this.default_;
    }
    /**
     * @return The ID of the DHCP options set.
     * 
     */
    public String dhcpOptionsSetId() {
        return this.dhcpOptionsSetId;
    }
    /**
     * @return The domain name.
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return One or more IPs for the domain name servers.
     * 
     */
    public List<String> domainNameServers() {
        return this.domainNameServers;
    }
    public List<GetDhcpOptionFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return One or more IPs for the log servers.
     * 
     */
    public List<String> logServers() {
        return this.logServers;
    }
    /**
     * @return One or more IPs for the NTP servers.
     * 
     */
    public List<String> ntpServers() {
        return this.ntpServers;
    }
    public String requestId() {
        return this.requestId;
    }
    /**
     * @return One or more tags associated with the DHCP options set.
     * 
     */
    public List<GetDhcpOptionTag> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDhcpOptionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean default_;
        private String dhcpOptionsSetId;
        private String domainName;
        private List<String> domainNameServers;
        private @Nullable List<GetDhcpOptionFilter> filters;
        private String id;
        private List<String> logServers;
        private List<String> ntpServers;
        private String requestId;
        private List<GetDhcpOptionTag> tags;
        public Builder() {}
        public Builder(GetDhcpOptionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.default_ = defaults.default_;
    	      this.dhcpOptionsSetId = defaults.dhcpOptionsSetId;
    	      this.domainName = defaults.domainName;
    	      this.domainNameServers = defaults.domainNameServers;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.logServers = defaults.logServers;
    	      this.ntpServers = defaults.ntpServers;
    	      this.requestId = defaults.requestId;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter("default")
        public Builder default_(Boolean default_) {
            this.default_ = Objects.requireNonNull(default_);
            return this;
        }
        @CustomType.Setter
        public Builder dhcpOptionsSetId(String dhcpOptionsSetId) {
            this.dhcpOptionsSetId = Objects.requireNonNull(dhcpOptionsSetId);
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            this.domainName = Objects.requireNonNull(domainName);
            return this;
        }
        @CustomType.Setter
        public Builder domainNameServers(List<String> domainNameServers) {
            this.domainNameServers = Objects.requireNonNull(domainNameServers);
            return this;
        }
        public Builder domainNameServers(String... domainNameServers) {
            return domainNameServers(List.of(domainNameServers));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetDhcpOptionFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetDhcpOptionFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder logServers(List<String> logServers) {
            this.logServers = Objects.requireNonNull(logServers);
            return this;
        }
        public Builder logServers(String... logServers) {
            return logServers(List.of(logServers));
        }
        @CustomType.Setter
        public Builder ntpServers(List<String> ntpServers) {
            this.ntpServers = Objects.requireNonNull(ntpServers);
            return this;
        }
        public Builder ntpServers(String... ntpServers) {
            return ntpServers(List.of(ntpServers));
        }
        @CustomType.Setter
        public Builder requestId(String requestId) {
            this.requestId = Objects.requireNonNull(requestId);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetDhcpOptionTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetDhcpOptionTag... tags) {
            return tags(List.of(tags));
        }
        public GetDhcpOptionResult build() {
            final var o = new GetDhcpOptionResult();
            o.default_ = default_;
            o.dhcpOptionsSetId = dhcpOptionsSetId;
            o.domainName = domainName;
            o.domainNameServers = domainNameServers;
            o.filters = filters;
            o.id = id;
            o.logServers = logServers;
            o.ntpServers = ntpServers;
            o.requestId = requestId;
            o.tags = tags;
            return o;
        }
    }
}
