// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.RouteTableLinkRouteTableArgs;
import com.pulumi.outscale.inputs.RouteTableRouteArgs;
import com.pulumi.outscale.inputs.RouteTableRoutePropagatingVirtualGatewayArgs;
import com.pulumi.outscale.inputs.RouteTableTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteTableState extends com.pulumi.resources.ResourceArgs {

    public static final RouteTableState Empty = new RouteTableState();

    /**
     * One or more associations between the route table and Subnets.
     * 
     */
    @Import(name="linkRouteTables")
    private @Nullable Output<List<RouteTableLinkRouteTableArgs>> linkRouteTables;

    /**
     * @return One or more associations between the route table and Subnets.
     * 
     */
    public Optional<Output<List<RouteTableLinkRouteTableArgs>>> linkRouteTables() {
        return Optional.ofNullable(this.linkRouteTables);
    }

    /**
     * The ID of the Net for which you want to create a route table.
     * 
     */
    @Import(name="netId")
    private @Nullable Output<String> netId;

    /**
     * @return The ID of the Net for which you want to create a route table.
     * 
     */
    public Optional<Output<String>> netId() {
        return Optional.ofNullable(this.netId);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Information about virtual gateways propagating routes.
     * 
     */
    @Import(name="routePropagatingVirtualGateways")
    private @Nullable Output<List<RouteTableRoutePropagatingVirtualGatewayArgs>> routePropagatingVirtualGateways;

    /**
     * @return Information about virtual gateways propagating routes.
     * 
     */
    public Optional<Output<List<RouteTableRoutePropagatingVirtualGatewayArgs>>> routePropagatingVirtualGateways() {
        return Optional.ofNullable(this.routePropagatingVirtualGateways);
    }

    /**
     * The ID of the route table.
     * 
     */
    @Import(name="routeTableId")
    private @Nullable Output<String> routeTableId;

    /**
     * @return The ID of the route table.
     * 
     */
    public Optional<Output<String>> routeTableId() {
        return Optional.ofNullable(this.routeTableId);
    }

    /**
     * One or more routes in the route table.
     * 
     */
    @Import(name="routes")
    private @Nullable Output<List<RouteTableRouteArgs>> routes;

    /**
     * @return One or more routes in the route table.
     * 
     */
    public Optional<Output<List<RouteTableRouteArgs>>> routes() {
        return Optional.ofNullable(this.routes);
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<RouteTableTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<RouteTableTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private RouteTableState() {}

    private RouteTableState(RouteTableState $) {
        this.linkRouteTables = $.linkRouteTables;
        this.netId = $.netId;
        this.requestId = $.requestId;
        this.routePropagatingVirtualGateways = $.routePropagatingVirtualGateways;
        this.routeTableId = $.routeTableId;
        this.routes = $.routes;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteTableState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteTableState $;

        public Builder() {
            $ = new RouteTableState();
        }

        public Builder(RouteTableState defaults) {
            $ = new RouteTableState(Objects.requireNonNull(defaults));
        }

        /**
         * @param linkRouteTables One or more associations between the route table and Subnets.
         * 
         * @return builder
         * 
         */
        public Builder linkRouteTables(@Nullable Output<List<RouteTableLinkRouteTableArgs>> linkRouteTables) {
            $.linkRouteTables = linkRouteTables;
            return this;
        }

        /**
         * @param linkRouteTables One or more associations between the route table and Subnets.
         * 
         * @return builder
         * 
         */
        public Builder linkRouteTables(List<RouteTableLinkRouteTableArgs> linkRouteTables) {
            return linkRouteTables(Output.of(linkRouteTables));
        }

        /**
         * @param linkRouteTables One or more associations between the route table and Subnets.
         * 
         * @return builder
         * 
         */
        public Builder linkRouteTables(RouteTableLinkRouteTableArgs... linkRouteTables) {
            return linkRouteTables(List.of(linkRouteTables));
        }

        /**
         * @param netId The ID of the Net for which you want to create a route table.
         * 
         * @return builder
         * 
         */
        public Builder netId(@Nullable Output<String> netId) {
            $.netId = netId;
            return this;
        }

        /**
         * @param netId The ID of the Net for which you want to create a route table.
         * 
         * @return builder
         * 
         */
        public Builder netId(String netId) {
            return netId(Output.of(netId));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param routePropagatingVirtualGateways Information about virtual gateways propagating routes.
         * 
         * @return builder
         * 
         */
        public Builder routePropagatingVirtualGateways(@Nullable Output<List<RouteTableRoutePropagatingVirtualGatewayArgs>> routePropagatingVirtualGateways) {
            $.routePropagatingVirtualGateways = routePropagatingVirtualGateways;
            return this;
        }

        /**
         * @param routePropagatingVirtualGateways Information about virtual gateways propagating routes.
         * 
         * @return builder
         * 
         */
        public Builder routePropagatingVirtualGateways(List<RouteTableRoutePropagatingVirtualGatewayArgs> routePropagatingVirtualGateways) {
            return routePropagatingVirtualGateways(Output.of(routePropagatingVirtualGateways));
        }

        /**
         * @param routePropagatingVirtualGateways Information about virtual gateways propagating routes.
         * 
         * @return builder
         * 
         */
        public Builder routePropagatingVirtualGateways(RouteTableRoutePropagatingVirtualGatewayArgs... routePropagatingVirtualGateways) {
            return routePropagatingVirtualGateways(List.of(routePropagatingVirtualGateways));
        }

        /**
         * @param routeTableId The ID of the route table.
         * 
         * @return builder
         * 
         */
        public Builder routeTableId(@Nullable Output<String> routeTableId) {
            $.routeTableId = routeTableId;
            return this;
        }

        /**
         * @param routeTableId The ID of the route table.
         * 
         * @return builder
         * 
         */
        public Builder routeTableId(String routeTableId) {
            return routeTableId(Output.of(routeTableId));
        }

        /**
         * @param routes One or more routes in the route table.
         * 
         * @return builder
         * 
         */
        public Builder routes(@Nullable Output<List<RouteTableRouteArgs>> routes) {
            $.routes = routes;
            return this;
        }

        /**
         * @param routes One or more routes in the route table.
         * 
         * @return builder
         * 
         */
        public Builder routes(List<RouteTableRouteArgs> routes) {
            return routes(Output.of(routes));
        }

        /**
         * @param routes One or more routes in the route table.
         * 
         * @return builder
         * 
         */
        public Builder routes(RouteTableRouteArgs... routes) {
            return routes(List.of(routes));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<RouteTableTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<RouteTableTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(RouteTableTagArgs... tags) {
            return tags(List.of(tags));
        }

        public RouteTableState build() {
            return $;
        }
    }

}
