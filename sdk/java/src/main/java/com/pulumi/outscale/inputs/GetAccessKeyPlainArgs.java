// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.GetAccessKeyFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAccessKeyPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAccessKeyPlainArgs Empty = new GetAccessKeyPlainArgs();

    /**
     * The ID of the access key.
     * 
     */
    @Import(name="accessKeyId")
    private @Nullable String accessKeyId;

    /**
     * @return The ID of the access key.
     * 
     */
    public Optional<String> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }

    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    @Import(name="filters")
    private @Nullable List<GetAccessKeyFilter> filters;

    /**
     * @return A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    public Optional<List<GetAccessKeyFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The state of the access key (`ACTIVE` if the key is valid for API calls, or `INACTIVE` if not).
     * 
     */
    @Import(name="state")
    private @Nullable String state;

    /**
     * @return The state of the access key (`ACTIVE` if the key is valid for API calls, or `INACTIVE` if not).
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    private GetAccessKeyPlainArgs() {}

    private GetAccessKeyPlainArgs(GetAccessKeyPlainArgs $) {
        this.accessKeyId = $.accessKeyId;
        this.filters = $.filters;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAccessKeyPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAccessKeyPlainArgs $;

        public Builder() {
            $ = new GetAccessKeyPlainArgs();
        }

        public Builder(GetAccessKeyPlainArgs defaults) {
            $ = new GetAccessKeyPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId The ID of the access key.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(@Nullable String accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable List<GetAccessKeyFilter> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(GetAccessKeyFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param state The state of the access key (`ACTIVE` if the key is valid for API calls, or `INACTIVE` if not).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable String state) {
            $.state = state;
            return this;
        }

        public GetAccessKeyPlainArgs build() {
            return $;
        }
    }

}
