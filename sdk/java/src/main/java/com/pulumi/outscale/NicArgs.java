// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.NicPrivateIpArgs;
import com.pulumi.outscale.inputs.NicTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NicArgs extends com.pulumi.resources.ResourceArgs {

    public static final NicArgs Empty = new NicArgs();

    /**
     * A description for the NIC.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the NIC.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The private IP of the NIC.
     * 
     */
    @Import(name="privateIp")
    private @Nullable Output<String> privateIp;

    /**
     * @return The private IP of the NIC.
     * 
     */
    public Optional<Output<String>> privateIp() {
        return Optional.ofNullable(this.privateIp);
    }

    /**
     * The primary private IP for the NIC.&lt;br /&gt;
     * This IP must be within the IP range of the Subnet that you specify with the `subnet_id` attribute.&lt;br /&gt;
     * If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
     * 
     */
    @Import(name="privateIps")
    private @Nullable Output<List<NicPrivateIpArgs>> privateIps;

    /**
     * @return The primary private IP for the NIC.&lt;br /&gt;
     * This IP must be within the IP range of the Subnet that you specify with the `subnet_id` attribute.&lt;br /&gt;
     * If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
     * 
     */
    public Optional<Output<List<NicPrivateIpArgs>>> privateIps() {
        return Optional.ofNullable(this.privateIps);
    }

    /**
     * One or more IDs of security groups for the NIC.
     * 
     */
    @Import(name="securityGroupIds")
    private @Nullable Output<List<String>> securityGroupIds;

    /**
     * @return One or more IDs of security groups for the NIC.
     * 
     */
    public Optional<Output<List<String>>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    /**
     * The ID of the Subnet in which you want to create the NIC.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return The ID of the Subnet in which you want to create the NIC.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<NicTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<NicTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private NicArgs() {}

    private NicArgs(NicArgs $) {
        this.description = $.description;
        this.privateIp = $.privateIp;
        this.privateIps = $.privateIps;
        this.securityGroupIds = $.securityGroupIds;
        this.subnetId = $.subnetId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NicArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NicArgs $;

        public Builder() {
            $ = new NicArgs();
        }

        public Builder(NicArgs defaults) {
            $ = new NicArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param privateIp The private IP of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(@Nullable Output<String> privateIp) {
            $.privateIp = privateIp;
            return this;
        }

        /**
         * @param privateIp The private IP of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(String privateIp) {
            return privateIp(Output.of(privateIp));
        }

        /**
         * @param privateIps The primary private IP for the NIC.&lt;br /&gt;
         * This IP must be within the IP range of the Subnet that you specify with the `subnet_id` attribute.&lt;br /&gt;
         * If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
         * 
         * @return builder
         * 
         */
        public Builder privateIps(@Nullable Output<List<NicPrivateIpArgs>> privateIps) {
            $.privateIps = privateIps;
            return this;
        }

        /**
         * @param privateIps The primary private IP for the NIC.&lt;br /&gt;
         * This IP must be within the IP range of the Subnet that you specify with the `subnet_id` attribute.&lt;br /&gt;
         * If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
         * 
         * @return builder
         * 
         */
        public Builder privateIps(List<NicPrivateIpArgs> privateIps) {
            return privateIps(Output.of(privateIps));
        }

        /**
         * @param privateIps The primary private IP for the NIC.&lt;br /&gt;
         * This IP must be within the IP range of the Subnet that you specify with the `subnet_id` attribute.&lt;br /&gt;
         * If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
         * 
         * @return builder
         * 
         */
        public Builder privateIps(NicPrivateIpArgs... privateIps) {
            return privateIps(List.of(privateIps));
        }

        /**
         * @param securityGroupIds One or more IDs of security groups for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        /**
         * @param securityGroupIds One or more IDs of security groups for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        /**
         * @param securityGroupIds One or more IDs of security groups for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        /**
         * @param subnetId The ID of the Subnet in which you want to create the NIC.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The ID of the Subnet in which you want to create the NIC.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<NicTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<NicTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(NicTagArgs... tags) {
            return tags(List.of(tags));
        }

        public NicArgs build() {
            $.subnetId = Objects.requireNonNull($.subnetId, "expected parameter 'subnetId' to be non-null");
            return $;
        }
    }

}
