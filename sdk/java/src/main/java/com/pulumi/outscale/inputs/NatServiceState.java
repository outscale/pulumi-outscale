// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.NatServicePublicIpArgs;
import com.pulumi.outscale.inputs.NatServiceTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NatServiceState extends com.pulumi.resources.ResourceArgs {

    public static final NatServiceState Empty = new NatServiceState();

    /**
     * The ID of the NAT service.
     * 
     */
    @Import(name="natServiceId")
    private @Nullable Output<String> natServiceId;

    /**
     * @return The ID of the NAT service.
     * 
     */
    public Optional<Output<String>> natServiceId() {
        return Optional.ofNullable(this.natServiceId);
    }

    /**
     * The ID of the Net in which the NAT service is.
     * 
     */
    @Import(name="netId")
    private @Nullable Output<String> netId;

    /**
     * @return The ID of the Net in which the NAT service is.
     * 
     */
    public Optional<Output<String>> netId() {
        return Optional.ofNullable(this.netId);
    }

    /**
     * The allocation ID of the public IP to associate with the NAT service.&lt;br /&gt;
     * If the public IP is already associated with another resource, you must first disassociate it.
     * 
     */
    @Import(name="publicIpId")
    private @Nullable Output<String> publicIpId;

    /**
     * @return The allocation ID of the public IP to associate with the NAT service.&lt;br /&gt;
     * If the public IP is already associated with another resource, you must first disassociate it.
     * 
     */
    public Optional<Output<String>> publicIpId() {
        return Optional.ofNullable(this.publicIpId);
    }

    /**
     * Information about the public IP or IPs associated with the NAT service.
     * 
     */
    @Import(name="publicIps")
    private @Nullable Output<List<NatServicePublicIpArgs>> publicIps;

    /**
     * @return Information about the public IP or IPs associated with the NAT service.
     * 
     */
    public Optional<Output<List<NatServicePublicIpArgs>>> publicIps() {
        return Optional.ofNullable(this.publicIps);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The ID of the Subnet in which you want to create the NAT service.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The ID of the Subnet in which you want to create the NAT service.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<NatServiceTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<NatServiceTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private NatServiceState() {}

    private NatServiceState(NatServiceState $) {
        this.natServiceId = $.natServiceId;
        this.netId = $.netId;
        this.publicIpId = $.publicIpId;
        this.publicIps = $.publicIps;
        this.requestId = $.requestId;
        this.state = $.state;
        this.subnetId = $.subnetId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NatServiceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NatServiceState $;

        public Builder() {
            $ = new NatServiceState();
        }

        public Builder(NatServiceState defaults) {
            $ = new NatServiceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param natServiceId The ID of the NAT service.
         * 
         * @return builder
         * 
         */
        public Builder natServiceId(@Nullable Output<String> natServiceId) {
            $.natServiceId = natServiceId;
            return this;
        }

        /**
         * @param natServiceId The ID of the NAT service.
         * 
         * @return builder
         * 
         */
        public Builder natServiceId(String natServiceId) {
            return natServiceId(Output.of(natServiceId));
        }

        /**
         * @param netId The ID of the Net in which the NAT service is.
         * 
         * @return builder
         * 
         */
        public Builder netId(@Nullable Output<String> netId) {
            $.netId = netId;
            return this;
        }

        /**
         * @param netId The ID of the Net in which the NAT service is.
         * 
         * @return builder
         * 
         */
        public Builder netId(String netId) {
            return netId(Output.of(netId));
        }

        /**
         * @param publicIpId The allocation ID of the public IP to associate with the NAT service.&lt;br /&gt;
         * If the public IP is already associated with another resource, you must first disassociate it.
         * 
         * @return builder
         * 
         */
        public Builder publicIpId(@Nullable Output<String> publicIpId) {
            $.publicIpId = publicIpId;
            return this;
        }

        /**
         * @param publicIpId The allocation ID of the public IP to associate with the NAT service.&lt;br /&gt;
         * If the public IP is already associated with another resource, you must first disassociate it.
         * 
         * @return builder
         * 
         */
        public Builder publicIpId(String publicIpId) {
            return publicIpId(Output.of(publicIpId));
        }

        /**
         * @param publicIps Information about the public IP or IPs associated with the NAT service.
         * 
         * @return builder
         * 
         */
        public Builder publicIps(@Nullable Output<List<NatServicePublicIpArgs>> publicIps) {
            $.publicIps = publicIps;
            return this;
        }

        /**
         * @param publicIps Information about the public IP or IPs associated with the NAT service.
         * 
         * @return builder
         * 
         */
        public Builder publicIps(List<NatServicePublicIpArgs> publicIps) {
            return publicIps(Output.of(publicIps));
        }

        /**
         * @param publicIps Information about the public IP or IPs associated with the NAT service.
         * 
         * @return builder
         * 
         */
        public Builder publicIps(NatServicePublicIpArgs... publicIps) {
            return publicIps(List.of(publicIps));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param state The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subnetId The ID of the Subnet in which you want to create the NAT service.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The ID of the Subnet in which you want to create the NAT service.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<NatServiceTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<NatServiceTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(NatServiceTagArgs... tags) {
            return tags(List.of(tags));
        }

        public NatServiceState build() {
            return $;
        }
    }

}
