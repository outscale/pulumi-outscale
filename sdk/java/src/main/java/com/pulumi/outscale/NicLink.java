// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.outscale.NicLinkArgs;
import com.pulumi.outscale.Utilities;
import com.pulumi.outscale.inputs.NicLinkState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Manages a NIC link.
 * 
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-FNIs.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-nic).
 * 
 * ## Example Usage
 * ### Required resources
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.outscale.Net;
 * import com.pulumi.outscale.NetArgs;
 * import com.pulumi.outscale.Subnet;
 * import com.pulumi.outscale.SubnetArgs;
 * import com.pulumi.outscale.Vm;
 * import com.pulumi.outscale.VmArgs;
 * import com.pulumi.outscale.Nic;
 * import com.pulumi.outscale.NicArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var net01 = new Net(&#34;net01&#34;, NetArgs.builder()        
 *             .ipRange(&#34;10.0.0.0/16&#34;)
 *             .build());
 * 
 *         var subnet01 = new Subnet(&#34;subnet01&#34;, SubnetArgs.builder()        
 *             .subregionName(String.format(&#34;%sa&#34;, var_.region()))
 *             .ipRange(&#34;10.0.0.0/16&#34;)
 *             .netId(net01.netId())
 *             .build());
 * 
 *         var vm01 = new Vm(&#34;vm01&#34;, VmArgs.builder()        
 *             .imageId(var_.image_id())
 *             .vmType(var_.vm_type())
 *             .keypairName(var_.keypair_name())
 *             .subnetId(subnet01.subnetId())
 *             .build());
 * 
 *         var nic01 = new Nic(&#34;nic01&#34;, NicArgs.builder()        
 *             .subnetId(subnet01.subnetId())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Link a NIC to a VM
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.outscale.NicLink;
 * import com.pulumi.outscale.NicLinkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var nicLink01 = new NicLink(&#34;nicLink01&#34;, NicLinkArgs.builder()        
 *             .deviceNumber(&#34;1&#34;)
 *             .vmId(outscale_vm.vm01().vm_id())
 *             .nicId(outscale_nic.nic01().nic_id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * A NIC link can be imported using the NIC ID. For exampleconsole
 * 
 * ```sh
 *  $ pulumi import outscale:index/nicLink:NicLink ImportedNicLink eni-12345678
 * ```
 * 
 */
@ResourceType(type="outscale:index/nicLink:NicLink")
public class NicLink extends com.pulumi.resources.CustomResource {
    @Export(name="deleteOnVmDeletion", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> deleteOnVmDeletion;

    public Output<Boolean> deleteOnVmDeletion() {
        return this.deleteOnVmDeletion;
    }
    /**
     * The index of the VM device for the NIC attachment (between `1` and `7`, both included).
     * 
     */
    @Export(name="deviceNumber", refs={Integer.class}, tree="[0]")
    private Output<Integer> deviceNumber;

    /**
     * @return The index of the VM device for the NIC attachment (between `1` and `7`, both included).
     * 
     */
    public Output<Integer> deviceNumber() {
        return this.deviceNumber;
    }
    /**
     * The ID of the NIC attachment.
     * 
     */
    @Export(name="linkNicId", refs={String.class}, tree="[0]")
    private Output<String> linkNicId;

    /**
     * @return The ID of the NIC attachment.
     * 
     */
    public Output<String> linkNicId() {
        return this.linkNicId;
    }
    /**
     * The ID of the NIC you want to attach.
     * 
     */
    @Export(name="nicId", refs={String.class}, tree="[0]")
    private Output<String> nicId;

    /**
     * @return The ID of the NIC you want to attach.
     * 
     */
    public Output<String> nicId() {
        return this.nicId;
    }
    @Export(name="requestId", refs={String.class}, tree="[0]")
    private Output<String> requestId;

    public Output<String> requestId() {
        return this.requestId;
    }
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    public Output<String> state() {
        return this.state;
    }
    @Export(name="vmAccountId", refs={String.class}, tree="[0]")
    private Output<String> vmAccountId;

    public Output<String> vmAccountId() {
        return this.vmAccountId;
    }
    /**
     * The ID of the VM to which you want to attach the NIC.
     * 
     */
    @Export(name="vmId", refs={String.class}, tree="[0]")
    private Output<String> vmId;

    /**
     * @return The ID of the VM to which you want to attach the NIC.
     * 
     */
    public Output<String> vmId() {
        return this.vmId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NicLink(String name) {
        this(name, NicLinkArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NicLink(String name, NicLinkArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NicLink(String name, NicLinkArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("outscale:index/nicLink:NicLink", name, args == null ? NicLinkArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private NicLink(String name, Output<String> id, @Nullable NicLinkState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("outscale:index/nicLink:NicLink", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NicLink get(String name, Output<String> id, @Nullable NicLinkState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NicLink(name, id, state, options);
    }
}
