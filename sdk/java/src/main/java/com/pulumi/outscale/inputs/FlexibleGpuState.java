// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlexibleGpuState extends com.pulumi.resources.ResourceArgs {

    public static final FlexibleGpuState Empty = new FlexibleGpuState();

    /**
     * If true, the fGPU is deleted when the VM is terminated.
     * 
     */
    @Import(name="deleteOnVmDeletion")
    private @Nullable Output<Boolean> deleteOnVmDeletion;

    /**
     * @return If true, the fGPU is deleted when the VM is terminated.
     * 
     */
    public Optional<Output<Boolean>> deleteOnVmDeletion() {
        return Optional.ofNullable(this.deleteOnVmDeletion);
    }

    /**
     * The ID of the fGPU.
     * 
     */
    @Import(name="flexibleGpuId")
    private @Nullable Output<String> flexibleGpuId;

    /**
     * @return The ID of the fGPU.
     * 
     */
    public Optional<Output<String>> flexibleGpuId() {
        return Optional.ofNullable(this.flexibleGpuId);
    }

    /**
     * The processor generation that the fGPU must be compatible with. If not specified, the oldest possible processor generation is selected (as provided by [ReadFlexibleGpuCatalog](https://docs.outscale.com/api#readflexiblegpucatalog) for the specified model of fGPU).
     * 
     */
    @Import(name="generation")
    private @Nullable Output<String> generation;

    /**
     * @return The processor generation that the fGPU must be compatible with. If not specified, the oldest possible processor generation is selected (as provided by [ReadFlexibleGpuCatalog](https://docs.outscale.com/api#readflexiblegpucatalog) for the specified model of fGPU).
     * 
     */
    public Optional<Output<String>> generation() {
        return Optional.ofNullable(this.generation);
    }

    /**
     * The model of fGPU you want to allocate. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
     * 
     */
    @Import(name="modelName")
    private @Nullable Output<String> modelName;

    /**
     * @return The model of fGPU you want to allocate. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
     * 
     */
    public Optional<Output<String>> modelName() {
        return Optional.ofNullable(this.modelName);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * The state of the fGPU (`allocated` \| `attaching` \| `attached` \| `detaching`).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the fGPU (`allocated` \| `attaching` \| `attached` \| `detaching`).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The Subregion in which you want to create the fGPU.
     * 
     */
    @Import(name="subregionName")
    private @Nullable Output<String> subregionName;

    /**
     * @return The Subregion in which you want to create the fGPU.
     * 
     */
    public Optional<Output<String>> subregionName() {
        return Optional.ofNullable(this.subregionName);
    }

    /**
     * The ID of the VM the fGPU is attached to, if any.
     * 
     */
    @Import(name="vmId")
    private @Nullable Output<String> vmId;

    /**
     * @return The ID of the VM the fGPU is attached to, if any.
     * 
     */
    public Optional<Output<String>> vmId() {
        return Optional.ofNullable(this.vmId);
    }

    private FlexibleGpuState() {}

    private FlexibleGpuState(FlexibleGpuState $) {
        this.deleteOnVmDeletion = $.deleteOnVmDeletion;
        this.flexibleGpuId = $.flexibleGpuId;
        this.generation = $.generation;
        this.modelName = $.modelName;
        this.requestId = $.requestId;
        this.state = $.state;
        this.subregionName = $.subregionName;
        this.vmId = $.vmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlexibleGpuState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlexibleGpuState $;

        public Builder() {
            $ = new FlexibleGpuState();
        }

        public Builder(FlexibleGpuState defaults) {
            $ = new FlexibleGpuState(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteOnVmDeletion If true, the fGPU is deleted when the VM is terminated.
         * 
         * @return builder
         * 
         */
        public Builder deleteOnVmDeletion(@Nullable Output<Boolean> deleteOnVmDeletion) {
            $.deleteOnVmDeletion = deleteOnVmDeletion;
            return this;
        }

        /**
         * @param deleteOnVmDeletion If true, the fGPU is deleted when the VM is terminated.
         * 
         * @return builder
         * 
         */
        public Builder deleteOnVmDeletion(Boolean deleteOnVmDeletion) {
            return deleteOnVmDeletion(Output.of(deleteOnVmDeletion));
        }

        /**
         * @param flexibleGpuId The ID of the fGPU.
         * 
         * @return builder
         * 
         */
        public Builder flexibleGpuId(@Nullable Output<String> flexibleGpuId) {
            $.flexibleGpuId = flexibleGpuId;
            return this;
        }

        /**
         * @param flexibleGpuId The ID of the fGPU.
         * 
         * @return builder
         * 
         */
        public Builder flexibleGpuId(String flexibleGpuId) {
            return flexibleGpuId(Output.of(flexibleGpuId));
        }

        /**
         * @param generation The processor generation that the fGPU must be compatible with. If not specified, the oldest possible processor generation is selected (as provided by [ReadFlexibleGpuCatalog](https://docs.outscale.com/api#readflexiblegpucatalog) for the specified model of fGPU).
         * 
         * @return builder
         * 
         */
        public Builder generation(@Nullable Output<String> generation) {
            $.generation = generation;
            return this;
        }

        /**
         * @param generation The processor generation that the fGPU must be compatible with. If not specified, the oldest possible processor generation is selected (as provided by [ReadFlexibleGpuCatalog](https://docs.outscale.com/api#readflexiblegpucatalog) for the specified model of fGPU).
         * 
         * @return builder
         * 
         */
        public Builder generation(String generation) {
            return generation(Output.of(generation));
        }

        /**
         * @param modelName The model of fGPU you want to allocate. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
         * 
         * @return builder
         * 
         */
        public Builder modelName(@Nullable Output<String> modelName) {
            $.modelName = modelName;
            return this;
        }

        /**
         * @param modelName The model of fGPU you want to allocate. For more information, see [About Flexible GPUs](https://docs.outscale.com/en/userguide/About-Flexible-GPUs.html).
         * 
         * @return builder
         * 
         */
        public Builder modelName(String modelName) {
            return modelName(Output.of(modelName));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param state The state of the fGPU (`allocated` \| `attaching` \| `attached` \| `detaching`).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the fGPU (`allocated` \| `attaching` \| `attached` \| `detaching`).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subregionName The Subregion in which you want to create the fGPU.
         * 
         * @return builder
         * 
         */
        public Builder subregionName(@Nullable Output<String> subregionName) {
            $.subregionName = subregionName;
            return this;
        }

        /**
         * @param subregionName The Subregion in which you want to create the fGPU.
         * 
         * @return builder
         * 
         */
        public Builder subregionName(String subregionName) {
            return subregionName(Output.of(subregionName));
        }

        /**
         * @param vmId The ID of the VM the fGPU is attached to, if any.
         * 
         * @return builder
         * 
         */
        public Builder vmId(@Nullable Output<String> vmId) {
            $.vmId = vmId;
            return this;
        }

        /**
         * @param vmId The ID of the VM the fGPU is attached to, if any.
         * 
         * @return builder
         * 
         */
        public Builder vmId(String vmId) {
            return vmId(Output.of(vmId));
        }

        public FlexibleGpuState build() {
            return $;
        }
    }

}
