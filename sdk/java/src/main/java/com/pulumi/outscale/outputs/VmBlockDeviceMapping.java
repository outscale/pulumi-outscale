// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.outscale.outputs.VmBlockDeviceMappingBsu;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VmBlockDeviceMapping {
    /**
     * @return Information about the BSU volume to create.
     * 
     */
    private @Nullable VmBlockDeviceMappingBsu bsu;
    /**
     * @return The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
     * 
     */
    private @Nullable String deviceName;
    /**
     * @return Removes the device which is included in the block device mapping of the OMI.
     * 
     */
    private @Nullable String noDevice;
    /**
     * @return The name of the virtual device (`ephemeralN`).
     * 
     */
    private @Nullable String virtualDeviceName;

    private VmBlockDeviceMapping() {}
    /**
     * @return Information about the BSU volume to create.
     * 
     */
    public Optional<VmBlockDeviceMappingBsu> bsu() {
        return Optional.ofNullable(this.bsu);
    }
    /**
     * @return The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
     * 
     */
    public Optional<String> deviceName() {
        return Optional.ofNullable(this.deviceName);
    }
    /**
     * @return Removes the device which is included in the block device mapping of the OMI.
     * 
     */
    public Optional<String> noDevice() {
        return Optional.ofNullable(this.noDevice);
    }
    /**
     * @return The name of the virtual device (`ephemeralN`).
     * 
     */
    public Optional<String> virtualDeviceName() {
        return Optional.ofNullable(this.virtualDeviceName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VmBlockDeviceMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable VmBlockDeviceMappingBsu bsu;
        private @Nullable String deviceName;
        private @Nullable String noDevice;
        private @Nullable String virtualDeviceName;
        public Builder() {}
        public Builder(VmBlockDeviceMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bsu = defaults.bsu;
    	      this.deviceName = defaults.deviceName;
    	      this.noDevice = defaults.noDevice;
    	      this.virtualDeviceName = defaults.virtualDeviceName;
        }

        @CustomType.Setter
        public Builder bsu(@Nullable VmBlockDeviceMappingBsu bsu) {
            this.bsu = bsu;
            return this;
        }
        @CustomType.Setter
        public Builder deviceName(@Nullable String deviceName) {
            this.deviceName = deviceName;
            return this;
        }
        @CustomType.Setter
        public Builder noDevice(@Nullable String noDevice) {
            this.noDevice = noDevice;
            return this;
        }
        @CustomType.Setter
        public Builder virtualDeviceName(@Nullable String virtualDeviceName) {
            this.virtualDeviceName = virtualDeviceName;
            return this;
        }
        public VmBlockDeviceMapping build() {
            final var o = new VmBlockDeviceMapping();
            o.bsu = bsu;
            o.deviceName = deviceName;
            o.noDevice = noDevice;
            o.virtualDeviceName = virtualDeviceName;
            return o;
        }
    }
}
