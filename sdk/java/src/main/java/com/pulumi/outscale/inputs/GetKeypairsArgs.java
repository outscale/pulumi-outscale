// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.GetKeypairsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetKeypairsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetKeypairsArgs Empty = new GetKeypairsArgs();

    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<GetKeypairsFilterArgs>> filters;

    /**
     * @return A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    public Optional<Output<List<GetKeypairsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The names of the keypairs.
     * 
     */
    @Import(name="keypairNames")
    private @Nullable Output<List<String>> keypairNames;

    /**
     * @return The names of the keypairs.
     * 
     */
    public Optional<Output<List<String>>> keypairNames() {
        return Optional.ofNullable(this.keypairNames);
    }

    private GetKeypairsArgs() {}

    private GetKeypairsArgs(GetKeypairsArgs $) {
        this.filters = $.filters;
        this.keypairNames = $.keypairNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetKeypairsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetKeypairsArgs $;

        public Builder() {
            $ = new GetKeypairsArgs();
        }

        public Builder(GetKeypairsArgs defaults) {
            $ = new GetKeypairsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<GetKeypairsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(List<GetKeypairsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(GetKeypairsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param keypairNames The names of the keypairs.
         * 
         * @return builder
         * 
         */
        public Builder keypairNames(@Nullable Output<List<String>> keypairNames) {
            $.keypairNames = keypairNames;
            return this;
        }

        /**
         * @param keypairNames The names of the keypairs.
         * 
         * @return builder
         * 
         */
        public Builder keypairNames(List<String> keypairNames) {
            return keypairNames(Output.of(keypairNames));
        }

        /**
         * @param keypairNames The names of the keypairs.
         * 
         * @return builder
         * 
         */
        public Builder keypairNames(String... keypairNames) {
            return keypairNames(List.of(keypairNames));
        }

        public GetKeypairsArgs build() {
            return $;
        }
    }

}
