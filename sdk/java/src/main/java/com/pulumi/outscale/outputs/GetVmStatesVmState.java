// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.outscale.outputs.GetVmStatesVmStateMaintenanceEvent;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVmStatesVmState {
    /**
     * @return If true, includes the status of all VMs. By default or if set to false, only includes the status of running VMs.
     * 
     */
    private @Nullable Boolean allVms;
    /**
     * @return One or more scheduled events associated with the VM.
     * 
     */
    private List<GetVmStatesVmStateMaintenanceEvent> maintenanceEvents;
    /**
     * @return The name of the Subregion of the VM.
     * 
     */
    private String subregionName;
    /**
     * @return The ID of the VM.
     * 
     */
    private @Nullable String vmId;
    /**
     * @return The state of the VM (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
     * 
     */
    private String vmState;

    private GetVmStatesVmState() {}
    /**
     * @return If true, includes the status of all VMs. By default or if set to false, only includes the status of running VMs.
     * 
     */
    public Optional<Boolean> allVms() {
        return Optional.ofNullable(this.allVms);
    }
    /**
     * @return One or more scheduled events associated with the VM.
     * 
     */
    public List<GetVmStatesVmStateMaintenanceEvent> maintenanceEvents() {
        return this.maintenanceEvents;
    }
    /**
     * @return The name of the Subregion of the VM.
     * 
     */
    public String subregionName() {
        return this.subregionName;
    }
    /**
     * @return The ID of the VM.
     * 
     */
    public Optional<String> vmId() {
        return Optional.ofNullable(this.vmId);
    }
    /**
     * @return The state of the VM (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
     * 
     */
    public String vmState() {
        return this.vmState;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVmStatesVmState defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean allVms;
        private List<GetVmStatesVmStateMaintenanceEvent> maintenanceEvents;
        private String subregionName;
        private @Nullable String vmId;
        private String vmState;
        public Builder() {}
        public Builder(GetVmStatesVmState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allVms = defaults.allVms;
    	      this.maintenanceEvents = defaults.maintenanceEvents;
    	      this.subregionName = defaults.subregionName;
    	      this.vmId = defaults.vmId;
    	      this.vmState = defaults.vmState;
        }

        @CustomType.Setter
        public Builder allVms(@Nullable Boolean allVms) {
            this.allVms = allVms;
            return this;
        }
        @CustomType.Setter
        public Builder maintenanceEvents(List<GetVmStatesVmStateMaintenanceEvent> maintenanceEvents) {
            this.maintenanceEvents = Objects.requireNonNull(maintenanceEvents);
            return this;
        }
        public Builder maintenanceEvents(GetVmStatesVmStateMaintenanceEvent... maintenanceEvents) {
            return maintenanceEvents(List.of(maintenanceEvents));
        }
        @CustomType.Setter
        public Builder subregionName(String subregionName) {
            this.subregionName = Objects.requireNonNull(subregionName);
            return this;
        }
        @CustomType.Setter
        public Builder vmId(@Nullable String vmId) {
            this.vmId = vmId;
            return this;
        }
        @CustomType.Setter
        public Builder vmState(String vmState) {
            this.vmState = Objects.requireNonNull(vmState);
            return this;
        }
        public GetVmStatesVmState build() {
            final var o = new GetVmStatesVmState();
            o.allVms = allVms;
            o.maintenanceEvents = maintenanceEvents;
            o.subregionName = subregionName;
            o.vmId = vmId;
            o.vmState = vmState;
            return o;
        }
    }
}
