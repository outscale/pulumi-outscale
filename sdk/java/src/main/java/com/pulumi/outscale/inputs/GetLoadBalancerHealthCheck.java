// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class GetLoadBalancerHealthCheck extends com.pulumi.resources.InvokeArgs {

    public static final GetLoadBalancerHealthCheck Empty = new GetLoadBalancerHealthCheck();

    /**
     * The number of seconds between two pings (between `5` and `600` both included).
     * 
     */
    @Import(name="checkInterval", required=true)
    private Integer checkInterval;

    /**
     * @return The number of seconds between two pings (between `5` and `600` both included).
     * 
     */
    public Integer checkInterval() {
        return this.checkInterval;
    }

    /**
     * The number of consecutive successful pings before considering the VM as healthy (between `2` and `10` both included).
     * 
     */
    @Import(name="healthyThreshold", required=true)
    private Integer healthyThreshold;

    /**
     * @return The number of consecutive successful pings before considering the VM as healthy (between `2` and `10` both included).
     * 
     */
    public Integer healthyThreshold() {
        return this.healthyThreshold;
    }

    /**
     * If you use the HTTP or HTTPS protocols, the ping path.
     * 
     */
    @Import(name="path", required=true)
    private String path;

    /**
     * @return If you use the HTTP or HTTPS protocols, the ping path.
     * 
     */
    public String path() {
        return this.path;
    }

    /**
     * The port number (between `1` and `65535`, both included).
     * 
     */
    @Import(name="port", required=true)
    private Integer port;

    /**
     * @return The port number (between `1` and `65535`, both included).
     * 
     */
    public Integer port() {
        return this.port;
    }

    /**
     * The protocol for the URL of the VM (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
     * 
     */
    @Import(name="protocol", required=true)
    private String protocol;

    /**
     * @return The protocol for the URL of the VM (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
     * 
     */
    public String protocol() {
        return this.protocol;
    }

    /**
     * The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
     * 
     */
    @Import(name="timeout", required=true)
    private Integer timeout;

    /**
     * @return The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }

    /**
     * The number of consecutive failed pings before considering the VM as unhealthy (between `2` and `10` both included).
     * 
     */
    @Import(name="unhealthyThreshold", required=true)
    private Integer unhealthyThreshold;

    /**
     * @return The number of consecutive failed pings before considering the VM as unhealthy (between `2` and `10` both included).
     * 
     */
    public Integer unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    private GetLoadBalancerHealthCheck() {}

    private GetLoadBalancerHealthCheck(GetLoadBalancerHealthCheck $) {
        this.checkInterval = $.checkInterval;
        this.healthyThreshold = $.healthyThreshold;
        this.path = $.path;
        this.port = $.port;
        this.protocol = $.protocol;
        this.timeout = $.timeout;
        this.unhealthyThreshold = $.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLoadBalancerHealthCheck defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLoadBalancerHealthCheck $;

        public Builder() {
            $ = new GetLoadBalancerHealthCheck();
        }

        public Builder(GetLoadBalancerHealthCheck defaults) {
            $ = new GetLoadBalancerHealthCheck(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkInterval The number of seconds between two pings (between `5` and `600` both included).
         * 
         * @return builder
         * 
         */
        public Builder checkInterval(Integer checkInterval) {
            $.checkInterval = checkInterval;
            return this;
        }

        /**
         * @param healthyThreshold The number of consecutive successful pings before considering the VM as healthy (between `2` and `10` both included).
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(Integer healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        /**
         * @param path If you use the HTTP or HTTPS protocols, the ping path.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            $.path = path;
            return this;
        }

        /**
         * @param port The port number (between `1` and `65535`, both included).
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            $.port = port;
            return this;
        }

        /**
         * @param protocol The protocol for the URL of the VM (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param timeout The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param unhealthyThreshold The number of consecutive failed pings before considering the VM as unhealthy (between `2` and `10` both included).
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        public GetLoadBalancerHealthCheck build() {
            $.checkInterval = Objects.requireNonNull($.checkInterval, "expected parameter 'checkInterval' to be non-null");
            $.healthyThreshold = Objects.requireNonNull($.healthyThreshold, "expected parameter 'healthyThreshold' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            $.port = Objects.requireNonNull($.port, "expected parameter 'port' to be non-null");
            $.protocol = Objects.requireNonNull($.protocol, "expected parameter 'protocol' to be non-null");
            $.timeout = Objects.requireNonNull($.timeout, "expected parameter 'timeout' to be non-null");
            $.unhealthyThreshold = Objects.requireNonNull($.unhealthyThreshold, "expected parameter 'unhealthyThreshold' to be non-null");
            return $;
        }
    }

}
