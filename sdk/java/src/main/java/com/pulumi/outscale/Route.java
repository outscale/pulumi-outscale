// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.outscale.RouteArgs;
import com.pulumi.outscale.Utilities;
import com.pulumi.outscale.inputs.RouteState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a route.
 * 
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Route-Tables.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-route).
 * 
 * ## Example Usage
 * ### Required resources
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.outscale.Net;
 * import com.pulumi.outscale.NetArgs;
 * import com.pulumi.outscale.RouteTable;
 * import com.pulumi.outscale.RouteTableArgs;
 * import com.pulumi.outscale.InternetService;
 * import com.pulumi.outscale.InternetServiceLink;
 * import com.pulumi.outscale.InternetServiceLinkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var net01 = new Net(&#34;net01&#34;, NetArgs.builder()        
 *             .ipRange(&#34;10.0.0.0/16&#34;)
 *             .build());
 * 
 *         var routeTable01 = new RouteTable(&#34;routeTable01&#34;, RouteTableArgs.builder()        
 *             .netId(net01.netId())
 *             .build());
 * 
 *         var internetService01 = new InternetService(&#34;internetService01&#34;);
 * 
 *         var internetServiceLink01 = new InternetServiceLink(&#34;internetServiceLink01&#34;, InternetServiceLinkArgs.builder()        
 *             .internetServiceId(internetService01.internetServiceId())
 *             .netId(net01.netId())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Create a route to an Internet service
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.outscale.Route;
 * import com.pulumi.outscale.RouteArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var route01 = new Route(&#34;route01&#34;, RouteArgs.builder()        
 *             .gatewayId(outscale_internet_service.internet_service01().internet_service_id())
 *             .destinationIpRange(&#34;0.0.0.0/0&#34;)
 *             .routeTableId(outscale_route_table.route_table01().route_table_id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * A route can be imported using the route table ID and the destination IP range. For exampleconsole
 * 
 * ```sh
 *  $ pulumi import outscale:index/route:Route outscale_routeImportedRoute rtb-12345678_10.0.0.0/0
 * ```
 * 
 */
@ResourceType(type="outscale:index/route:Route")
public class Route extends com.pulumi.resources.CustomResource {
    /**
     * By default or if set to true, waits for the route to be in the `active` state to declare its successful creation.&lt;br /&gt;If false, the created route is in the `active` state if available, or the `blackhole` state if not available.
     * 
     */
    @Export(name="awaitActiveState", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> awaitActiveState;

    /**
     * @return By default or if set to true, waits for the route to be in the `active` state to declare its successful creation.&lt;br /&gt;If false, the created route is in the `active` state if available, or the `blackhole` state if not available.
     * 
     */
    public Output<Optional<Boolean>> awaitActiveState() {
        return Codegen.optional(this.awaitActiveState);
    }
    /**
     * The method used to create the route.
     * 
     */
    @Export(name="creationMethod", refs={String.class}, tree="[0]")
    private Output<String> creationMethod;

    /**
     * @return The method used to create the route.
     * 
     */
    public Output<String> creationMethod() {
        return this.creationMethod;
    }
    /**
     * The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
     * 
     */
    @Export(name="destinationIpRange", refs={String.class}, tree="[0]")
    private Output<String> destinationIpRange;

    /**
     * @return The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
     * 
     */
    public Output<String> destinationIpRange() {
        return this.destinationIpRange;
    }
    /**
     * The ID of the OUTSCALE service.
     * 
     */
    @Export(name="destinationServiceId", refs={String.class}, tree="[0]")
    private Output<String> destinationServiceId;

    /**
     * @return The ID of the OUTSCALE service.
     * 
     */
    public Output<String> destinationServiceId() {
        return this.destinationServiceId;
    }
    /**
     * The ID of an Internet service or virtual gateway attached to your Net.
     * 
     */
    @Export(name="gatewayId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> gatewayId;

    /**
     * @return The ID of an Internet service or virtual gateway attached to your Net.
     * 
     */
    public Output<Optional<String>> gatewayId() {
        return Codegen.optional(this.gatewayId);
    }
    @Export(name="natAccessPoint", refs={String.class}, tree="[0]")
    private Output<String> natAccessPoint;

    public Output<String> natAccessPoint() {
        return this.natAccessPoint;
    }
    /**
     * The ID of a NAT service.
     * 
     */
    @Export(name="natServiceId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> natServiceId;

    /**
     * @return The ID of a NAT service.
     * 
     */
    public Output<Optional<String>> natServiceId() {
        return Codegen.optional(this.natServiceId);
    }
    /**
     * The ID of a Net peering.
     * 
     */
    @Export(name="netPeeringId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> netPeeringId;

    /**
     * @return The ID of a Net peering.
     * 
     */
    public Output<Optional<String>> netPeeringId() {
        return Codegen.optional(this.netPeeringId);
    }
    /**
     * The ID of a NIC.
     * 
     */
    @Export(name="nicId", refs={String.class}, tree="[0]")
    private Output<String> nicId;

    /**
     * @return The ID of a NIC.
     * 
     */
    public Output<String> nicId() {
        return this.nicId;
    }
    @Export(name="requestId", refs={String.class}, tree="[0]")
    private Output<String> requestId;

    public Output<String> requestId() {
        return this.requestId;
    }
    /**
     * The ID of the route table for which you want to create a route.
     * 
     */
    @Export(name="routeTableId", refs={String.class}, tree="[0]")
    private Output<String> routeTableId;

    /**
     * @return The ID of the route table for which you want to create a route.
     * 
     */
    public Output<String> routeTableId() {
        return this.routeTableId;
    }
    /**
     * The state of a route in the route table (always `active`).
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The state of a route in the route table (always `active`).
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The account ID of the owner of the VM.
     * 
     */
    @Export(name="vmAccountId", refs={String.class}, tree="[0]")
    private Output<String> vmAccountId;

    /**
     * @return The account ID of the owner of the VM.
     * 
     */
    public Output<String> vmAccountId() {
        return this.vmAccountId;
    }
    /**
     * The ID of a NAT VM in your Net (attached to exactly one NIC).
     * 
     */
    @Export(name="vmId", refs={String.class}, tree="[0]")
    private Output<String> vmId;

    /**
     * @return The ID of a NAT VM in your Net (attached to exactly one NIC).
     * 
     */
    public Output<String> vmId() {
        return this.vmId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Route(String name) {
        this(name, RouteArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Route(String name, RouteArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Route(String name, RouteArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("outscale:index/route:Route", name, args == null ? RouteArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Route(String name, Output<String> id, @Nullable RouteState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("outscale:index/route:Route", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Route get(String name, Output<String> id, @Nullable RouteState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Route(name, id, state, options);
    }
}
