// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVmTypesVmType {
    /**
     * @return This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
     * 
     */
    private Boolean bsuOptimized;
    /**
     * @return The maximum number of private IPs per network interface card (NIC).
     * 
     */
    private Integer maxPrivateIps;
    /**
     * @return The amount of memory, in gibibytes.
     * 
     */
    private Integer memorySize;
    /**
     * @return The number of vCores.
     * 
     */
    private Integer vcoreCount;
    /**
     * @return The name of the VM type.
     * 
     */
    private String vmTypeName;
    /**
     * @return The maximum number of ephemeral storage disks.
     * 
     */
    private Integer volumeCount;
    /**
     * @return The size of one ephemeral storage disk, in gibibytes (GiB).
     * 
     */
    private Integer volumeSize;

    private GetVmTypesVmType() {}
    /**
     * @return This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
     * 
     */
    public Boolean bsuOptimized() {
        return this.bsuOptimized;
    }
    /**
     * @return The maximum number of private IPs per network interface card (NIC).
     * 
     */
    public Integer maxPrivateIps() {
        return this.maxPrivateIps;
    }
    /**
     * @return The amount of memory, in gibibytes.
     * 
     */
    public Integer memorySize() {
        return this.memorySize;
    }
    /**
     * @return The number of vCores.
     * 
     */
    public Integer vcoreCount() {
        return this.vcoreCount;
    }
    /**
     * @return The name of the VM type.
     * 
     */
    public String vmTypeName() {
        return this.vmTypeName;
    }
    /**
     * @return The maximum number of ephemeral storage disks.
     * 
     */
    public Integer volumeCount() {
        return this.volumeCount;
    }
    /**
     * @return The size of one ephemeral storage disk, in gibibytes (GiB).
     * 
     */
    public Integer volumeSize() {
        return this.volumeSize;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVmTypesVmType defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean bsuOptimized;
        private Integer maxPrivateIps;
        private Integer memorySize;
        private Integer vcoreCount;
        private String vmTypeName;
        private Integer volumeCount;
        private Integer volumeSize;
        public Builder() {}
        public Builder(GetVmTypesVmType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bsuOptimized = defaults.bsuOptimized;
    	      this.maxPrivateIps = defaults.maxPrivateIps;
    	      this.memorySize = defaults.memorySize;
    	      this.vcoreCount = defaults.vcoreCount;
    	      this.vmTypeName = defaults.vmTypeName;
    	      this.volumeCount = defaults.volumeCount;
    	      this.volumeSize = defaults.volumeSize;
        }

        @CustomType.Setter
        public Builder bsuOptimized(Boolean bsuOptimized) {
            this.bsuOptimized = Objects.requireNonNull(bsuOptimized);
            return this;
        }
        @CustomType.Setter
        public Builder maxPrivateIps(Integer maxPrivateIps) {
            this.maxPrivateIps = Objects.requireNonNull(maxPrivateIps);
            return this;
        }
        @CustomType.Setter
        public Builder memorySize(Integer memorySize) {
            this.memorySize = Objects.requireNonNull(memorySize);
            return this;
        }
        @CustomType.Setter
        public Builder vcoreCount(Integer vcoreCount) {
            this.vcoreCount = Objects.requireNonNull(vcoreCount);
            return this;
        }
        @CustomType.Setter
        public Builder vmTypeName(String vmTypeName) {
            this.vmTypeName = Objects.requireNonNull(vmTypeName);
            return this;
        }
        @CustomType.Setter
        public Builder volumeCount(Integer volumeCount) {
            this.volumeCount = Objects.requireNonNull(volumeCount);
            return this;
        }
        @CustomType.Setter
        public Builder volumeSize(Integer volumeSize) {
            this.volumeSize = Objects.requireNonNull(volumeSize);
            return this;
        }
        public GetVmTypesVmType build() {
            final var o = new GetVmTypesVmType();
            o.bsuOptimized = bsuOptimized;
            o.maxPrivateIps = maxPrivateIps;
            o.memorySize = memorySize;
            o.vcoreCount = vcoreCount;
            o.vmTypeName = vmTypeName;
            o.volumeCount = volumeCount;
            o.volumeSize = volumeSize;
            return o;
        }
    }
}
