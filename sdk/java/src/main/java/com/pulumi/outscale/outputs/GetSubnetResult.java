// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.outscale.outputs.GetSubnetFilter;
import com.pulumi.outscale.outputs.GetSubnetTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetSubnetResult {
    /**
     * @return The number of available IPs in the Subnets.
     * 
     */
    private Integer availableIpsCount;
    private @Nullable List<GetSubnetFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).
     * 
     */
    private String ipRange;
    /**
     * @return If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.
     * 
     */
    private Boolean mapPublicIpOnLaunch;
    /**
     * @return The ID of the Net in which the Subnet is.
     * 
     */
    private String netId;
    private String requestId;
    /**
     * @return The state of the Subnet (`pending` \| `available` \| `deleted`).
     * 
     */
    private String state;
    /**
     * @return The ID of the Subnet.
     * 
     */
    private String subnetId;
    /**
     * @return The name of the Subregion in which the Subnet is located.
     * 
     */
    private String subregionName;
    /**
     * @return One or more tags associated with the Subnet.
     * 
     */
    private List<GetSubnetTag> tags;

    private GetSubnetResult() {}
    /**
     * @return The number of available IPs in the Subnets.
     * 
     */
    public Integer availableIpsCount() {
        return this.availableIpsCount;
    }
    public List<GetSubnetFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).
     * 
     */
    public String ipRange() {
        return this.ipRange;
    }
    /**
     * @return If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.
     * 
     */
    public Boolean mapPublicIpOnLaunch() {
        return this.mapPublicIpOnLaunch;
    }
    /**
     * @return The ID of the Net in which the Subnet is.
     * 
     */
    public String netId() {
        return this.netId;
    }
    public String requestId() {
        return this.requestId;
    }
    /**
     * @return The state of the Subnet (`pending` \| `available` \| `deleted`).
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The ID of the Subnet.
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return The name of the Subregion in which the Subnet is located.
     * 
     */
    public String subregionName() {
        return this.subregionName;
    }
    /**
     * @return One or more tags associated with the Subnet.
     * 
     */
    public List<GetSubnetTag> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubnetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer availableIpsCount;
        private @Nullable List<GetSubnetFilter> filters;
        private String id;
        private String ipRange;
        private Boolean mapPublicIpOnLaunch;
        private String netId;
        private String requestId;
        private String state;
        private String subnetId;
        private String subregionName;
        private List<GetSubnetTag> tags;
        public Builder() {}
        public Builder(GetSubnetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availableIpsCount = defaults.availableIpsCount;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.ipRange = defaults.ipRange;
    	      this.mapPublicIpOnLaunch = defaults.mapPublicIpOnLaunch;
    	      this.netId = defaults.netId;
    	      this.requestId = defaults.requestId;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
    	      this.subregionName = defaults.subregionName;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder availableIpsCount(Integer availableIpsCount) {
            this.availableIpsCount = Objects.requireNonNull(availableIpsCount);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSubnetFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetSubnetFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ipRange(String ipRange) {
            this.ipRange = Objects.requireNonNull(ipRange);
            return this;
        }
        @CustomType.Setter
        public Builder mapPublicIpOnLaunch(Boolean mapPublicIpOnLaunch) {
            this.mapPublicIpOnLaunch = Objects.requireNonNull(mapPublicIpOnLaunch);
            return this;
        }
        @CustomType.Setter
        public Builder netId(String netId) {
            this.netId = Objects.requireNonNull(netId);
            return this;
        }
        @CustomType.Setter
        public Builder requestId(String requestId) {
            this.requestId = Objects.requireNonNull(requestId);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            this.subnetId = Objects.requireNonNull(subnetId);
            return this;
        }
        @CustomType.Setter
        public Builder subregionName(String subregionName) {
            this.subregionName = Objects.requireNonNull(subregionName);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetSubnetTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetSubnetTag... tags) {
            return tags(List.of(tags));
        }
        public GetSubnetResult build() {
            final var o = new GetSubnetResult();
            o.availableIpsCount = availableIpsCount;
            o.filters = filters;
            o.id = id;
            o.ipRange = ipRange;
            o.mapPublicIpOnLaunch = mapPublicIpOnLaunch;
            o.netId = netId;
            o.requestId = requestId;
            o.state = state;
            o.subnetId = subnetId;
            o.subregionName = subregionName;
            o.tags = tags;
            return o;
        }
    }
}
