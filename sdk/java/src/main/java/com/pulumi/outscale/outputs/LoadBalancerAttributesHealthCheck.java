// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerAttributesHealthCheck {
    /**
     * @return The number of seconds between two pings (between `5` and `600` both included).
     * 
     */
    private @Nullable Integer checkInterval;
    /**
     * @return The number of consecutive successful pings before considering the VM as healthy (between `2` and `10` both included).
     * 
     */
    private @Nullable Integer healthyThreshold;
    /**
     * @return If you use the HTTP or HTTPS protocols, the ping path.
     * 
     */
    private @Nullable String path;
    /**
     * @return The port number (between `1` and `65535`, both included).
     * 
     */
    private Integer port;
    /**
     * @return The protocol for the URL of the VM (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
     * 
     */
    private String protocol;
    /**
     * @return The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
     * 
     */
    private @Nullable Integer timeout;
    /**
     * @return The number of consecutive failed pings before considering the VM as unhealthy (between `2` and `10` both included).
     * 
     */
    private @Nullable Integer unhealthyThreshold;

    private LoadBalancerAttributesHealthCheck() {}
    /**
     * @return The number of seconds between two pings (between `5` and `600` both included).
     * 
     */
    public Optional<Integer> checkInterval() {
        return Optional.ofNullable(this.checkInterval);
    }
    /**
     * @return The number of consecutive successful pings before considering the VM as healthy (between `2` and `10` both included).
     * 
     */
    public Optional<Integer> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }
    /**
     * @return If you use the HTTP or HTTPS protocols, the ping path.
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return The port number (between `1` and `65535`, both included).
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The protocol for the URL of the VM (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    /**
     * @return The number of consecutive failed pings before considering the VM as unhealthy (between `2` and `10` both included).
     * 
     */
    public Optional<Integer> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerAttributesHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer checkInterval;
        private @Nullable Integer healthyThreshold;
        private @Nullable String path;
        private Integer port;
        private String protocol;
        private @Nullable Integer timeout;
        private @Nullable Integer unhealthyThreshold;
        public Builder() {}
        public Builder(LoadBalancerAttributesHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkInterval = defaults.checkInterval;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.timeout = defaults.timeout;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        @CustomType.Setter
        public Builder checkInterval(@Nullable Integer checkInterval) {
            this.checkInterval = checkInterval;
            return this;
        }
        @CustomType.Setter
        public Builder healthyThreshold(@Nullable Integer healthyThreshold) {
            this.healthyThreshold = healthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            this.protocol = Objects.requireNonNull(protocol);
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(@Nullable Integer unhealthyThreshold) {
            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        public LoadBalancerAttributesHealthCheck build() {
            final var o = new LoadBalancerAttributesHealthCheck();
            o.checkInterval = checkInterval;
            o.healthyThreshold = healthyThreshold;
            o.path = path;
            o.port = port;
            o.protocol = protocol;
            o.timeout = timeout;
            o.unhealthyThreshold = unhealthyThreshold;
            return o;
        }
    }
}
