// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.SnapshotTagArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnapshotArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnapshotArgs Empty = new SnapshotArgs();

    /**
     * A description for the snapshot.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the snapshot.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
     * 
     */
    @Import(name="fileLocation")
    private @Nullable Output<String> fileLocation;

    /**
     * @return (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
     * 
     */
    public Optional<Output<String>> fileLocation() {
        return Optional.ofNullable(this.fileLocation);
    }

    /**
     * (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
     * 
     */
    @Import(name="snapshotSize")
    private @Nullable Output<Integer> snapshotSize;

    /**
     * @return (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
     * 
     */
    public Optional<Output<Integer>> snapshotSize() {
        return Optional.ofNullable(this.snapshotSize);
    }

    /**
     * (When copying) The name of the source Region, which must be the same as the Region of your account.
     * 
     */
    @Import(name="sourceRegionName")
    private @Nullable Output<String> sourceRegionName;

    /**
     * @return (When copying) The name of the source Region, which must be the same as the Region of your account.
     * 
     */
    public Optional<Output<String>> sourceRegionName() {
        return Optional.ofNullable(this.sourceRegionName);
    }

    /**
     * (When copying) The ID of the snapshot you want to copy.
     * 
     */
    @Import(name="sourceSnapshotId")
    private @Nullable Output<String> sourceSnapshotId;

    /**
     * @return (When copying) The ID of the snapshot you want to copy.
     * 
     */
    public Optional<Output<String>> sourceSnapshotId() {
        return Optional.ofNullable(this.sourceSnapshotId);
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<SnapshotTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<SnapshotTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * (When creating) The ID of the volume you want to create a snapshot of.
     * 
     */
    @Import(name="volumeId")
    private @Nullable Output<String> volumeId;

    /**
     * @return (When creating) The ID of the volume you want to create a snapshot of.
     * 
     */
    public Optional<Output<String>> volumeId() {
        return Optional.ofNullable(this.volumeId);
    }

    private SnapshotArgs() {}

    private SnapshotArgs(SnapshotArgs $) {
        this.description = $.description;
        this.fileLocation = $.fileLocation;
        this.snapshotSize = $.snapshotSize;
        this.sourceRegionName = $.sourceRegionName;
        this.sourceSnapshotId = $.sourceSnapshotId;
        this.tags = $.tags;
        this.volumeId = $.volumeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnapshotArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnapshotArgs $;

        public Builder() {
            $ = new SnapshotArgs();
        }

        public Builder(SnapshotArgs defaults) {
            $ = new SnapshotArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description A description for the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fileLocation (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
         * 
         * @return builder
         * 
         */
        public Builder fileLocation(@Nullable Output<String> fileLocation) {
            $.fileLocation = fileLocation;
            return this;
        }

        /**
         * @param fileLocation (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
         * 
         * @return builder
         * 
         */
        public Builder fileLocation(String fileLocation) {
            return fileLocation(Output.of(fileLocation));
        }

        /**
         * @param snapshotSize (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotSize(@Nullable Output<Integer> snapshotSize) {
            $.snapshotSize = snapshotSize;
            return this;
        }

        /**
         * @param snapshotSize (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotSize(Integer snapshotSize) {
            return snapshotSize(Output.of(snapshotSize));
        }

        /**
         * @param sourceRegionName (When copying) The name of the source Region, which must be the same as the Region of your account.
         * 
         * @return builder
         * 
         */
        public Builder sourceRegionName(@Nullable Output<String> sourceRegionName) {
            $.sourceRegionName = sourceRegionName;
            return this;
        }

        /**
         * @param sourceRegionName (When copying) The name of the source Region, which must be the same as the Region of your account.
         * 
         * @return builder
         * 
         */
        public Builder sourceRegionName(String sourceRegionName) {
            return sourceRegionName(Output.of(sourceRegionName));
        }

        /**
         * @param sourceSnapshotId (When copying) The ID of the snapshot you want to copy.
         * 
         * @return builder
         * 
         */
        public Builder sourceSnapshotId(@Nullable Output<String> sourceSnapshotId) {
            $.sourceSnapshotId = sourceSnapshotId;
            return this;
        }

        /**
         * @param sourceSnapshotId (When copying) The ID of the snapshot you want to copy.
         * 
         * @return builder
         * 
         */
        public Builder sourceSnapshotId(String sourceSnapshotId) {
            return sourceSnapshotId(Output.of(sourceSnapshotId));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<SnapshotTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<SnapshotTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(SnapshotTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param volumeId (When creating) The ID of the volume you want to create a snapshot of.
         * 
         * @return builder
         * 
         */
        public Builder volumeId(@Nullable Output<String> volumeId) {
            $.volumeId = volumeId;
            return this;
        }

        /**
         * @param volumeId (When creating) The ID of the volume you want to create a snapshot of.
         * 
         * @return builder
         * 
         */
        public Builder volumeId(String volumeId) {
            return volumeId(Output.of(volumeId));
        }

        public SnapshotArgs build() {
            return $;
        }
    }

}
