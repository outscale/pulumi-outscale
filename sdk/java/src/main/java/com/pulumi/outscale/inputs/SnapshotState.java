// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.SnapshotPermissionsToCreateVolumeArgs;
import com.pulumi.outscale.inputs.SnapshotTagArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnapshotState extends com.pulumi.resources.ResourceArgs {

    public static final SnapshotState Empty = new SnapshotState();

    /**
     * The account alias of the owner of the snapshot.
     * 
     */
    @Import(name="accountAlias")
    private @Nullable Output<String> accountAlias;

    /**
     * @return The account alias of the owner of the snapshot.
     * 
     */
    public Optional<Output<String>> accountAlias() {
        return Optional.ofNullable(this.accountAlias);
    }

    /**
     * The account ID of the owner of the snapshot.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account ID of the owner of the snapshot.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The date and time of creation of the snapshot.
     * 
     */
    @Import(name="creationDate")
    private @Nullable Output<String> creationDate;

    /**
     * @return The date and time of creation of the snapshot.
     * 
     */
    public Optional<Output<String>> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }

    /**
     * A description for the snapshot.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the snapshot.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
     * 
     */
    @Import(name="fileLocation")
    private @Nullable Output<String> fileLocation;

    /**
     * @return (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
     * 
     */
    public Optional<Output<String>> fileLocation() {
        return Optional.ofNullable(this.fileLocation);
    }

    /**
     * Permissions for the resource.
     * 
     */
    @Import(name="permissionsToCreateVolumes")
    private @Nullable Output<List<SnapshotPermissionsToCreateVolumeArgs>> permissionsToCreateVolumes;

    /**
     * @return Permissions for the resource.
     * 
     */
    public Optional<Output<List<SnapshotPermissionsToCreateVolumeArgs>>> permissionsToCreateVolumes() {
        return Optional.ofNullable(this.permissionsToCreateVolumes);
    }

    /**
     * The progress of the snapshot, as a percentage.
     * 
     */
    @Import(name="progress")
    private @Nullable Output<Integer> progress;

    /**
     * @return The progress of the snapshot, as a percentage.
     * 
     */
    public Optional<Output<Integer>> progress() {
        return Optional.ofNullable(this.progress);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * The ID of the snapshot.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return The ID of the snapshot.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
     * 
     */
    @Import(name="snapshotSize")
    private @Nullable Output<Integer> snapshotSize;

    /**
     * @return (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
     * 
     */
    public Optional<Output<Integer>> snapshotSize() {
        return Optional.ofNullable(this.snapshotSize);
    }

    /**
     * (When copying) The name of the source Region, which must be the same as the Region of your account.
     * 
     */
    @Import(name="sourceRegionName")
    private @Nullable Output<String> sourceRegionName;

    /**
     * @return (When copying) The name of the source Region, which must be the same as the Region of your account.
     * 
     */
    public Optional<Output<String>> sourceRegionName() {
        return Optional.ofNullable(this.sourceRegionName);
    }

    /**
     * (When copying) The ID of the snapshot you want to copy.
     * 
     */
    @Import(name="sourceSnapshotId")
    private @Nullable Output<String> sourceSnapshotId;

    /**
     * @return (When copying) The ID of the snapshot you want to copy.
     * 
     */
    public Optional<Output<String>> sourceSnapshotId() {
        return Optional.ofNullable(this.sourceSnapshotId);
    }

    /**
     * The state of the snapshot (`in-queue` \| `completed` \| `error`).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the snapshot (`in-queue` \| `completed` \| `error`).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<SnapshotTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<SnapshotTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * (When creating) The ID of the volume you want to create a snapshot of.
     * 
     */
    @Import(name="volumeId")
    private @Nullable Output<String> volumeId;

    /**
     * @return (When creating) The ID of the volume you want to create a snapshot of.
     * 
     */
    public Optional<Output<String>> volumeId() {
        return Optional.ofNullable(this.volumeId);
    }

    /**
     * The size of the volume used to create the snapshot, in gibibytes (GiB).
     * 
     */
    @Import(name="volumeSize")
    private @Nullable Output<Integer> volumeSize;

    /**
     * @return The size of the volume used to create the snapshot, in gibibytes (GiB).
     * 
     */
    public Optional<Output<Integer>> volumeSize() {
        return Optional.ofNullable(this.volumeSize);
    }

    private SnapshotState() {}

    private SnapshotState(SnapshotState $) {
        this.accountAlias = $.accountAlias;
        this.accountId = $.accountId;
        this.creationDate = $.creationDate;
        this.description = $.description;
        this.fileLocation = $.fileLocation;
        this.permissionsToCreateVolumes = $.permissionsToCreateVolumes;
        this.progress = $.progress;
        this.requestId = $.requestId;
        this.snapshotId = $.snapshotId;
        this.snapshotSize = $.snapshotSize;
        this.sourceRegionName = $.sourceRegionName;
        this.sourceSnapshotId = $.sourceSnapshotId;
        this.state = $.state;
        this.tags = $.tags;
        this.volumeId = $.volumeId;
        this.volumeSize = $.volumeSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnapshotState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnapshotState $;

        public Builder() {
            $ = new SnapshotState();
        }

        public Builder(SnapshotState defaults) {
            $ = new SnapshotState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountAlias The account alias of the owner of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder accountAlias(@Nullable Output<String> accountAlias) {
            $.accountAlias = accountAlias;
            return this;
        }

        /**
         * @param accountAlias The account alias of the owner of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder accountAlias(String accountAlias) {
            return accountAlias(Output.of(accountAlias));
        }

        /**
         * @param accountId The account ID of the owner of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account ID of the owner of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param creationDate The date and time of creation of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder creationDate(@Nullable Output<String> creationDate) {
            $.creationDate = creationDate;
            return this;
        }

        /**
         * @param creationDate The date and time of creation of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder creationDate(String creationDate) {
            return creationDate(Output.of(creationDate));
        }

        /**
         * @param description A description for the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fileLocation (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
         * 
         * @return builder
         * 
         */
        public Builder fileLocation(@Nullable Output<String> fileLocation) {
            $.fileLocation = fileLocation;
            return this;
        }

        /**
         * @param fileLocation (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
         * 
         * @return builder
         * 
         */
        public Builder fileLocation(String fileLocation) {
            return fileLocation(Output.of(fileLocation));
        }

        /**
         * @param permissionsToCreateVolumes Permissions for the resource.
         * 
         * @return builder
         * 
         */
        public Builder permissionsToCreateVolumes(@Nullable Output<List<SnapshotPermissionsToCreateVolumeArgs>> permissionsToCreateVolumes) {
            $.permissionsToCreateVolumes = permissionsToCreateVolumes;
            return this;
        }

        /**
         * @param permissionsToCreateVolumes Permissions for the resource.
         * 
         * @return builder
         * 
         */
        public Builder permissionsToCreateVolumes(List<SnapshotPermissionsToCreateVolumeArgs> permissionsToCreateVolumes) {
            return permissionsToCreateVolumes(Output.of(permissionsToCreateVolumes));
        }

        /**
         * @param permissionsToCreateVolumes Permissions for the resource.
         * 
         * @return builder
         * 
         */
        public Builder permissionsToCreateVolumes(SnapshotPermissionsToCreateVolumeArgs... permissionsToCreateVolumes) {
            return permissionsToCreateVolumes(List.of(permissionsToCreateVolumes));
        }

        /**
         * @param progress The progress of the snapshot, as a percentage.
         * 
         * @return builder
         * 
         */
        public Builder progress(@Nullable Output<Integer> progress) {
            $.progress = progress;
            return this;
        }

        /**
         * @param progress The progress of the snapshot, as a percentage.
         * 
         * @return builder
         * 
         */
        public Builder progress(Integer progress) {
            return progress(Output.of(progress));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param snapshotId The ID of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId The ID of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param snapshotSize (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotSize(@Nullable Output<Integer> snapshotSize) {
            $.snapshotSize = snapshotSize;
            return this;
        }

        /**
         * @param snapshotSize (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotSize(Integer snapshotSize) {
            return snapshotSize(Output.of(snapshotSize));
        }

        /**
         * @param sourceRegionName (When copying) The name of the source Region, which must be the same as the Region of your account.
         * 
         * @return builder
         * 
         */
        public Builder sourceRegionName(@Nullable Output<String> sourceRegionName) {
            $.sourceRegionName = sourceRegionName;
            return this;
        }

        /**
         * @param sourceRegionName (When copying) The name of the source Region, which must be the same as the Region of your account.
         * 
         * @return builder
         * 
         */
        public Builder sourceRegionName(String sourceRegionName) {
            return sourceRegionName(Output.of(sourceRegionName));
        }

        /**
         * @param sourceSnapshotId (When copying) The ID of the snapshot you want to copy.
         * 
         * @return builder
         * 
         */
        public Builder sourceSnapshotId(@Nullable Output<String> sourceSnapshotId) {
            $.sourceSnapshotId = sourceSnapshotId;
            return this;
        }

        /**
         * @param sourceSnapshotId (When copying) The ID of the snapshot you want to copy.
         * 
         * @return builder
         * 
         */
        public Builder sourceSnapshotId(String sourceSnapshotId) {
            return sourceSnapshotId(Output.of(sourceSnapshotId));
        }

        /**
         * @param state The state of the snapshot (`in-queue` \| `completed` \| `error`).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the snapshot (`in-queue` \| `completed` \| `error`).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<SnapshotTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<SnapshotTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(SnapshotTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param volumeId (When creating) The ID of the volume you want to create a snapshot of.
         * 
         * @return builder
         * 
         */
        public Builder volumeId(@Nullable Output<String> volumeId) {
            $.volumeId = volumeId;
            return this;
        }

        /**
         * @param volumeId (When creating) The ID of the volume you want to create a snapshot of.
         * 
         * @return builder
         * 
         */
        public Builder volumeId(String volumeId) {
            return volumeId(Output.of(volumeId));
        }

        /**
         * @param volumeSize The size of the volume used to create the snapshot, in gibibytes (GiB).
         * 
         * @return builder
         * 
         */
        public Builder volumeSize(@Nullable Output<Integer> volumeSize) {
            $.volumeSize = volumeSize;
            return this;
        }

        /**
         * @param volumeSize The size of the volume used to create the snapshot, in gibibytes (GiB).
         * 
         * @return builder
         * 
         */
        public Builder volumeSize(Integer volumeSize) {
            return volumeSize(Output.of(volumeSize));
        }

        public SnapshotState build() {
            return $;
        }
    }

}
