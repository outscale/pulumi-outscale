// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.GetSnapshotsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetSnapshotsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetSnapshotsArgs Empty = new GetSnapshotsArgs();

    /**
     * The account ID of the owner of the snapshot.
     * 
     */
    @Import(name="accountIds")
    private @Nullable Output<List<String>> accountIds;

    /**
     * @return The account ID of the owner of the snapshot.
     * 
     */
    public Optional<Output<List<String>>> accountIds() {
        return Optional.ofNullable(this.accountIds);
    }

    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<GetSnapshotsFilterArgs>> filters;

    /**
     * @return A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    public Optional<Output<List<GetSnapshotsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    @Import(name="permissionToCreateVolumes")
    private @Nullable Output<List<String>> permissionToCreateVolumes;

    public Optional<Output<List<String>>> permissionToCreateVolumes() {
        return Optional.ofNullable(this.permissionToCreateVolumes);
    }

    /**
     * The ID of the snapshot.
     * 
     */
    @Import(name="snapshotIds")
    private @Nullable Output<List<String>> snapshotIds;

    /**
     * @return The ID of the snapshot.
     * 
     */
    public Optional<Output<List<String>>> snapshotIds() {
        return Optional.ofNullable(this.snapshotIds);
    }

    private GetSnapshotsArgs() {}

    private GetSnapshotsArgs(GetSnapshotsArgs $) {
        this.accountIds = $.accountIds;
        this.filters = $.filters;
        this.permissionToCreateVolumes = $.permissionToCreateVolumes;
        this.snapshotIds = $.snapshotIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetSnapshotsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetSnapshotsArgs $;

        public Builder() {
            $ = new GetSnapshotsArgs();
        }

        public Builder(GetSnapshotsArgs defaults) {
            $ = new GetSnapshotsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountIds The account ID of the owner of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder accountIds(@Nullable Output<List<String>> accountIds) {
            $.accountIds = accountIds;
            return this;
        }

        /**
         * @param accountIds The account ID of the owner of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder accountIds(List<String> accountIds) {
            return accountIds(Output.of(accountIds));
        }

        /**
         * @param accountIds The account ID of the owner of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder accountIds(String... accountIds) {
            return accountIds(List.of(accountIds));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<GetSnapshotsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(List<GetSnapshotsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(GetSnapshotsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        public Builder permissionToCreateVolumes(@Nullable Output<List<String>> permissionToCreateVolumes) {
            $.permissionToCreateVolumes = permissionToCreateVolumes;
            return this;
        }

        public Builder permissionToCreateVolumes(List<String> permissionToCreateVolumes) {
            return permissionToCreateVolumes(Output.of(permissionToCreateVolumes));
        }

        public Builder permissionToCreateVolumes(String... permissionToCreateVolumes) {
            return permissionToCreateVolumes(List.of(permissionToCreateVolumes));
        }

        /**
         * @param snapshotIds The ID of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotIds(@Nullable Output<List<String>> snapshotIds) {
            $.snapshotIds = snapshotIds;
            return this;
        }

        /**
         * @param snapshotIds The ID of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotIds(List<String> snapshotIds) {
            return snapshotIds(Output.of(snapshotIds));
        }

        /**
         * @param snapshotIds The ID of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotIds(String... snapshotIds) {
            return snapshotIds(List.of(snapshotIds));
        }

        public GetSnapshotsArgs build() {
            return $;
        }
    }

}
