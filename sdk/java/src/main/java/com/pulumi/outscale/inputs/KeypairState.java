// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KeypairState extends com.pulumi.resources.ResourceArgs {

    public static final KeypairState Empty = new KeypairState();

    /**
     * The MD5 public key fingerprint as specified in section 4 of RFC 4716.
     * 
     */
    @Import(name="keypairFingerprint")
    private @Nullable Output<String> keypairFingerprint;

    /**
     * @return The MD5 public key fingerprint as specified in section 4 of RFC 4716.
     * 
     */
    public Optional<Output<String>> keypairFingerprint() {
        return Optional.ofNullable(this.keypairFingerprint);
    }

    /**
     * A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
     * 
     */
    @Import(name="keypairName")
    private @Nullable Output<String> keypairName;

    /**
     * @return A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
     * 
     */
    public Optional<Output<String>> keypairName() {
        return Optional.ofNullable(this.keypairName);
    }

    /**
     * The private key. When saving the private key in a .rsa file, replace the `\n` escape sequences with line breaks.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The private key. When saving the private key in a .rsa file, replace the `\n` escape sequences with line breaks.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * The public key. It must be Base64-encoded.
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return The public key. It must be Base64-encoded.
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    private KeypairState() {}

    private KeypairState(KeypairState $) {
        this.keypairFingerprint = $.keypairFingerprint;
        this.keypairName = $.keypairName;
        this.privateKey = $.privateKey;
        this.publicKey = $.publicKey;
        this.requestId = $.requestId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KeypairState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KeypairState $;

        public Builder() {
            $ = new KeypairState();
        }

        public Builder(KeypairState defaults) {
            $ = new KeypairState(Objects.requireNonNull(defaults));
        }

        /**
         * @param keypairFingerprint The MD5 public key fingerprint as specified in section 4 of RFC 4716.
         * 
         * @return builder
         * 
         */
        public Builder keypairFingerprint(@Nullable Output<String> keypairFingerprint) {
            $.keypairFingerprint = keypairFingerprint;
            return this;
        }

        /**
         * @param keypairFingerprint The MD5 public key fingerprint as specified in section 4 of RFC 4716.
         * 
         * @return builder
         * 
         */
        public Builder keypairFingerprint(String keypairFingerprint) {
            return keypairFingerprint(Output.of(keypairFingerprint));
        }

        /**
         * @param keypairName A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
         * 
         * @return builder
         * 
         */
        public Builder keypairName(@Nullable Output<String> keypairName) {
            $.keypairName = keypairName;
            return this;
        }

        /**
         * @param keypairName A unique name for the keypair, with a maximum length of 255 [ASCII printable characters](https://en.wikipedia.org/wiki/ASCII#Printable_characters).
         * 
         * @return builder
         * 
         */
        public Builder keypairName(String keypairName) {
            return keypairName(Output.of(keypairName));
        }

        /**
         * @param privateKey The private key. When saving the private key in a .rsa file, replace the `\n` escape sequences with line breaks.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The private key. When saving the private key in a .rsa file, replace the `\n` escape sequences with line breaks.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param publicKey The public key. It must be Base64-encoded.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey The public key. It must be Base64-encoded.
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public KeypairState build() {
            return $;
        }
    }

}
