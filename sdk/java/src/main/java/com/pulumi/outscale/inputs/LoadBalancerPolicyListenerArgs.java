// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerPolicyListenerArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerPolicyListenerArgs Empty = new LoadBalancerPolicyListenerArgs();

    /**
     * The port on which the back-end VM is listening (between `1` and `65535`, both included).
     * 
     */
    @Import(name="backendPort")
    private @Nullable Output<Integer> backendPort;

    /**
     * @return The port on which the back-end VM is listening (between `1` and `65535`, both included).
     * 
     */
    public Optional<Output<Integer>> backendPort() {
        return Optional.ofNullable(this.backendPort);
    }

    /**
     * The protocol for routing traffic to back-end VMs (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
     * 
     */
    @Import(name="backendProtocol")
    private @Nullable Output<String> backendProtocol;

    /**
     * @return The protocol for routing traffic to back-end VMs (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
     * 
     */
    public Optional<Output<String>> backendProtocol() {
        return Optional.ofNullable(this.backendProtocol);
    }

    /**
     * The port on which the load balancer is listening (between `1` and `65535`, both included).
     * 
     */
    @Import(name="loadBalancerPort")
    private @Nullable Output<Integer> loadBalancerPort;

    /**
     * @return The port on which the load balancer is listening (between `1` and `65535`, both included).
     * 
     */
    public Optional<Output<Integer>> loadBalancerPort() {
        return Optional.ofNullable(this.loadBalancerPort);
    }

    /**
     * The routing protocol (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
     * 
     */
    @Import(name="loadBalancerProtocol")
    private @Nullable Output<String> loadBalancerProtocol;

    /**
     * @return The routing protocol (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
     * 
     */
    public Optional<Output<String>> loadBalancerProtocol() {
        return Optional.ofNullable(this.loadBalancerProtocol);
    }

    /**
     * The names of the policies. If there are no policies enabled, the list is empty.
     * 
     */
    @Import(name="policyNames")
    private @Nullable Output<List<String>> policyNames;

    /**
     * @return The names of the policies. If there are no policies enabled, the list is empty.
     * 
     */
    public Optional<Output<List<String>>> policyNames() {
        return Optional.ofNullable(this.policyNames);
    }

    /**
     * The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
     * 
     */
    @Import(name="serverCertificateId")
    private @Nullable Output<String> serverCertificateId;

    /**
     * @return The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
     * 
     */
    public Optional<Output<String>> serverCertificateId() {
        return Optional.ofNullable(this.serverCertificateId);
    }

    private LoadBalancerPolicyListenerArgs() {}

    private LoadBalancerPolicyListenerArgs(LoadBalancerPolicyListenerArgs $) {
        this.backendPort = $.backendPort;
        this.backendProtocol = $.backendProtocol;
        this.loadBalancerPort = $.loadBalancerPort;
        this.loadBalancerProtocol = $.loadBalancerProtocol;
        this.policyNames = $.policyNames;
        this.serverCertificateId = $.serverCertificateId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerPolicyListenerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerPolicyListenerArgs $;

        public Builder() {
            $ = new LoadBalancerPolicyListenerArgs();
        }

        public Builder(LoadBalancerPolicyListenerArgs defaults) {
            $ = new LoadBalancerPolicyListenerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendPort The port on which the back-end VM is listening (between `1` and `65535`, both included).
         * 
         * @return builder
         * 
         */
        public Builder backendPort(@Nullable Output<Integer> backendPort) {
            $.backendPort = backendPort;
            return this;
        }

        /**
         * @param backendPort The port on which the back-end VM is listening (between `1` and `65535`, both included).
         * 
         * @return builder
         * 
         */
        public Builder backendPort(Integer backendPort) {
            return backendPort(Output.of(backendPort));
        }

        /**
         * @param backendProtocol The protocol for routing traffic to back-end VMs (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
         * 
         * @return builder
         * 
         */
        public Builder backendProtocol(@Nullable Output<String> backendProtocol) {
            $.backendProtocol = backendProtocol;
            return this;
        }

        /**
         * @param backendProtocol The protocol for routing traffic to back-end VMs (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
         * 
         * @return builder
         * 
         */
        public Builder backendProtocol(String backendProtocol) {
            return backendProtocol(Output.of(backendProtocol));
        }

        /**
         * @param loadBalancerPort The port on which the load balancer is listening (between `1` and `65535`, both included).
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerPort(@Nullable Output<Integer> loadBalancerPort) {
            $.loadBalancerPort = loadBalancerPort;
            return this;
        }

        /**
         * @param loadBalancerPort The port on which the load balancer is listening (between `1` and `65535`, both included).
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerPort(Integer loadBalancerPort) {
            return loadBalancerPort(Output.of(loadBalancerPort));
        }

        /**
         * @param loadBalancerProtocol The routing protocol (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerProtocol(@Nullable Output<String> loadBalancerProtocol) {
            $.loadBalancerProtocol = loadBalancerProtocol;
            return this;
        }

        /**
         * @param loadBalancerProtocol The routing protocol (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerProtocol(String loadBalancerProtocol) {
            return loadBalancerProtocol(Output.of(loadBalancerProtocol));
        }

        /**
         * @param policyNames The names of the policies. If there are no policies enabled, the list is empty.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(@Nullable Output<List<String>> policyNames) {
            $.policyNames = policyNames;
            return this;
        }

        /**
         * @param policyNames The names of the policies. If there are no policies enabled, the list is empty.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(List<String> policyNames) {
            return policyNames(Output.of(policyNames));
        }

        /**
         * @param policyNames The names of the policies. If there are no policies enabled, the list is empty.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(String... policyNames) {
            return policyNames(List.of(policyNames));
        }

        /**
         * @param serverCertificateId The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateId(@Nullable Output<String> serverCertificateId) {
            $.serverCertificateId = serverCertificateId;
            return this;
        }

        /**
         * @param serverCertificateId The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateId(String serverCertificateId) {
            return serverCertificateId(Output.of(serverCertificateId));
        }

        public LoadBalancerPolicyListenerArgs build() {
            return $;
        }
    }

}
