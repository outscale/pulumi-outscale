// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VirtualGatewayLinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final VirtualGatewayLinkArgs Empty = new VirtualGatewayLinkArgs();

    @Import(name="dryRun")
    private @Nullable Output<String> dryRun;

    public Optional<Output<String>> dryRun() {
        return Optional.ofNullable(this.dryRun);
    }

    /**
     * The ID of the Net to which you want to attach the virtual gateway.
     * 
     */
    @Import(name="netId", required=true)
    private Output<String> netId;

    /**
     * @return The ID of the Net to which you want to attach the virtual gateway.
     * 
     */
    public Output<String> netId() {
        return this.netId;
    }

    /**
     * The ID of the virtual gateway.
     * 
     */
    @Import(name="virtualGatewayId", required=true)
    private Output<String> virtualGatewayId;

    /**
     * @return The ID of the virtual gateway.
     * 
     */
    public Output<String> virtualGatewayId() {
        return this.virtualGatewayId;
    }

    private VirtualGatewayLinkArgs() {}

    private VirtualGatewayLinkArgs(VirtualGatewayLinkArgs $) {
        this.dryRun = $.dryRun;
        this.netId = $.netId;
        this.virtualGatewayId = $.virtualGatewayId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VirtualGatewayLinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VirtualGatewayLinkArgs $;

        public Builder() {
            $ = new VirtualGatewayLinkArgs();
        }

        public Builder(VirtualGatewayLinkArgs defaults) {
            $ = new VirtualGatewayLinkArgs(Objects.requireNonNull(defaults));
        }

        public Builder dryRun(@Nullable Output<String> dryRun) {
            $.dryRun = dryRun;
            return this;
        }

        public Builder dryRun(String dryRun) {
            return dryRun(Output.of(dryRun));
        }

        /**
         * @param netId The ID of the Net to which you want to attach the virtual gateway.
         * 
         * @return builder
         * 
         */
        public Builder netId(Output<String> netId) {
            $.netId = netId;
            return this;
        }

        /**
         * @param netId The ID of the Net to which you want to attach the virtual gateway.
         * 
         * @return builder
         * 
         */
        public Builder netId(String netId) {
            return netId(Output.of(netId));
        }

        /**
         * @param virtualGatewayId The ID of the virtual gateway.
         * 
         * @return builder
         * 
         */
        public Builder virtualGatewayId(Output<String> virtualGatewayId) {
            $.virtualGatewayId = virtualGatewayId;
            return this;
        }

        /**
         * @param virtualGatewayId The ID of the virtual gateway.
         * 
         * @return builder
         * 
         */
        public Builder virtualGatewayId(String virtualGatewayId) {
            return virtualGatewayId(Output.of(virtualGatewayId));
        }

        public VirtualGatewayLinkArgs build() {
            $.netId = Objects.requireNonNull($.netId, "expected parameter 'netId' to be non-null");
            $.virtualGatewayId = Objects.requireNonNull($.virtualGatewayId, "expected parameter 'virtualGatewayId' to be non-null");
            return $;
        }
    }

}
