// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VmPrimaryNicLinkNicArgs extends com.pulumi.resources.ResourceArgs {

    public static final VmPrimaryNicLinkNicArgs Empty = new VmPrimaryNicLinkNicArgs();

    /**
     * If true, the NIC is deleted when the VM is terminated. You can specify this parameter only for a new NIC. To modify this value for an existing NIC, see [UpdateNic](https://docs.outscale.com/api#updatenic).
     * 
     */
    @Import(name="deleteOnVmDeletion")
    private @Nullable Output<Boolean> deleteOnVmDeletion;

    /**
     * @return If true, the NIC is deleted when the VM is terminated. You can specify this parameter only for a new NIC. To modify this value for an existing NIC, see [UpdateNic](https://docs.outscale.com/api#updatenic).
     * 
     */
    public Optional<Output<Boolean>> deleteOnVmDeletion() {
        return Optional.ofNullable(this.deleteOnVmDeletion);
    }

    /**
     * The index of the VM device for the NIC attachment (must be `0`). This parameter is required if you create a NIC when creating the VM.
     * 
     */
    @Import(name="deviceNumber")
    private @Nullable Output<String> deviceNumber;

    /**
     * @return The index of the VM device for the NIC attachment (must be `0`). This parameter is required if you create a NIC when creating the VM.
     * 
     */
    public Optional<Output<String>> deviceNumber() {
        return Optional.ofNullable(this.deviceNumber);
    }

    /**
     * The ID of the NIC to attach.
     * 
     */
    @Import(name="linkNicId")
    private @Nullable Output<String> linkNicId;

    /**
     * @return The ID of the NIC to attach.
     * 
     */
    public Optional<Output<String>> linkNicId() {
        return Optional.ofNullable(this.linkNicId);
    }

    /**
     * The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private VmPrimaryNicLinkNicArgs() {}

    private VmPrimaryNicLinkNicArgs(VmPrimaryNicLinkNicArgs $) {
        this.deleteOnVmDeletion = $.deleteOnVmDeletion;
        this.deviceNumber = $.deviceNumber;
        this.linkNicId = $.linkNicId;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmPrimaryNicLinkNicArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmPrimaryNicLinkNicArgs $;

        public Builder() {
            $ = new VmPrimaryNicLinkNicArgs();
        }

        public Builder(VmPrimaryNicLinkNicArgs defaults) {
            $ = new VmPrimaryNicLinkNicArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteOnVmDeletion If true, the NIC is deleted when the VM is terminated. You can specify this parameter only for a new NIC. To modify this value for an existing NIC, see [UpdateNic](https://docs.outscale.com/api#updatenic).
         * 
         * @return builder
         * 
         */
        public Builder deleteOnVmDeletion(@Nullable Output<Boolean> deleteOnVmDeletion) {
            $.deleteOnVmDeletion = deleteOnVmDeletion;
            return this;
        }

        /**
         * @param deleteOnVmDeletion If true, the NIC is deleted when the VM is terminated. You can specify this parameter only for a new NIC. To modify this value for an existing NIC, see [UpdateNic](https://docs.outscale.com/api#updatenic).
         * 
         * @return builder
         * 
         */
        public Builder deleteOnVmDeletion(Boolean deleteOnVmDeletion) {
            return deleteOnVmDeletion(Output.of(deleteOnVmDeletion));
        }

        /**
         * @param deviceNumber The index of the VM device for the NIC attachment (must be `0`). This parameter is required if you create a NIC when creating the VM.
         * 
         * @return builder
         * 
         */
        public Builder deviceNumber(@Nullable Output<String> deviceNumber) {
            $.deviceNumber = deviceNumber;
            return this;
        }

        /**
         * @param deviceNumber The index of the VM device for the NIC attachment (must be `0`). This parameter is required if you create a NIC when creating the VM.
         * 
         * @return builder
         * 
         */
        public Builder deviceNumber(String deviceNumber) {
            return deviceNumber(Output.of(deviceNumber));
        }

        /**
         * @param linkNicId The ID of the NIC to attach.
         * 
         * @return builder
         * 
         */
        public Builder linkNicId(@Nullable Output<String> linkNicId) {
            $.linkNicId = linkNicId;
            return this;
        }

        /**
         * @param linkNicId The ID of the NIC to attach.
         * 
         * @return builder
         * 
         */
        public Builder linkNicId(String linkNicId) {
            return linkNicId(Output.of(linkNicId));
        }

        /**
         * @param state The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public VmPrimaryNicLinkNicArgs build() {
            return $;
        }
    }

}
