// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.GetImagesFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetImagesArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetImagesArgs Empty = new GetImagesArgs();

    /**
     * The account IDs of the owners of the OMIs. By default, all the OMIs for which you have launch permissions are described.
     * 
     */
    @Import(name="accountIds")
    private @Nullable Output<List<String>> accountIds;

    /**
     * @return The account IDs of the owners of the OMIs. By default, all the OMIs for which you have launch permissions are described.
     * 
     */
    public Optional<Output<List<String>>> accountIds() {
        return Optional.ofNullable(this.accountIds);
    }

    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<GetImagesFilterArgs>> filters;

    /**
     * @return A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    public Optional<Output<List<GetImagesFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The IDs of the OMIs.
     * 
     */
    @Import(name="imageIds")
    private @Nullable Output<List<String>> imageIds;

    /**
     * @return The IDs of the OMIs.
     * 
     */
    public Optional<Output<List<String>>> imageIds() {
        return Optional.ofNullable(this.imageIds);
    }

    @Import(name="permissions")
    private @Nullable Output<List<String>> permissions;

    public Optional<Output<List<String>>> permissions() {
        return Optional.ofNullable(this.permissions);
    }

    private GetImagesArgs() {}

    private GetImagesArgs(GetImagesArgs $) {
        this.accountIds = $.accountIds;
        this.filters = $.filters;
        this.imageIds = $.imageIds;
        this.permissions = $.permissions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetImagesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetImagesArgs $;

        public Builder() {
            $ = new GetImagesArgs();
        }

        public Builder(GetImagesArgs defaults) {
            $ = new GetImagesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountIds The account IDs of the owners of the OMIs. By default, all the OMIs for which you have launch permissions are described.
         * 
         * @return builder
         * 
         */
        public Builder accountIds(@Nullable Output<List<String>> accountIds) {
            $.accountIds = accountIds;
            return this;
        }

        /**
         * @param accountIds The account IDs of the owners of the OMIs. By default, all the OMIs for which you have launch permissions are described.
         * 
         * @return builder
         * 
         */
        public Builder accountIds(List<String> accountIds) {
            return accountIds(Output.of(accountIds));
        }

        /**
         * @param accountIds The account IDs of the owners of the OMIs. By default, all the OMIs for which you have launch permissions are described.
         * 
         * @return builder
         * 
         */
        public Builder accountIds(String... accountIds) {
            return accountIds(List.of(accountIds));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<GetImagesFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(List<GetImagesFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(GetImagesFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param imageIds The IDs of the OMIs.
         * 
         * @return builder
         * 
         */
        public Builder imageIds(@Nullable Output<List<String>> imageIds) {
            $.imageIds = imageIds;
            return this;
        }

        /**
         * @param imageIds The IDs of the OMIs.
         * 
         * @return builder
         * 
         */
        public Builder imageIds(List<String> imageIds) {
            return imageIds(Output.of(imageIds));
        }

        /**
         * @param imageIds The IDs of the OMIs.
         * 
         * @return builder
         * 
         */
        public Builder imageIds(String... imageIds) {
            return imageIds(List.of(imageIds));
        }

        public Builder permissions(@Nullable Output<List<String>> permissions) {
            $.permissions = permissions;
            return this;
        }

        public Builder permissions(List<String> permissions) {
            return permissions(Output.of(permissions));
        }

        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }

        public GetImagesArgs build() {
            return $;
        }
    }

}
