// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.outscale.outputs.GetLoadBalancerAccessLog;
import com.pulumi.outscale.outputs.GetLoadBalancerApplicationStickyCookiePolicy;
import com.pulumi.outscale.outputs.GetLoadBalancerFilter;
import com.pulumi.outscale.outputs.GetLoadBalancerHealthCheck;
import com.pulumi.outscale.outputs.GetLoadBalancerListener;
import com.pulumi.outscale.outputs.GetLoadBalancerLoadBalancerStickyCookiePolicy;
import com.pulumi.outscale.outputs.GetLoadBalancerSourceSecurityGroup;
import com.pulumi.outscale.outputs.GetLoadBalancerTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetLoadBalancerResult {
    /**
     * @return Information about access logs.
     * 
     */
    private List<GetLoadBalancerAccessLog> accessLogs;
    /**
     * @return The stickiness policies defined for the load balancer.
     * 
     */
    private List<GetLoadBalancerApplicationStickyCookiePolicy> applicationStickyCookiePolicies;
    /**
     * @return One or more IDs of back-end VMs for the load balancer.
     * 
     */
    private List<String> backendVmIds;
    /**
     * @return The DNS name of the load balancer.
     * 
     */
    private String dnsName;
    private @Nullable List<GetLoadBalancerFilter> filters;
    /**
     * @return Information about the health check configuration.
     * 
     */
    private List<GetLoadBalancerHealthCheck> healthChecks;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The listeners for the load balancer.
     * 
     */
    private List<GetLoadBalancerListener> listeners;
    /**
     * @return The name of the load balancer.
     * 
     */
    private String loadBalancerName;
    /**
     * @return The policies defined for the load balancer.
     * 
     */
    private List<GetLoadBalancerLoadBalancerStickyCookiePolicy> loadBalancerStickyCookiePolicies;
    /**
     * @return The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
     * If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
     * If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
     * 
     */
    private String loadBalancerType;
    /**
     * @return The ID of the Net for the load balancer.
     * 
     */
    private String netId;
    /**
     * @return (internet-facing only) The public IP associated with the load balancer.
     * 
     */
    private String publicIp;
    private String requestId;
    /**
     * @return Whether secure cookies are enabled for the load balancer.
     * 
     */
    private Boolean securedCookies;
    /**
     * @return One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
     * 
     */
    private List<String> securityGroups;
    /**
     * @return Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
     * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
     * 
     */
    private List<GetLoadBalancerSourceSecurityGroup> sourceSecurityGroups;
    /**
     * @return The ID of the Subnet in which the load balancer was created.
     * 
     */
    private List<String> subnets;
    /**
     * @return The ID of the Subregion in which the load balancer was created.
     * 
     */
    private List<String> subregionNames;
    /**
     * @return One or more tags associated with the load balancer.
     * 
     */
    private List<GetLoadBalancerTag> tags;

    private GetLoadBalancerResult() {}
    /**
     * @return Information about access logs.
     * 
     */
    public List<GetLoadBalancerAccessLog> accessLogs() {
        return this.accessLogs;
    }
    /**
     * @return The stickiness policies defined for the load balancer.
     * 
     */
    public List<GetLoadBalancerApplicationStickyCookiePolicy> applicationStickyCookiePolicies() {
        return this.applicationStickyCookiePolicies;
    }
    /**
     * @return One or more IDs of back-end VMs for the load balancer.
     * 
     */
    public List<String> backendVmIds() {
        return this.backendVmIds;
    }
    /**
     * @return The DNS name of the load balancer.
     * 
     */
    public String dnsName() {
        return this.dnsName;
    }
    public List<GetLoadBalancerFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return Information about the health check configuration.
     * 
     */
    public List<GetLoadBalancerHealthCheck> healthChecks() {
        return this.healthChecks;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The listeners for the load balancer.
     * 
     */
    public List<GetLoadBalancerListener> listeners() {
        return this.listeners;
    }
    /**
     * @return The name of the load balancer.
     * 
     */
    public String loadBalancerName() {
        return this.loadBalancerName;
    }
    /**
     * @return The policies defined for the load balancer.
     * 
     */
    public List<GetLoadBalancerLoadBalancerStickyCookiePolicy> loadBalancerStickyCookiePolicies() {
        return this.loadBalancerStickyCookiePolicies;
    }
    /**
     * @return The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
     * If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
     * If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
     * 
     */
    public String loadBalancerType() {
        return this.loadBalancerType;
    }
    /**
     * @return The ID of the Net for the load balancer.
     * 
     */
    public String netId() {
        return this.netId;
    }
    /**
     * @return (internet-facing only) The public IP associated with the load balancer.
     * 
     */
    public String publicIp() {
        return this.publicIp;
    }
    public String requestId() {
        return this.requestId;
    }
    /**
     * @return Whether secure cookies are enabled for the load balancer.
     * 
     */
    public Boolean securedCookies() {
        return this.securedCookies;
    }
    /**
     * @return One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
     * 
     */
    public List<String> securityGroups() {
        return this.securityGroups;
    }
    /**
     * @return Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
     * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
     * 
     */
    public List<GetLoadBalancerSourceSecurityGroup> sourceSecurityGroups() {
        return this.sourceSecurityGroups;
    }
    /**
     * @return The ID of the Subnet in which the load balancer was created.
     * 
     */
    public List<String> subnets() {
        return this.subnets;
    }
    /**
     * @return The ID of the Subregion in which the load balancer was created.
     * 
     */
    public List<String> subregionNames() {
        return this.subregionNames;
    }
    /**
     * @return One or more tags associated with the load balancer.
     * 
     */
    public List<GetLoadBalancerTag> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLoadBalancerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetLoadBalancerAccessLog> accessLogs;
        private List<GetLoadBalancerApplicationStickyCookiePolicy> applicationStickyCookiePolicies;
        private List<String> backendVmIds;
        private String dnsName;
        private @Nullable List<GetLoadBalancerFilter> filters;
        private List<GetLoadBalancerHealthCheck> healthChecks;
        private String id;
        private List<GetLoadBalancerListener> listeners;
        private String loadBalancerName;
        private List<GetLoadBalancerLoadBalancerStickyCookiePolicy> loadBalancerStickyCookiePolicies;
        private String loadBalancerType;
        private String netId;
        private String publicIp;
        private String requestId;
        private Boolean securedCookies;
        private List<String> securityGroups;
        private List<GetLoadBalancerSourceSecurityGroup> sourceSecurityGroups;
        private List<String> subnets;
        private List<String> subregionNames;
        private List<GetLoadBalancerTag> tags;
        public Builder() {}
        public Builder(GetLoadBalancerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLogs = defaults.accessLogs;
    	      this.applicationStickyCookiePolicies = defaults.applicationStickyCookiePolicies;
    	      this.backendVmIds = defaults.backendVmIds;
    	      this.dnsName = defaults.dnsName;
    	      this.filters = defaults.filters;
    	      this.healthChecks = defaults.healthChecks;
    	      this.id = defaults.id;
    	      this.listeners = defaults.listeners;
    	      this.loadBalancerName = defaults.loadBalancerName;
    	      this.loadBalancerStickyCookiePolicies = defaults.loadBalancerStickyCookiePolicies;
    	      this.loadBalancerType = defaults.loadBalancerType;
    	      this.netId = defaults.netId;
    	      this.publicIp = defaults.publicIp;
    	      this.requestId = defaults.requestId;
    	      this.securedCookies = defaults.securedCookies;
    	      this.securityGroups = defaults.securityGroups;
    	      this.sourceSecurityGroups = defaults.sourceSecurityGroups;
    	      this.subnets = defaults.subnets;
    	      this.subregionNames = defaults.subregionNames;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder accessLogs(List<GetLoadBalancerAccessLog> accessLogs) {
            this.accessLogs = Objects.requireNonNull(accessLogs);
            return this;
        }
        public Builder accessLogs(GetLoadBalancerAccessLog... accessLogs) {
            return accessLogs(List.of(accessLogs));
        }
        @CustomType.Setter
        public Builder applicationStickyCookiePolicies(List<GetLoadBalancerApplicationStickyCookiePolicy> applicationStickyCookiePolicies) {
            this.applicationStickyCookiePolicies = Objects.requireNonNull(applicationStickyCookiePolicies);
            return this;
        }
        public Builder applicationStickyCookiePolicies(GetLoadBalancerApplicationStickyCookiePolicy... applicationStickyCookiePolicies) {
            return applicationStickyCookiePolicies(List.of(applicationStickyCookiePolicies));
        }
        @CustomType.Setter
        public Builder backendVmIds(List<String> backendVmIds) {
            this.backendVmIds = Objects.requireNonNull(backendVmIds);
            return this;
        }
        public Builder backendVmIds(String... backendVmIds) {
            return backendVmIds(List.of(backendVmIds));
        }
        @CustomType.Setter
        public Builder dnsName(String dnsName) {
            this.dnsName = Objects.requireNonNull(dnsName);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetLoadBalancerFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetLoadBalancerFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder healthChecks(List<GetLoadBalancerHealthCheck> healthChecks) {
            this.healthChecks = Objects.requireNonNull(healthChecks);
            return this;
        }
        public Builder healthChecks(GetLoadBalancerHealthCheck... healthChecks) {
            return healthChecks(List.of(healthChecks));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder listeners(List<GetLoadBalancerListener> listeners) {
            this.listeners = Objects.requireNonNull(listeners);
            return this;
        }
        public Builder listeners(GetLoadBalancerListener... listeners) {
            return listeners(List.of(listeners));
        }
        @CustomType.Setter
        public Builder loadBalancerName(String loadBalancerName) {
            this.loadBalancerName = Objects.requireNonNull(loadBalancerName);
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerStickyCookiePolicies(List<GetLoadBalancerLoadBalancerStickyCookiePolicy> loadBalancerStickyCookiePolicies) {
            this.loadBalancerStickyCookiePolicies = Objects.requireNonNull(loadBalancerStickyCookiePolicies);
            return this;
        }
        public Builder loadBalancerStickyCookiePolicies(GetLoadBalancerLoadBalancerStickyCookiePolicy... loadBalancerStickyCookiePolicies) {
            return loadBalancerStickyCookiePolicies(List.of(loadBalancerStickyCookiePolicies));
        }
        @CustomType.Setter
        public Builder loadBalancerType(String loadBalancerType) {
            this.loadBalancerType = Objects.requireNonNull(loadBalancerType);
            return this;
        }
        @CustomType.Setter
        public Builder netId(String netId) {
            this.netId = Objects.requireNonNull(netId);
            return this;
        }
        @CustomType.Setter
        public Builder publicIp(String publicIp) {
            this.publicIp = Objects.requireNonNull(publicIp);
            return this;
        }
        @CustomType.Setter
        public Builder requestId(String requestId) {
            this.requestId = Objects.requireNonNull(requestId);
            return this;
        }
        @CustomType.Setter
        public Builder securedCookies(Boolean securedCookies) {
            this.securedCookies = Objects.requireNonNull(securedCookies);
            return this;
        }
        @CustomType.Setter
        public Builder securityGroups(List<String> securityGroups) {
            this.securityGroups = Objects.requireNonNull(securityGroups);
            return this;
        }
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }
        @CustomType.Setter
        public Builder sourceSecurityGroups(List<GetLoadBalancerSourceSecurityGroup> sourceSecurityGroups) {
            this.sourceSecurityGroups = Objects.requireNonNull(sourceSecurityGroups);
            return this;
        }
        public Builder sourceSecurityGroups(GetLoadBalancerSourceSecurityGroup... sourceSecurityGroups) {
            return sourceSecurityGroups(List.of(sourceSecurityGroups));
        }
        @CustomType.Setter
        public Builder subnets(List<String> subnets) {
            this.subnets = Objects.requireNonNull(subnets);
            return this;
        }
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }
        @CustomType.Setter
        public Builder subregionNames(List<String> subregionNames) {
            this.subregionNames = Objects.requireNonNull(subregionNames);
            return this;
        }
        public Builder subregionNames(String... subregionNames) {
            return subregionNames(List.of(subregionNames));
        }
        @CustomType.Setter
        public Builder tags(List<GetLoadBalancerTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetLoadBalancerTag... tags) {
            return tags(List.of(tags));
        }
        public GetLoadBalancerResult build() {
            final var o = new GetLoadBalancerResult();
            o.accessLogs = accessLogs;
            o.applicationStickyCookiePolicies = applicationStickyCookiePolicies;
            o.backendVmIds = backendVmIds;
            o.dnsName = dnsName;
            o.filters = filters;
            o.healthChecks = healthChecks;
            o.id = id;
            o.listeners = listeners;
            o.loadBalancerName = loadBalancerName;
            o.loadBalancerStickyCookiePolicies = loadBalancerStickyCookiePolicies;
            o.loadBalancerType = loadBalancerType;
            o.netId = netId;
            o.publicIp = publicIp;
            o.requestId = requestId;
            o.securedCookies = securedCookies;
            o.securityGroups = securityGroups;
            o.sourceSecurityGroups = sourceSecurityGroups;
            o.subnets = subnets;
            o.subregionNames = subregionNames;
            o.tags = tags;
            return o;
        }
    }
}
