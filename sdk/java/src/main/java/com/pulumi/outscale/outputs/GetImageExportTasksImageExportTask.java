// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.outscale.outputs.GetImageExportTasksImageExportTaskOsuExport;
import com.pulumi.outscale.outputs.GetImageExportTasksImageExportTaskTag;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetImageExportTasksImageExportTask {
    /**
     * @return If the OMI export task fails, an error message appears.
     * 
     */
    private String comment;
    /**
     * @return The ID of the OMI to be exported.
     * 
     */
    private String imageId;
    /**
     * @return Information about the OMI export task.
     * 
     */
    private List<GetImageExportTasksImageExportTaskOsuExport> osuExports;
    /**
     * @return The progress of the OMI export task, as a percentage.
     * 
     */
    private Integer progress;
    /**
     * @return The state of the OMI export task (`pending/queued` \| `pending` \| `completed` \| `failed` \| `cancelled`).
     * 
     */
    private String state;
    /**
     * @return One or more tags associated with the image export task.
     * 
     */
    private List<GetImageExportTasksImageExportTaskTag> tags;
    /**
     * @return The ID of the OMI export task.
     * 
     */
    private String taskId;

    private GetImageExportTasksImageExportTask() {}
    /**
     * @return If the OMI export task fails, an error message appears.
     * 
     */
    public String comment() {
        return this.comment;
    }
    /**
     * @return The ID of the OMI to be exported.
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return Information about the OMI export task.
     * 
     */
    public List<GetImageExportTasksImageExportTaskOsuExport> osuExports() {
        return this.osuExports;
    }
    /**
     * @return The progress of the OMI export task, as a percentage.
     * 
     */
    public Integer progress() {
        return this.progress;
    }
    /**
     * @return The state of the OMI export task (`pending/queued` \| `pending` \| `completed` \| `failed` \| `cancelled`).
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return One or more tags associated with the image export task.
     * 
     */
    public List<GetImageExportTasksImageExportTaskTag> tags() {
        return this.tags;
    }
    /**
     * @return The ID of the OMI export task.
     * 
     */
    public String taskId() {
        return this.taskId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageExportTasksImageExportTask defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comment;
        private String imageId;
        private List<GetImageExportTasksImageExportTaskOsuExport> osuExports;
        private Integer progress;
        private String state;
        private List<GetImageExportTasksImageExportTaskTag> tags;
        private String taskId;
        public Builder() {}
        public Builder(GetImageExportTasksImageExportTask defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comment = defaults.comment;
    	      this.imageId = defaults.imageId;
    	      this.osuExports = defaults.osuExports;
    	      this.progress = defaults.progress;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.taskId = defaults.taskId;
        }

        @CustomType.Setter
        public Builder comment(String comment) {
            this.comment = Objects.requireNonNull(comment);
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            this.imageId = Objects.requireNonNull(imageId);
            return this;
        }
        @CustomType.Setter
        public Builder osuExports(List<GetImageExportTasksImageExportTaskOsuExport> osuExports) {
            this.osuExports = Objects.requireNonNull(osuExports);
            return this;
        }
        public Builder osuExports(GetImageExportTasksImageExportTaskOsuExport... osuExports) {
            return osuExports(List.of(osuExports));
        }
        @CustomType.Setter
        public Builder progress(Integer progress) {
            this.progress = Objects.requireNonNull(progress);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetImageExportTasksImageExportTaskTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetImageExportTasksImageExportTaskTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder taskId(String taskId) {
            this.taskId = Objects.requireNonNull(taskId);
            return this;
        }
        public GetImageExportTasksImageExportTask build() {
            final var o = new GetImageExportTasksImageExportTask();
            o.comment = comment;
            o.imageId = imageId;
            o.osuExports = osuExports;
            o.progress = progress;
            o.state = state;
            o.tags = tags;
            o.taskId = taskId;
            return o;
        }
    }
}
