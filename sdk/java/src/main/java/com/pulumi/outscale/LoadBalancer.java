// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.outscale.LoadBalancerArgs;
import com.pulumi.outscale.Utilities;
import com.pulumi.outscale.inputs.LoadBalancerState;
import com.pulumi.outscale.outputs.LoadBalancerAccessLog;
import com.pulumi.outscale.outputs.LoadBalancerApplicationStickyCookiePolicy;
import com.pulumi.outscale.outputs.LoadBalancerHealthCheck;
import com.pulumi.outscale.outputs.LoadBalancerListener;
import com.pulumi.outscale.outputs.LoadBalancerLoadBalancerStickyCookiePolicy;
import com.pulumi.outscale.outputs.LoadBalancerSourceSecurityGroup;
import com.pulumi.outscale.outputs.LoadBalancerTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a load balancer.
 * 
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-loadbalancer).
 * 
 * ## Example Usage
 * ### Create a load balancer in the public Cloud
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.outscale.LoadBalancer;
 * import com.pulumi.outscale.LoadBalancerArgs;
 * import com.pulumi.outscale.inputs.LoadBalancerListenerArgs;
 * import com.pulumi.outscale.inputs.LoadBalancerTagArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var loadBalancer01 = new LoadBalancer(&#34;loadBalancer01&#34;, LoadBalancerArgs.builder()        
 *             .listeners(LoadBalancerListenerArgs.builder()
 *                 .backendPort(8080)
 *                 .backendProtocol(&#34;HTTP&#34;)
 *                 .loadBalancerPort(8080)
 *                 .loadBalancerProtocol(&#34;HTTP&#34;)
 *                 .build())
 *             .loadBalancerName(&#34;terraform-public-load-balancer&#34;)
 *             .subregionNames(String.format(&#34;%sa&#34;, var_.region()))
 *             .tags(LoadBalancerTagArgs.builder()
 *                 .key(&#34;name&#34;)
 *                 .value(&#34;terraform-public-load-balancer&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Create a load balancer in a Net
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.outscale.Net;
 * import com.pulumi.outscale.NetArgs;
 * import com.pulumi.outscale.Subnet;
 * import com.pulumi.outscale.SubnetArgs;
 * import com.pulumi.outscale.inputs.SubnetTagArgs;
 * import com.pulumi.outscale.SecurityGroup;
 * import com.pulumi.outscale.SecurityGroupArgs;
 * import com.pulumi.outscale.inputs.SecurityGroupTagArgs;
 * import com.pulumi.outscale.LoadBalancer;
 * import com.pulumi.outscale.LoadBalancerArgs;
 * import com.pulumi.outscale.inputs.LoadBalancerListenerArgs;
 * import com.pulumi.outscale.inputs.LoadBalancerTagArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var net01 = new Net(&#34;net01&#34;, NetArgs.builder()        
 *             .ipRange(&#34;10.0.0.0/16&#34;)
 *             .build());
 * 
 *         var subnet01 = new Subnet(&#34;subnet01&#34;, SubnetArgs.builder()        
 *             .netId(net01.netId())
 *             .ipRange(&#34;10.0.0.0/24&#34;)
 *             .tags(SubnetTagArgs.builder()
 *                 .key(&#34;Name&#34;)
 *                 .value(&#34;terraform-subnet-for-internal-load-balancer&#34;)
 *                 .build())
 *             .build());
 * 
 *         var securityGroup01 = new SecurityGroup(&#34;securityGroup01&#34;, SecurityGroupArgs.builder()        
 *             .description(&#34;Terraform security group for internal load balancer&#34;)
 *             .securityGroupName(&#34;terraform-security-group-for-internal-load-balancer&#34;)
 *             .netId(net01.netId())
 *             .tags(SecurityGroupTagArgs.builder()
 *                 .key(&#34;Name&#34;)
 *                 .value(&#34;terraform-security-group-for-internal-load-balancer&#34;)
 *                 .build())
 *             .build());
 * 
 *         var loadBalancer02 = new LoadBalancer(&#34;loadBalancer02&#34;, LoadBalancerArgs.builder()        
 *             .loadBalancerName(&#34;terraform-private-load-balancer&#34;)
 *             .listeners(LoadBalancerListenerArgs.builder()
 *                 .backendPort(80)
 *                 .backendProtocol(&#34;TCP&#34;)
 *                 .loadBalancerProtocol(&#34;TCP&#34;)
 *                 .loadBalancerPort(80)
 *                 .build())
 *             .subnets(subnet01.subnetId())
 *             .securityGroups(securityGroup01.securityGroupId())
 *             .loadBalancerType(&#34;internal&#34;)
 *             .tags(LoadBalancerTagArgs.builder()
 *                 .key(&#34;name&#34;)
 *                 .value(&#34;terraform-private-load-balancer&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Create an internet-facing load balancer in a Net
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.outscale.Net;
 * import com.pulumi.outscale.NetArgs;
 * import com.pulumi.outscale.Subnet;
 * import com.pulumi.outscale.SubnetArgs;
 * import com.pulumi.outscale.inputs.SubnetTagArgs;
 * import com.pulumi.outscale.InternetService;
 * import com.pulumi.outscale.InternetServiceArgs;
 * import com.pulumi.outscale.InternetServiceLink;
 * import com.pulumi.outscale.InternetServiceLinkArgs;
 * import com.pulumi.outscale.RouteTable;
 * import com.pulumi.outscale.RouteTableArgs;
 * import com.pulumi.outscale.inputs.RouteTableTagArgs;
 * import com.pulumi.outscale.Route;
 * import com.pulumi.outscale.RouteArgs;
 * import com.pulumi.outscale.RouteTableLink;
 * import com.pulumi.outscale.RouteTableLinkArgs;
 * import com.pulumi.outscale.LoadBalancer;
 * import com.pulumi.outscale.LoadBalancerArgs;
 * import com.pulumi.outscale.inputs.LoadBalancerListenerArgs;
 * import com.pulumi.outscale.inputs.LoadBalancerTagArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var net02 = new Net(&#34;net02&#34;, NetArgs.builder()        
 *             .ipRange(&#34;10.0.0.0/16&#34;)
 *             .build());
 * 
 *         var subnet02 = new Subnet(&#34;subnet02&#34;, SubnetArgs.builder()        
 *             .netId(net02.netId())
 *             .ipRange(&#34;10.0.0.0/24&#34;)
 *             .tags(SubnetTagArgs.builder()
 *                 .key(&#34;Name&#34;)
 *                 .value(&#34;terraform-security-group-for-load-balancer&#34;)
 *                 .build())
 *             .build());
 * 
 *         var internetService01 = new InternetService(&#34;internetService01&#34;, InternetServiceArgs.Empty, CustomResourceOptions.builder()
 *             .dependsOn(net02)
 *             .build());
 * 
 *         var internetServiceLink01 = new InternetServiceLink(&#34;internetServiceLink01&#34;, InternetServiceLinkArgs.builder()        
 *             .internetServiceId(internetService01.internetServiceId())
 *             .netId(net02.netId())
 *             .build());
 * 
 *         var routeTable01 = new RouteTable(&#34;routeTable01&#34;, RouteTableArgs.builder()        
 *             .netId(net02.netId())
 *             .tags(RouteTableTagArgs.builder()
 *                 .key(&#34;name&#34;)
 *                 .value(&#34;terraform-route-table-for-load-balancer&#34;)
 *                 .build())
 *             .build());
 * 
 *         var route01 = new Route(&#34;route01&#34;, RouteArgs.builder()        
 *             .gatewayId(internetService01.id())
 *             .destinationIpRange(&#34;10.0.0.0/0&#34;)
 *             .routeTableId(routeTable01.routeTableId())
 *             .build());
 * 
 *         var routeTableLink01 = new RouteTableLink(&#34;routeTableLink01&#34;, RouteTableLinkArgs.builder()        
 *             .routeTableId(routeTable01.routeTableId())
 *             .subnetId(subnet02.subnetId())
 *             .build());
 * 
 *         var loadBalancer03 = new LoadBalancer(&#34;loadBalancer03&#34;, LoadBalancerArgs.builder()        
 *             .loadBalancerName(&#34;terraform-internet-private-lb&#34;)
 *             .listeners(            
 *                 LoadBalancerListenerArgs.builder()
 *                     .backendPort(80)
 *                     .backendProtocol(&#34;TCP&#34;)
 *                     .loadBalancerProtocol(&#34;TCP&#34;)
 *                     .loadBalancerPort(80)
 *                     .build(),
 *                 LoadBalancerListenerArgs.builder()
 *                     .backendPort(8080)
 *                     .backendProtocol(&#34;HTTP&#34;)
 *                     .loadBalancerProtocol(&#34;HTTP&#34;)
 *                     .loadBalancerPort(8080)
 *                     .build())
 *             .subnets(subnet02.subnetId())
 *             .loadBalancerType(&#34;internet-facing&#34;)
 *             .publicIp(&#34;192.0.2.0&#34;)
 *             .tags(LoadBalancerTagArgs.builder()
 *                 .key(&#34;name&#34;)
 *                 .value(&#34;terraform-internet-private-lb&#34;)
 *                 .build())
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(                
 *                     route01,
 *                     routeTableLink01)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * A load balancer can be imported using its name. For exampleconsole
 * 
 * ```sh
 *  $ pulumi import outscale:index/loadBalancer:LoadBalancer ImportedLbu Name-of-the-Lbu
 * ```
 * 
 */
@ResourceType(type="outscale:index/loadBalancer:LoadBalancer")
public class LoadBalancer extends com.pulumi.resources.CustomResource {
    /**
     * Information about access logs.
     * 
     */
    @Export(name="accessLogs", refs={List.class,LoadBalancerAccessLog.class}, tree="[0,1]")
    private Output<List<LoadBalancerAccessLog>> accessLogs;

    /**
     * @return Information about access logs.
     * 
     */
    public Output<List<LoadBalancerAccessLog>> accessLogs() {
        return this.accessLogs;
    }
    /**
     * The stickiness policies defined for the load balancer.
     * 
     */
    @Export(name="applicationStickyCookiePolicies", refs={List.class,LoadBalancerApplicationStickyCookiePolicy.class}, tree="[0,1]")
    private Output<List<LoadBalancerApplicationStickyCookiePolicy>> applicationStickyCookiePolicies;

    /**
     * @return The stickiness policies defined for the load balancer.
     * 
     */
    public Output<List<LoadBalancerApplicationStickyCookiePolicy>> applicationStickyCookiePolicies() {
        return this.applicationStickyCookiePolicies;
    }
    /**
     * One or more IDs of back-end VMs for the load balancer.
     * 
     */
    @Export(name="backendVmIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> backendVmIds;

    /**
     * @return One or more IDs of back-end VMs for the load balancer.
     * 
     */
    public Output<List<String>> backendVmIds() {
        return this.backendVmIds;
    }
    /**
     * The DNS name of the load balancer.
     * 
     */
    @Export(name="dnsName", refs={String.class}, tree="[0]")
    private Output<String> dnsName;

    /**
     * @return The DNS name of the load balancer.
     * 
     */
    public Output<String> dnsName() {
        return this.dnsName;
    }
    /**
     * Information about the health check configuration.
     * 
     */
    @Export(name="healthChecks", refs={List.class,LoadBalancerHealthCheck.class}, tree="[0,1]")
    private Output<List<LoadBalancerHealthCheck>> healthChecks;

    /**
     * @return Information about the health check configuration.
     * 
     */
    public Output<List<LoadBalancerHealthCheck>> healthChecks() {
        return this.healthChecks;
    }
    /**
     * One or more listeners to create.
     * 
     */
    @Export(name="listeners", refs={List.class,LoadBalancerListener.class}, tree="[0,1]")
    private Output<List<LoadBalancerListener>> listeners;

    /**
     * @return One or more listeners to create.
     * 
     */
    public Output<List<LoadBalancerListener>> listeners() {
        return this.listeners;
    }
    /**
     * The unique name of the load balancer (32 alphanumeric or hyphen characters maximum, but cannot start or end with a hyphen).
     * 
     */
    @Export(name="loadBalancerName", refs={String.class}, tree="[0]")
    private Output<String> loadBalancerName;

    /**
     * @return The unique name of the load balancer (32 alphanumeric or hyphen characters maximum, but cannot start or end with a hyphen).
     * 
     */
    public Output<String> loadBalancerName() {
        return this.loadBalancerName;
    }
    /**
     * The policies defined for the load balancer.
     * 
     */
    @Export(name="loadBalancerStickyCookiePolicies", refs={List.class,LoadBalancerLoadBalancerStickyCookiePolicy.class}, tree="[0,1]")
    private Output<List<LoadBalancerLoadBalancerStickyCookiePolicy>> loadBalancerStickyCookiePolicies;

    /**
     * @return The policies defined for the load balancer.
     * 
     */
    public Output<List<LoadBalancerLoadBalancerStickyCookiePolicy>> loadBalancerStickyCookiePolicies() {
        return this.loadBalancerStickyCookiePolicies;
    }
    /**
     * The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
     * 
     */
    @Export(name="loadBalancerType", refs={String.class}, tree="[0]")
    private Output<String> loadBalancerType;

    /**
     * @return The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
     * 
     */
    public Output<String> loadBalancerType() {
        return this.loadBalancerType;
    }
    /**
     * The ID of the Net for the load balancer.
     * 
     */
    @Export(name="netId", refs={String.class}, tree="[0]")
    private Output<String> netId;

    /**
     * @return The ID of the Net for the load balancer.
     * 
     */
    public Output<String> netId() {
        return this.netId;
    }
    /**
     * (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
     * 
     */
    @Export(name="publicIp", refs={String.class}, tree="[0]")
    private Output<String> publicIp;

    /**
     * @return (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
     * 
     */
    public Output<String> publicIp() {
        return this.publicIp;
    }
    @Export(name="requestId", refs={String.class}, tree="[0]")
    private Output<String> requestId;

    public Output<String> requestId() {
        return this.requestId;
    }
    /**
     * Whether secure cookies are enabled for the load balancer.
     * 
     */
    @Export(name="securedCookies", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> securedCookies;

    /**
     * @return Whether secure cookies are enabled for the load balancer.
     * 
     */
    public Output<Boolean> securedCookies() {
        return this.securedCookies;
    }
    /**
     * (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
     * 
     */
    @Export(name="securityGroups", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> securityGroups;

    /**
     * @return (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
     * 
     */
    public Output<List<String>> securityGroups() {
        return this.securityGroups;
    }
    /**
     * Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
     * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
     * 
     */
    @Export(name="sourceSecurityGroups", refs={List.class,LoadBalancerSourceSecurityGroup.class}, tree="[0,1]")
    private Output<List<LoadBalancerSourceSecurityGroup>> sourceSecurityGroups;

    /**
     * @return Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
     * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
     * 
     */
    public Output<List<LoadBalancerSourceSecurityGroup>> sourceSecurityGroups() {
        return this.sourceSecurityGroups;
    }
    /**
     * (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
     * 
     */
    @Export(name="subnets", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> subnets;

    /**
     * @return (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
     * 
     */
    public Output<List<String>> subnets() {
        return this.subnets;
    }
    /**
     * (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
     * 
     */
    @Export(name="subregionNames", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> subregionNames;

    /**
     * @return (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
     * 
     */
    public Output<List<String>> subregionNames() {
        return this.subregionNames;
    }
    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Export(name="tags", refs={List.class,LoadBalancerTag.class}, tree="[0,1]")
    private Output</* @Nullable */ List<LoadBalancerTag>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Output<Optional<List<LoadBalancerTag>>> tags() {
        return Codegen.optional(this.tags);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public LoadBalancer(String name) {
        this(name, LoadBalancerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public LoadBalancer(String name, LoadBalancerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public LoadBalancer(String name, LoadBalancerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("outscale:index/loadBalancer:LoadBalancer", name, args == null ? LoadBalancerArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private LoadBalancer(String name, Output<String> id, @Nullable LoadBalancerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("outscale:index/loadBalancer:LoadBalancer", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static LoadBalancer get(String name, Output<String> id, @Nullable LoadBalancerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new LoadBalancer(name, id, state, options);
    }
}
