// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.GetNetFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNetPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNetPlainArgs Empty = new GetNetPlainArgs();

    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    @Import(name="filters")
    private @Nullable List<GetNetFilter> filters;

    /**
     * @return A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    public Optional<List<GetNetFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The ID of the Net.
     * 
     */
    @Import(name="netId")
    private @Nullable String netId;

    /**
     * @return The ID of the Net.
     * 
     */
    public Optional<String> netId() {
        return Optional.ofNullable(this.netId);
    }

    private GetNetPlainArgs() {}

    private GetNetPlainArgs(GetNetPlainArgs $) {
        this.filters = $.filters;
        this.netId = $.netId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNetPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNetPlainArgs $;

        public Builder() {
            $ = new GetNetPlainArgs();
        }

        public Builder(GetNetPlainArgs defaults) {
            $ = new GetNetPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable List<GetNetFilter> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(GetNetFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param netId The ID of the Net.
         * 
         * @return builder
         * 
         */
        public Builder netId(@Nullable String netId) {
            $.netId = netId;
            return this;
        }

        public GetNetPlainArgs build() {
            return $;
        }
    }

}
