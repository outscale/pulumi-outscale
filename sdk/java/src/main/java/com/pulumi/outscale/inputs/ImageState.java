// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.ImageBlockDeviceMappingArgs;
import com.pulumi.outscale.inputs.ImagePermissionsToLaunchArgs;
import com.pulumi.outscale.inputs.ImageStateCommentArgs;
import com.pulumi.outscale.inputs.ImageTagArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageState extends com.pulumi.resources.ResourceArgs {

    public static final ImageState Empty = new ImageState();

    /**
     * The account alias of the owner of the OMI.
     * 
     */
    @Import(name="accountAlias")
    private @Nullable Output<String> accountAlias;

    /**
     * @return The account alias of the owner of the OMI.
     * 
     */
    public Optional<Output<String>> accountAlias() {
        return Optional.ofNullable(this.accountAlias);
    }

    /**
     * The account ID of the owner of the OMI.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account ID of the owner of the OMI.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * The architecture of the OMI (by default, `i386` if you specified the `file_location` or `root_device_name` parameter).
     * 
     */
    @Import(name="architecture")
    private @Nullable Output<String> architecture;

    /**
     * @return The architecture of the OMI (by default, `i386` if you specified the `file_location` or `root_device_name` parameter).
     * 
     */
    public Optional<Output<String>> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    /**
     * One or more block device mappings.
     * 
     */
    @Import(name="blockDeviceMappings")
    private @Nullable Output<List<ImageBlockDeviceMappingArgs>> blockDeviceMappings;

    /**
     * @return One or more block device mappings.
     * 
     */
    public Optional<Output<List<ImageBlockDeviceMappingArgs>>> blockDeviceMappings() {
        return Optional.ofNullable(this.blockDeviceMappings);
    }

    /**
     * The date and time of creation of the OMI, in ISO 8601 date-time format.
     * 
     */
    @Import(name="creationDate")
    private @Nullable Output<String> creationDate;

    /**
     * @return The date and time of creation of the OMI, in ISO 8601 date-time format.
     * 
     */
    public Optional<Output<String>> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }

    /**
     * A description for the new OMI.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the new OMI.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The pre-signed URL of the OMI manifest file, or the full path to the OMI stored in a bucket. If you specify this parameter, a copy of the OMI is created in your account. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
     * 
     */
    @Import(name="fileLocation")
    private @Nullable Output<String> fileLocation;

    /**
     * @return The pre-signed URL of the OMI manifest file, or the full path to the OMI stored in a bucket. If you specify this parameter, a copy of the OMI is created in your account. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
     * 
     */
    public Optional<Output<String>> fileLocation() {
        return Optional.ofNullable(this.fileLocation);
    }

    /**
     * The ID of the OMI.
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return The ID of the OMI.
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * A unique name for the new OMI.&lt;br /&gt;
     * Constraints: 3-128 alphanumeric characters, underscores (_), spaces ( ), parentheses (()), slashes (/), periods (.), or dashes (-).
     * 
     */
    @Import(name="imageName")
    private @Nullable Output<String> imageName;

    /**
     * @return A unique name for the new OMI.&lt;br /&gt;
     * Constraints: 3-128 alphanumeric characters, underscores (_), spaces ( ), parentheses (()), slashes (/), periods (.), or dashes (-).
     * 
     */
    public Optional<Output<String>> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * The type of the OMI.
     * 
     */
    @Import(name="imageType")
    private @Nullable Output<String> imageType;

    /**
     * @return The type of the OMI.
     * 
     */
    public Optional<Output<String>> imageType() {
        return Optional.ofNullable(this.imageType);
    }

    @Import(name="isPublic")
    private @Nullable Output<Boolean> isPublic;

    public Optional<Output<Boolean>> isPublic() {
        return Optional.ofNullable(this.isPublic);
    }

    /**
     * If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
     * 
     */
    @Import(name="noReboot")
    private @Nullable Output<Boolean> noReboot;

    /**
     * @return If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
     * 
     */
    public Optional<Output<Boolean>> noReboot() {
        return Optional.ofNullable(this.noReboot);
    }

    /**
     * Permissions for the resource.
     * 
     */
    @Import(name="permissionsToLaunches")
    private @Nullable Output<List<ImagePermissionsToLaunchArgs>> permissionsToLaunches;

    /**
     * @return Permissions for the resource.
     * 
     */
    public Optional<Output<List<ImagePermissionsToLaunchArgs>>> permissionsToLaunches() {
        return Optional.ofNullable(this.permissionsToLaunches);
    }

    /**
     * The product codes associated with the OMI.
     * 
     */
    @Import(name="productCodes")
    private @Nullable Output<List<String>> productCodes;

    /**
     * @return The product codes associated with the OMI.
     * 
     */
    public Optional<Output<List<String>>> productCodes() {
        return Optional.ofNullable(this.productCodes);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * The name of the root device. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
     * 
     */
    @Import(name="rootDeviceName")
    private @Nullable Output<String> rootDeviceName;

    /**
     * @return The name of the root device. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
     * 
     */
    public Optional<Output<String>> rootDeviceName() {
        return Optional.ofNullable(this.rootDeviceName);
    }

    /**
     * The type of root device used by the OMI (always `bsu`).
     * 
     */
    @Import(name="rootDeviceType")
    private @Nullable Output<String> rootDeviceType;

    /**
     * @return The type of root device used by the OMI (always `bsu`).
     * 
     */
    public Optional<Output<String>> rootDeviceType() {
        return Optional.ofNullable(this.rootDeviceType);
    }

    /**
     * The ID of the OMI you want to copy. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
     * 
     */
    @Import(name="sourceImageId")
    private @Nullable Output<String> sourceImageId;

    /**
     * @return The ID of the OMI you want to copy. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
     * 
     */
    public Optional<Output<String>> sourceImageId() {
        return Optional.ofNullable(this.sourceImageId);
    }

    /**
     * The name of the source Region, which must be the same as the Region of your account.
     * 
     */
    @Import(name="sourceRegionName")
    private @Nullable Output<String> sourceRegionName;

    /**
     * @return The name of the source Region, which must be the same as the Region of your account.
     * 
     */
    public Optional<Output<String>> sourceRegionName() {
        return Optional.ofNullable(this.sourceRegionName);
    }

    /**
     * The state of the OMI (`pending` \| `available` \| `failed`).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the OMI (`pending` \| `available` \| `failed`).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Information about the change of state.
     * 
     */
    @Import(name="stateComments")
    private @Nullable Output<List<ImageStateCommentArgs>> stateComments;

    /**
     * @return Information about the change of state.
     * 
     */
    public Optional<Output<List<ImageStateCommentArgs>>> stateComments() {
        return Optional.ofNullable(this.stateComments);
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ImageTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<ImageTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of the VM from which you want to create the OMI. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
     * 
     */
    @Import(name="vmId")
    private @Nullable Output<String> vmId;

    /**
     * @return The ID of the VM from which you want to create the OMI. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
     * 
     */
    public Optional<Output<String>> vmId() {
        return Optional.ofNullable(this.vmId);
    }

    private ImageState() {}

    private ImageState(ImageState $) {
        this.accountAlias = $.accountAlias;
        this.accountId = $.accountId;
        this.architecture = $.architecture;
        this.blockDeviceMappings = $.blockDeviceMappings;
        this.creationDate = $.creationDate;
        this.description = $.description;
        this.fileLocation = $.fileLocation;
        this.imageId = $.imageId;
        this.imageName = $.imageName;
        this.imageType = $.imageType;
        this.isPublic = $.isPublic;
        this.noReboot = $.noReboot;
        this.permissionsToLaunches = $.permissionsToLaunches;
        this.productCodes = $.productCodes;
        this.requestId = $.requestId;
        this.rootDeviceName = $.rootDeviceName;
        this.rootDeviceType = $.rootDeviceType;
        this.sourceImageId = $.sourceImageId;
        this.sourceRegionName = $.sourceRegionName;
        this.state = $.state;
        this.stateComments = $.stateComments;
        this.tags = $.tags;
        this.vmId = $.vmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageState $;

        public Builder() {
            $ = new ImageState();
        }

        public Builder(ImageState defaults) {
            $ = new ImageState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountAlias The account alias of the owner of the OMI.
         * 
         * @return builder
         * 
         */
        public Builder accountAlias(@Nullable Output<String> accountAlias) {
            $.accountAlias = accountAlias;
            return this;
        }

        /**
         * @param accountAlias The account alias of the owner of the OMI.
         * 
         * @return builder
         * 
         */
        public Builder accountAlias(String accountAlias) {
            return accountAlias(Output.of(accountAlias));
        }

        /**
         * @param accountId The account ID of the owner of the OMI.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account ID of the owner of the OMI.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param architecture The architecture of the OMI (by default, `i386` if you specified the `file_location` or `root_device_name` parameter).
         * 
         * @return builder
         * 
         */
        public Builder architecture(@Nullable Output<String> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture The architecture of the OMI (by default, `i386` if you specified the `file_location` or `root_device_name` parameter).
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param blockDeviceMappings One or more block device mappings.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappings(@Nullable Output<List<ImageBlockDeviceMappingArgs>> blockDeviceMappings) {
            $.blockDeviceMappings = blockDeviceMappings;
            return this;
        }

        /**
         * @param blockDeviceMappings One or more block device mappings.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappings(List<ImageBlockDeviceMappingArgs> blockDeviceMappings) {
            return blockDeviceMappings(Output.of(blockDeviceMappings));
        }

        /**
         * @param blockDeviceMappings One or more block device mappings.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappings(ImageBlockDeviceMappingArgs... blockDeviceMappings) {
            return blockDeviceMappings(List.of(blockDeviceMappings));
        }

        /**
         * @param creationDate The date and time of creation of the OMI, in ISO 8601 date-time format.
         * 
         * @return builder
         * 
         */
        public Builder creationDate(@Nullable Output<String> creationDate) {
            $.creationDate = creationDate;
            return this;
        }

        /**
         * @param creationDate The date and time of creation of the OMI, in ISO 8601 date-time format.
         * 
         * @return builder
         * 
         */
        public Builder creationDate(String creationDate) {
            return creationDate(Output.of(creationDate));
        }

        /**
         * @param description A description for the new OMI.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the new OMI.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fileLocation The pre-signed URL of the OMI manifest file, or the full path to the OMI stored in a bucket. If you specify this parameter, a copy of the OMI is created in your account. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
         * 
         * @return builder
         * 
         */
        public Builder fileLocation(@Nullable Output<String> fileLocation) {
            $.fileLocation = fileLocation;
            return this;
        }

        /**
         * @param fileLocation The pre-signed URL of the OMI manifest file, or the full path to the OMI stored in a bucket. If you specify this parameter, a copy of the OMI is created in your account. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
         * 
         * @return builder
         * 
         */
        public Builder fileLocation(String fileLocation) {
            return fileLocation(Output.of(fileLocation));
        }

        /**
         * @param imageId The ID of the OMI.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The ID of the OMI.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param imageName A unique name for the new OMI.&lt;br /&gt;
         * Constraints: 3-128 alphanumeric characters, underscores (_), spaces ( ), parentheses (()), slashes (/), periods (.), or dashes (-).
         * 
         * @return builder
         * 
         */
        public Builder imageName(@Nullable Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName A unique name for the new OMI.&lt;br /&gt;
         * Constraints: 3-128 alphanumeric characters, underscores (_), spaces ( ), parentheses (()), slashes (/), periods (.), or dashes (-).
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param imageType The type of the OMI.
         * 
         * @return builder
         * 
         */
        public Builder imageType(@Nullable Output<String> imageType) {
            $.imageType = imageType;
            return this;
        }

        /**
         * @param imageType The type of the OMI.
         * 
         * @return builder
         * 
         */
        public Builder imageType(String imageType) {
            return imageType(Output.of(imageType));
        }

        public Builder isPublic(@Nullable Output<Boolean> isPublic) {
            $.isPublic = isPublic;
            return this;
        }

        public Builder isPublic(Boolean isPublic) {
            return isPublic(Output.of(isPublic));
        }

        /**
         * @param noReboot If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
         * 
         * @return builder
         * 
         */
        public Builder noReboot(@Nullable Output<Boolean> noReboot) {
            $.noReboot = noReboot;
            return this;
        }

        /**
         * @param noReboot If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
         * 
         * @return builder
         * 
         */
        public Builder noReboot(Boolean noReboot) {
            return noReboot(Output.of(noReboot));
        }

        /**
         * @param permissionsToLaunches Permissions for the resource.
         * 
         * @return builder
         * 
         */
        public Builder permissionsToLaunches(@Nullable Output<List<ImagePermissionsToLaunchArgs>> permissionsToLaunches) {
            $.permissionsToLaunches = permissionsToLaunches;
            return this;
        }

        /**
         * @param permissionsToLaunches Permissions for the resource.
         * 
         * @return builder
         * 
         */
        public Builder permissionsToLaunches(List<ImagePermissionsToLaunchArgs> permissionsToLaunches) {
            return permissionsToLaunches(Output.of(permissionsToLaunches));
        }

        /**
         * @param permissionsToLaunches Permissions for the resource.
         * 
         * @return builder
         * 
         */
        public Builder permissionsToLaunches(ImagePermissionsToLaunchArgs... permissionsToLaunches) {
            return permissionsToLaunches(List.of(permissionsToLaunches));
        }

        /**
         * @param productCodes The product codes associated with the OMI.
         * 
         * @return builder
         * 
         */
        public Builder productCodes(@Nullable Output<List<String>> productCodes) {
            $.productCodes = productCodes;
            return this;
        }

        /**
         * @param productCodes The product codes associated with the OMI.
         * 
         * @return builder
         * 
         */
        public Builder productCodes(List<String> productCodes) {
            return productCodes(Output.of(productCodes));
        }

        /**
         * @param productCodes The product codes associated with the OMI.
         * 
         * @return builder
         * 
         */
        public Builder productCodes(String... productCodes) {
            return productCodes(List.of(productCodes));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param rootDeviceName The name of the root device. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
         * 
         * @return builder
         * 
         */
        public Builder rootDeviceName(@Nullable Output<String> rootDeviceName) {
            $.rootDeviceName = rootDeviceName;
            return this;
        }

        /**
         * @param rootDeviceName The name of the root device. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
         * 
         * @return builder
         * 
         */
        public Builder rootDeviceName(String rootDeviceName) {
            return rootDeviceName(Output.of(rootDeviceName));
        }

        /**
         * @param rootDeviceType The type of root device used by the OMI (always `bsu`).
         * 
         * @return builder
         * 
         */
        public Builder rootDeviceType(@Nullable Output<String> rootDeviceType) {
            $.rootDeviceType = rootDeviceType;
            return this;
        }

        /**
         * @param rootDeviceType The type of root device used by the OMI (always `bsu`).
         * 
         * @return builder
         * 
         */
        public Builder rootDeviceType(String rootDeviceType) {
            return rootDeviceType(Output.of(rootDeviceType));
        }

        /**
         * @param sourceImageId The ID of the OMI you want to copy. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
         * 
         * @return builder
         * 
         */
        public Builder sourceImageId(@Nullable Output<String> sourceImageId) {
            $.sourceImageId = sourceImageId;
            return this;
        }

        /**
         * @param sourceImageId The ID of the OMI you want to copy. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
         * 
         * @return builder
         * 
         */
        public Builder sourceImageId(String sourceImageId) {
            return sourceImageId(Output.of(sourceImageId));
        }

        /**
         * @param sourceRegionName The name of the source Region, which must be the same as the Region of your account.
         * 
         * @return builder
         * 
         */
        public Builder sourceRegionName(@Nullable Output<String> sourceRegionName) {
            $.sourceRegionName = sourceRegionName;
            return this;
        }

        /**
         * @param sourceRegionName The name of the source Region, which must be the same as the Region of your account.
         * 
         * @return builder
         * 
         */
        public Builder sourceRegionName(String sourceRegionName) {
            return sourceRegionName(Output.of(sourceRegionName));
        }

        /**
         * @param state The state of the OMI (`pending` \| `available` \| `failed`).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the OMI (`pending` \| `available` \| `failed`).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param stateComments Information about the change of state.
         * 
         * @return builder
         * 
         */
        public Builder stateComments(@Nullable Output<List<ImageStateCommentArgs>> stateComments) {
            $.stateComments = stateComments;
            return this;
        }

        /**
         * @param stateComments Information about the change of state.
         * 
         * @return builder
         * 
         */
        public Builder stateComments(List<ImageStateCommentArgs> stateComments) {
            return stateComments(Output.of(stateComments));
        }

        /**
         * @param stateComments Information about the change of state.
         * 
         * @return builder
         * 
         */
        public Builder stateComments(ImageStateCommentArgs... stateComments) {
            return stateComments(List.of(stateComments));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ImageTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ImageTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(ImageTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param vmId The ID of the VM from which you want to create the OMI. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
         * 
         * @return builder
         * 
         */
        public Builder vmId(@Nullable Output<String> vmId) {
            $.vmId = vmId;
            return this;
        }

        /**
         * @param vmId The ID of the VM from which you want to create the OMI. You must specify only one of the following parameters: `file_location`, `root_device_name`, `source_image_id` or `vm_id`.
         * 
         * @return builder
         * 
         */
        public Builder vmId(String vmId) {
            return vmId(Output.of(vmId));
        }

        public ImageState build() {
            return $;
        }
    }

}
