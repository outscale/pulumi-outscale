// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.outscale.outputs.GetVolumesVolumeLinkedVolume;
import com.pulumi.outscale.outputs.GetVolumesVolumeTag;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVolumesVolume {
    /**
     * @return The date and time of creation of the volume.
     * 
     */
    private String creationDate;
    /**
     * @return The number of I/O operations per second (IOPS):&lt;br /&gt;- For `io1` volumes, the number of provisioned IOPS.&lt;br /&gt;- For `gp2` volumes, the baseline performance of the volume.
     * 
     */
    private Integer iops;
    /**
     * @return Information about your volume attachment.
     * 
     */
    private List<GetVolumesVolumeLinkedVolume> linkedVolumes;
    /**
     * @return The size of the volume, in gibibytes (GiB).
     * 
     */
    private Integer size;
    /**
     * @return The snapshot from which the volume was created.
     * 
     */
    private String snapshotId;
    /**
     * @return The state of the volume (`creating` \| `available` \| `in-use` \| `updating` \| `deleting` \| `error`).
     * 
     */
    private String state;
    /**
     * @return The Subregion in which the volume was created.
     * 
     */
    private String subregionName;
    /**
     * @return The key/value combinations of the tags associated with the volumes, in the following format: `TAGKEY=TAGVALUE`.
     * 
     */
    private List<GetVolumesVolumeTag> tags;
    /**
     * @return The ID of the volume.
     * 
     */
    private String volumeId;
    /**
     * @return The type of the volume (`standard` \| `gp2` \| `io1`).
     * 
     */
    private String volumeType;

    private GetVolumesVolume() {}
    /**
     * @return The date and time of creation of the volume.
     * 
     */
    public String creationDate() {
        return this.creationDate;
    }
    /**
     * @return The number of I/O operations per second (IOPS):&lt;br /&gt;- For `io1` volumes, the number of provisioned IOPS.&lt;br /&gt;- For `gp2` volumes, the baseline performance of the volume.
     * 
     */
    public Integer iops() {
        return this.iops;
    }
    /**
     * @return Information about your volume attachment.
     * 
     */
    public List<GetVolumesVolumeLinkedVolume> linkedVolumes() {
        return this.linkedVolumes;
    }
    /**
     * @return The size of the volume, in gibibytes (GiB).
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return The snapshot from which the volume was created.
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return The state of the volume (`creating` \| `available` \| `in-use` \| `updating` \| `deleting` \| `error`).
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The Subregion in which the volume was created.
     * 
     */
    public String subregionName() {
        return this.subregionName;
    }
    /**
     * @return The key/value combinations of the tags associated with the volumes, in the following format: `TAGKEY=TAGVALUE`.
     * 
     */
    public List<GetVolumesVolumeTag> tags() {
        return this.tags;
    }
    /**
     * @return The ID of the volume.
     * 
     */
    public String volumeId() {
        return this.volumeId;
    }
    /**
     * @return The type of the volume (`standard` \| `gp2` \| `io1`).
     * 
     */
    public String volumeType() {
        return this.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumesVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String creationDate;
        private Integer iops;
        private List<GetVolumesVolumeLinkedVolume> linkedVolumes;
        private Integer size;
        private String snapshotId;
        private String state;
        private String subregionName;
        private List<GetVolumesVolumeTag> tags;
        private String volumeId;
        private String volumeType;
        public Builder() {}
        public Builder(GetVolumesVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationDate = defaults.creationDate;
    	      this.iops = defaults.iops;
    	      this.linkedVolumes = defaults.linkedVolumes;
    	      this.size = defaults.size;
    	      this.snapshotId = defaults.snapshotId;
    	      this.state = defaults.state;
    	      this.subregionName = defaults.subregionName;
    	      this.tags = defaults.tags;
    	      this.volumeId = defaults.volumeId;
    	      this.volumeType = defaults.volumeType;
        }

        @CustomType.Setter
        public Builder creationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }
        @CustomType.Setter
        public Builder iops(Integer iops) {
            this.iops = Objects.requireNonNull(iops);
            return this;
        }
        @CustomType.Setter
        public Builder linkedVolumes(List<GetVolumesVolumeLinkedVolume> linkedVolumes) {
            this.linkedVolumes = Objects.requireNonNull(linkedVolumes);
            return this;
        }
        public Builder linkedVolumes(GetVolumesVolumeLinkedVolume... linkedVolumes) {
            return linkedVolumes(List.of(linkedVolumes));
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            this.snapshotId = Objects.requireNonNull(snapshotId);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder subregionName(String subregionName) {
            this.subregionName = Objects.requireNonNull(subregionName);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetVolumesVolumeTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetVolumesVolumeTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder volumeId(String volumeId) {
            this.volumeId = Objects.requireNonNull(volumeId);
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(String volumeType) {
            this.volumeType = Objects.requireNonNull(volumeType);
            return this;
        }
        public GetVolumesVolume build() {
            final var o = new GetVolumesVolume();
            o.creationDate = creationDate;
            o.iops = iops;
            o.linkedVolumes = linkedVolumes;
            o.size = size;
            o.snapshotId = snapshotId;
            o.state = state;
            o.subregionName = subregionName;
            o.tags = tags;
            o.volumeId = volumeId;
            o.volumeType = volumeType;
            return o;
        }
    }
}
