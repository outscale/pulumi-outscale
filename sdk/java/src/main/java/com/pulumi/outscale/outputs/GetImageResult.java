// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.outscale.outputs.GetImageBlockDeviceMapping;
import com.pulumi.outscale.outputs.GetImageFilter;
import com.pulumi.outscale.outputs.GetImagePermissionsToLaunch;
import com.pulumi.outscale.outputs.GetImageStateComment;
import com.pulumi.outscale.outputs.GetImageTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetImageResult {
    /**
     * @return The account alias of the owner of the OMI.
     * 
     */
    private String accountAlias;
    /**
     * @return The account ID of the owner of the OMI.
     * 
     */
    private String accountId;
    /**
     * @return The architecture of the OMI (by default, `i386`).
     * 
     */
    private String architecture;
    /**
     * @return One or more block device mappings.
     * 
     */
    private List<GetImageBlockDeviceMapping> blockDeviceMappings;
    /**
     * @return The date and time of creation of the OMI, in ISO 8601 date-time format.
     * 
     */
    private String creationDate;
    /**
     * @return The description of the OMI.
     * 
     */
    private String description;
    /**
     * @return The location of the bucket where the OMI files are stored.
     * 
     */
    private String fileLocation;
    private @Nullable List<GetImageFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The ID of the OMI.
     * 
     */
    private @Nullable String imageId;
    /**
     * @return The name of the OMI.
     * 
     */
    private String imageName;
    /**
     * @return The type of the OMI.
     * 
     */
    private String imageType;
    private Boolean isPublic;
    private @Nullable List<String> permissions;
    /**
     * @return Permissions for the resource.
     * 
     */
    private List<GetImagePermissionsToLaunch> permissionsToLaunches;
    /**
     * @return The product codes associated with the OMI.
     * 
     */
    private List<String> productCodes;
    private String requestId;
    /**
     * @return The name of the root device.
     * 
     */
    private String rootDeviceName;
    /**
     * @return The type of root device used by the OMI (always `bsu`).
     * 
     */
    private String rootDeviceType;
    /**
     * @return The state of the OMI (`pending` \| `available` \| `failed`).
     * 
     */
    private String state;
    /**
     * @return Information about the change of state.
     * 
     */
    private List<GetImageStateComment> stateComments;
    /**
     * @return One or more tags associated with the OMI.
     * 
     */
    private List<GetImageTag> tags;

    private GetImageResult() {}
    /**
     * @return The account alias of the owner of the OMI.
     * 
     */
    public String accountAlias() {
        return this.accountAlias;
    }
    /**
     * @return The account ID of the owner of the OMI.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return The architecture of the OMI (by default, `i386`).
     * 
     */
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return One or more block device mappings.
     * 
     */
    public List<GetImageBlockDeviceMapping> blockDeviceMappings() {
        return this.blockDeviceMappings;
    }
    /**
     * @return The date and time of creation of the OMI, in ISO 8601 date-time format.
     * 
     */
    public String creationDate() {
        return this.creationDate;
    }
    /**
     * @return The description of the OMI.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The location of the bucket where the OMI files are stored.
     * 
     */
    public String fileLocation() {
        return this.fileLocation;
    }
    public List<GetImageFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the OMI.
     * 
     */
    public Optional<String> imageId() {
        return Optional.ofNullable(this.imageId);
    }
    /**
     * @return The name of the OMI.
     * 
     */
    public String imageName() {
        return this.imageName;
    }
    /**
     * @return The type of the OMI.
     * 
     */
    public String imageType() {
        return this.imageType;
    }
    public Boolean isPublic() {
        return this.isPublic;
    }
    public List<String> permissions() {
        return this.permissions == null ? List.of() : this.permissions;
    }
    /**
     * @return Permissions for the resource.
     * 
     */
    public List<GetImagePermissionsToLaunch> permissionsToLaunches() {
        return this.permissionsToLaunches;
    }
    /**
     * @return The product codes associated with the OMI.
     * 
     */
    public List<String> productCodes() {
        return this.productCodes;
    }
    public String requestId() {
        return this.requestId;
    }
    /**
     * @return The name of the root device.
     * 
     */
    public String rootDeviceName() {
        return this.rootDeviceName;
    }
    /**
     * @return The type of root device used by the OMI (always `bsu`).
     * 
     */
    public String rootDeviceType() {
        return this.rootDeviceType;
    }
    /**
     * @return The state of the OMI (`pending` \| `available` \| `failed`).
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Information about the change of state.
     * 
     */
    public List<GetImageStateComment> stateComments() {
        return this.stateComments;
    }
    /**
     * @return One or more tags associated with the OMI.
     * 
     */
    public List<GetImageTag> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountAlias;
        private String accountId;
        private String architecture;
        private List<GetImageBlockDeviceMapping> blockDeviceMappings;
        private String creationDate;
        private String description;
        private String fileLocation;
        private @Nullable List<GetImageFilter> filters;
        private String id;
        private @Nullable String imageId;
        private String imageName;
        private String imageType;
        private Boolean isPublic;
        private @Nullable List<String> permissions;
        private List<GetImagePermissionsToLaunch> permissionsToLaunches;
        private List<String> productCodes;
        private String requestId;
        private String rootDeviceName;
        private String rootDeviceType;
        private String state;
        private List<GetImageStateComment> stateComments;
        private List<GetImageTag> tags;
        public Builder() {}
        public Builder(GetImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountAlias = defaults.accountAlias;
    	      this.accountId = defaults.accountId;
    	      this.architecture = defaults.architecture;
    	      this.blockDeviceMappings = defaults.blockDeviceMappings;
    	      this.creationDate = defaults.creationDate;
    	      this.description = defaults.description;
    	      this.fileLocation = defaults.fileLocation;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.imageName = defaults.imageName;
    	      this.imageType = defaults.imageType;
    	      this.isPublic = defaults.isPublic;
    	      this.permissions = defaults.permissions;
    	      this.permissionsToLaunches = defaults.permissionsToLaunches;
    	      this.productCodes = defaults.productCodes;
    	      this.requestId = defaults.requestId;
    	      this.rootDeviceName = defaults.rootDeviceName;
    	      this.rootDeviceType = defaults.rootDeviceType;
    	      this.state = defaults.state;
    	      this.stateComments = defaults.stateComments;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder accountAlias(String accountAlias) {
            this.accountAlias = Objects.requireNonNull(accountAlias);
            return this;
        }
        @CustomType.Setter
        public Builder accountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }
        @CustomType.Setter
        public Builder architecture(String architecture) {
            this.architecture = Objects.requireNonNull(architecture);
            return this;
        }
        @CustomType.Setter
        public Builder blockDeviceMappings(List<GetImageBlockDeviceMapping> blockDeviceMappings) {
            this.blockDeviceMappings = Objects.requireNonNull(blockDeviceMappings);
            return this;
        }
        public Builder blockDeviceMappings(GetImageBlockDeviceMapping... blockDeviceMappings) {
            return blockDeviceMappings(List.of(blockDeviceMappings));
        }
        @CustomType.Setter
        public Builder creationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder fileLocation(String fileLocation) {
            this.fileLocation = Objects.requireNonNull(fileLocation);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetImageFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetImageFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder imageId(@Nullable String imageId) {
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder imageName(String imageName) {
            this.imageName = Objects.requireNonNull(imageName);
            return this;
        }
        @CustomType.Setter
        public Builder imageType(String imageType) {
            this.imageType = Objects.requireNonNull(imageType);
            return this;
        }
        @CustomType.Setter
        public Builder isPublic(Boolean isPublic) {
            this.isPublic = Objects.requireNonNull(isPublic);
            return this;
        }
        @CustomType.Setter
        public Builder permissions(@Nullable List<String> permissions) {
            this.permissions = permissions;
            return this;
        }
        public Builder permissions(String... permissions) {
            return permissions(List.of(permissions));
        }
        @CustomType.Setter
        public Builder permissionsToLaunches(List<GetImagePermissionsToLaunch> permissionsToLaunches) {
            this.permissionsToLaunches = Objects.requireNonNull(permissionsToLaunches);
            return this;
        }
        public Builder permissionsToLaunches(GetImagePermissionsToLaunch... permissionsToLaunches) {
            return permissionsToLaunches(List.of(permissionsToLaunches));
        }
        @CustomType.Setter
        public Builder productCodes(List<String> productCodes) {
            this.productCodes = Objects.requireNonNull(productCodes);
            return this;
        }
        public Builder productCodes(String... productCodes) {
            return productCodes(List.of(productCodes));
        }
        @CustomType.Setter
        public Builder requestId(String requestId) {
            this.requestId = Objects.requireNonNull(requestId);
            return this;
        }
        @CustomType.Setter
        public Builder rootDeviceName(String rootDeviceName) {
            this.rootDeviceName = Objects.requireNonNull(rootDeviceName);
            return this;
        }
        @CustomType.Setter
        public Builder rootDeviceType(String rootDeviceType) {
            this.rootDeviceType = Objects.requireNonNull(rootDeviceType);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder stateComments(List<GetImageStateComment> stateComments) {
            this.stateComments = Objects.requireNonNull(stateComments);
            return this;
        }
        public Builder stateComments(GetImageStateComment... stateComments) {
            return stateComments(List.of(stateComments));
        }
        @CustomType.Setter
        public Builder tags(List<GetImageTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetImageTag... tags) {
            return tags(List.of(tags));
        }
        public GetImageResult build() {
            final var o = new GetImageResult();
            o.accountAlias = accountAlias;
            o.accountId = accountId;
            o.architecture = architecture;
            o.blockDeviceMappings = blockDeviceMappings;
            o.creationDate = creationDate;
            o.description = description;
            o.fileLocation = fileLocation;
            o.filters = filters;
            o.id = id;
            o.imageId = imageId;
            o.imageName = imageName;
            o.imageType = imageType;
            o.isPublic = isPublic;
            o.permissions = permissions;
            o.permissionsToLaunches = permissionsToLaunches;
            o.productCodes = productCodes;
            o.requestId = requestId;
            o.rootDeviceName = rootDeviceName;
            o.rootDeviceType = rootDeviceType;
            o.state = state;
            o.stateComments = stateComments;
            o.tags = tags;
            return o;
        }
    }
}
