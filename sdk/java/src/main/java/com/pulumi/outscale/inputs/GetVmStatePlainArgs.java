// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.GetVmStateFilter;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetVmStatePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetVmStatePlainArgs Empty = new GetVmStatePlainArgs();

    /**
     * If true, includes the status of all VMs. By default or if set to false, only includes the status of running VMs.
     * 
     */
    @Import(name="allVms")
    private @Nullable Boolean allVms;

    /**
     * @return If true, includes the status of all VMs. By default or if set to false, only includes the status of running VMs.
     * 
     */
    public Optional<Boolean> allVms() {
        return Optional.ofNullable(this.allVms);
    }

    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    @Import(name="filters")
    private @Nullable List<GetVmStateFilter> filters;

    /**
     * @return A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    public Optional<List<GetVmStateFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The ID of the VM.
     * 
     */
    @Import(name="vmId")
    private @Nullable String vmId;

    /**
     * @return The ID of the VM.
     * 
     */
    public Optional<String> vmId() {
        return Optional.ofNullable(this.vmId);
    }

    private GetVmStatePlainArgs() {}

    private GetVmStatePlainArgs(GetVmStatePlainArgs $) {
        this.allVms = $.allVms;
        this.filters = $.filters;
        this.vmId = $.vmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetVmStatePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetVmStatePlainArgs $;

        public Builder() {
            $ = new GetVmStatePlainArgs();
        }

        public Builder(GetVmStatePlainArgs defaults) {
            $ = new GetVmStatePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allVms If true, includes the status of all VMs. By default or if set to false, only includes the status of running VMs.
         * 
         * @return builder
         * 
         */
        public Builder allVms(@Nullable Boolean allVms) {
            $.allVms = allVms;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable List<GetVmStateFilter> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(GetVmStateFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param vmId The ID of the VM.
         * 
         * @return builder
         * 
         */
        public Builder vmId(@Nullable String vmId) {
            $.vmId = vmId;
            return this;
        }

        public GetVmStatePlainArgs build() {
            return $;
        }
    }

}
