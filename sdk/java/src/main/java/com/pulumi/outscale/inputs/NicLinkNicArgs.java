// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NicLinkNicArgs extends com.pulumi.resources.ResourceArgs {

    public static final NicLinkNicArgs Empty = new NicLinkNicArgs();

    /**
     * If true, the NIC is deleted when the VM is terminated.
     * 
     */
    @Import(name="deleteOnVmDeletion")
    private @Nullable Output<String> deleteOnVmDeletion;

    /**
     * @return If true, the NIC is deleted when the VM is terminated.
     * 
     */
    public Optional<Output<String>> deleteOnVmDeletion() {
        return Optional.ofNullable(this.deleteOnVmDeletion);
    }

    /**
     * The device index for the NIC attachment (between `1` and `7`, both included).
     * 
     */
    @Import(name="deviceNumber")
    private @Nullable Output<Integer> deviceNumber;

    /**
     * @return The device index for the NIC attachment (between `1` and `7`, both included).
     * 
     */
    public Optional<Output<Integer>> deviceNumber() {
        return Optional.ofNullable(this.deviceNumber);
    }

    /**
     * The ID of the NIC to attach.
     * 
     */
    @Import(name="linkNicId")
    private @Nullable Output<String> linkNicId;

    /**
     * @return The ID of the NIC to attach.
     * 
     */
    public Optional<Output<String>> linkNicId() {
        return Optional.ofNullable(this.linkNicId);
    }

    /**
     * The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The account ID of the owner of the VM.
     * 
     */
    @Import(name="vmAccountId")
    private @Nullable Output<String> vmAccountId;

    /**
     * @return The account ID of the owner of the VM.
     * 
     */
    public Optional<Output<String>> vmAccountId() {
        return Optional.ofNullable(this.vmAccountId);
    }

    /**
     * The ID of the VM.
     * 
     */
    @Import(name="vmId")
    private @Nullable Output<String> vmId;

    /**
     * @return The ID of the VM.
     * 
     */
    public Optional<Output<String>> vmId() {
        return Optional.ofNullable(this.vmId);
    }

    private NicLinkNicArgs() {}

    private NicLinkNicArgs(NicLinkNicArgs $) {
        this.deleteOnVmDeletion = $.deleteOnVmDeletion;
        this.deviceNumber = $.deviceNumber;
        this.linkNicId = $.linkNicId;
        this.state = $.state;
        this.vmAccountId = $.vmAccountId;
        this.vmId = $.vmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NicLinkNicArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NicLinkNicArgs $;

        public Builder() {
            $ = new NicLinkNicArgs();
        }

        public Builder(NicLinkNicArgs defaults) {
            $ = new NicLinkNicArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteOnVmDeletion If true, the NIC is deleted when the VM is terminated.
         * 
         * @return builder
         * 
         */
        public Builder deleteOnVmDeletion(@Nullable Output<String> deleteOnVmDeletion) {
            $.deleteOnVmDeletion = deleteOnVmDeletion;
            return this;
        }

        /**
         * @param deleteOnVmDeletion If true, the NIC is deleted when the VM is terminated.
         * 
         * @return builder
         * 
         */
        public Builder deleteOnVmDeletion(String deleteOnVmDeletion) {
            return deleteOnVmDeletion(Output.of(deleteOnVmDeletion));
        }

        /**
         * @param deviceNumber The device index for the NIC attachment (between `1` and `7`, both included).
         * 
         * @return builder
         * 
         */
        public Builder deviceNumber(@Nullable Output<Integer> deviceNumber) {
            $.deviceNumber = deviceNumber;
            return this;
        }

        /**
         * @param deviceNumber The device index for the NIC attachment (between `1` and `7`, both included).
         * 
         * @return builder
         * 
         */
        public Builder deviceNumber(Integer deviceNumber) {
            return deviceNumber(Output.of(deviceNumber));
        }

        /**
         * @param linkNicId The ID of the NIC to attach.
         * 
         * @return builder
         * 
         */
        public Builder linkNicId(@Nullable Output<String> linkNicId) {
            $.linkNicId = linkNicId;
            return this;
        }

        /**
         * @param linkNicId The ID of the NIC to attach.
         * 
         * @return builder
         * 
         */
        public Builder linkNicId(String linkNicId) {
            return linkNicId(Output.of(linkNicId));
        }

        /**
         * @param state The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param vmAccountId The account ID of the owner of the VM.
         * 
         * @return builder
         * 
         */
        public Builder vmAccountId(@Nullable Output<String> vmAccountId) {
            $.vmAccountId = vmAccountId;
            return this;
        }

        /**
         * @param vmAccountId The account ID of the owner of the VM.
         * 
         * @return builder
         * 
         */
        public Builder vmAccountId(String vmAccountId) {
            return vmAccountId(Output.of(vmAccountId));
        }

        /**
         * @param vmId The ID of the VM.
         * 
         * @return builder
         * 
         */
        public Builder vmId(@Nullable Output<String> vmId) {
            $.vmId = vmId;
            return this;
        }

        /**
         * @param vmId The ID of the VM.
         * 
         * @return builder
         * 
         */
        public Builder vmId(String vmId) {
            return vmId(Output.of(vmId));
        }

        public NicLinkNicArgs build() {
            return $;
        }
    }

}
