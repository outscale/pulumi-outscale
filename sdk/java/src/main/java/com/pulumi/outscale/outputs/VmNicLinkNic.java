// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VmNicLinkNic {
    /**
     * @return If true, the NIC is deleted when the VM is terminated. You can specify this parameter only for a new NIC. To modify this value for an existing NIC, see [UpdateNic](https://docs.outscale.com/api#updatenic).
     * 
     */
    private @Nullable Boolean deleteOnVmDeletion;
    /**
     * @return The index of the VM device for the NIC attachment (must be `0`). This parameter is required if you create a NIC when creating the VM.
     * 
     */
    private @Nullable String deviceNumber;
    /**
     * @return The ID of the NIC to attach.
     * 
     */
    private @Nullable String linkNicId;
    /**
     * @return The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
     * 
     */
    private @Nullable String state;

    private VmNicLinkNic() {}
    /**
     * @return If true, the NIC is deleted when the VM is terminated. You can specify this parameter only for a new NIC. To modify this value for an existing NIC, see [UpdateNic](https://docs.outscale.com/api#updatenic).
     * 
     */
    public Optional<Boolean> deleteOnVmDeletion() {
        return Optional.ofNullable(this.deleteOnVmDeletion);
    }
    /**
     * @return The index of the VM device for the NIC attachment (must be `0`). This parameter is required if you create a NIC when creating the VM.
     * 
     */
    public Optional<String> deviceNumber() {
        return Optional.ofNullable(this.deviceNumber);
    }
    /**
     * @return The ID of the NIC to attach.
     * 
     */
    public Optional<String> linkNicId() {
        return Optional.ofNullable(this.linkNicId);
    }
    /**
     * @return The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VmNicLinkNic defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean deleteOnVmDeletion;
        private @Nullable String deviceNumber;
        private @Nullable String linkNicId;
        private @Nullable String state;
        public Builder() {}
        public Builder(VmNicLinkNic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteOnVmDeletion = defaults.deleteOnVmDeletion;
    	      this.deviceNumber = defaults.deviceNumber;
    	      this.linkNicId = defaults.linkNicId;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder deleteOnVmDeletion(@Nullable Boolean deleteOnVmDeletion) {
            this.deleteOnVmDeletion = deleteOnVmDeletion;
            return this;
        }
        @CustomType.Setter
        public Builder deviceNumber(@Nullable String deviceNumber) {
            this.deviceNumber = deviceNumber;
            return this;
        }
        @CustomType.Setter
        public Builder linkNicId(@Nullable String linkNicId) {
            this.linkNicId = linkNicId;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public VmNicLinkNic build() {
            final var o = new VmNicLinkNic();
            o.deleteOnVmDeletion = deleteOnVmDeletion;
            o.deviceNumber = deviceNumber;
            o.linkNicId = linkNicId;
            o.state = state;
            return o;
        }
    }
}
