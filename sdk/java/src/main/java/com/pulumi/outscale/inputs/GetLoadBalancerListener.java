// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class GetLoadBalancerListener extends com.pulumi.resources.InvokeArgs {

    public static final GetLoadBalancerListener Empty = new GetLoadBalancerListener();

    /**
     * The port on which the back-end VM is listening (between `1` and `65535`, both included).
     * 
     */
    @Import(name="backendPort", required=true)
    private Integer backendPort;

    /**
     * @return The port on which the back-end VM is listening (between `1` and `65535`, both included).
     * 
     */
    public Integer backendPort() {
        return this.backendPort;
    }

    /**
     * The protocol for routing traffic to back-end VMs (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
     * 
     */
    @Import(name="backendProtocol", required=true)
    private String backendProtocol;

    /**
     * @return The protocol for routing traffic to back-end VMs (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
     * 
     */
    public String backendProtocol() {
        return this.backendProtocol;
    }

    /**
     * The port on which the load balancer is listening (between `1` and `65535`, both included).
     * 
     */
    @Import(name="loadBalancerPort", required=true)
    private Integer loadBalancerPort;

    /**
     * @return The port on which the load balancer is listening (between `1` and `65535`, both included).
     * 
     */
    public Integer loadBalancerPort() {
        return this.loadBalancerPort;
    }

    /**
     * The routing protocol (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
     * 
     */
    @Import(name="loadBalancerProtocol", required=true)
    private String loadBalancerProtocol;

    /**
     * @return The routing protocol (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
     * 
     */
    public String loadBalancerProtocol() {
        return this.loadBalancerProtocol;
    }

    /**
     * The names of the policies. If there are no policies enabled, the list is empty.
     * 
     */
    @Import(name="policyNames", required=true)
    private List<String> policyNames;

    /**
     * @return The names of the policies. If there are no policies enabled, the list is empty.
     * 
     */
    public List<String> policyNames() {
        return this.policyNames;
    }

    /**
     * The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
     * 
     */
    @Import(name="serverCertificateId", required=true)
    private String serverCertificateId;

    /**
     * @return The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
     * 
     */
    public String serverCertificateId() {
        return this.serverCertificateId;
    }

    private GetLoadBalancerListener() {}

    private GetLoadBalancerListener(GetLoadBalancerListener $) {
        this.backendPort = $.backendPort;
        this.backendProtocol = $.backendProtocol;
        this.loadBalancerPort = $.loadBalancerPort;
        this.loadBalancerProtocol = $.loadBalancerProtocol;
        this.policyNames = $.policyNames;
        this.serverCertificateId = $.serverCertificateId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetLoadBalancerListener defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetLoadBalancerListener $;

        public Builder() {
            $ = new GetLoadBalancerListener();
        }

        public Builder(GetLoadBalancerListener defaults) {
            $ = new GetLoadBalancerListener(Objects.requireNonNull(defaults));
        }

        /**
         * @param backendPort The port on which the back-end VM is listening (between `1` and `65535`, both included).
         * 
         * @return builder
         * 
         */
        public Builder backendPort(Integer backendPort) {
            $.backendPort = backendPort;
            return this;
        }

        /**
         * @param backendProtocol The protocol for routing traffic to back-end VMs (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
         * 
         * @return builder
         * 
         */
        public Builder backendProtocol(String backendProtocol) {
            $.backendProtocol = backendProtocol;
            return this;
        }

        /**
         * @param loadBalancerPort The port on which the load balancer is listening (between `1` and `65535`, both included).
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerPort(Integer loadBalancerPort) {
            $.loadBalancerPort = loadBalancerPort;
            return this;
        }

        /**
         * @param loadBalancerProtocol The routing protocol (`HTTP` \| `HTTPS` \| `TCP` \| `SSL`).
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerProtocol(String loadBalancerProtocol) {
            $.loadBalancerProtocol = loadBalancerProtocol;
            return this;
        }

        /**
         * @param policyNames The names of the policies. If there are no policies enabled, the list is empty.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(List<String> policyNames) {
            $.policyNames = policyNames;
            return this;
        }

        /**
         * @param policyNames The names of the policies. If there are no policies enabled, the list is empty.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(String... policyNames) {
            return policyNames(List.of(policyNames));
        }

        /**
         * @param serverCertificateId The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateId(String serverCertificateId) {
            $.serverCertificateId = serverCertificateId;
            return this;
        }

        public GetLoadBalancerListener build() {
            $.backendPort = Objects.requireNonNull($.backendPort, "expected parameter 'backendPort' to be non-null");
            $.backendProtocol = Objects.requireNonNull($.backendProtocol, "expected parameter 'backendProtocol' to be non-null");
            $.loadBalancerPort = Objects.requireNonNull($.loadBalancerPort, "expected parameter 'loadBalancerPort' to be non-null");
            $.loadBalancerProtocol = Objects.requireNonNull($.loadBalancerProtocol, "expected parameter 'loadBalancerProtocol' to be non-null");
            $.policyNames = Objects.requireNonNull($.policyNames, "expected parameter 'policyNames' to be non-null");
            $.serverCertificateId = Objects.requireNonNull($.serverCertificateId, "expected parameter 'serverCertificateId' to be non-null");
            return $;
        }
    }

}
