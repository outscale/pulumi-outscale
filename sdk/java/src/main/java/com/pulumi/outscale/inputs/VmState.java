// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.VmBlockDeviceMappingArgs;
import com.pulumi.outscale.inputs.VmBlockDeviceMappingsCreatedArgs;
import com.pulumi.outscale.inputs.VmNicArgs;
import com.pulumi.outscale.inputs.VmPrimaryNicArgs;
import com.pulumi.outscale.inputs.VmSecurityGroupArgs;
import com.pulumi.outscale.inputs.VmTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VmState extends com.pulumi.resources.ResourceArgs {

    public static final VmState Empty = new VmState();

    @Import(name="adminPassword")
    private @Nullable Output<String> adminPassword;

    public Optional<Output<String>> adminPassword() {
        return Optional.ofNullable(this.adminPassword);
    }

    /**
     * The architecture of the VM (`i386` \| `x86_64`).
     * 
     */
    @Import(name="architecture")
    private @Nullable Output<String> architecture;

    /**
     * @return The architecture of the VM (`i386` \| `x86_64`).
     * 
     */
    public Optional<Output<String>> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    /**
     * One or more block device mappings.
     * 
     */
    @Import(name="blockDeviceMappings")
    private @Nullable Output<List<VmBlockDeviceMappingArgs>> blockDeviceMappings;

    /**
     * @return One or more block device mappings.
     * 
     */
    public Optional<Output<List<VmBlockDeviceMappingArgs>>> blockDeviceMappings() {
        return Optional.ofNullable(this.blockDeviceMappings);
    }

    /**
     * The block device mapping of the VM.
     * 
     */
    @Import(name="blockDeviceMappingsCreateds")
    private @Nullable Output<List<VmBlockDeviceMappingsCreatedArgs>> blockDeviceMappingsCreateds;

    /**
     * @return The block device mapping of the VM.
     * 
     */
    public Optional<Output<List<VmBlockDeviceMappingsCreatedArgs>>> blockDeviceMappingsCreateds() {
        return Optional.ofNullable(this.blockDeviceMappingsCreateds);
    }

    @Import(name="bsuOptimized")
    private @Nullable Output<Boolean> bsuOptimized;

    public Optional<Output<Boolean>> bsuOptimized() {
        return Optional.ofNullable(this.bsuOptimized);
    }

    /**
     * A unique identifier which enables you to manage the idempotency.
     * 
     */
    @Import(name="clientToken")
    private @Nullable Output<String> clientToken;

    /**
     * @return A unique identifier which enables you to manage the idempotency.
     * 
     */
    public Optional<Output<String>> clientToken() {
        return Optional.ofNullable(this.clientToken);
    }

    /**
     * The date and time of creation of the VM.
     * 
     */
    @Import(name="creationDate")
    private @Nullable Output<String> creationDate;

    /**
     * @return The date and time of creation of the VM.
     * 
     */
    public Optional<Output<String>> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }

    /**
     * If true, you cannot delete the VM unless you change this parameter back to false.
     * 
     */
    @Import(name="deletionProtection")
    private @Nullable Output<Boolean> deletionProtection;

    /**
     * @return If true, you cannot delete the VM unless you change this parameter back to false.
     * 
     */
    public Optional<Output<Boolean>> deletionProtection() {
        return Optional.ofNullable(this.deletionProtection);
    }

    /**
     * (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `admin_password` attribute.
     * 
     */
    @Import(name="getAdminPassword")
    private @Nullable Output<Boolean> getAdminPassword;

    /**
     * @return (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `admin_password` attribute.
     * 
     */
    public Optional<Output<Boolean>> getAdminPassword() {
        return Optional.ofNullable(this.getAdminPassword);
    }

    /**
     * The hypervisor type of the VMs (`ovm` \| `xen`).
     * 
     */
    @Import(name="hypervisor")
    private @Nullable Output<String> hypervisor;

    /**
     * @return The hypervisor type of the VMs (`ovm` \| `xen`).
     * 
     */
    public Optional<Output<String>> hypervisor() {
        return Optional.ofNullable(this.hypervisor);
    }

    /**
     * The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
     * 
     */
    @Import(name="isSourceDestChecked")
    private @Nullable Output<Boolean> isSourceDestChecked;

    /**
     * @return (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
     * 
     */
    public Optional<Output<Boolean>> isSourceDestChecked() {
        return Optional.ofNullable(this.isSourceDestChecked);
    }

    /**
     * The name of the keypair.
     * 
     */
    @Import(name="keypairName")
    private @Nullable Output<String> keypairName;

    /**
     * @return The name of the keypair.
     * 
     */
    public Optional<Output<String>> keypairName() {
        return Optional.ofNullable(this.keypairName);
    }

    /**
     * The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
     * 
     */
    @Import(name="launchNumber")
    private @Nullable Output<Integer> launchNumber;

    /**
     * @return The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
     * 
     */
    public Optional<Output<Integer>> launchNumber() {
        return Optional.ofNullable(this.launchNumber);
    }

    /**
     * (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
     * 
     */
    @Import(name="nestedVirtualization")
    private @Nullable Output<Boolean> nestedVirtualization;

    /**
     * @return (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
     * 
     */
    public Optional<Output<Boolean>> nestedVirtualization() {
        return Optional.ofNullable(this.nestedVirtualization);
    }

    /**
     * The ID of the Net for the NIC.
     * 
     */
    @Import(name="netId")
    private @Nullable Output<String> netId;

    /**
     * @return The ID of the Net for the NIC.
     * 
     */
    public Optional<Output<String>> netId() {
        return Optional.ofNullable(this.netId);
    }

    /**
     * One or more NICs. If you specify this parameter, you must not specify the `subnet_id` and `subregion_name` parameters. To define a NIC as the primary network interface of the VM, use the `primary_nic` argument.
     * 
     */
    @Import(name="nics")
    private @Nullable Output<List<VmNicArgs>> nics;

    /**
     * @return One or more NICs. If you specify this parameter, you must not specify the `subnet_id` and `subregion_name` parameters. To define a NIC as the primary network interface of the VM, use the `primary_nic` argument.
     * 
     */
    public Optional<Output<List<VmNicArgs>>> nics() {
        return Optional.ofNullable(this.nics);
    }

    /**
     * Indicates the operating system (OS) of the VM.
     * 
     */
    @Import(name="osFamily")
    private @Nullable Output<String> osFamily;

    /**
     * @return Indicates the operating system (OS) of the VM.
     * 
     */
    public Optional<Output<String>> osFamily() {
        return Optional.ofNullable(this.osFamily);
    }

    /**
     * The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
     * 
     */
    @Import(name="performance")
    private @Nullable Output<String> performance;

    /**
     * @return The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
     * 
     */
    public Optional<Output<String>> performance() {
        return Optional.ofNullable(this.performance);
    }

    /**
     * The name of the Subregion where the VM is placed.
     * 
     */
    @Import(name="placementSubregionName")
    private @Nullable Output<String> placementSubregionName;

    /**
     * @return The name of the Subregion where the VM is placed.
     * 
     */
    public Optional<Output<String>> placementSubregionName() {
        return Optional.ofNullable(this.placementSubregionName);
    }

    /**
     * The tenancy of the VM (`default` | `dedicated`).
     * 
     */
    @Import(name="placementTenancy")
    private @Nullable Output<String> placementTenancy;

    /**
     * @return The tenancy of the VM (`default` | `dedicated`).
     * 
     */
    public Optional<Output<String>> placementTenancy() {
        return Optional.ofNullable(this.placementTenancy);
    }

    /**
     * The primary network interface of the VM.
     * 
     */
    @Import(name="primaryNics")
    private @Nullable Output<List<VmPrimaryNicArgs>> primaryNics;

    /**
     * @return The primary network interface of the VM.
     * 
     */
    public Optional<Output<List<VmPrimaryNicArgs>>> primaryNics() {
        return Optional.ofNullable(this.primaryNics);
    }

    /**
     * The name of the private DNS.
     * 
     */
    @Import(name="privateDnsName")
    private @Nullable Output<String> privateDnsName;

    /**
     * @return The name of the private DNS.
     * 
     */
    public Optional<Output<String>> privateDnsName() {
        return Optional.ofNullable(this.privateDnsName);
    }

    /**
     * The private IP of the NIC.
     * 
     */
    @Import(name="privateIp")
    private @Nullable Output<String> privateIp;

    /**
     * @return The private IP of the NIC.
     * 
     */
    public Optional<Output<String>> privateIp() {
        return Optional.ofNullable(this.privateIp);
    }

    /**
     * One or more private IPs of the VM.
     * 
     */
    @Import(name="privateIps")
    private @Nullable Output<List<String>> privateIps;

    /**
     * @return One or more private IPs of the VM.
     * 
     */
    public Optional<Output<List<String>>> privateIps() {
        return Optional.ofNullable(this.privateIps);
    }

    /**
     * The product codes associated with the OMI used to create the VM.
     * 
     */
    @Import(name="productCodes")
    private @Nullable Output<List<String>> productCodes;

    /**
     * @return The product codes associated with the OMI used to create the VM.
     * 
     */
    public Optional<Output<List<String>>> productCodes() {
        return Optional.ofNullable(this.productCodes);
    }

    /**
     * The name of the public DNS.
     * 
     */
    @Import(name="publicDnsName")
    private @Nullable Output<String> publicDnsName;

    /**
     * @return The name of the public DNS.
     * 
     */
    public Optional<Output<String>> publicDnsName() {
        return Optional.ofNullable(this.publicDnsName);
    }

    /**
     * The public IP of the VM.
     * 
     */
    @Import(name="publicIp")
    private @Nullable Output<String> publicIp;

    /**
     * @return The public IP of the VM.
     * 
     */
    public Optional<Output<String>> publicIp() {
        return Optional.ofNullable(this.publicIp);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * The reservation ID of the VM.
     * 
     */
    @Import(name="reservationId")
    private @Nullable Output<String> reservationId;

    /**
     * @return The reservation ID of the VM.
     * 
     */
    public Optional<Output<String>> reservationId() {
        return Optional.ofNullable(this.reservationId);
    }

    /**
     * The name of the root device for the VM (for example, `/dev/vda1`).
     * 
     */
    @Import(name="rootDeviceName")
    private @Nullable Output<String> rootDeviceName;

    /**
     * @return The name of the root device for the VM (for example, `/dev/vda1`).
     * 
     */
    public Optional<Output<String>> rootDeviceName() {
        return Optional.ofNullable(this.rootDeviceName);
    }

    /**
     * The type of root device used by the VM (always `bsu`).
     * 
     */
    @Import(name="rootDeviceType")
    private @Nullable Output<String> rootDeviceType;

    /**
     * @return The type of root device used by the VM (always `bsu`).
     * 
     */
    public Optional<Output<String>> rootDeviceType() {
        return Optional.ofNullable(this.rootDeviceType);
    }

    /**
     * One or more IDs of security group for the VMs.
     * 
     */
    @Import(name="securityGroupIds")
    private @Nullable Output<List<String>> securityGroupIds;

    /**
     * @return One or more IDs of security group for the VMs.
     * 
     */
    public Optional<Output<List<String>>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    /**
     * One or more names of security groups for the VMs.
     * 
     */
    @Import(name="securityGroupNames")
    private @Nullable Output<List<String>> securityGroupNames;

    /**
     * @return One or more names of security groups for the VMs.
     * 
     */
    public Optional<Output<List<String>>> securityGroupNames() {
        return Optional.ofNullable(this.securityGroupNames);
    }

    /**
     * One or more security groups associated with the VM.
     * 
     */
    @Import(name="securityGroups")
    private @Nullable Output<List<VmSecurityGroupArgs>> securityGroups;

    /**
     * @return One or more security groups associated with the VM.
     * 
     */
    public Optional<Output<List<VmSecurityGroupArgs>>> securityGroups() {
        return Optional.ofNullable(this.securityGroups);
    }

    /**
     * The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The reason explaining the current state of the VM.
     * 
     */
    @Import(name="stateReason")
    private @Nullable Output<String> stateReason;

    /**
     * @return The reason explaining the current state of the VM.
     * 
     */
    public Optional<Output<String>> stateReason() {
        return Optional.ofNullable(this.stateReason);
    }

    /**
     * The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<VmTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<VmTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    /**
     * The ID of the VM.
     * 
     */
    @Import(name="vmId")
    private @Nullable Output<String> vmId;

    /**
     * @return The ID of the VM.
     * 
     */
    public Optional<Output<String>> vmId() {
        return Optional.ofNullable(this.vmId);
    }

    /**
     * The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
     * 
     */
    @Import(name="vmInitiatedShutdownBehavior")
    private @Nullable Output<String> vmInitiatedShutdownBehavior;

    /**
     * @return The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
     * 
     */
    public Optional<Output<String>> vmInitiatedShutdownBehavior() {
        return Optional.ofNullable(this.vmInitiatedShutdownBehavior);
    }

    /**
     * The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.&lt;br /&gt; For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
     * 
     */
    @Import(name="vmType")
    private @Nullable Output<String> vmType;

    /**
     * @return The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.&lt;br /&gt; For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
     * 
     */
    public Optional<Output<String>> vmType() {
        return Optional.ofNullable(this.vmType);
    }

    private VmState() {}

    private VmState(VmState $) {
        this.adminPassword = $.adminPassword;
        this.architecture = $.architecture;
        this.blockDeviceMappings = $.blockDeviceMappings;
        this.blockDeviceMappingsCreateds = $.blockDeviceMappingsCreateds;
        this.bsuOptimized = $.bsuOptimized;
        this.clientToken = $.clientToken;
        this.creationDate = $.creationDate;
        this.deletionProtection = $.deletionProtection;
        this.getAdminPassword = $.getAdminPassword;
        this.hypervisor = $.hypervisor;
        this.imageId = $.imageId;
        this.isSourceDestChecked = $.isSourceDestChecked;
        this.keypairName = $.keypairName;
        this.launchNumber = $.launchNumber;
        this.nestedVirtualization = $.nestedVirtualization;
        this.netId = $.netId;
        this.nics = $.nics;
        this.osFamily = $.osFamily;
        this.performance = $.performance;
        this.placementSubregionName = $.placementSubregionName;
        this.placementTenancy = $.placementTenancy;
        this.primaryNics = $.primaryNics;
        this.privateDnsName = $.privateDnsName;
        this.privateIp = $.privateIp;
        this.privateIps = $.privateIps;
        this.productCodes = $.productCodes;
        this.publicDnsName = $.publicDnsName;
        this.publicIp = $.publicIp;
        this.requestId = $.requestId;
        this.reservationId = $.reservationId;
        this.rootDeviceName = $.rootDeviceName;
        this.rootDeviceType = $.rootDeviceType;
        this.securityGroupIds = $.securityGroupIds;
        this.securityGroupNames = $.securityGroupNames;
        this.securityGroups = $.securityGroups;
        this.state = $.state;
        this.stateReason = $.stateReason;
        this.subnetId = $.subnetId;
        this.tags = $.tags;
        this.userData = $.userData;
        this.vmId = $.vmId;
        this.vmInitiatedShutdownBehavior = $.vmInitiatedShutdownBehavior;
        this.vmType = $.vmType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VmState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VmState $;

        public Builder() {
            $ = new VmState();
        }

        public Builder(VmState defaults) {
            $ = new VmState(Objects.requireNonNull(defaults));
        }

        public Builder adminPassword(@Nullable Output<String> adminPassword) {
            $.adminPassword = adminPassword;
            return this;
        }

        public Builder adminPassword(String adminPassword) {
            return adminPassword(Output.of(adminPassword));
        }

        /**
         * @param architecture The architecture of the VM (`i386` \| `x86_64`).
         * 
         * @return builder
         * 
         */
        public Builder architecture(@Nullable Output<String> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture The architecture of the VM (`i386` \| `x86_64`).
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param blockDeviceMappings One or more block device mappings.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappings(@Nullable Output<List<VmBlockDeviceMappingArgs>> blockDeviceMappings) {
            $.blockDeviceMappings = blockDeviceMappings;
            return this;
        }

        /**
         * @param blockDeviceMappings One or more block device mappings.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappings(List<VmBlockDeviceMappingArgs> blockDeviceMappings) {
            return blockDeviceMappings(Output.of(blockDeviceMappings));
        }

        /**
         * @param blockDeviceMappings One or more block device mappings.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappings(VmBlockDeviceMappingArgs... blockDeviceMappings) {
            return blockDeviceMappings(List.of(blockDeviceMappings));
        }

        /**
         * @param blockDeviceMappingsCreateds The block device mapping of the VM.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappingsCreateds(@Nullable Output<List<VmBlockDeviceMappingsCreatedArgs>> blockDeviceMappingsCreateds) {
            $.blockDeviceMappingsCreateds = blockDeviceMappingsCreateds;
            return this;
        }

        /**
         * @param blockDeviceMappingsCreateds The block device mapping of the VM.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappingsCreateds(List<VmBlockDeviceMappingsCreatedArgs> blockDeviceMappingsCreateds) {
            return blockDeviceMappingsCreateds(Output.of(blockDeviceMappingsCreateds));
        }

        /**
         * @param blockDeviceMappingsCreateds The block device mapping of the VM.
         * 
         * @return builder
         * 
         */
        public Builder blockDeviceMappingsCreateds(VmBlockDeviceMappingsCreatedArgs... blockDeviceMappingsCreateds) {
            return blockDeviceMappingsCreateds(List.of(blockDeviceMappingsCreateds));
        }

        public Builder bsuOptimized(@Nullable Output<Boolean> bsuOptimized) {
            $.bsuOptimized = bsuOptimized;
            return this;
        }

        public Builder bsuOptimized(Boolean bsuOptimized) {
            return bsuOptimized(Output.of(bsuOptimized));
        }

        /**
         * @param clientToken A unique identifier which enables you to manage the idempotency.
         * 
         * @return builder
         * 
         */
        public Builder clientToken(@Nullable Output<String> clientToken) {
            $.clientToken = clientToken;
            return this;
        }

        /**
         * @param clientToken A unique identifier which enables you to manage the idempotency.
         * 
         * @return builder
         * 
         */
        public Builder clientToken(String clientToken) {
            return clientToken(Output.of(clientToken));
        }

        /**
         * @param creationDate The date and time of creation of the VM.
         * 
         * @return builder
         * 
         */
        public Builder creationDate(@Nullable Output<String> creationDate) {
            $.creationDate = creationDate;
            return this;
        }

        /**
         * @param creationDate The date and time of creation of the VM.
         * 
         * @return builder
         * 
         */
        public Builder creationDate(String creationDate) {
            return creationDate(Output.of(creationDate));
        }

        /**
         * @param deletionProtection If true, you cannot delete the VM unless you change this parameter back to false.
         * 
         * @return builder
         * 
         */
        public Builder deletionProtection(@Nullable Output<Boolean> deletionProtection) {
            $.deletionProtection = deletionProtection;
            return this;
        }

        /**
         * @param deletionProtection If true, you cannot delete the VM unless you change this parameter back to false.
         * 
         * @return builder
         * 
         */
        public Builder deletionProtection(Boolean deletionProtection) {
            return deletionProtection(Output.of(deletionProtection));
        }

        /**
         * @param getAdminPassword (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `admin_password` attribute.
         * 
         * @return builder
         * 
         */
        public Builder getAdminPassword(@Nullable Output<Boolean> getAdminPassword) {
            $.getAdminPassword = getAdminPassword;
            return this;
        }

        /**
         * @param getAdminPassword (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `admin_password` attribute.
         * 
         * @return builder
         * 
         */
        public Builder getAdminPassword(Boolean getAdminPassword) {
            return getAdminPassword(Output.of(getAdminPassword));
        }

        /**
         * @param hypervisor The hypervisor type of the VMs (`ovm` \| `xen`).
         * 
         * @return builder
         * 
         */
        public Builder hypervisor(@Nullable Output<String> hypervisor) {
            $.hypervisor = hypervisor;
            return this;
        }

        /**
         * @param hypervisor The hypervisor type of the VMs (`ovm` \| `xen`).
         * 
         * @return builder
         * 
         */
        public Builder hypervisor(String hypervisor) {
            return hypervisor(Output.of(hypervisor));
        }

        /**
         * @param imageId The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param isSourceDestChecked (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
         * 
         * @return builder
         * 
         */
        public Builder isSourceDestChecked(@Nullable Output<Boolean> isSourceDestChecked) {
            $.isSourceDestChecked = isSourceDestChecked;
            return this;
        }

        /**
         * @param isSourceDestChecked (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
         * 
         * @return builder
         * 
         */
        public Builder isSourceDestChecked(Boolean isSourceDestChecked) {
            return isSourceDestChecked(Output.of(isSourceDestChecked));
        }

        /**
         * @param keypairName The name of the keypair.
         * 
         * @return builder
         * 
         */
        public Builder keypairName(@Nullable Output<String> keypairName) {
            $.keypairName = keypairName;
            return this;
        }

        /**
         * @param keypairName The name of the keypair.
         * 
         * @return builder
         * 
         */
        public Builder keypairName(String keypairName) {
            return keypairName(Output.of(keypairName));
        }

        /**
         * @param launchNumber The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
         * 
         * @return builder
         * 
         */
        public Builder launchNumber(@Nullable Output<Integer> launchNumber) {
            $.launchNumber = launchNumber;
            return this;
        }

        /**
         * @param launchNumber The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
         * 
         * @return builder
         * 
         */
        public Builder launchNumber(Integer launchNumber) {
            return launchNumber(Output.of(launchNumber));
        }

        /**
         * @param nestedVirtualization (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
         * 
         * @return builder
         * 
         */
        public Builder nestedVirtualization(@Nullable Output<Boolean> nestedVirtualization) {
            $.nestedVirtualization = nestedVirtualization;
            return this;
        }

        /**
         * @param nestedVirtualization (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
         * 
         * @return builder
         * 
         */
        public Builder nestedVirtualization(Boolean nestedVirtualization) {
            return nestedVirtualization(Output.of(nestedVirtualization));
        }

        /**
         * @param netId The ID of the Net for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder netId(@Nullable Output<String> netId) {
            $.netId = netId;
            return this;
        }

        /**
         * @param netId The ID of the Net for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder netId(String netId) {
            return netId(Output.of(netId));
        }

        /**
         * @param nics One or more NICs. If you specify this parameter, you must not specify the `subnet_id` and `subregion_name` parameters. To define a NIC as the primary network interface of the VM, use the `primary_nic` argument.
         * 
         * @return builder
         * 
         */
        public Builder nics(@Nullable Output<List<VmNicArgs>> nics) {
            $.nics = nics;
            return this;
        }

        /**
         * @param nics One or more NICs. If you specify this parameter, you must not specify the `subnet_id` and `subregion_name` parameters. To define a NIC as the primary network interface of the VM, use the `primary_nic` argument.
         * 
         * @return builder
         * 
         */
        public Builder nics(List<VmNicArgs> nics) {
            return nics(Output.of(nics));
        }

        /**
         * @param nics One or more NICs. If you specify this parameter, you must not specify the `subnet_id` and `subregion_name` parameters. To define a NIC as the primary network interface of the VM, use the `primary_nic` argument.
         * 
         * @return builder
         * 
         */
        public Builder nics(VmNicArgs... nics) {
            return nics(List.of(nics));
        }

        /**
         * @param osFamily Indicates the operating system (OS) of the VM.
         * 
         * @return builder
         * 
         */
        public Builder osFamily(@Nullable Output<String> osFamily) {
            $.osFamily = osFamily;
            return this;
        }

        /**
         * @param osFamily Indicates the operating system (OS) of the VM.
         * 
         * @return builder
         * 
         */
        public Builder osFamily(String osFamily) {
            return osFamily(Output.of(osFamily));
        }

        /**
         * @param performance The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
         * 
         * @return builder
         * 
         */
        public Builder performance(@Nullable Output<String> performance) {
            $.performance = performance;
            return this;
        }

        /**
         * @param performance The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
         * 
         * @return builder
         * 
         */
        public Builder performance(String performance) {
            return performance(Output.of(performance));
        }

        /**
         * @param placementSubregionName The name of the Subregion where the VM is placed.
         * 
         * @return builder
         * 
         */
        public Builder placementSubregionName(@Nullable Output<String> placementSubregionName) {
            $.placementSubregionName = placementSubregionName;
            return this;
        }

        /**
         * @param placementSubregionName The name of the Subregion where the VM is placed.
         * 
         * @return builder
         * 
         */
        public Builder placementSubregionName(String placementSubregionName) {
            return placementSubregionName(Output.of(placementSubregionName));
        }

        /**
         * @param placementTenancy The tenancy of the VM (`default` | `dedicated`).
         * 
         * @return builder
         * 
         */
        public Builder placementTenancy(@Nullable Output<String> placementTenancy) {
            $.placementTenancy = placementTenancy;
            return this;
        }

        /**
         * @param placementTenancy The tenancy of the VM (`default` | `dedicated`).
         * 
         * @return builder
         * 
         */
        public Builder placementTenancy(String placementTenancy) {
            return placementTenancy(Output.of(placementTenancy));
        }

        /**
         * @param primaryNics The primary network interface of the VM.
         * 
         * @return builder
         * 
         */
        public Builder primaryNics(@Nullable Output<List<VmPrimaryNicArgs>> primaryNics) {
            $.primaryNics = primaryNics;
            return this;
        }

        /**
         * @param primaryNics The primary network interface of the VM.
         * 
         * @return builder
         * 
         */
        public Builder primaryNics(List<VmPrimaryNicArgs> primaryNics) {
            return primaryNics(Output.of(primaryNics));
        }

        /**
         * @param primaryNics The primary network interface of the VM.
         * 
         * @return builder
         * 
         */
        public Builder primaryNics(VmPrimaryNicArgs... primaryNics) {
            return primaryNics(List.of(primaryNics));
        }

        /**
         * @param privateDnsName The name of the private DNS.
         * 
         * @return builder
         * 
         */
        public Builder privateDnsName(@Nullable Output<String> privateDnsName) {
            $.privateDnsName = privateDnsName;
            return this;
        }

        /**
         * @param privateDnsName The name of the private DNS.
         * 
         * @return builder
         * 
         */
        public Builder privateDnsName(String privateDnsName) {
            return privateDnsName(Output.of(privateDnsName));
        }

        /**
         * @param privateIp The private IP of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(@Nullable Output<String> privateIp) {
            $.privateIp = privateIp;
            return this;
        }

        /**
         * @param privateIp The private IP of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(String privateIp) {
            return privateIp(Output.of(privateIp));
        }

        /**
         * @param privateIps One or more private IPs of the VM.
         * 
         * @return builder
         * 
         */
        public Builder privateIps(@Nullable Output<List<String>> privateIps) {
            $.privateIps = privateIps;
            return this;
        }

        /**
         * @param privateIps One or more private IPs of the VM.
         * 
         * @return builder
         * 
         */
        public Builder privateIps(List<String> privateIps) {
            return privateIps(Output.of(privateIps));
        }

        /**
         * @param privateIps One or more private IPs of the VM.
         * 
         * @return builder
         * 
         */
        public Builder privateIps(String... privateIps) {
            return privateIps(List.of(privateIps));
        }

        /**
         * @param productCodes The product codes associated with the OMI used to create the VM.
         * 
         * @return builder
         * 
         */
        public Builder productCodes(@Nullable Output<List<String>> productCodes) {
            $.productCodes = productCodes;
            return this;
        }

        /**
         * @param productCodes The product codes associated with the OMI used to create the VM.
         * 
         * @return builder
         * 
         */
        public Builder productCodes(List<String> productCodes) {
            return productCodes(Output.of(productCodes));
        }

        /**
         * @param productCodes The product codes associated with the OMI used to create the VM.
         * 
         * @return builder
         * 
         */
        public Builder productCodes(String... productCodes) {
            return productCodes(List.of(productCodes));
        }

        /**
         * @param publicDnsName The name of the public DNS.
         * 
         * @return builder
         * 
         */
        public Builder publicDnsName(@Nullable Output<String> publicDnsName) {
            $.publicDnsName = publicDnsName;
            return this;
        }

        /**
         * @param publicDnsName The name of the public DNS.
         * 
         * @return builder
         * 
         */
        public Builder publicDnsName(String publicDnsName) {
            return publicDnsName(Output.of(publicDnsName));
        }

        /**
         * @param publicIp The public IP of the VM.
         * 
         * @return builder
         * 
         */
        public Builder publicIp(@Nullable Output<String> publicIp) {
            $.publicIp = publicIp;
            return this;
        }

        /**
         * @param publicIp The public IP of the VM.
         * 
         * @return builder
         * 
         */
        public Builder publicIp(String publicIp) {
            return publicIp(Output.of(publicIp));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param reservationId The reservation ID of the VM.
         * 
         * @return builder
         * 
         */
        public Builder reservationId(@Nullable Output<String> reservationId) {
            $.reservationId = reservationId;
            return this;
        }

        /**
         * @param reservationId The reservation ID of the VM.
         * 
         * @return builder
         * 
         */
        public Builder reservationId(String reservationId) {
            return reservationId(Output.of(reservationId));
        }

        /**
         * @param rootDeviceName The name of the root device for the VM (for example, `/dev/vda1`).
         * 
         * @return builder
         * 
         */
        public Builder rootDeviceName(@Nullable Output<String> rootDeviceName) {
            $.rootDeviceName = rootDeviceName;
            return this;
        }

        /**
         * @param rootDeviceName The name of the root device for the VM (for example, `/dev/vda1`).
         * 
         * @return builder
         * 
         */
        public Builder rootDeviceName(String rootDeviceName) {
            return rootDeviceName(Output.of(rootDeviceName));
        }

        /**
         * @param rootDeviceType The type of root device used by the VM (always `bsu`).
         * 
         * @return builder
         * 
         */
        public Builder rootDeviceType(@Nullable Output<String> rootDeviceType) {
            $.rootDeviceType = rootDeviceType;
            return this;
        }

        /**
         * @param rootDeviceType The type of root device used by the VM (always `bsu`).
         * 
         * @return builder
         * 
         */
        public Builder rootDeviceType(String rootDeviceType) {
            return rootDeviceType(Output.of(rootDeviceType));
        }

        /**
         * @param securityGroupIds One or more IDs of security group for the VMs.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        /**
         * @param securityGroupIds One or more IDs of security group for the VMs.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        /**
         * @param securityGroupIds One or more IDs of security group for the VMs.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        /**
         * @param securityGroupNames One or more names of security groups for the VMs.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupNames(@Nullable Output<List<String>> securityGroupNames) {
            $.securityGroupNames = securityGroupNames;
            return this;
        }

        /**
         * @param securityGroupNames One or more names of security groups for the VMs.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupNames(List<String> securityGroupNames) {
            return securityGroupNames(Output.of(securityGroupNames));
        }

        /**
         * @param securityGroupNames One or more names of security groups for the VMs.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupNames(String... securityGroupNames) {
            return securityGroupNames(List.of(securityGroupNames));
        }

        /**
         * @param securityGroups One or more security groups associated with the VM.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(@Nullable Output<List<VmSecurityGroupArgs>> securityGroups) {
            $.securityGroups = securityGroups;
            return this;
        }

        /**
         * @param securityGroups One or more security groups associated with the VM.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(List<VmSecurityGroupArgs> securityGroups) {
            return securityGroups(Output.of(securityGroups));
        }

        /**
         * @param securityGroups One or more security groups associated with the VM.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(VmSecurityGroupArgs... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }

        /**
         * @param state The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param stateReason The reason explaining the current state of the VM.
         * 
         * @return builder
         * 
         */
        public Builder stateReason(@Nullable Output<String> stateReason) {
            $.stateReason = stateReason;
            return this;
        }

        /**
         * @param stateReason The reason explaining the current state of the VM.
         * 
         * @return builder
         * 
         */
        public Builder stateReason(String stateReason) {
            return stateReason(Output.of(stateReason));
        }

        /**
         * @param subnetId The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<VmTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<VmTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(VmTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param userData Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        /**
         * @param vmId The ID of the VM.
         * 
         * @return builder
         * 
         */
        public Builder vmId(@Nullable Output<String> vmId) {
            $.vmId = vmId;
            return this;
        }

        /**
         * @param vmId The ID of the VM.
         * 
         * @return builder
         * 
         */
        public Builder vmId(String vmId) {
            return vmId(Output.of(vmId));
        }

        /**
         * @param vmInitiatedShutdownBehavior The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
         * 
         * @return builder
         * 
         */
        public Builder vmInitiatedShutdownBehavior(@Nullable Output<String> vmInitiatedShutdownBehavior) {
            $.vmInitiatedShutdownBehavior = vmInitiatedShutdownBehavior;
            return this;
        }

        /**
         * @param vmInitiatedShutdownBehavior The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
         * 
         * @return builder
         * 
         */
        public Builder vmInitiatedShutdownBehavior(String vmInitiatedShutdownBehavior) {
            return vmInitiatedShutdownBehavior(Output.of(vmInitiatedShutdownBehavior));
        }

        /**
         * @param vmType The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.&lt;br /&gt; For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
         * 
         * @return builder
         * 
         */
        public Builder vmType(@Nullable Output<String> vmType) {
            $.vmType = vmType;
            return this;
        }

        /**
         * @param vmType The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.&lt;br /&gt; For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
         * 
         * @return builder
         * 
         */
        public Builder vmType(String vmType) {
            return vmType(Output.of(vmType));
        }

        public VmState build() {
            return $;
        }
    }

}
