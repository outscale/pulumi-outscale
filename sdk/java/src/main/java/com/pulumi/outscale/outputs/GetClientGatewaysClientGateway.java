// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.outscale.outputs.GetClientGatewaysClientGatewayTag;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetClientGatewaysClientGateway {
    /**
     * @return The Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find the path to your client gateway through the Internet.
     * 
     */
    private Integer bgpAsn;
    /**
     * @return The ID of the client gateway.
     * 
     */
    private @Nullable String clientGatewayId;
    /**
     * @return The type of communication tunnel used by the client gateway (only `ipsec.1` is supported).
     * 
     */
    private String connectionType;
    /**
     * @return The public IPv4 address of the client gateway (must be a fixed address into a NATed network).
     * 
     */
    private String publicIp;
    /**
     * @return The state of the client gateway (`pending` \| `available` \| `deleting` \| `deleted`).
     * 
     */
    private String state;
    /**
     * @return The key/value combinations of the tags associated with the client gateways, in the following format: `TAGKEY=TAGVALUE`.
     * 
     */
    private List<GetClientGatewaysClientGatewayTag> tags;

    private GetClientGatewaysClientGateway() {}
    /**
     * @return The Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find the path to your client gateway through the Internet.
     * 
     */
    public Integer bgpAsn() {
        return this.bgpAsn;
    }
    /**
     * @return The ID of the client gateway.
     * 
     */
    public Optional<String> clientGatewayId() {
        return Optional.ofNullable(this.clientGatewayId);
    }
    /**
     * @return The type of communication tunnel used by the client gateway (only `ipsec.1` is supported).
     * 
     */
    public String connectionType() {
        return this.connectionType;
    }
    /**
     * @return The public IPv4 address of the client gateway (must be a fixed address into a NATed network).
     * 
     */
    public String publicIp() {
        return this.publicIp;
    }
    /**
     * @return The state of the client gateway (`pending` \| `available` \| `deleting` \| `deleted`).
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The key/value combinations of the tags associated with the client gateways, in the following format: `TAGKEY=TAGVALUE`.
     * 
     */
    public List<GetClientGatewaysClientGatewayTag> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClientGatewaysClientGateway defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer bgpAsn;
        private @Nullable String clientGatewayId;
        private String connectionType;
        private String publicIp;
        private String state;
        private List<GetClientGatewaysClientGatewayTag> tags;
        public Builder() {}
        public Builder(GetClientGatewaysClientGateway defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bgpAsn = defaults.bgpAsn;
    	      this.clientGatewayId = defaults.clientGatewayId;
    	      this.connectionType = defaults.connectionType;
    	      this.publicIp = defaults.publicIp;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder bgpAsn(Integer bgpAsn) {
            this.bgpAsn = Objects.requireNonNull(bgpAsn);
            return this;
        }
        @CustomType.Setter
        public Builder clientGatewayId(@Nullable String clientGatewayId) {
            this.clientGatewayId = clientGatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(String connectionType) {
            this.connectionType = Objects.requireNonNull(connectionType);
            return this;
        }
        @CustomType.Setter
        public Builder publicIp(String publicIp) {
            this.publicIp = Objects.requireNonNull(publicIp);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetClientGatewaysClientGatewayTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetClientGatewaysClientGatewayTag... tags) {
            return tags(List.of(tags));
        }
        public GetClientGatewaysClientGateway build() {
            final var o = new GetClientGatewaysClientGateway();
            o.bgpAsn = bgpAsn;
            o.clientGatewayId = clientGatewayId;
            o.connectionType = connectionType;
            o.publicIp = publicIp;
            o.state = state;
            o.tags = tags;
            return o;
        }
    }
}
