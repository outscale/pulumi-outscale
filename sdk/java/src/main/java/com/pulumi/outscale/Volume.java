// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.outscale.Utilities;
import com.pulumi.outscale.VolumeArgs;
import com.pulumi.outscale.inputs.VolumeState;
import com.pulumi.outscale.outputs.VolumeLinkedVolume;
import com.pulumi.outscale.outputs.VolumeTag;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages a volume.
 * 
 * For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Volumes.html).\
 * For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-volume).
 * 
 * ## Example Usage
 * ### Creating an io1 volume
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.outscale.Volume;
 * import com.pulumi.outscale.VolumeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var volume01 = new Volume(&#34;volume01&#34;, VolumeArgs.builder()        
 *             .iops(100)
 *             .size(10)
 *             .subregionName(String.format(&#34;%sa&#34;, var_.region()))
 *             .volumeType(&#34;io1&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Creating a snapshot before volume deletion
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.outscale.Volume;
 * import com.pulumi.outscale.VolumeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var volume01 = new Volume(&#34;volume01&#34;, VolumeArgs.builder()        
 *             .size(40)
 *             .subregionName(String.format(&#34;%sa&#34;, var_.region()))
 *             .terminationSnapshotName(&#34;deleting_volume_snap&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * A volume can be imported using its ID. For exampleconsole
 * 
 * ```sh
 *  $ pulumi import outscale:index/volume:Volume ImportedVolume vol-12345678
 * ```
 * 
 */
@ResourceType(type="outscale:index/volume:Volume")
public class Volume extends com.pulumi.resources.CustomResource {
    /**
     * The date and time of creation of the volume.
     * 
     */
    @Export(name="creationDate", refs={String.class}, tree="[0]")
    private Output<String> creationDate;

    /**
     * @return The date and time of creation of the volume.
     * 
     */
    public Output<String> creationDate() {
        return this.creationDate;
    }
    /**
     * The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
     * 
     */
    @Export(name="iops", refs={Integer.class}, tree="[0]")
    private Output<Integer> iops;

    /**
     * @return The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
     * 
     */
    public Output<Integer> iops() {
        return this.iops;
    }
    /**
     * Information about your volume attachment.
     * 
     */
    @Export(name="linkedVolumes", refs={List.class,VolumeLinkedVolume.class}, tree="[0,1]")
    private Output<List<VolumeLinkedVolume>> linkedVolumes;

    /**
     * @return Information about your volume attachment.
     * 
     */
    public Output<List<VolumeLinkedVolume>> linkedVolumes() {
        return this.linkedVolumes;
    }
    @Export(name="requestId", refs={String.class}, tree="[0]")
    private Output<String> requestId;

    public Output<String> requestId() {
        return this.requestId;
    }
    /**
     * The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshot_id` unspecified).
     * 
     */
    @Export(name="size", refs={Integer.class}, tree="[0]")
    private Output<Integer> size;

    /**
     * @return The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshot_id` unspecified).
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    /**
     * The ID of the snapshot from which you want to create the volume.
     * 
     */
    @Export(name="snapshotId", refs={String.class}, tree="[0]")
    private Output<String> snapshotId;

    /**
     * @return The ID of the snapshot from which you want to create the volume.
     * 
     */
    public Output<String> snapshotId() {
        return this.snapshotId;
    }
    /**
     * The state of the volume (`creating` \| `available` \| `in-use` \| `updating` \| `deleting` \| `error`).
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The state of the volume (`creating` \| `available` \| `in-use` \| `updating` \| `deleting` \| `error`).
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * The Subregion in which you want to create the volume.
     * 
     */
    @Export(name="subregionName", refs={String.class}, tree="[0]")
    private Output<String> subregionName;

    /**
     * @return The Subregion in which you want to create the volume.
     * 
     */
    public Output<String> subregionName() {
        return this.subregionName;
    }
    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Export(name="tags", refs={List.class,VolumeTag.class}, tree="[0,1]")
    private Output</* @Nullable */ List<VolumeTag>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Output<Optional<List<VolumeTag>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Whether you want to create a snapshot before the volume deletion.
     * 
     */
    @Export(name="terminationSnapshotName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> terminationSnapshotName;

    /**
     * @return Whether you want to create a snapshot before the volume deletion.
     * 
     */
    public Output<Optional<String>> terminationSnapshotName() {
        return Codegen.optional(this.terminationSnapshotName);
    }
    /**
     * The ID of the volume.
     * 
     */
    @Export(name="volumeId", refs={String.class}, tree="[0]")
    private Output<String> volumeId;

    /**
     * @return The ID of the volume.
     * 
     */
    public Output<String> volumeId() {
        return this.volumeId;
    }
    /**
     * The type of volume you want to create (`io1` \| `gp2` \| `standard`). If not specified, a `standard` volume is created.&lt;br /&gt;
     * For more information about volume types, see [About Volumes &gt; Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
     * 
     */
    @Export(name="volumeType", refs={String.class}, tree="[0]")
    private Output<String> volumeType;

    /**
     * @return The type of volume you want to create (`io1` \| `gp2` \| `standard`). If not specified, a `standard` volume is created.&lt;br /&gt;
     * For more information about volume types, see [About Volumes &gt; Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
     * 
     */
    public Output<String> volumeType() {
        return this.volumeType;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Volume(String name) {
        this(name, VolumeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Volume(String name, VolumeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Volume(String name, VolumeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("outscale:index/volume:Volume", name, args == null ? VolumeArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Volume(String name, Output<String> id, @Nullable VolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("outscale:index/volume:Volume", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Volume get(String name, Output<String> id, @Nullable VolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Volume(name, id, state, options);
    }
}
