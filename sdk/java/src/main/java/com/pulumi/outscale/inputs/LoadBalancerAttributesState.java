// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.LoadBalancerAttributesAccessLogArgs;
import com.pulumi.outscale.inputs.LoadBalancerAttributesApplicationStickyCookiePolicyArgs;
import com.pulumi.outscale.inputs.LoadBalancerAttributesHealthCheckArgs;
import com.pulumi.outscale.inputs.LoadBalancerAttributesListenerArgs;
import com.pulumi.outscale.inputs.LoadBalancerAttributesLoadBalancerStickyCookiePolicyArgs;
import com.pulumi.outscale.inputs.LoadBalancerAttributesSourceSecurityGroupArgs;
import com.pulumi.outscale.inputs.LoadBalancerAttributesTagArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerAttributesState extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerAttributesState Empty = new LoadBalancerAttributesState();

    /**
     * Information about access logs.
     * 
     */
    @Import(name="accessLog")
    private @Nullable Output<LoadBalancerAttributesAccessLogArgs> accessLog;

    /**
     * @return Information about access logs.
     * 
     */
    public Optional<Output<LoadBalancerAttributesAccessLogArgs>> accessLog() {
        return Optional.ofNullable(this.accessLog);
    }

    /**
     * The stickiness policies defined for the load balancer.
     * 
     */
    @Import(name="applicationStickyCookiePolicies")
    private @Nullable Output<List<LoadBalancerAttributesApplicationStickyCookiePolicyArgs>> applicationStickyCookiePolicies;

    /**
     * @return The stickiness policies defined for the load balancer.
     * 
     */
    public Optional<Output<List<LoadBalancerAttributesApplicationStickyCookiePolicyArgs>>> applicationStickyCookiePolicies() {
        return Optional.ofNullable(this.applicationStickyCookiePolicies);
    }

    /**
     * One or more IDs of back-end VMs for the load balancer.
     * 
     */
    @Import(name="backendVmIds")
    private @Nullable Output<List<String>> backendVmIds;

    /**
     * @return One or more IDs of back-end VMs for the load balancer.
     * 
     */
    public Optional<Output<List<String>>> backendVmIds() {
        return Optional.ofNullable(this.backendVmIds);
    }

    /**
     * The DNS name of the load balancer.
     * 
     */
    @Import(name="dnsName")
    private @Nullable Output<String> dnsName;

    /**
     * @return The DNS name of the load balancer.
     * 
     */
    public Optional<Output<String>> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }

    /**
     * Information about the health check configuration.
     * 
     */
    @Import(name="healthCheck")
    private @Nullable Output<LoadBalancerAttributesHealthCheckArgs> healthCheck;

    /**
     * @return Information about the health check configuration.
     * 
     */
    public Optional<Output<LoadBalancerAttributesHealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * The listeners for the load balancer.
     * 
     */
    @Import(name="listeners")
    private @Nullable Output<List<LoadBalancerAttributesListenerArgs>> listeners;

    /**
     * @return The listeners for the load balancer.
     * 
     */
    public Optional<Output<List<LoadBalancerAttributesListenerArgs>>> listeners() {
        return Optional.ofNullable(this.listeners);
    }

    /**
     * The name of the load balancer.
     * 
     */
    @Import(name="loadBalancerName")
    private @Nullable Output<String> loadBalancerName;

    /**
     * @return The name of the load balancer.
     * 
     */
    public Optional<Output<String>> loadBalancerName() {
        return Optional.ofNullable(this.loadBalancerName);
    }

    /**
     * The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
     * 
     */
    @Import(name="loadBalancerPort")
    private @Nullable Output<Integer> loadBalancerPort;

    /**
     * @return The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
     * 
     */
    public Optional<Output<Integer>> loadBalancerPort() {
        return Optional.ofNullable(this.loadBalancerPort);
    }

    /**
     * The policies defined for the load balancer.
     * 
     */
    @Import(name="loadBalancerStickyCookiePolicies")
    private @Nullable Output<List<LoadBalancerAttributesLoadBalancerStickyCookiePolicyArgs>> loadBalancerStickyCookiePolicies;

    /**
     * @return The policies defined for the load balancer.
     * 
     */
    public Optional<Output<List<LoadBalancerAttributesLoadBalancerStickyCookiePolicyArgs>>> loadBalancerStickyCookiePolicies() {
        return Optional.ofNullable(this.loadBalancerStickyCookiePolicies);
    }

    /**
     * The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
     * If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
     * If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
     * 
     */
    @Import(name="loadBalancerType")
    private @Nullable Output<String> loadBalancerType;

    /**
     * @return The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
     * If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
     * If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
     * 
     */
    public Optional<Output<String>> loadBalancerType() {
        return Optional.ofNullable(this.loadBalancerType);
    }

    /**
     * The name of the policy you want to enable for the listener.
     * 
     */
    @Import(name="policyNames")
    private @Nullable Output<List<String>> policyNames;

    /**
     * @return The name of the policy you want to enable for the listener.
     * 
     */
    public Optional<Output<List<String>>> policyNames() {
        return Optional.ofNullable(this.policyNames);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
     * 
     */
    @Import(name="securityGroups")
    private @Nullable Output<List<String>> securityGroups;

    /**
     * @return One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
     * 
     */
    public Optional<Output<List<String>>> securityGroups() {
        return Optional.ofNullable(this.securityGroups);
    }

    /**
     * The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
     * 
     */
    @Import(name="serverCertificateId")
    private @Nullable Output<String> serverCertificateId;

    /**
     * @return The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
     * 
     */
    public Optional<Output<String>> serverCertificateId() {
        return Optional.ofNullable(this.serverCertificateId);
    }

    /**
     * Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
     * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
     * 
     */
    @Import(name="sourceSecurityGroups")
    private @Nullable Output<List<LoadBalancerAttributesSourceSecurityGroupArgs>> sourceSecurityGroups;

    /**
     * @return Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
     * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
     * 
     */
    public Optional<Output<List<LoadBalancerAttributesSourceSecurityGroupArgs>>> sourceSecurityGroups() {
        return Optional.ofNullable(this.sourceSecurityGroups);
    }

    /**
     * The ID of the Subnet in which the load balancer was created.
     * 
     */
    @Import(name="subnets")
    private @Nullable Output<List<String>> subnets;

    /**
     * @return The ID of the Subnet in which the load balancer was created.
     * 
     */
    public Optional<Output<List<String>>> subnets() {
        return Optional.ofNullable(this.subnets);
    }

    /**
     * The ID of the Subregion in which the load balancer was created.
     * 
     */
    @Import(name="subregionNames")
    private @Nullable Output<List<String>> subregionNames;

    /**
     * @return The ID of the Subregion in which the load balancer was created.
     * 
     */
    public Optional<Output<List<String>>> subregionNames() {
        return Optional.ofNullable(this.subregionNames);
    }

    /**
     * One or more tags associated with the load balancer.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<LoadBalancerAttributesTagArgs>> tags;

    /**
     * @return One or more tags associated with the load balancer.
     * 
     */
    public Optional<Output<List<LoadBalancerAttributesTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private LoadBalancerAttributesState() {}

    private LoadBalancerAttributesState(LoadBalancerAttributesState $) {
        this.accessLog = $.accessLog;
        this.applicationStickyCookiePolicies = $.applicationStickyCookiePolicies;
        this.backendVmIds = $.backendVmIds;
        this.dnsName = $.dnsName;
        this.healthCheck = $.healthCheck;
        this.listeners = $.listeners;
        this.loadBalancerName = $.loadBalancerName;
        this.loadBalancerPort = $.loadBalancerPort;
        this.loadBalancerStickyCookiePolicies = $.loadBalancerStickyCookiePolicies;
        this.loadBalancerType = $.loadBalancerType;
        this.policyNames = $.policyNames;
        this.requestId = $.requestId;
        this.securityGroups = $.securityGroups;
        this.serverCertificateId = $.serverCertificateId;
        this.sourceSecurityGroups = $.sourceSecurityGroups;
        this.subnets = $.subnets;
        this.subregionNames = $.subregionNames;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerAttributesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerAttributesState $;

        public Builder() {
            $ = new LoadBalancerAttributesState();
        }

        public Builder(LoadBalancerAttributesState defaults) {
            $ = new LoadBalancerAttributesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLog Information about access logs.
         * 
         * @return builder
         * 
         */
        public Builder accessLog(@Nullable Output<LoadBalancerAttributesAccessLogArgs> accessLog) {
            $.accessLog = accessLog;
            return this;
        }

        /**
         * @param accessLog Information about access logs.
         * 
         * @return builder
         * 
         */
        public Builder accessLog(LoadBalancerAttributesAccessLogArgs accessLog) {
            return accessLog(Output.of(accessLog));
        }

        /**
         * @param applicationStickyCookiePolicies The stickiness policies defined for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder applicationStickyCookiePolicies(@Nullable Output<List<LoadBalancerAttributesApplicationStickyCookiePolicyArgs>> applicationStickyCookiePolicies) {
            $.applicationStickyCookiePolicies = applicationStickyCookiePolicies;
            return this;
        }

        /**
         * @param applicationStickyCookiePolicies The stickiness policies defined for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder applicationStickyCookiePolicies(List<LoadBalancerAttributesApplicationStickyCookiePolicyArgs> applicationStickyCookiePolicies) {
            return applicationStickyCookiePolicies(Output.of(applicationStickyCookiePolicies));
        }

        /**
         * @param applicationStickyCookiePolicies The stickiness policies defined for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder applicationStickyCookiePolicies(LoadBalancerAttributesApplicationStickyCookiePolicyArgs... applicationStickyCookiePolicies) {
            return applicationStickyCookiePolicies(List.of(applicationStickyCookiePolicies));
        }

        /**
         * @param backendVmIds One or more IDs of back-end VMs for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder backendVmIds(@Nullable Output<List<String>> backendVmIds) {
            $.backendVmIds = backendVmIds;
            return this;
        }

        /**
         * @param backendVmIds One or more IDs of back-end VMs for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder backendVmIds(List<String> backendVmIds) {
            return backendVmIds(Output.of(backendVmIds));
        }

        /**
         * @param backendVmIds One or more IDs of back-end VMs for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder backendVmIds(String... backendVmIds) {
            return backendVmIds(List.of(backendVmIds));
        }

        /**
         * @param dnsName The DNS name of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder dnsName(@Nullable Output<String> dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        /**
         * @param dnsName The DNS name of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder dnsName(String dnsName) {
            return dnsName(Output.of(dnsName));
        }

        /**
         * @param healthCheck Information about the health check configuration.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(@Nullable Output<LoadBalancerAttributesHealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        /**
         * @param healthCheck Information about the health check configuration.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(LoadBalancerAttributesHealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param listeners The listeners for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder listeners(@Nullable Output<List<LoadBalancerAttributesListenerArgs>> listeners) {
            $.listeners = listeners;
            return this;
        }

        /**
         * @param listeners The listeners for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder listeners(List<LoadBalancerAttributesListenerArgs> listeners) {
            return listeners(Output.of(listeners));
        }

        /**
         * @param listeners The listeners for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder listeners(LoadBalancerAttributesListenerArgs... listeners) {
            return listeners(List.of(listeners));
        }

        /**
         * @param loadBalancerName The name of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerName(@Nullable Output<String> loadBalancerName) {
            $.loadBalancerName = loadBalancerName;
            return this;
        }

        /**
         * @param loadBalancerName The name of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerName(String loadBalancerName) {
            return loadBalancerName(Output.of(loadBalancerName));
        }

        /**
         * @param loadBalancerPort The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerPort(@Nullable Output<Integer> loadBalancerPort) {
            $.loadBalancerPort = loadBalancerPort;
            return this;
        }

        /**
         * @param loadBalancerPort The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerPort(Integer loadBalancerPort) {
            return loadBalancerPort(Output.of(loadBalancerPort));
        }

        /**
         * @param loadBalancerStickyCookiePolicies The policies defined for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerStickyCookiePolicies(@Nullable Output<List<LoadBalancerAttributesLoadBalancerStickyCookiePolicyArgs>> loadBalancerStickyCookiePolicies) {
            $.loadBalancerStickyCookiePolicies = loadBalancerStickyCookiePolicies;
            return this;
        }

        /**
         * @param loadBalancerStickyCookiePolicies The policies defined for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerStickyCookiePolicies(List<LoadBalancerAttributesLoadBalancerStickyCookiePolicyArgs> loadBalancerStickyCookiePolicies) {
            return loadBalancerStickyCookiePolicies(Output.of(loadBalancerStickyCookiePolicies));
        }

        /**
         * @param loadBalancerStickyCookiePolicies The policies defined for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerStickyCookiePolicies(LoadBalancerAttributesLoadBalancerStickyCookiePolicyArgs... loadBalancerStickyCookiePolicies) {
            return loadBalancerStickyCookiePolicies(List.of(loadBalancerStickyCookiePolicies));
        }

        /**
         * @param loadBalancerType The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
         * If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
         * If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerType(@Nullable Output<String> loadBalancerType) {
            $.loadBalancerType = loadBalancerType;
            return this;
        }

        /**
         * @param loadBalancerType The type of load balancer. Valid only for load balancers in a Net.&lt;br /&gt;
         * If `load_balancer_type` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.&lt;br /&gt;
         * If `load_balancer_type` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerType(String loadBalancerType) {
            return loadBalancerType(Output.of(loadBalancerType));
        }

        /**
         * @param policyNames The name of the policy you want to enable for the listener.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(@Nullable Output<List<String>> policyNames) {
            $.policyNames = policyNames;
            return this;
        }

        /**
         * @param policyNames The name of the policy you want to enable for the listener.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(List<String> policyNames) {
            return policyNames(Output.of(policyNames));
        }

        /**
         * @param policyNames The name of the policy you want to enable for the listener.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(String... policyNames) {
            return policyNames(List.of(policyNames));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param securityGroups One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(@Nullable Output<List<String>> securityGroups) {
            $.securityGroups = securityGroups;
            return this;
        }

        /**
         * @param securityGroups One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(List<String> securityGroups) {
            return securityGroups(Output.of(securityGroups));
        }

        /**
         * @param securityGroups One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }

        /**
         * @param serverCertificateId The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateId(@Nullable Output<String> serverCertificateId) {
            $.serverCertificateId = serverCertificateId;
            return this;
        }

        /**
         * @param serverCertificateId The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateId(String serverCertificateId) {
            return serverCertificateId(Output.of(serverCertificateId));
        }

        /**
         * @param sourceSecurityGroups Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
         * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
         * 
         * @return builder
         * 
         */
        public Builder sourceSecurityGroups(@Nullable Output<List<LoadBalancerAttributesSourceSecurityGroupArgs>> sourceSecurityGroups) {
            $.sourceSecurityGroups = sourceSecurityGroups;
            return this;
        }

        /**
         * @param sourceSecurityGroups Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
         * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
         * 
         * @return builder
         * 
         */
        public Builder sourceSecurityGroups(List<LoadBalancerAttributesSourceSecurityGroupArgs> sourceSecurityGroups) {
            return sourceSecurityGroups(Output.of(sourceSecurityGroups));
        }

        /**
         * @param sourceSecurityGroups Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
         * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
         * 
         * @return builder
         * 
         */
        public Builder sourceSecurityGroups(LoadBalancerAttributesSourceSecurityGroupArgs... sourceSecurityGroups) {
            return sourceSecurityGroups(List.of(sourceSecurityGroups));
        }

        /**
         * @param subnets The ID of the Subnet in which the load balancer was created.
         * 
         * @return builder
         * 
         */
        public Builder subnets(@Nullable Output<List<String>> subnets) {
            $.subnets = subnets;
            return this;
        }

        /**
         * @param subnets The ID of the Subnet in which the load balancer was created.
         * 
         * @return builder
         * 
         */
        public Builder subnets(List<String> subnets) {
            return subnets(Output.of(subnets));
        }

        /**
         * @param subnets The ID of the Subnet in which the load balancer was created.
         * 
         * @return builder
         * 
         */
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }

        /**
         * @param subregionNames The ID of the Subregion in which the load balancer was created.
         * 
         * @return builder
         * 
         */
        public Builder subregionNames(@Nullable Output<List<String>> subregionNames) {
            $.subregionNames = subregionNames;
            return this;
        }

        /**
         * @param subregionNames The ID of the Subregion in which the load balancer was created.
         * 
         * @return builder
         * 
         */
        public Builder subregionNames(List<String> subregionNames) {
            return subregionNames(Output.of(subregionNames));
        }

        /**
         * @param subregionNames The ID of the Subregion in which the load balancer was created.
         * 
         * @return builder
         * 
         */
        public Builder subregionNames(String... subregionNames) {
            return subregionNames(List.of(subregionNames));
        }

        /**
         * @param tags One or more tags associated with the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<LoadBalancerAttributesTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags One or more tags associated with the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<LoadBalancerAttributesTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags One or more tags associated with the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder tags(LoadBalancerAttributesTagArgs... tags) {
            return tags(List.of(tags));
        }

        public LoadBalancerAttributesState build() {
            return $;
        }
    }

}
