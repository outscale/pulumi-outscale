// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.GetNetsFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetNetsArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetNetsArgs Empty = new GetNetsArgs();

    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<GetNetsFilterArgs>> filters;

    /**
     * @return A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    public Optional<Output<List<GetNetsFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The ID of the Net.
     * 
     */
    @Import(name="netIds")
    private @Nullable Output<List<String>> netIds;

    /**
     * @return The ID of the Net.
     * 
     */
    public Optional<Output<List<String>>> netIds() {
        return Optional.ofNullable(this.netIds);
    }

    private GetNetsArgs() {}

    private GetNetsArgs(GetNetsArgs $) {
        this.filters = $.filters;
        this.netIds = $.netIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetNetsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetNetsArgs $;

        public Builder() {
            $ = new GetNetsArgs();
        }

        public Builder(GetNetsArgs defaults) {
            $ = new GetNetsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<GetNetsFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(List<GetNetsFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(GetNetsFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param netIds The ID of the Net.
         * 
         * @return builder
         * 
         */
        public Builder netIds(@Nullable Output<List<String>> netIds) {
            $.netIds = netIds;
            return this;
        }

        /**
         * @param netIds The ID of the Net.
         * 
         * @return builder
         * 
         */
        public Builder netIds(List<String> netIds) {
            return netIds(Output.of(netIds));
        }

        /**
         * @param netIds The ID of the Net.
         * 
         * @return builder
         * 
         */
        public Builder netIds(String... netIds) {
            return netIds(List.of(netIds));
        }

        public GetNetsArgs build() {
            return $;
        }
    }

}
