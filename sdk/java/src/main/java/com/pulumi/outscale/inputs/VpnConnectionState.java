// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.VpnConnectionRouteArgs;
import com.pulumi.outscale.inputs.VpnConnectionTagArgs;
import com.pulumi.outscale.inputs.VpnConnectionVgwTelemetryArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final VpnConnectionState Empty = new VpnConnectionState();

    /**
     * Example configuration for the client gateway.
     * 
     */
    @Import(name="clientGatewayConfiguration")
    private @Nullable Output<String> clientGatewayConfiguration;

    /**
     * @return Example configuration for the client gateway.
     * 
     */
    public Optional<Output<String>> clientGatewayConfiguration() {
        return Optional.ofNullable(this.clientGatewayConfiguration);
    }

    /**
     * The ID of the client gateway.
     * 
     */
    @Import(name="clientGatewayId")
    private @Nullable Output<String> clientGatewayId;

    /**
     * @return The ID of the client gateway.
     * 
     */
    public Optional<Output<String>> clientGatewayId() {
        return Optional.ofNullable(this.clientGatewayId);
    }

    /**
     * The type of VPN connection (only `ipsec.1` is supported).
     * 
     */
    @Import(name="connectionType")
    private @Nullable Output<String> connectionType;

    /**
     * @return The type of VPN connection (only `ipsec.1` is supported).
     * 
     */
    public Optional<Output<String>> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Information about one or more static routes associated with the VPN connection, if any.
     * 
     */
    @Import(name="routes")
    private @Nullable Output<List<VpnConnectionRouteArgs>> routes;

    /**
     * @return Information about one or more static routes associated with the VPN connection, if any.
     * 
     */
    public Optional<Output<List<VpnConnectionRouteArgs>>> routes() {
        return Optional.ofNullable(this.routes);
    }

    /**
     * The state of the IPSEC tunnel (`UP` \| `DOWN`).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the IPSEC tunnel (`UP` \| `DOWN`).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
     * 
     */
    @Import(name="staticRoutesOnly")
    private @Nullable Output<Boolean> staticRoutesOnly;

    /**
     * @return If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
     * 
     */
    public Optional<Output<Boolean>> staticRoutesOnly() {
        return Optional.ofNullable(this.staticRoutesOnly);
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<VpnConnectionTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<VpnConnectionTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Information about the current state of one or more of the VPN tunnels.
     * 
     */
    @Import(name="vgwTelemetries")
    private @Nullable Output<List<VpnConnectionVgwTelemetryArgs>> vgwTelemetries;

    /**
     * @return Information about the current state of one or more of the VPN tunnels.
     * 
     */
    public Optional<Output<List<VpnConnectionVgwTelemetryArgs>>> vgwTelemetries() {
        return Optional.ofNullable(this.vgwTelemetries);
    }

    /**
     * The ID of the virtual gateway.
     * 
     */
    @Import(name="virtualGatewayId")
    private @Nullable Output<String> virtualGatewayId;

    /**
     * @return The ID of the virtual gateway.
     * 
     */
    public Optional<Output<String>> virtualGatewayId() {
        return Optional.ofNullable(this.virtualGatewayId);
    }

    /**
     * The ID of the VPN connection.
     * 
     */
    @Import(name="vpnConnectionId")
    private @Nullable Output<String> vpnConnectionId;

    /**
     * @return The ID of the VPN connection.
     * 
     */
    public Optional<Output<String>> vpnConnectionId() {
        return Optional.ofNullable(this.vpnConnectionId);
    }

    private VpnConnectionState() {}

    private VpnConnectionState(VpnConnectionState $) {
        this.clientGatewayConfiguration = $.clientGatewayConfiguration;
        this.clientGatewayId = $.clientGatewayId;
        this.connectionType = $.connectionType;
        this.requestId = $.requestId;
        this.routes = $.routes;
        this.state = $.state;
        this.staticRoutesOnly = $.staticRoutesOnly;
        this.tags = $.tags;
        this.vgwTelemetries = $.vgwTelemetries;
        this.virtualGatewayId = $.virtualGatewayId;
        this.vpnConnectionId = $.vpnConnectionId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnConnectionState $;

        public Builder() {
            $ = new VpnConnectionState();
        }

        public Builder(VpnConnectionState defaults) {
            $ = new VpnConnectionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientGatewayConfiguration Example configuration for the client gateway.
         * 
         * @return builder
         * 
         */
        public Builder clientGatewayConfiguration(@Nullable Output<String> clientGatewayConfiguration) {
            $.clientGatewayConfiguration = clientGatewayConfiguration;
            return this;
        }

        /**
         * @param clientGatewayConfiguration Example configuration for the client gateway.
         * 
         * @return builder
         * 
         */
        public Builder clientGatewayConfiguration(String clientGatewayConfiguration) {
            return clientGatewayConfiguration(Output.of(clientGatewayConfiguration));
        }

        /**
         * @param clientGatewayId The ID of the client gateway.
         * 
         * @return builder
         * 
         */
        public Builder clientGatewayId(@Nullable Output<String> clientGatewayId) {
            $.clientGatewayId = clientGatewayId;
            return this;
        }

        /**
         * @param clientGatewayId The ID of the client gateway.
         * 
         * @return builder
         * 
         */
        public Builder clientGatewayId(String clientGatewayId) {
            return clientGatewayId(Output.of(clientGatewayId));
        }

        /**
         * @param connectionType The type of VPN connection (only `ipsec.1` is supported).
         * 
         * @return builder
         * 
         */
        public Builder connectionType(@Nullable Output<String> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        /**
         * @param connectionType The type of VPN connection (only `ipsec.1` is supported).
         * 
         * @return builder
         * 
         */
        public Builder connectionType(String connectionType) {
            return connectionType(Output.of(connectionType));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param routes Information about one or more static routes associated with the VPN connection, if any.
         * 
         * @return builder
         * 
         */
        public Builder routes(@Nullable Output<List<VpnConnectionRouteArgs>> routes) {
            $.routes = routes;
            return this;
        }

        /**
         * @param routes Information about one or more static routes associated with the VPN connection, if any.
         * 
         * @return builder
         * 
         */
        public Builder routes(List<VpnConnectionRouteArgs> routes) {
            return routes(Output.of(routes));
        }

        /**
         * @param routes Information about one or more static routes associated with the VPN connection, if any.
         * 
         * @return builder
         * 
         */
        public Builder routes(VpnConnectionRouteArgs... routes) {
            return routes(List.of(routes));
        }

        /**
         * @param state The state of the IPSEC tunnel (`UP` \| `DOWN`).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the IPSEC tunnel (`UP` \| `DOWN`).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param staticRoutesOnly If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
         * 
         * @return builder
         * 
         */
        public Builder staticRoutesOnly(@Nullable Output<Boolean> staticRoutesOnly) {
            $.staticRoutesOnly = staticRoutesOnly;
            return this;
        }

        /**
         * @param staticRoutesOnly If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
         * 
         * @return builder
         * 
         */
        public Builder staticRoutesOnly(Boolean staticRoutesOnly) {
            return staticRoutesOnly(Output.of(staticRoutesOnly));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<VpnConnectionTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<VpnConnectionTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(VpnConnectionTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param vgwTelemetries Information about the current state of one or more of the VPN tunnels.
         * 
         * @return builder
         * 
         */
        public Builder vgwTelemetries(@Nullable Output<List<VpnConnectionVgwTelemetryArgs>> vgwTelemetries) {
            $.vgwTelemetries = vgwTelemetries;
            return this;
        }

        /**
         * @param vgwTelemetries Information about the current state of one or more of the VPN tunnels.
         * 
         * @return builder
         * 
         */
        public Builder vgwTelemetries(List<VpnConnectionVgwTelemetryArgs> vgwTelemetries) {
            return vgwTelemetries(Output.of(vgwTelemetries));
        }

        /**
         * @param vgwTelemetries Information about the current state of one or more of the VPN tunnels.
         * 
         * @return builder
         * 
         */
        public Builder vgwTelemetries(VpnConnectionVgwTelemetryArgs... vgwTelemetries) {
            return vgwTelemetries(List.of(vgwTelemetries));
        }

        /**
         * @param virtualGatewayId The ID of the virtual gateway.
         * 
         * @return builder
         * 
         */
        public Builder virtualGatewayId(@Nullable Output<String> virtualGatewayId) {
            $.virtualGatewayId = virtualGatewayId;
            return this;
        }

        /**
         * @param virtualGatewayId The ID of the virtual gateway.
         * 
         * @return builder
         * 
         */
        public Builder virtualGatewayId(String virtualGatewayId) {
            return virtualGatewayId(Output.of(virtualGatewayId));
        }

        /**
         * @param vpnConnectionId The ID of the VPN connection.
         * 
         * @return builder
         * 
         */
        public Builder vpnConnectionId(@Nullable Output<String> vpnConnectionId) {
            $.vpnConnectionId = vpnConnectionId;
            return this;
        }

        /**
         * @param vpnConnectionId The ID of the VPN connection.
         * 
         * @return builder
         * 
         */
        public Builder vpnConnectionId(String vpnConnectionId) {
            return vpnConnectionId(Output.of(vpnConnectionId));
        }

        public VpnConnectionState build() {
            return $;
        }
    }

}
