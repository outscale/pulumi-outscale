// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.outscale.outputs.VmPrimaryNicLinkNic;
import com.pulumi.outscale.outputs.VmPrimaryNicLinkPublicIp;
import com.pulumi.outscale.outputs.VmPrimaryNicPrivateIp;
import com.pulumi.outscale.outputs.VmPrimaryNicSecurityGroup;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VmPrimaryNic {
    /**
     * @return The account ID of the owner of the NIC.
     * 
     */
    private @Nullable String accountId;
    /**
     * @return If true, the NIC is deleted when the VM is terminated. You can specify this parameter only for a new NIC. To modify this value for an existing NIC, see [UpdateNic](https://docs.outscale.com/api#updatenic).
     * 
     */
    private @Nullable Boolean deleteOnVmDeletion;
    /**
     * @return The description of the NIC, if you are creating a NIC when creating the VM.
     * 
     */
    private @Nullable String description;
    /**
     * @return The index of the VM device for the NIC attachment (must be `0`). This parameter is required if you create a NIC when creating the VM.
     * 
     */
    private Integer deviceNumber;
    /**
     * @return (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
     * 
     */
    private @Nullable Boolean isSourceDestChecked;
    /**
     * @return Information about the network interface card (NIC).
     * 
     */
    private @Nullable List<VmPrimaryNicLinkNic> linkNics;
    /**
     * @return Information about the public IP associated with the NIC.
     * 
     */
    private @Nullable List<VmPrimaryNicLinkPublicIp> linkPublicIps;
    /**
     * @return The Media Access Control (MAC) address of the NIC.
     * 
     */
    private @Nullable String macAddress;
    /**
     * @return The ID of the Net for the NIC.
     * 
     */
    private @Nullable String netId;
    /**
     * @return The ID of the NIC, if you are attaching an existing NIC when creating a VM.
     * 
     */
    private @Nullable String nicId;
    /**
     * @return The name of the private DNS.
     * 
     */
    private @Nullable String privateDnsName;
    /**
     * @return One or more private IPs of the VM.
     * 
     */
    private @Nullable List<VmPrimaryNicPrivateIp> privateIps;
    /**
     * @return The number of secondary private IPs, if you create a NIC when creating a VM. This parameter cannot be specified if you specified more than one private IP in the `private_ips` parameter.
     * 
     */
    private @Nullable Integer secondaryPrivateIpCount;
    /**
     * @return One or more IDs of security group for the VMs.
     * 
     */
    private @Nullable List<String> securityGroupIds;
    /**
     * @return One or more security groups associated with the VM.
     * 
     */
    private @Nullable List<VmPrimaryNicSecurityGroup> securityGroups;
    /**
     * @return The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
     * 
     */
    private @Nullable String state;
    /**
     * @return The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
     * 
     */
    private @Nullable String subnetId;

    private VmPrimaryNic() {}
    /**
     * @return The account ID of the owner of the NIC.
     * 
     */
    public Optional<String> accountId() {
        return Optional.ofNullable(this.accountId);
    }
    /**
     * @return If true, the NIC is deleted when the VM is terminated. You can specify this parameter only for a new NIC. To modify this value for an existing NIC, see [UpdateNic](https://docs.outscale.com/api#updatenic).
     * 
     */
    public Optional<Boolean> deleteOnVmDeletion() {
        return Optional.ofNullable(this.deleteOnVmDeletion);
    }
    /**
     * @return The description of the NIC, if you are creating a NIC when creating the VM.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return The index of the VM device for the NIC attachment (must be `0`). This parameter is required if you create a NIC when creating the VM.
     * 
     */
    public Integer deviceNumber() {
        return this.deviceNumber;
    }
    /**
     * @return (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
     * 
     */
    public Optional<Boolean> isSourceDestChecked() {
        return Optional.ofNullable(this.isSourceDestChecked);
    }
    /**
     * @return Information about the network interface card (NIC).
     * 
     */
    public List<VmPrimaryNicLinkNic> linkNics() {
        return this.linkNics == null ? List.of() : this.linkNics;
    }
    /**
     * @return Information about the public IP associated with the NIC.
     * 
     */
    public List<VmPrimaryNicLinkPublicIp> linkPublicIps() {
        return this.linkPublicIps == null ? List.of() : this.linkPublicIps;
    }
    /**
     * @return The Media Access Control (MAC) address of the NIC.
     * 
     */
    public Optional<String> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }
    /**
     * @return The ID of the Net for the NIC.
     * 
     */
    public Optional<String> netId() {
        return Optional.ofNullable(this.netId);
    }
    /**
     * @return The ID of the NIC, if you are attaching an existing NIC when creating a VM.
     * 
     */
    public Optional<String> nicId() {
        return Optional.ofNullable(this.nicId);
    }
    /**
     * @return The name of the private DNS.
     * 
     */
    public Optional<String> privateDnsName() {
        return Optional.ofNullable(this.privateDnsName);
    }
    /**
     * @return One or more private IPs of the VM.
     * 
     */
    public List<VmPrimaryNicPrivateIp> privateIps() {
        return this.privateIps == null ? List.of() : this.privateIps;
    }
    /**
     * @return The number of secondary private IPs, if you create a NIC when creating a VM. This parameter cannot be specified if you specified more than one private IP in the `private_ips` parameter.
     * 
     */
    public Optional<Integer> secondaryPrivateIpCount() {
        return Optional.ofNullable(this.secondaryPrivateIpCount);
    }
    /**
     * @return One or more IDs of security group for the VMs.
     * 
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds == null ? List.of() : this.securityGroupIds;
    }
    /**
     * @return One or more security groups associated with the VM.
     * 
     */
    public List<VmPrimaryNicSecurityGroup> securityGroups() {
        return this.securityGroups == null ? List.of() : this.securityGroups;
    }
    /**
     * @return The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vm_initiated_shutdown_behavior` argument.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
     * 
     */
    public Optional<String> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VmPrimaryNic defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountId;
        private @Nullable Boolean deleteOnVmDeletion;
        private @Nullable String description;
        private Integer deviceNumber;
        private @Nullable Boolean isSourceDestChecked;
        private @Nullable List<VmPrimaryNicLinkNic> linkNics;
        private @Nullable List<VmPrimaryNicLinkPublicIp> linkPublicIps;
        private @Nullable String macAddress;
        private @Nullable String netId;
        private @Nullable String nicId;
        private @Nullable String privateDnsName;
        private @Nullable List<VmPrimaryNicPrivateIp> privateIps;
        private @Nullable Integer secondaryPrivateIpCount;
        private @Nullable List<String> securityGroupIds;
        private @Nullable List<VmPrimaryNicSecurityGroup> securityGroups;
        private @Nullable String state;
        private @Nullable String subnetId;
        public Builder() {}
        public Builder(VmPrimaryNic defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.deleteOnVmDeletion = defaults.deleteOnVmDeletion;
    	      this.description = defaults.description;
    	      this.deviceNumber = defaults.deviceNumber;
    	      this.isSourceDestChecked = defaults.isSourceDestChecked;
    	      this.linkNics = defaults.linkNics;
    	      this.linkPublicIps = defaults.linkPublicIps;
    	      this.macAddress = defaults.macAddress;
    	      this.netId = defaults.netId;
    	      this.nicId = defaults.nicId;
    	      this.privateDnsName = defaults.privateDnsName;
    	      this.privateIps = defaults.privateIps;
    	      this.secondaryPrivateIpCount = defaults.secondaryPrivateIpCount;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.securityGroups = defaults.securityGroups;
    	      this.state = defaults.state;
    	      this.subnetId = defaults.subnetId;
        }

        @CustomType.Setter
        public Builder accountId(@Nullable String accountId) {
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder deleteOnVmDeletion(@Nullable Boolean deleteOnVmDeletion) {
            this.deleteOnVmDeletion = deleteOnVmDeletion;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceNumber(Integer deviceNumber) {
            this.deviceNumber = Objects.requireNonNull(deviceNumber);
            return this;
        }
        @CustomType.Setter
        public Builder isSourceDestChecked(@Nullable Boolean isSourceDestChecked) {
            this.isSourceDestChecked = isSourceDestChecked;
            return this;
        }
        @CustomType.Setter
        public Builder linkNics(@Nullable List<VmPrimaryNicLinkNic> linkNics) {
            this.linkNics = linkNics;
            return this;
        }
        public Builder linkNics(VmPrimaryNicLinkNic... linkNics) {
            return linkNics(List.of(linkNics));
        }
        @CustomType.Setter
        public Builder linkPublicIps(@Nullable List<VmPrimaryNicLinkPublicIp> linkPublicIps) {
            this.linkPublicIps = linkPublicIps;
            return this;
        }
        public Builder linkPublicIps(VmPrimaryNicLinkPublicIp... linkPublicIps) {
            return linkPublicIps(List.of(linkPublicIps));
        }
        @CustomType.Setter
        public Builder macAddress(@Nullable String macAddress) {
            this.macAddress = macAddress;
            return this;
        }
        @CustomType.Setter
        public Builder netId(@Nullable String netId) {
            this.netId = netId;
            return this;
        }
        @CustomType.Setter
        public Builder nicId(@Nullable String nicId) {
            this.nicId = nicId;
            return this;
        }
        @CustomType.Setter
        public Builder privateDnsName(@Nullable String privateDnsName) {
            this.privateDnsName = privateDnsName;
            return this;
        }
        @CustomType.Setter
        public Builder privateIps(@Nullable List<VmPrimaryNicPrivateIp> privateIps) {
            this.privateIps = privateIps;
            return this;
        }
        public Builder privateIps(VmPrimaryNicPrivateIp... privateIps) {
            return privateIps(List.of(privateIps));
        }
        @CustomType.Setter
        public Builder secondaryPrivateIpCount(@Nullable Integer secondaryPrivateIpCount) {
            this.secondaryPrivateIpCount = secondaryPrivateIpCount;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupIds(@Nullable List<String> securityGroupIds) {
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        @CustomType.Setter
        public Builder securityGroups(@Nullable List<VmPrimaryNicSecurityGroup> securityGroups) {
            this.securityGroups = securityGroups;
            return this;
        }
        public Builder securityGroups(VmPrimaryNicSecurityGroup... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(@Nullable String subnetId) {
            this.subnetId = subnetId;
            return this;
        }
        public VmPrimaryNic build() {
            final var o = new VmPrimaryNic();
            o.accountId = accountId;
            o.deleteOnVmDeletion = deleteOnVmDeletion;
            o.description = description;
            o.deviceNumber = deviceNumber;
            o.isSourceDestChecked = isSourceDestChecked;
            o.linkNics = linkNics;
            o.linkPublicIps = linkPublicIps;
            o.macAddress = macAddress;
            o.netId = netId;
            o.nicId = nicId;
            o.privateDnsName = privateDnsName;
            o.privateIps = privateIps;
            o.secondaryPrivateIpCount = secondaryPrivateIpCount;
            o.securityGroupIds = securityGroupIds;
            o.securityGroups = securityGroups;
            o.state = state;
            o.subnetId = subnetId;
            return o;
        }
    }
}
