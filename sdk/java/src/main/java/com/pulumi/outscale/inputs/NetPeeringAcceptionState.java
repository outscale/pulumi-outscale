// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.NetPeeringAcceptionAccepterNetArgs;
import com.pulumi.outscale.inputs.NetPeeringAcceptionSourceNetArgs;
import com.pulumi.outscale.inputs.NetPeeringAcceptionStateArgs;
import com.pulumi.outscale.inputs.NetPeeringAcceptionTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetPeeringAcceptionState extends com.pulumi.resources.ResourceArgs {

    public static final NetPeeringAcceptionState Empty = new NetPeeringAcceptionState();

    @Import(name="accepterNetId")
    private @Nullable Output<String> accepterNetId;

    public Optional<Output<String>> accepterNetId() {
        return Optional.ofNullable(this.accepterNetId);
    }

    /**
     * Information about the accepter Net.
     * 
     */
    @Import(name="accepterNets")
    private @Nullable Output<List<NetPeeringAcceptionAccepterNetArgs>> accepterNets;

    /**
     * @return Information about the accepter Net.
     * 
     */
    public Optional<Output<List<NetPeeringAcceptionAccepterNetArgs>>> accepterNets() {
        return Optional.ofNullable(this.accepterNets);
    }

    /**
     * The ID of the Net peering you want to accept.
     * 
     */
    @Import(name="netPeeringId")
    private @Nullable Output<String> netPeeringId;

    /**
     * @return The ID of the Net peering you want to accept.
     * 
     */
    public Optional<Output<String>> netPeeringId() {
        return Optional.ofNullable(this.netPeeringId);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    @Import(name="sourceNetId")
    private @Nullable Output<String> sourceNetId;

    public Optional<Output<String>> sourceNetId() {
        return Optional.ofNullable(this.sourceNetId);
    }

    /**
     * Information about the source Net.
     * 
     */
    @Import(name="sourceNets")
    private @Nullable Output<List<NetPeeringAcceptionSourceNetArgs>> sourceNets;

    /**
     * @return Information about the source Net.
     * 
     */
    public Optional<Output<List<NetPeeringAcceptionSourceNetArgs>>> sourceNets() {
        return Optional.ofNullable(this.sourceNets);
    }

    /**
     * Information about the state of the Net peering.
     * 
     */
    @Import(name="states")
    private @Nullable Output<List<NetPeeringAcceptionStateArgs>> states;

    /**
     * @return Information about the state of the Net peering.
     * 
     */
    public Optional<Output<List<NetPeeringAcceptionStateArgs>>> states() {
        return Optional.ofNullable(this.states);
    }

    /**
     * One or more tags associated with the Net peering.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<NetPeeringAcceptionTagArgs>> tags;

    /**
     * @return One or more tags associated with the Net peering.
     * 
     */
    public Optional<Output<List<NetPeeringAcceptionTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private NetPeeringAcceptionState() {}

    private NetPeeringAcceptionState(NetPeeringAcceptionState $) {
        this.accepterNetId = $.accepterNetId;
        this.accepterNets = $.accepterNets;
        this.netPeeringId = $.netPeeringId;
        this.requestId = $.requestId;
        this.sourceNetId = $.sourceNetId;
        this.sourceNets = $.sourceNets;
        this.states = $.states;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetPeeringAcceptionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetPeeringAcceptionState $;

        public Builder() {
            $ = new NetPeeringAcceptionState();
        }

        public Builder(NetPeeringAcceptionState defaults) {
            $ = new NetPeeringAcceptionState(Objects.requireNonNull(defaults));
        }

        public Builder accepterNetId(@Nullable Output<String> accepterNetId) {
            $.accepterNetId = accepterNetId;
            return this;
        }

        public Builder accepterNetId(String accepterNetId) {
            return accepterNetId(Output.of(accepterNetId));
        }

        /**
         * @param accepterNets Information about the accepter Net.
         * 
         * @return builder
         * 
         */
        public Builder accepterNets(@Nullable Output<List<NetPeeringAcceptionAccepterNetArgs>> accepterNets) {
            $.accepterNets = accepterNets;
            return this;
        }

        /**
         * @param accepterNets Information about the accepter Net.
         * 
         * @return builder
         * 
         */
        public Builder accepterNets(List<NetPeeringAcceptionAccepterNetArgs> accepterNets) {
            return accepterNets(Output.of(accepterNets));
        }

        /**
         * @param accepterNets Information about the accepter Net.
         * 
         * @return builder
         * 
         */
        public Builder accepterNets(NetPeeringAcceptionAccepterNetArgs... accepterNets) {
            return accepterNets(List.of(accepterNets));
        }

        /**
         * @param netPeeringId The ID of the Net peering you want to accept.
         * 
         * @return builder
         * 
         */
        public Builder netPeeringId(@Nullable Output<String> netPeeringId) {
            $.netPeeringId = netPeeringId;
            return this;
        }

        /**
         * @param netPeeringId The ID of the Net peering you want to accept.
         * 
         * @return builder
         * 
         */
        public Builder netPeeringId(String netPeeringId) {
            return netPeeringId(Output.of(netPeeringId));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder sourceNetId(@Nullable Output<String> sourceNetId) {
            $.sourceNetId = sourceNetId;
            return this;
        }

        public Builder sourceNetId(String sourceNetId) {
            return sourceNetId(Output.of(sourceNetId));
        }

        /**
         * @param sourceNets Information about the source Net.
         * 
         * @return builder
         * 
         */
        public Builder sourceNets(@Nullable Output<List<NetPeeringAcceptionSourceNetArgs>> sourceNets) {
            $.sourceNets = sourceNets;
            return this;
        }

        /**
         * @param sourceNets Information about the source Net.
         * 
         * @return builder
         * 
         */
        public Builder sourceNets(List<NetPeeringAcceptionSourceNetArgs> sourceNets) {
            return sourceNets(Output.of(sourceNets));
        }

        /**
         * @param sourceNets Information about the source Net.
         * 
         * @return builder
         * 
         */
        public Builder sourceNets(NetPeeringAcceptionSourceNetArgs... sourceNets) {
            return sourceNets(List.of(sourceNets));
        }

        /**
         * @param states Information about the state of the Net peering.
         * 
         * @return builder
         * 
         */
        public Builder states(@Nullable Output<List<NetPeeringAcceptionStateArgs>> states) {
            $.states = states;
            return this;
        }

        /**
         * @param states Information about the state of the Net peering.
         * 
         * @return builder
         * 
         */
        public Builder states(List<NetPeeringAcceptionStateArgs> states) {
            return states(Output.of(states));
        }

        /**
         * @param states Information about the state of the Net peering.
         * 
         * @return builder
         * 
         */
        public Builder states(NetPeeringAcceptionStateArgs... states) {
            return states(List.of(states));
        }

        /**
         * @param tags One or more tags associated with the Net peering.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<NetPeeringAcceptionTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags One or more tags associated with the Net peering.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<NetPeeringAcceptionTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags One or more tags associated with the Net peering.
         * 
         * @return builder
         * 
         */
        public Builder tags(NetPeeringAcceptionTagArgs... tags) {
            return tags(List.of(tags));
        }

        public NetPeeringAcceptionState build() {
            return $;
        }
    }

}
