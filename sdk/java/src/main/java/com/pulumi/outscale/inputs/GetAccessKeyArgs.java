// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.GetAccessKeyFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAccessKeyArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAccessKeyArgs Empty = new GetAccessKeyArgs();

    /**
     * The ID of the access key.
     * 
     */
    @Import(name="accessKeyId")
    private @Nullable Output<String> accessKeyId;

    /**
     * @return The ID of the access key.
     * 
     */
    public Optional<Output<String>> accessKeyId() {
        return Optional.ofNullable(this.accessKeyId);
    }

    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<GetAccessKeyFilterArgs>> filters;

    /**
     * @return A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    public Optional<Output<List<GetAccessKeyFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The state of the access key (`ACTIVE` if the key is valid for API calls, or `INACTIVE` if not).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the access key (`ACTIVE` if the key is valid for API calls, or `INACTIVE` if not).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private GetAccessKeyArgs() {}

    private GetAccessKeyArgs(GetAccessKeyArgs $) {
        this.accessKeyId = $.accessKeyId;
        this.filters = $.filters;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAccessKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAccessKeyArgs $;

        public Builder() {
            $ = new GetAccessKeyArgs();
        }

        public Builder(GetAccessKeyArgs defaults) {
            $ = new GetAccessKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyId The ID of the access key.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(@Nullable Output<String> accessKeyId) {
            $.accessKeyId = accessKeyId;
            return this;
        }

        /**
         * @param accessKeyId The ID of the access key.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyId(String accessKeyId) {
            return accessKeyId(Output.of(accessKeyId));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<GetAccessKeyFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(List<GetAccessKeyFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(GetAccessKeyFilterArgs... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param state The state of the access key (`ACTIVE` if the key is valid for API calls, or `INACTIVE` if not).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the access key (`ACTIVE` if the key is valid for API calls, or `INACTIVE` if not).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public GetAccessKeyArgs build() {
            return $;
        }
    }

}
