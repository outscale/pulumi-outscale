// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteTableLinkRouteTableArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteTableLinkRouteTableArgs Empty = new RouteTableLinkRouteTableArgs();

    /**
     * The ID of the association between the route table and the Subnet.
     * 
     */
    @Import(name="linkRouteTableId")
    private @Nullable Output<String> linkRouteTableId;

    /**
     * @return The ID of the association between the route table and the Subnet.
     * 
     */
    public Optional<Output<String>> linkRouteTableId() {
        return Optional.ofNullable(this.linkRouteTableId);
    }

    /**
     * If true, the route table is the main one.
     * 
     */
    @Import(name="main")
    private @Nullable Output<Boolean> main;

    /**
     * @return If true, the route table is the main one.
     * 
     */
    public Optional<Output<Boolean>> main() {
        return Optional.ofNullable(this.main);
    }

    /**
     * The ID of the route table.
     * 
     */
    @Import(name="routeTableId")
    private @Nullable Output<String> routeTableId;

    /**
     * @return The ID of the route table.
     * 
     */
    public Optional<Output<String>> routeTableId() {
        return Optional.ofNullable(this.routeTableId);
    }

    @Import(name="routeTableToSubnetLinkId")
    private @Nullable Output<String> routeTableToSubnetLinkId;

    public Optional<Output<String>> routeTableToSubnetLinkId() {
        return Optional.ofNullable(this.routeTableToSubnetLinkId);
    }

    /**
     * The ID of the Subnet.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The ID of the Subnet.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    private RouteTableLinkRouteTableArgs() {}

    private RouteTableLinkRouteTableArgs(RouteTableLinkRouteTableArgs $) {
        this.linkRouteTableId = $.linkRouteTableId;
        this.main = $.main;
        this.routeTableId = $.routeTableId;
        this.routeTableToSubnetLinkId = $.routeTableToSubnetLinkId;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteTableLinkRouteTableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteTableLinkRouteTableArgs $;

        public Builder() {
            $ = new RouteTableLinkRouteTableArgs();
        }

        public Builder(RouteTableLinkRouteTableArgs defaults) {
            $ = new RouteTableLinkRouteTableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param linkRouteTableId The ID of the association between the route table and the Subnet.
         * 
         * @return builder
         * 
         */
        public Builder linkRouteTableId(@Nullable Output<String> linkRouteTableId) {
            $.linkRouteTableId = linkRouteTableId;
            return this;
        }

        /**
         * @param linkRouteTableId The ID of the association between the route table and the Subnet.
         * 
         * @return builder
         * 
         */
        public Builder linkRouteTableId(String linkRouteTableId) {
            return linkRouteTableId(Output.of(linkRouteTableId));
        }

        /**
         * @param main If true, the route table is the main one.
         * 
         * @return builder
         * 
         */
        public Builder main(@Nullable Output<Boolean> main) {
            $.main = main;
            return this;
        }

        /**
         * @param main If true, the route table is the main one.
         * 
         * @return builder
         * 
         */
        public Builder main(Boolean main) {
            return main(Output.of(main));
        }

        /**
         * @param routeTableId The ID of the route table.
         * 
         * @return builder
         * 
         */
        public Builder routeTableId(@Nullable Output<String> routeTableId) {
            $.routeTableId = routeTableId;
            return this;
        }

        /**
         * @param routeTableId The ID of the route table.
         * 
         * @return builder
         * 
         */
        public Builder routeTableId(String routeTableId) {
            return routeTableId(Output.of(routeTableId));
        }

        public Builder routeTableToSubnetLinkId(@Nullable Output<String> routeTableToSubnetLinkId) {
            $.routeTableToSubnetLinkId = routeTableToSubnetLinkId;
            return this;
        }

        public Builder routeTableToSubnetLinkId(String routeTableToSubnetLinkId) {
            return routeTableToSubnetLinkId(Output.of(routeTableToSubnetLinkId));
        }

        /**
         * @param subnetId The ID of the Subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The ID of the Subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public RouteTableLinkRouteTableArgs build() {
            return $;
        }
    }

}
