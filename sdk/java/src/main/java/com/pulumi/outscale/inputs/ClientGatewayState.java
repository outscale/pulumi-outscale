// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.ClientGatewayTagArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClientGatewayState extends com.pulumi.resources.ResourceArgs {

    public static final ClientGatewayState Empty = new ClientGatewayState();

    /**
     * The Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find the path to your client gateway through the Internet. This number must be between `1` and `4294967295`.
     * 
     */
    @Import(name="bgpAsn")
    private @Nullable Output<Integer> bgpAsn;

    /**
     * @return The Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find the path to your client gateway through the Internet. This number must be between `1` and `4294967295`.
     * 
     */
    public Optional<Output<Integer>> bgpAsn() {
        return Optional.ofNullable(this.bgpAsn);
    }

    /**
     * The ID of the client gateway.
     * 
     */
    @Import(name="clientGatewayId")
    private @Nullable Output<String> clientGatewayId;

    /**
     * @return The ID of the client gateway.
     * 
     */
    public Optional<Output<String>> clientGatewayId() {
        return Optional.ofNullable(this.clientGatewayId);
    }

    /**
     * The communication protocol used to establish tunnel with your client gateway (only `ipsec.1` is supported).
     * 
     */
    @Import(name="connectionType")
    private @Nullable Output<String> connectionType;

    /**
     * @return The communication protocol used to establish tunnel with your client gateway (only `ipsec.1` is supported).
     * 
     */
    public Optional<Output<String>> connectionType() {
        return Optional.ofNullable(this.connectionType);
    }

    /**
     * The public fixed IPv4 address of your client gateway.
     * 
     */
    @Import(name="publicIp")
    private @Nullable Output<String> publicIp;

    /**
     * @return The public fixed IPv4 address of your client gateway.
     * 
     */
    public Optional<Output<String>> publicIp() {
        return Optional.ofNullable(this.publicIp);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * The state of the client gateway (`pending` \| `available` \| `deleting` \| `deleted`).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the client gateway (`pending` \| `available` \| `deleting` \| `deleted`).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<ClientGatewayTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<ClientGatewayTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private ClientGatewayState() {}

    private ClientGatewayState(ClientGatewayState $) {
        this.bgpAsn = $.bgpAsn;
        this.clientGatewayId = $.clientGatewayId;
        this.connectionType = $.connectionType;
        this.publicIp = $.publicIp;
        this.requestId = $.requestId;
        this.state = $.state;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClientGatewayState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClientGatewayState $;

        public Builder() {
            $ = new ClientGatewayState();
        }

        public Builder(ClientGatewayState defaults) {
            $ = new ClientGatewayState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bgpAsn The Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find the path to your client gateway through the Internet. This number must be between `1` and `4294967295`.
         * 
         * @return builder
         * 
         */
        public Builder bgpAsn(@Nullable Output<Integer> bgpAsn) {
            $.bgpAsn = bgpAsn;
            return this;
        }

        /**
         * @param bgpAsn The Autonomous System Number (ASN) used by the Border Gateway Protocol (BGP) to find the path to your client gateway through the Internet. This number must be between `1` and `4294967295`.
         * 
         * @return builder
         * 
         */
        public Builder bgpAsn(Integer bgpAsn) {
            return bgpAsn(Output.of(bgpAsn));
        }

        /**
         * @param clientGatewayId The ID of the client gateway.
         * 
         * @return builder
         * 
         */
        public Builder clientGatewayId(@Nullable Output<String> clientGatewayId) {
            $.clientGatewayId = clientGatewayId;
            return this;
        }

        /**
         * @param clientGatewayId The ID of the client gateway.
         * 
         * @return builder
         * 
         */
        public Builder clientGatewayId(String clientGatewayId) {
            return clientGatewayId(Output.of(clientGatewayId));
        }

        /**
         * @param connectionType The communication protocol used to establish tunnel with your client gateway (only `ipsec.1` is supported).
         * 
         * @return builder
         * 
         */
        public Builder connectionType(@Nullable Output<String> connectionType) {
            $.connectionType = connectionType;
            return this;
        }

        /**
         * @param connectionType The communication protocol used to establish tunnel with your client gateway (only `ipsec.1` is supported).
         * 
         * @return builder
         * 
         */
        public Builder connectionType(String connectionType) {
            return connectionType(Output.of(connectionType));
        }

        /**
         * @param publicIp The public fixed IPv4 address of your client gateway.
         * 
         * @return builder
         * 
         */
        public Builder publicIp(@Nullable Output<String> publicIp) {
            $.publicIp = publicIp;
            return this;
        }

        /**
         * @param publicIp The public fixed IPv4 address of your client gateway.
         * 
         * @return builder
         * 
         */
        public Builder publicIp(String publicIp) {
            return publicIp(Output.of(publicIp));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param state The state of the client gateway (`pending` \| `available` \| `deleting` \| `deleted`).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the client gateway (`pending` \| `available` \| `deleting` \| `deleted`).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<ClientGatewayTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<ClientGatewayTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(ClientGatewayTagArgs... tags) {
            return tags(List.of(tags));
        }

        public ClientGatewayState build() {
            return $;
        }
    }

}
