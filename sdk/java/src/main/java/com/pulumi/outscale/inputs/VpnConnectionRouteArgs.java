// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnConnectionRouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpnConnectionRouteArgs Empty = new VpnConnectionRouteArgs();

    /**
     * The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
     * 
     */
    @Import(name="destinationIpRange")
    private @Nullable Output<String> destinationIpRange;

    /**
     * @return The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
     * 
     */
    public Optional<Output<String>> destinationIpRange() {
        return Optional.ofNullable(this.destinationIpRange);
    }

    /**
     * The type of route (always `static`).
     * 
     */
    @Import(name="routeType")
    private @Nullable Output<String> routeType;

    /**
     * @return The type of route (always `static`).
     * 
     */
    public Optional<Output<String>> routeType() {
        return Optional.ofNullable(this.routeType);
    }

    /**
     * The state of the IPSEC tunnel (`UP` \| `DOWN`).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the IPSEC tunnel (`UP` \| `DOWN`).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private VpnConnectionRouteArgs() {}

    private VpnConnectionRouteArgs(VpnConnectionRouteArgs $) {
        this.destinationIpRange = $.destinationIpRange;
        this.routeType = $.routeType;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnConnectionRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnConnectionRouteArgs $;

        public Builder() {
            $ = new VpnConnectionRouteArgs();
        }

        public Builder(VpnConnectionRouteArgs defaults) {
            $ = new VpnConnectionRouteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationIpRange The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
         * 
         * @return builder
         * 
         */
        public Builder destinationIpRange(@Nullable Output<String> destinationIpRange) {
            $.destinationIpRange = destinationIpRange;
            return this;
        }

        /**
         * @param destinationIpRange The IP range used for the destination match, in CIDR notation (for example, `10.0.0.0/24`).
         * 
         * @return builder
         * 
         */
        public Builder destinationIpRange(String destinationIpRange) {
            return destinationIpRange(Output.of(destinationIpRange));
        }

        /**
         * @param routeType The type of route (always `static`).
         * 
         * @return builder
         * 
         */
        public Builder routeType(@Nullable Output<String> routeType) {
            $.routeType = routeType;
            return this;
        }

        /**
         * @param routeType The type of route (always `static`).
         * 
         * @return builder
         * 
         */
        public Builder routeType(String routeType) {
            return routeType(Output.of(routeType));
        }

        /**
         * @param state The state of the IPSEC tunnel (`UP` \| `DOWN`).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the IPSEC tunnel (`UP` \| `DOWN`).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public VpnConnectionRouteArgs build() {
            return $;
        }
    }

}
