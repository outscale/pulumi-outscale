// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.outscale.outputs.GetSnapshotFilter;
import com.pulumi.outscale.outputs.GetSnapshotPermissionsToCreateVolume;
import com.pulumi.outscale.outputs.GetSnapshotTag;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetSnapshotResult {
    /**
     * @return The account alias of the owner of the snapshot.
     * 
     */
    private String accountAlias;
    /**
     * @return The account ID of the owner of the snapshot.
     * 
     */
    private String accountId;
    /**
     * @return The date and time of creation of the snapshot.
     * 
     */
    private String creationDate;
    /**
     * @return The description of the snapshot.
     * 
     */
    private String description;
    private @Nullable List<GetSnapshotFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Permissions for the resource.
     * 
     */
    private List<GetSnapshotPermissionsToCreateVolume> permissionsToCreateVolumes;
    /**
     * @return The progress of the snapshot, as a percentage.
     * 
     */
    private Integer progress;
    private String requestId;
    /**
     * @return The ID of the snapshot.
     * 
     */
    private String snapshotId;
    /**
     * @return The state of the snapshot (`in-queue` \| `completed` \| `error`).
     * 
     */
    private String state;
    /**
     * @return One or more tags associated with the snapshot.
     * 
     */
    private List<GetSnapshotTag> tags;
    /**
     * @return The ID of the volume used to create the snapshot.
     * 
     */
    private String volumeId;
    /**
     * @return The size of the volume used to create the snapshot, in gibibytes (GiB).
     * 
     */
    private Integer volumeSize;

    private GetSnapshotResult() {}
    /**
     * @return The account alias of the owner of the snapshot.
     * 
     */
    public String accountAlias() {
        return this.accountAlias;
    }
    /**
     * @return The account ID of the owner of the snapshot.
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return The date and time of creation of the snapshot.
     * 
     */
    public String creationDate() {
        return this.creationDate;
    }
    /**
     * @return The description of the snapshot.
     * 
     */
    public String description() {
        return this.description;
    }
    public List<GetSnapshotFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Permissions for the resource.
     * 
     */
    public List<GetSnapshotPermissionsToCreateVolume> permissionsToCreateVolumes() {
        return this.permissionsToCreateVolumes;
    }
    /**
     * @return The progress of the snapshot, as a percentage.
     * 
     */
    public Integer progress() {
        return this.progress;
    }
    public String requestId() {
        return this.requestId;
    }
    /**
     * @return The ID of the snapshot.
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return The state of the snapshot (`in-queue` \| `completed` \| `error`).
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return One or more tags associated with the snapshot.
     * 
     */
    public List<GetSnapshotTag> tags() {
        return this.tags;
    }
    /**
     * @return The ID of the volume used to create the snapshot.
     * 
     */
    public String volumeId() {
        return this.volumeId;
    }
    /**
     * @return The size of the volume used to create the snapshot, in gibibytes (GiB).
     * 
     */
    public Integer volumeSize() {
        return this.volumeSize;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSnapshotResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountAlias;
        private String accountId;
        private String creationDate;
        private String description;
        private @Nullable List<GetSnapshotFilter> filters;
        private String id;
        private List<GetSnapshotPermissionsToCreateVolume> permissionsToCreateVolumes;
        private Integer progress;
        private String requestId;
        private String snapshotId;
        private String state;
        private List<GetSnapshotTag> tags;
        private String volumeId;
        private Integer volumeSize;
        public Builder() {}
        public Builder(GetSnapshotResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountAlias = defaults.accountAlias;
    	      this.accountId = defaults.accountId;
    	      this.creationDate = defaults.creationDate;
    	      this.description = defaults.description;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.permissionsToCreateVolumes = defaults.permissionsToCreateVolumes;
    	      this.progress = defaults.progress;
    	      this.requestId = defaults.requestId;
    	      this.snapshotId = defaults.snapshotId;
    	      this.state = defaults.state;
    	      this.tags = defaults.tags;
    	      this.volumeId = defaults.volumeId;
    	      this.volumeSize = defaults.volumeSize;
        }

        @CustomType.Setter
        public Builder accountAlias(String accountAlias) {
            this.accountAlias = Objects.requireNonNull(accountAlias);
            return this;
        }
        @CustomType.Setter
        public Builder accountId(String accountId) {
            this.accountId = Objects.requireNonNull(accountId);
            return this;
        }
        @CustomType.Setter
        public Builder creationDate(String creationDate) {
            this.creationDate = Objects.requireNonNull(creationDate);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetSnapshotFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetSnapshotFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder permissionsToCreateVolumes(List<GetSnapshotPermissionsToCreateVolume> permissionsToCreateVolumes) {
            this.permissionsToCreateVolumes = Objects.requireNonNull(permissionsToCreateVolumes);
            return this;
        }
        public Builder permissionsToCreateVolumes(GetSnapshotPermissionsToCreateVolume... permissionsToCreateVolumes) {
            return permissionsToCreateVolumes(List.of(permissionsToCreateVolumes));
        }
        @CustomType.Setter
        public Builder progress(Integer progress) {
            this.progress = Objects.requireNonNull(progress);
            return this;
        }
        @CustomType.Setter
        public Builder requestId(String requestId) {
            this.requestId = Objects.requireNonNull(requestId);
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            this.snapshotId = Objects.requireNonNull(snapshotId);
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetSnapshotTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetSnapshotTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder volumeId(String volumeId) {
            this.volumeId = Objects.requireNonNull(volumeId);
            return this;
        }
        @CustomType.Setter
        public Builder volumeSize(Integer volumeSize) {
            this.volumeSize = Objects.requireNonNull(volumeSize);
            return this;
        }
        public GetSnapshotResult build() {
            final var o = new GetSnapshotResult();
            o.accountAlias = accountAlias;
            o.accountId = accountId;
            o.creationDate = creationDate;
            o.description = description;
            o.filters = filters;
            o.id = id;
            o.permissionsToCreateVolumes = permissionsToCreateVolumes;
            o.progress = progress;
            o.requestId = requestId;
            o.snapshotId = snapshotId;
            o.state = state;
            o.tags = tags;
            o.volumeId = volumeId;
            o.volumeSize = volumeSize;
            return o;
        }
    }
}
