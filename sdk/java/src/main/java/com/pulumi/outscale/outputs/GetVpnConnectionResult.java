// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.outscale.outputs.GetVpnConnectionFilter;
import com.pulumi.outscale.outputs.GetVpnConnectionRoute;
import com.pulumi.outscale.outputs.GetVpnConnectionTag;
import com.pulumi.outscale.outputs.GetVpnConnectionVgwTelemetry;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVpnConnectionResult {
    /**
     * @return Example configuration for the client gateway.
     * 
     */
    private String clientGatewayConfiguration;
    /**
     * @return The ID of the client gateway used on the client end of the connection.
     * 
     */
    private String clientGatewayId;
    /**
     * @return The type of VPN connection (always `ipsec.1`).
     * 
     */
    private String connectionType;
    private @Nullable List<GetVpnConnectionFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String requestId;
    /**
     * @return Information about one or more static routes associated with the VPN connection, if any.
     * 
     */
    private List<GetVpnConnectionRoute> routes;
    /**
     * @return The state of the IPSEC tunnel (`UP` \| `DOWN`).
     * 
     */
    private String state;
    /**
     * @return If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
     * 
     */
    private @Nullable Boolean staticRoutesOnly;
    /**
     * @return One or more tags associated with the VPN connection.
     * 
     */
    private List<GetVpnConnectionTag> tags;
    /**
     * @return Information about the current state of one or more of the VPN tunnels.
     * 
     */
    private List<GetVpnConnectionVgwTelemetry> vgwTelemetries;
    /**
     * @return The ID of the virtual gateway used on the OUTSCALE end of the connection.
     * 
     */
    private String virtualGatewayId;
    /**
     * @return The ID of the VPN connection.
     * 
     */
    private @Nullable String vpnConnectionId;

    private GetVpnConnectionResult() {}
    /**
     * @return Example configuration for the client gateway.
     * 
     */
    public String clientGatewayConfiguration() {
        return this.clientGatewayConfiguration;
    }
    /**
     * @return The ID of the client gateway used on the client end of the connection.
     * 
     */
    public String clientGatewayId() {
        return this.clientGatewayId;
    }
    /**
     * @return The type of VPN connection (always `ipsec.1`).
     * 
     */
    public String connectionType() {
        return this.connectionType;
    }
    public List<GetVpnConnectionFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String requestId() {
        return this.requestId;
    }
    /**
     * @return Information about one or more static routes associated with the VPN connection, if any.
     * 
     */
    public List<GetVpnConnectionRoute> routes() {
        return this.routes;
    }
    /**
     * @return The state of the IPSEC tunnel (`UP` \| `DOWN`).
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
     * 
     */
    public Optional<Boolean> staticRoutesOnly() {
        return Optional.ofNullable(this.staticRoutesOnly);
    }
    /**
     * @return One or more tags associated with the VPN connection.
     * 
     */
    public List<GetVpnConnectionTag> tags() {
        return this.tags;
    }
    /**
     * @return Information about the current state of one or more of the VPN tunnels.
     * 
     */
    public List<GetVpnConnectionVgwTelemetry> vgwTelemetries() {
        return this.vgwTelemetries;
    }
    /**
     * @return The ID of the virtual gateway used on the OUTSCALE end of the connection.
     * 
     */
    public String virtualGatewayId() {
        return this.virtualGatewayId;
    }
    /**
     * @return The ID of the VPN connection.
     * 
     */
    public Optional<String> vpnConnectionId() {
        return Optional.ofNullable(this.vpnConnectionId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVpnConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clientGatewayConfiguration;
        private String clientGatewayId;
        private String connectionType;
        private @Nullable List<GetVpnConnectionFilter> filters;
        private String id;
        private String requestId;
        private List<GetVpnConnectionRoute> routes;
        private String state;
        private @Nullable Boolean staticRoutesOnly;
        private List<GetVpnConnectionTag> tags;
        private List<GetVpnConnectionVgwTelemetry> vgwTelemetries;
        private String virtualGatewayId;
        private @Nullable String vpnConnectionId;
        public Builder() {}
        public Builder(GetVpnConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientGatewayConfiguration = defaults.clientGatewayConfiguration;
    	      this.clientGatewayId = defaults.clientGatewayId;
    	      this.connectionType = defaults.connectionType;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.requestId = defaults.requestId;
    	      this.routes = defaults.routes;
    	      this.state = defaults.state;
    	      this.staticRoutesOnly = defaults.staticRoutesOnly;
    	      this.tags = defaults.tags;
    	      this.vgwTelemetries = defaults.vgwTelemetries;
    	      this.virtualGatewayId = defaults.virtualGatewayId;
    	      this.vpnConnectionId = defaults.vpnConnectionId;
        }

        @CustomType.Setter
        public Builder clientGatewayConfiguration(String clientGatewayConfiguration) {
            this.clientGatewayConfiguration = Objects.requireNonNull(clientGatewayConfiguration);
            return this;
        }
        @CustomType.Setter
        public Builder clientGatewayId(String clientGatewayId) {
            this.clientGatewayId = Objects.requireNonNull(clientGatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder connectionType(String connectionType) {
            this.connectionType = Objects.requireNonNull(connectionType);
            return this;
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetVpnConnectionFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetVpnConnectionFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder requestId(String requestId) {
            this.requestId = Objects.requireNonNull(requestId);
            return this;
        }
        @CustomType.Setter
        public Builder routes(List<GetVpnConnectionRoute> routes) {
            this.routes = Objects.requireNonNull(routes);
            return this;
        }
        public Builder routes(GetVpnConnectionRoute... routes) {
            return routes(List.of(routes));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder staticRoutesOnly(@Nullable Boolean staticRoutesOnly) {
            this.staticRoutesOnly = staticRoutesOnly;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetVpnConnectionTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetVpnConnectionTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder vgwTelemetries(List<GetVpnConnectionVgwTelemetry> vgwTelemetries) {
            this.vgwTelemetries = Objects.requireNonNull(vgwTelemetries);
            return this;
        }
        public Builder vgwTelemetries(GetVpnConnectionVgwTelemetry... vgwTelemetries) {
            return vgwTelemetries(List.of(vgwTelemetries));
        }
        @CustomType.Setter
        public Builder virtualGatewayId(String virtualGatewayId) {
            this.virtualGatewayId = Objects.requireNonNull(virtualGatewayId);
            return this;
        }
        @CustomType.Setter
        public Builder vpnConnectionId(@Nullable String vpnConnectionId) {
            this.vpnConnectionId = vpnConnectionId;
            return this;
        }
        public GetVpnConnectionResult build() {
            final var o = new GetVpnConnectionResult();
            o.clientGatewayConfiguration = clientGatewayConfiguration;
            o.clientGatewayId = clientGatewayId;
            o.connectionType = connectionType;
            o.filters = filters;
            o.id = id;
            o.requestId = requestId;
            o.routes = routes;
            o.state = state;
            o.staticRoutesOnly = staticRoutesOnly;
            o.tags = tags;
            o.vgwTelemetries = vgwTelemetries;
            o.virtualGatewayId = virtualGatewayId;
            o.vpnConnectionId = vpnConnectionId;
            return o;
        }
    }
}
