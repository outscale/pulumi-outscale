// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.GetClientGatewaysFilterArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetClientGatewaysArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetClientGatewaysArgs Empty = new GetClientGatewaysArgs();

    /**
     * The IDs of the client gateways.
     * 
     */
    @Import(name="clientGatewayIds")
    private @Nullable Output<List<String>> clientGatewayIds;

    /**
     * @return The IDs of the client gateways.
     * 
     */
    public Optional<Output<List<String>>> clientGatewayIds() {
        return Optional.ofNullable(this.clientGatewayIds);
    }

    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    @Import(name="filters")
    private @Nullable Output<List<GetClientGatewaysFilterArgs>> filters;

    /**
     * @return A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    public Optional<Output<List<GetClientGatewaysFilterArgs>>> filters() {
        return Optional.ofNullable(this.filters);
    }

    private GetClientGatewaysArgs() {}

    private GetClientGatewaysArgs(GetClientGatewaysArgs $) {
        this.clientGatewayIds = $.clientGatewayIds;
        this.filters = $.filters;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetClientGatewaysArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetClientGatewaysArgs $;

        public Builder() {
            $ = new GetClientGatewaysArgs();
        }

        public Builder(GetClientGatewaysArgs defaults) {
            $ = new GetClientGatewaysArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientGatewayIds The IDs of the client gateways.
         * 
         * @return builder
         * 
         */
        public Builder clientGatewayIds(@Nullable Output<List<String>> clientGatewayIds) {
            $.clientGatewayIds = clientGatewayIds;
            return this;
        }

        /**
         * @param clientGatewayIds The IDs of the client gateways.
         * 
         * @return builder
         * 
         */
        public Builder clientGatewayIds(List<String> clientGatewayIds) {
            return clientGatewayIds(Output.of(clientGatewayIds));
        }

        /**
         * @param clientGatewayIds The IDs of the client gateways.
         * 
         * @return builder
         * 
         */
        public Builder clientGatewayIds(String... clientGatewayIds) {
            return clientGatewayIds(List.of(clientGatewayIds));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable Output<List<GetClientGatewaysFilterArgs>> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(List<GetClientGatewaysFilterArgs> filters) {
            return filters(Output.of(filters));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(GetClientGatewaysFilterArgs... filters) {
            return filters(List.of(filters));
        }

        public GetClientGatewaysArgs build() {
            return $;
        }
    }

}
