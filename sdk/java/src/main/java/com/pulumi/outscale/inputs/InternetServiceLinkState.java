// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.InternetServiceLinkTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InternetServiceLinkState extends com.pulumi.resources.ResourceArgs {

    public static final InternetServiceLinkState Empty = new InternetServiceLinkState();

    /**
     * The ID of the Internet service you want to attach.
     * 
     */
    @Import(name="internetServiceId")
    private @Nullable Output<String> internetServiceId;

    /**
     * @return The ID of the Internet service you want to attach.
     * 
     */
    public Optional<Output<String>> internetServiceId() {
        return Optional.ofNullable(this.internetServiceId);
    }

    /**
     * The ID of the Net to which you want to attach the Internet service.
     * 
     */
    @Import(name="netId")
    private @Nullable Output<String> netId;

    /**
     * @return The ID of the Net to which you want to attach the Internet service.
     * 
     */
    public Optional<Output<String>> netId() {
        return Optional.ofNullable(this.netId);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * The state of the attachment of the Internet service to the Net (always `available`).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the attachment of the Internet service to the Net (always `available`).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * One or more tags associated with the Internet service.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<InternetServiceLinkTagArgs>> tags;

    /**
     * @return One or more tags associated with the Internet service.
     * 
     */
    public Optional<Output<List<InternetServiceLinkTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private InternetServiceLinkState() {}

    private InternetServiceLinkState(InternetServiceLinkState $) {
        this.internetServiceId = $.internetServiceId;
        this.netId = $.netId;
        this.requestId = $.requestId;
        this.state = $.state;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InternetServiceLinkState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InternetServiceLinkState $;

        public Builder() {
            $ = new InternetServiceLinkState();
        }

        public Builder(InternetServiceLinkState defaults) {
            $ = new InternetServiceLinkState(Objects.requireNonNull(defaults));
        }

        /**
         * @param internetServiceId The ID of the Internet service you want to attach.
         * 
         * @return builder
         * 
         */
        public Builder internetServiceId(@Nullable Output<String> internetServiceId) {
            $.internetServiceId = internetServiceId;
            return this;
        }

        /**
         * @param internetServiceId The ID of the Internet service you want to attach.
         * 
         * @return builder
         * 
         */
        public Builder internetServiceId(String internetServiceId) {
            return internetServiceId(Output.of(internetServiceId));
        }

        /**
         * @param netId The ID of the Net to which you want to attach the Internet service.
         * 
         * @return builder
         * 
         */
        public Builder netId(@Nullable Output<String> netId) {
            $.netId = netId;
            return this;
        }

        /**
         * @param netId The ID of the Net to which you want to attach the Internet service.
         * 
         * @return builder
         * 
         */
        public Builder netId(String netId) {
            return netId(Output.of(netId));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param state The state of the attachment of the Internet service to the Net (always `available`).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the attachment of the Internet service to the Net (always `available`).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tags One or more tags associated with the Internet service.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<InternetServiceLinkTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags One or more tags associated with the Internet service.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<InternetServiceLinkTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags One or more tags associated with the Internet service.
         * 
         * @return builder
         * 
         */
        public Builder tags(InternetServiceLinkTagArgs... tags) {
            return tags(List.of(tags));
        }

        public InternetServiceLinkState build() {
            return $;
        }
    }

}
