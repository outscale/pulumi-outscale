// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.NicLinkNicArgs;
import com.pulumi.outscale.inputs.NicLinkPublicIpArgs;
import com.pulumi.outscale.inputs.NicPrivateIpArgs;
import com.pulumi.outscale.inputs.NicSecurityGroupArgs;
import com.pulumi.outscale.inputs.NicTagArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NicState extends com.pulumi.resources.ResourceArgs {

    public static final NicState Empty = new NicState();

    /**
     * The account ID of the owner of the NIC.
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return The account ID of the owner of the NIC.
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * A description for the NIC.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description for the NIC.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
     * 
     */
    @Import(name="isSourceDestChecked")
    private @Nullable Output<Boolean> isSourceDestChecked;

    /**
     * @return (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
     * 
     */
    public Optional<Output<Boolean>> isSourceDestChecked() {
        return Optional.ofNullable(this.isSourceDestChecked);
    }

    /**
     * Information about the NIC attachment.
     * 
     */
    @Import(name="linkNics")
    private @Nullable Output<List<NicLinkNicArgs>> linkNics;

    /**
     * @return Information about the NIC attachment.
     * 
     */
    public Optional<Output<List<NicLinkNicArgs>>> linkNics() {
        return Optional.ofNullable(this.linkNics);
    }

    /**
     * Information about the public IP association.
     * 
     */
    @Import(name="linkPublicIps")
    private @Nullable Output<List<NicLinkPublicIpArgs>> linkPublicIps;

    /**
     * @return Information about the public IP association.
     * 
     */
    public Optional<Output<List<NicLinkPublicIpArgs>>> linkPublicIps() {
        return Optional.ofNullable(this.linkPublicIps);
    }

    /**
     * The Media Access Control (MAC) address of the NIC.
     * 
     */
    @Import(name="macAddress")
    private @Nullable Output<String> macAddress;

    /**
     * @return The Media Access Control (MAC) address of the NIC.
     * 
     */
    public Optional<Output<String>> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }

    /**
     * The ID of the Net for the NIC.
     * 
     */
    @Import(name="netId")
    private @Nullable Output<String> netId;

    /**
     * @return The ID of the Net for the NIC.
     * 
     */
    public Optional<Output<String>> netId() {
        return Optional.ofNullable(this.netId);
    }

    /**
     * The ID of the NIC.
     * 
     */
    @Import(name="nicId")
    private @Nullable Output<String> nicId;

    /**
     * @return The ID of the NIC.
     * 
     */
    public Optional<Output<String>> nicId() {
        return Optional.ofNullable(this.nicId);
    }

    /**
     * The name of the private DNS.
     * 
     */
    @Import(name="privateDnsName")
    private @Nullable Output<String> privateDnsName;

    /**
     * @return The name of the private DNS.
     * 
     */
    public Optional<Output<String>> privateDnsName() {
        return Optional.ofNullable(this.privateDnsName);
    }

    /**
     * The private IP of the NIC.
     * 
     */
    @Import(name="privateIp")
    private @Nullable Output<String> privateIp;

    /**
     * @return The private IP of the NIC.
     * 
     */
    public Optional<Output<String>> privateIp() {
        return Optional.ofNullable(this.privateIp);
    }

    /**
     * The primary private IP for the NIC.&lt;br /&gt;
     * This IP must be within the IP range of the Subnet that you specify with the `subnet_id` attribute.&lt;br /&gt;
     * If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
     * 
     */
    @Import(name="privateIps")
    private @Nullable Output<List<NicPrivateIpArgs>> privateIps;

    /**
     * @return The primary private IP for the NIC.&lt;br /&gt;
     * This IP must be within the IP range of the Subnet that you specify with the `subnet_id` attribute.&lt;br /&gt;
     * If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
     * 
     */
    public Optional<Output<List<NicPrivateIpArgs>>> privateIps() {
        return Optional.ofNullable(this.privateIps);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    @Import(name="requesterManaged")
    private @Nullable Output<Boolean> requesterManaged;

    public Optional<Output<Boolean>> requesterManaged() {
        return Optional.ofNullable(this.requesterManaged);
    }

    /**
     * One or more IDs of security groups for the NIC.
     * 
     */
    @Import(name="securityGroupIds")
    private @Nullable Output<List<String>> securityGroupIds;

    /**
     * @return One or more IDs of security groups for the NIC.
     * 
     */
    public Optional<Output<List<String>>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    /**
     * One or more IDs of security groups for the NIC.
     * 
     */
    @Import(name="securityGroups")
    private @Nullable Output<List<NicSecurityGroupArgs>> securityGroups;

    /**
     * @return One or more IDs of security groups for the NIC.
     * 
     */
    public Optional<Output<List<NicSecurityGroupArgs>>> securityGroups() {
        return Optional.ofNullable(this.securityGroups);
    }

    /**
     * The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The ID of the Subnet in which you want to create the NIC.
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return The ID of the Subnet in which you want to create the NIC.
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * The Subregion in which the NIC is located.
     * 
     */
    @Import(name="subregionName")
    private @Nullable Output<String> subregionName;

    /**
     * @return The Subregion in which the NIC is located.
     * 
     */
    public Optional<Output<String>> subregionName() {
        return Optional.ofNullable(this.subregionName);
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<NicTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<NicTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private NicState() {}

    private NicState(NicState $) {
        this.accountId = $.accountId;
        this.description = $.description;
        this.isSourceDestChecked = $.isSourceDestChecked;
        this.linkNics = $.linkNics;
        this.linkPublicIps = $.linkPublicIps;
        this.macAddress = $.macAddress;
        this.netId = $.netId;
        this.nicId = $.nicId;
        this.privateDnsName = $.privateDnsName;
        this.privateIp = $.privateIp;
        this.privateIps = $.privateIps;
        this.requestId = $.requestId;
        this.requesterManaged = $.requesterManaged;
        this.securityGroupIds = $.securityGroupIds;
        this.securityGroups = $.securityGroups;
        this.state = $.state;
        this.subnetId = $.subnetId;
        this.subregionName = $.subregionName;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NicState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NicState $;

        public Builder() {
            $ = new NicState();
        }

        public Builder(NicState defaults) {
            $ = new NicState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId The account ID of the owner of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId The account ID of the owner of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param description A description for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isSourceDestChecked (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
         * 
         * @return builder
         * 
         */
        public Builder isSourceDestChecked(@Nullable Output<Boolean> isSourceDestChecked) {
            $.isSourceDestChecked = isSourceDestChecked;
            return this;
        }

        /**
         * @param isSourceDestChecked (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
         * 
         * @return builder
         * 
         */
        public Builder isSourceDestChecked(Boolean isSourceDestChecked) {
            return isSourceDestChecked(Output.of(isSourceDestChecked));
        }

        /**
         * @param linkNics Information about the NIC attachment.
         * 
         * @return builder
         * 
         */
        public Builder linkNics(@Nullable Output<List<NicLinkNicArgs>> linkNics) {
            $.linkNics = linkNics;
            return this;
        }

        /**
         * @param linkNics Information about the NIC attachment.
         * 
         * @return builder
         * 
         */
        public Builder linkNics(List<NicLinkNicArgs> linkNics) {
            return linkNics(Output.of(linkNics));
        }

        /**
         * @param linkNics Information about the NIC attachment.
         * 
         * @return builder
         * 
         */
        public Builder linkNics(NicLinkNicArgs... linkNics) {
            return linkNics(List.of(linkNics));
        }

        /**
         * @param linkPublicIps Information about the public IP association.
         * 
         * @return builder
         * 
         */
        public Builder linkPublicIps(@Nullable Output<List<NicLinkPublicIpArgs>> linkPublicIps) {
            $.linkPublicIps = linkPublicIps;
            return this;
        }

        /**
         * @param linkPublicIps Information about the public IP association.
         * 
         * @return builder
         * 
         */
        public Builder linkPublicIps(List<NicLinkPublicIpArgs> linkPublicIps) {
            return linkPublicIps(Output.of(linkPublicIps));
        }

        /**
         * @param linkPublicIps Information about the public IP association.
         * 
         * @return builder
         * 
         */
        public Builder linkPublicIps(NicLinkPublicIpArgs... linkPublicIps) {
            return linkPublicIps(List.of(linkPublicIps));
        }

        /**
         * @param macAddress The Media Access Control (MAC) address of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(@Nullable Output<String> macAddress) {
            $.macAddress = macAddress;
            return this;
        }

        /**
         * @param macAddress The Media Access Control (MAC) address of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder macAddress(String macAddress) {
            return macAddress(Output.of(macAddress));
        }

        /**
         * @param netId The ID of the Net for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder netId(@Nullable Output<String> netId) {
            $.netId = netId;
            return this;
        }

        /**
         * @param netId The ID of the Net for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder netId(String netId) {
            return netId(Output.of(netId));
        }

        /**
         * @param nicId The ID of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder nicId(@Nullable Output<String> nicId) {
            $.nicId = nicId;
            return this;
        }

        /**
         * @param nicId The ID of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder nicId(String nicId) {
            return nicId(Output.of(nicId));
        }

        /**
         * @param privateDnsName The name of the private DNS.
         * 
         * @return builder
         * 
         */
        public Builder privateDnsName(@Nullable Output<String> privateDnsName) {
            $.privateDnsName = privateDnsName;
            return this;
        }

        /**
         * @param privateDnsName The name of the private DNS.
         * 
         * @return builder
         * 
         */
        public Builder privateDnsName(String privateDnsName) {
            return privateDnsName(Output.of(privateDnsName));
        }

        /**
         * @param privateIp The private IP of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(@Nullable Output<String> privateIp) {
            $.privateIp = privateIp;
            return this;
        }

        /**
         * @param privateIp The private IP of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(String privateIp) {
            return privateIp(Output.of(privateIp));
        }

        /**
         * @param privateIps The primary private IP for the NIC.&lt;br /&gt;
         * This IP must be within the IP range of the Subnet that you specify with the `subnet_id` attribute.&lt;br /&gt;
         * If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
         * 
         * @return builder
         * 
         */
        public Builder privateIps(@Nullable Output<List<NicPrivateIpArgs>> privateIps) {
            $.privateIps = privateIps;
            return this;
        }

        /**
         * @param privateIps The primary private IP for the NIC.&lt;br /&gt;
         * This IP must be within the IP range of the Subnet that you specify with the `subnet_id` attribute.&lt;br /&gt;
         * If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
         * 
         * @return builder
         * 
         */
        public Builder privateIps(List<NicPrivateIpArgs> privateIps) {
            return privateIps(Output.of(privateIps));
        }

        /**
         * @param privateIps The primary private IP for the NIC.&lt;br /&gt;
         * This IP must be within the IP range of the Subnet that you specify with the `subnet_id` attribute.&lt;br /&gt;
         * If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
         * 
         * @return builder
         * 
         */
        public Builder privateIps(NicPrivateIpArgs... privateIps) {
            return privateIps(List.of(privateIps));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        public Builder requesterManaged(@Nullable Output<Boolean> requesterManaged) {
            $.requesterManaged = requesterManaged;
            return this;
        }

        public Builder requesterManaged(Boolean requesterManaged) {
            return requesterManaged(Output.of(requesterManaged));
        }

        /**
         * @param securityGroupIds One or more IDs of security groups for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        /**
         * @param securityGroupIds One or more IDs of security groups for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        /**
         * @param securityGroupIds One or more IDs of security groups for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        /**
         * @param securityGroups One or more IDs of security groups for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(@Nullable Output<List<NicSecurityGroupArgs>> securityGroups) {
            $.securityGroups = securityGroups;
            return this;
        }

        /**
         * @param securityGroups One or more IDs of security groups for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(List<NicSecurityGroupArgs> securityGroups) {
            return securityGroups(Output.of(securityGroups));
        }

        /**
         * @param securityGroups One or more IDs of security groups for the NIC.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(NicSecurityGroupArgs... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }

        /**
         * @param state The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param subnetId The ID of the Subnet in which you want to create the NIC.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId The ID of the Subnet in which you want to create the NIC.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param subregionName The Subregion in which the NIC is located.
         * 
         * @return builder
         * 
         */
        public Builder subregionName(@Nullable Output<String> subregionName) {
            $.subregionName = subregionName;
            return this;
        }

        /**
         * @param subregionName The Subregion in which the NIC is located.
         * 
         * @return builder
         * 
         */
        public Builder subregionName(String subregionName) {
            return subregionName(Output.of(subregionName));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<NicTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<NicTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(NicTagArgs... tags) {
            return tags(List.of(tags));
        }

        public NicState build() {
            return $;
        }
    }

}
