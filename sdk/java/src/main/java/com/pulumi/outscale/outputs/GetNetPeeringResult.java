// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.outscale.outputs.GetNetPeeringAccepterNet;
import com.pulumi.outscale.outputs.GetNetPeeringFilter;
import com.pulumi.outscale.outputs.GetNetPeeringSourceNet;
import com.pulumi.outscale.outputs.GetNetPeeringState;
import com.pulumi.outscale.outputs.GetNetPeeringTag;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetNetPeeringResult {
    /**
     * @return Information about the accepter Net.
     * 
     */
    private List<GetNetPeeringAccepterNet> accepterNets;
    private @Nullable List<GetNetPeeringFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The ID of the Net peering.
     * 
     */
    private String netPeeringId;
    private String requestId;
    /**
     * @return Information about the source Net.
     * 
     */
    private List<GetNetPeeringSourceNet> sourceNets;
    /**
     * @return Information about the state of the Net peering.
     * 
     */
    private List<GetNetPeeringState> states;
    /**
     * @return One or more tags associated with the Net peering.
     * 
     */
    private List<GetNetPeeringTag> tags;

    private GetNetPeeringResult() {}
    /**
     * @return Information about the accepter Net.
     * 
     */
    public List<GetNetPeeringAccepterNet> accepterNets() {
        return this.accepterNets;
    }
    public List<GetNetPeeringFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The ID of the Net peering.
     * 
     */
    public String netPeeringId() {
        return this.netPeeringId;
    }
    public String requestId() {
        return this.requestId;
    }
    /**
     * @return Information about the source Net.
     * 
     */
    public List<GetNetPeeringSourceNet> sourceNets() {
        return this.sourceNets;
    }
    /**
     * @return Information about the state of the Net peering.
     * 
     */
    public List<GetNetPeeringState> states() {
        return this.states;
    }
    /**
     * @return One or more tags associated with the Net peering.
     * 
     */
    public List<GetNetPeeringTag> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetPeeringResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetNetPeeringAccepterNet> accepterNets;
        private @Nullable List<GetNetPeeringFilter> filters;
        private String id;
        private String netPeeringId;
        private String requestId;
        private List<GetNetPeeringSourceNet> sourceNets;
        private List<GetNetPeeringState> states;
        private List<GetNetPeeringTag> tags;
        public Builder() {}
        public Builder(GetNetPeeringResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accepterNets = defaults.accepterNets;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.netPeeringId = defaults.netPeeringId;
    	      this.requestId = defaults.requestId;
    	      this.sourceNets = defaults.sourceNets;
    	      this.states = defaults.states;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder accepterNets(List<GetNetPeeringAccepterNet> accepterNets) {
            this.accepterNets = Objects.requireNonNull(accepterNets);
            return this;
        }
        public Builder accepterNets(GetNetPeeringAccepterNet... accepterNets) {
            return accepterNets(List.of(accepterNets));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetNetPeeringFilter> filters) {
            this.filters = filters;
            return this;
        }
        public Builder filters(GetNetPeeringFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder netPeeringId(String netPeeringId) {
            this.netPeeringId = Objects.requireNonNull(netPeeringId);
            return this;
        }
        @CustomType.Setter
        public Builder requestId(String requestId) {
            this.requestId = Objects.requireNonNull(requestId);
            return this;
        }
        @CustomType.Setter
        public Builder sourceNets(List<GetNetPeeringSourceNet> sourceNets) {
            this.sourceNets = Objects.requireNonNull(sourceNets);
            return this;
        }
        public Builder sourceNets(GetNetPeeringSourceNet... sourceNets) {
            return sourceNets(List.of(sourceNets));
        }
        @CustomType.Setter
        public Builder states(List<GetNetPeeringState> states) {
            this.states = Objects.requireNonNull(states);
            return this;
        }
        public Builder states(GetNetPeeringState... states) {
            return states(List.of(states));
        }
        @CustomType.Setter
        public Builder tags(List<GetNetPeeringTag> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(GetNetPeeringTag... tags) {
            return tags(List.of(tags));
        }
        public GetNetPeeringResult build() {
            final var o = new GetNetPeeringResult();
            o.accepterNets = accepterNets;
            o.filters = filters;
            o.id = id;
            o.netPeeringId = netPeeringId;
            o.requestId = requestId;
            o.sourceNets = sourceNets;
            o.states = states;
            o.tags = tags;
            return o;
        }
    }
}
