// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.LoadBalancerAccessLogArgs;
import com.pulumi.outscale.inputs.LoadBalancerApplicationStickyCookiePolicyArgs;
import com.pulumi.outscale.inputs.LoadBalancerHealthCheckArgs;
import com.pulumi.outscale.inputs.LoadBalancerListenerArgs;
import com.pulumi.outscale.inputs.LoadBalancerLoadBalancerStickyCookiePolicyArgs;
import com.pulumi.outscale.inputs.LoadBalancerSourceSecurityGroupArgs;
import com.pulumi.outscale.inputs.LoadBalancerTagArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerState extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerState Empty = new LoadBalancerState();

    /**
     * Information about access logs.
     * 
     */
    @Import(name="accessLogs")
    private @Nullable Output<List<LoadBalancerAccessLogArgs>> accessLogs;

    /**
     * @return Information about access logs.
     * 
     */
    public Optional<Output<List<LoadBalancerAccessLogArgs>>> accessLogs() {
        return Optional.ofNullable(this.accessLogs);
    }

    /**
     * The stickiness policies defined for the load balancer.
     * 
     */
    @Import(name="applicationStickyCookiePolicies")
    private @Nullable Output<List<LoadBalancerApplicationStickyCookiePolicyArgs>> applicationStickyCookiePolicies;

    /**
     * @return The stickiness policies defined for the load balancer.
     * 
     */
    public Optional<Output<List<LoadBalancerApplicationStickyCookiePolicyArgs>>> applicationStickyCookiePolicies() {
        return Optional.ofNullable(this.applicationStickyCookiePolicies);
    }

    /**
     * One or more IDs of back-end VMs for the load balancer.
     * 
     */
    @Import(name="backendVmIds")
    private @Nullable Output<List<String>> backendVmIds;

    /**
     * @return One or more IDs of back-end VMs for the load balancer.
     * 
     */
    public Optional<Output<List<String>>> backendVmIds() {
        return Optional.ofNullable(this.backendVmIds);
    }

    /**
     * The DNS name of the load balancer.
     * 
     */
    @Import(name="dnsName")
    private @Nullable Output<String> dnsName;

    /**
     * @return The DNS name of the load balancer.
     * 
     */
    public Optional<Output<String>> dnsName() {
        return Optional.ofNullable(this.dnsName);
    }

    /**
     * Information about the health check configuration.
     * 
     */
    @Import(name="healthChecks")
    private @Nullable Output<List<LoadBalancerHealthCheckArgs>> healthChecks;

    /**
     * @return Information about the health check configuration.
     * 
     */
    public Optional<Output<List<LoadBalancerHealthCheckArgs>>> healthChecks() {
        return Optional.ofNullable(this.healthChecks);
    }

    /**
     * One or more listeners to create.
     * 
     */
    @Import(name="listeners")
    private @Nullable Output<List<LoadBalancerListenerArgs>> listeners;

    /**
     * @return One or more listeners to create.
     * 
     */
    public Optional<Output<List<LoadBalancerListenerArgs>>> listeners() {
        return Optional.ofNullable(this.listeners);
    }

    /**
     * The unique name of the load balancer (32 alphanumeric or hyphen characters maximum, but cannot start or end with a hyphen).
     * 
     */
    @Import(name="loadBalancerName")
    private @Nullable Output<String> loadBalancerName;

    /**
     * @return The unique name of the load balancer (32 alphanumeric or hyphen characters maximum, but cannot start or end with a hyphen).
     * 
     */
    public Optional<Output<String>> loadBalancerName() {
        return Optional.ofNullable(this.loadBalancerName);
    }

    /**
     * The policies defined for the load balancer.
     * 
     */
    @Import(name="loadBalancerStickyCookiePolicies")
    private @Nullable Output<List<LoadBalancerLoadBalancerStickyCookiePolicyArgs>> loadBalancerStickyCookiePolicies;

    /**
     * @return The policies defined for the load balancer.
     * 
     */
    public Optional<Output<List<LoadBalancerLoadBalancerStickyCookiePolicyArgs>>> loadBalancerStickyCookiePolicies() {
        return Optional.ofNullable(this.loadBalancerStickyCookiePolicies);
    }

    /**
     * The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
     * 
     */
    @Import(name="loadBalancerType")
    private @Nullable Output<String> loadBalancerType;

    /**
     * @return The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
     * 
     */
    public Optional<Output<String>> loadBalancerType() {
        return Optional.ofNullable(this.loadBalancerType);
    }

    /**
     * The ID of the Net for the load balancer.
     * 
     */
    @Import(name="netId")
    private @Nullable Output<String> netId;

    /**
     * @return The ID of the Net for the load balancer.
     * 
     */
    public Optional<Output<String>> netId() {
        return Optional.ofNullable(this.netId);
    }

    /**
     * (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
     * 
     */
    @Import(name="publicIp")
    private @Nullable Output<String> publicIp;

    /**
     * @return (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
     * 
     */
    public Optional<Output<String>> publicIp() {
        return Optional.ofNullable(this.publicIp);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * Whether secure cookies are enabled for the load balancer.
     * 
     */
    @Import(name="securedCookies")
    private @Nullable Output<Boolean> securedCookies;

    /**
     * @return Whether secure cookies are enabled for the load balancer.
     * 
     */
    public Optional<Output<Boolean>> securedCookies() {
        return Optional.ofNullable(this.securedCookies);
    }

    /**
     * (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
     * 
     */
    @Import(name="securityGroups")
    private @Nullable Output<List<String>> securityGroups;

    /**
     * @return (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
     * 
     */
    public Optional<Output<List<String>>> securityGroups() {
        return Optional.ofNullable(this.securityGroups);
    }

    /**
     * Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
     * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
     * 
     */
    @Import(name="sourceSecurityGroups")
    private @Nullable Output<List<LoadBalancerSourceSecurityGroupArgs>> sourceSecurityGroups;

    /**
     * @return Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
     * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
     * 
     */
    public Optional<Output<List<LoadBalancerSourceSecurityGroupArgs>>> sourceSecurityGroups() {
        return Optional.ofNullable(this.sourceSecurityGroups);
    }

    /**
     * (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
     * 
     */
    @Import(name="subnets")
    private @Nullable Output<List<String>> subnets;

    /**
     * @return (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
     * 
     */
    public Optional<Output<List<String>>> subnets() {
        return Optional.ofNullable(this.subnets);
    }

    /**
     * (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
     * 
     */
    @Import(name="subregionNames")
    private @Nullable Output<List<String>> subregionNames;

    /**
     * @return (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
     * 
     */
    public Optional<Output<List<String>>> subregionNames() {
        return Optional.ofNullable(this.subregionNames);
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<LoadBalancerTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<LoadBalancerTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private LoadBalancerState() {}

    private LoadBalancerState(LoadBalancerState $) {
        this.accessLogs = $.accessLogs;
        this.applicationStickyCookiePolicies = $.applicationStickyCookiePolicies;
        this.backendVmIds = $.backendVmIds;
        this.dnsName = $.dnsName;
        this.healthChecks = $.healthChecks;
        this.listeners = $.listeners;
        this.loadBalancerName = $.loadBalancerName;
        this.loadBalancerStickyCookiePolicies = $.loadBalancerStickyCookiePolicies;
        this.loadBalancerType = $.loadBalancerType;
        this.netId = $.netId;
        this.publicIp = $.publicIp;
        this.requestId = $.requestId;
        this.securedCookies = $.securedCookies;
        this.securityGroups = $.securityGroups;
        this.sourceSecurityGroups = $.sourceSecurityGroups;
        this.subnets = $.subnets;
        this.subregionNames = $.subregionNames;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerState $;

        public Builder() {
            $ = new LoadBalancerState();
        }

        public Builder(LoadBalancerState defaults) {
            $ = new LoadBalancerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLogs Information about access logs.
         * 
         * @return builder
         * 
         */
        public Builder accessLogs(@Nullable Output<List<LoadBalancerAccessLogArgs>> accessLogs) {
            $.accessLogs = accessLogs;
            return this;
        }

        /**
         * @param accessLogs Information about access logs.
         * 
         * @return builder
         * 
         */
        public Builder accessLogs(List<LoadBalancerAccessLogArgs> accessLogs) {
            return accessLogs(Output.of(accessLogs));
        }

        /**
         * @param accessLogs Information about access logs.
         * 
         * @return builder
         * 
         */
        public Builder accessLogs(LoadBalancerAccessLogArgs... accessLogs) {
            return accessLogs(List.of(accessLogs));
        }

        /**
         * @param applicationStickyCookiePolicies The stickiness policies defined for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder applicationStickyCookiePolicies(@Nullable Output<List<LoadBalancerApplicationStickyCookiePolicyArgs>> applicationStickyCookiePolicies) {
            $.applicationStickyCookiePolicies = applicationStickyCookiePolicies;
            return this;
        }

        /**
         * @param applicationStickyCookiePolicies The stickiness policies defined for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder applicationStickyCookiePolicies(List<LoadBalancerApplicationStickyCookiePolicyArgs> applicationStickyCookiePolicies) {
            return applicationStickyCookiePolicies(Output.of(applicationStickyCookiePolicies));
        }

        /**
         * @param applicationStickyCookiePolicies The stickiness policies defined for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder applicationStickyCookiePolicies(LoadBalancerApplicationStickyCookiePolicyArgs... applicationStickyCookiePolicies) {
            return applicationStickyCookiePolicies(List.of(applicationStickyCookiePolicies));
        }

        /**
         * @param backendVmIds One or more IDs of back-end VMs for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder backendVmIds(@Nullable Output<List<String>> backendVmIds) {
            $.backendVmIds = backendVmIds;
            return this;
        }

        /**
         * @param backendVmIds One or more IDs of back-end VMs for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder backendVmIds(List<String> backendVmIds) {
            return backendVmIds(Output.of(backendVmIds));
        }

        /**
         * @param backendVmIds One or more IDs of back-end VMs for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder backendVmIds(String... backendVmIds) {
            return backendVmIds(List.of(backendVmIds));
        }

        /**
         * @param dnsName The DNS name of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder dnsName(@Nullable Output<String> dnsName) {
            $.dnsName = dnsName;
            return this;
        }

        /**
         * @param dnsName The DNS name of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder dnsName(String dnsName) {
            return dnsName(Output.of(dnsName));
        }

        /**
         * @param healthChecks Information about the health check configuration.
         * 
         * @return builder
         * 
         */
        public Builder healthChecks(@Nullable Output<List<LoadBalancerHealthCheckArgs>> healthChecks) {
            $.healthChecks = healthChecks;
            return this;
        }

        /**
         * @param healthChecks Information about the health check configuration.
         * 
         * @return builder
         * 
         */
        public Builder healthChecks(List<LoadBalancerHealthCheckArgs> healthChecks) {
            return healthChecks(Output.of(healthChecks));
        }

        /**
         * @param healthChecks Information about the health check configuration.
         * 
         * @return builder
         * 
         */
        public Builder healthChecks(LoadBalancerHealthCheckArgs... healthChecks) {
            return healthChecks(List.of(healthChecks));
        }

        /**
         * @param listeners One or more listeners to create.
         * 
         * @return builder
         * 
         */
        public Builder listeners(@Nullable Output<List<LoadBalancerListenerArgs>> listeners) {
            $.listeners = listeners;
            return this;
        }

        /**
         * @param listeners One or more listeners to create.
         * 
         * @return builder
         * 
         */
        public Builder listeners(List<LoadBalancerListenerArgs> listeners) {
            return listeners(Output.of(listeners));
        }

        /**
         * @param listeners One or more listeners to create.
         * 
         * @return builder
         * 
         */
        public Builder listeners(LoadBalancerListenerArgs... listeners) {
            return listeners(List.of(listeners));
        }

        /**
         * @param loadBalancerName The unique name of the load balancer (32 alphanumeric or hyphen characters maximum, but cannot start or end with a hyphen).
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerName(@Nullable Output<String> loadBalancerName) {
            $.loadBalancerName = loadBalancerName;
            return this;
        }

        /**
         * @param loadBalancerName The unique name of the load balancer (32 alphanumeric or hyphen characters maximum, but cannot start or end with a hyphen).
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerName(String loadBalancerName) {
            return loadBalancerName(Output.of(loadBalancerName));
        }

        /**
         * @param loadBalancerStickyCookiePolicies The policies defined for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerStickyCookiePolicies(@Nullable Output<List<LoadBalancerLoadBalancerStickyCookiePolicyArgs>> loadBalancerStickyCookiePolicies) {
            $.loadBalancerStickyCookiePolicies = loadBalancerStickyCookiePolicies;
            return this;
        }

        /**
         * @param loadBalancerStickyCookiePolicies The policies defined for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerStickyCookiePolicies(List<LoadBalancerLoadBalancerStickyCookiePolicyArgs> loadBalancerStickyCookiePolicies) {
            return loadBalancerStickyCookiePolicies(Output.of(loadBalancerStickyCookiePolicies));
        }

        /**
         * @param loadBalancerStickyCookiePolicies The policies defined for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerStickyCookiePolicies(LoadBalancerLoadBalancerStickyCookiePolicyArgs... loadBalancerStickyCookiePolicies) {
            return loadBalancerStickyCookiePolicies(List.of(loadBalancerStickyCookiePolicies));
        }

        /**
         * @param loadBalancerType The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerType(@Nullable Output<String> loadBalancerType) {
            $.loadBalancerType = loadBalancerType;
            return this;
        }

        /**
         * @param loadBalancerType The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerType(String loadBalancerType) {
            return loadBalancerType(Output.of(loadBalancerType));
        }

        /**
         * @param netId The ID of the Net for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder netId(@Nullable Output<String> netId) {
            $.netId = netId;
            return this;
        }

        /**
         * @param netId The ID of the Net for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder netId(String netId) {
            return netId(Output.of(netId));
        }

        /**
         * @param publicIp (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
         * 
         * @return builder
         * 
         */
        public Builder publicIp(@Nullable Output<String> publicIp) {
            $.publicIp = publicIp;
            return this;
        }

        /**
         * @param publicIp (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
         * 
         * @return builder
         * 
         */
        public Builder publicIp(String publicIp) {
            return publicIp(Output.of(publicIp));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param securedCookies Whether secure cookies are enabled for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder securedCookies(@Nullable Output<Boolean> securedCookies) {
            $.securedCookies = securedCookies;
            return this;
        }

        /**
         * @param securedCookies Whether secure cookies are enabled for the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder securedCookies(Boolean securedCookies) {
            return securedCookies(Output.of(securedCookies));
        }

        /**
         * @param securityGroups (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(@Nullable Output<List<String>> securityGroups) {
            $.securityGroups = securityGroups;
            return this;
        }

        /**
         * @param securityGroups (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(List<String> securityGroups) {
            return securityGroups(Output.of(securityGroups));
        }

        /**
         * @param securityGroups (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder securityGroups(String... securityGroups) {
            return securityGroups(List.of(securityGroups));
        }

        /**
         * @param sourceSecurityGroups Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
         * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
         * 
         * @return builder
         * 
         */
        public Builder sourceSecurityGroups(@Nullable Output<List<LoadBalancerSourceSecurityGroupArgs>> sourceSecurityGroups) {
            $.sourceSecurityGroups = sourceSecurityGroups;
            return this;
        }

        /**
         * @param sourceSecurityGroups Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
         * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
         * 
         * @return builder
         * 
         */
        public Builder sourceSecurityGroups(List<LoadBalancerSourceSecurityGroupArgs> sourceSecurityGroups) {
            return sourceSecurityGroups(Output.of(sourceSecurityGroups));
        }

        /**
         * @param sourceSecurityGroups Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.&lt;br /&gt;
         * To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
         * 
         * @return builder
         * 
         */
        public Builder sourceSecurityGroups(LoadBalancerSourceSecurityGroupArgs... sourceSecurityGroups) {
            return sourceSecurityGroups(List.of(sourceSecurityGroups));
        }

        /**
         * @param subnets (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
         * 
         * @return builder
         * 
         */
        public Builder subnets(@Nullable Output<List<String>> subnets) {
            $.subnets = subnets;
            return this;
        }

        /**
         * @param subnets (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
         * 
         * @return builder
         * 
         */
        public Builder subnets(List<String> subnets) {
            return subnets(Output.of(subnets));
        }

        /**
         * @param subnets (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
         * 
         * @return builder
         * 
         */
        public Builder subnets(String... subnets) {
            return subnets(List.of(subnets));
        }

        /**
         * @param subregionNames (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
         * 
         * @return builder
         * 
         */
        public Builder subregionNames(@Nullable Output<List<String>> subregionNames) {
            $.subregionNames = subregionNames;
            return this;
        }

        /**
         * @param subregionNames (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
         * 
         * @return builder
         * 
         */
        public Builder subregionNames(List<String> subregionNames) {
            return subregionNames(Output.of(subregionNames));
        }

        /**
         * @param subregionNames (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
         * 
         * @return builder
         * 
         */
        public Builder subregionNames(String... subregionNames) {
            return subregionNames(List.of(subregionNames));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<LoadBalancerTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<LoadBalancerTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(LoadBalancerTagArgs... tags) {
            return tags(List.of(tags));
        }

        public LoadBalancerState build() {
            return $;
        }
    }

}
