// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.NetPeeringTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetPeeringArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetPeeringArgs Empty = new NetPeeringArgs();

    /**
     * The ID of the Net you want to connect with.
     * 
     */
    @Import(name="accepterNetId", required=true)
    private Output<String> accepterNetId;

    /**
     * @return The ID of the Net you want to connect with.
     * 
     */
    public Output<String> accepterNetId() {
        return this.accepterNetId;
    }

    @Import(name="sourceNetAccountId")
    private @Nullable Output<String> sourceNetAccountId;

    public Optional<Output<String>> sourceNetAccountId() {
        return Optional.ofNullable(this.sourceNetAccountId);
    }

    /**
     * The ID of the Net you send the peering request from.
     * 
     */
    @Import(name="sourceNetId", required=true)
    private Output<String> sourceNetId;

    /**
     * @return The ID of the Net you send the peering request from.
     * 
     */
    public Output<String> sourceNetId() {
        return this.sourceNetId;
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<NetPeeringTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<NetPeeringTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private NetPeeringArgs() {}

    private NetPeeringArgs(NetPeeringArgs $) {
        this.accepterNetId = $.accepterNetId;
        this.sourceNetAccountId = $.sourceNetAccountId;
        this.sourceNetId = $.sourceNetId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetPeeringArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetPeeringArgs $;

        public Builder() {
            $ = new NetPeeringArgs();
        }

        public Builder(NetPeeringArgs defaults) {
            $ = new NetPeeringArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accepterNetId The ID of the Net you want to connect with.
         * 
         * @return builder
         * 
         */
        public Builder accepterNetId(Output<String> accepterNetId) {
            $.accepterNetId = accepterNetId;
            return this;
        }

        /**
         * @param accepterNetId The ID of the Net you want to connect with.
         * 
         * @return builder
         * 
         */
        public Builder accepterNetId(String accepterNetId) {
            return accepterNetId(Output.of(accepterNetId));
        }

        public Builder sourceNetAccountId(@Nullable Output<String> sourceNetAccountId) {
            $.sourceNetAccountId = sourceNetAccountId;
            return this;
        }

        public Builder sourceNetAccountId(String sourceNetAccountId) {
            return sourceNetAccountId(Output.of(sourceNetAccountId));
        }

        /**
         * @param sourceNetId The ID of the Net you send the peering request from.
         * 
         * @return builder
         * 
         */
        public Builder sourceNetId(Output<String> sourceNetId) {
            $.sourceNetId = sourceNetId;
            return this;
        }

        /**
         * @param sourceNetId The ID of the Net you send the peering request from.
         * 
         * @return builder
         * 
         */
        public Builder sourceNetId(String sourceNetId) {
            return sourceNetId(Output.of(sourceNetId));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<NetPeeringTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<NetPeeringTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(NetPeeringTagArgs... tags) {
            return tags(List.of(tags));
        }

        public NetPeeringArgs build() {
            $.accepterNetId = Objects.requireNonNull($.accepterNetId, "expected parameter 'accepterNetId' to be non-null");
            $.sourceNetId = Objects.requireNonNull($.sourceNetId, "expected parameter 'sourceNetId' to be non-null");
            return $;
        }
    }

}
