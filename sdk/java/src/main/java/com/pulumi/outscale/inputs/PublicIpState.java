// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.PublicIpTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PublicIpState extends com.pulumi.resources.ResourceArgs {

    public static final PublicIpState Empty = new PublicIpState();

    /**
     * (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
     * 
     */
    @Import(name="linkPublicIpId")
    private @Nullable Output<String> linkPublicIpId;

    /**
     * @return (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
     * 
     */
    public Optional<Output<String>> linkPublicIpId() {
        return Optional.ofNullable(this.linkPublicIpId);
    }

    /**
     * The account ID of the owner of the NIC.
     * 
     */
    @Import(name="nicAccountId")
    private @Nullable Output<String> nicAccountId;

    /**
     * @return The account ID of the owner of the NIC.
     * 
     */
    public Optional<Output<String>> nicAccountId() {
        return Optional.ofNullable(this.nicAccountId);
    }

    /**
     * The ID of the NIC the public IP is associated with (if any).
     * 
     */
    @Import(name="nicId")
    private @Nullable Output<String> nicId;

    /**
     * @return The ID of the NIC the public IP is associated with (if any).
     * 
     */
    public Optional<Output<String>> nicId() {
        return Optional.ofNullable(this.nicId);
    }

    /**
     * The private IP associated with the public IP.
     * 
     */
    @Import(name="privateIp")
    private @Nullable Output<String> privateIp;

    /**
     * @return The private IP associated with the public IP.
     * 
     */
    public Optional<Output<String>> privateIp() {
        return Optional.ofNullable(this.privateIp);
    }

    /**
     * The public IP.
     * 
     */
    @Import(name="publicIp")
    private @Nullable Output<String> publicIp;

    /**
     * @return The public IP.
     * 
     */
    public Optional<Output<String>> publicIp() {
        return Optional.ofNullable(this.publicIp);
    }

    /**
     * The allocation ID of the public IP.
     * 
     */
    @Import(name="publicIpId")
    private @Nullable Output<String> publicIpId;

    /**
     * @return The allocation ID of the public IP.
     * 
     */
    public Optional<Output<String>> publicIpId() {
        return Optional.ofNullable(this.publicIpId);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<PublicIpTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<PublicIpTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * The ID of the VM the public IP is associated with (if any).
     * 
     */
    @Import(name="vmId")
    private @Nullable Output<String> vmId;

    /**
     * @return The ID of the VM the public IP is associated with (if any).
     * 
     */
    public Optional<Output<String>> vmId() {
        return Optional.ofNullable(this.vmId);
    }

    private PublicIpState() {}

    private PublicIpState(PublicIpState $) {
        this.linkPublicIpId = $.linkPublicIpId;
        this.nicAccountId = $.nicAccountId;
        this.nicId = $.nicId;
        this.privateIp = $.privateIp;
        this.publicIp = $.publicIp;
        this.publicIpId = $.publicIpId;
        this.requestId = $.requestId;
        this.tags = $.tags;
        this.vmId = $.vmId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PublicIpState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PublicIpState $;

        public Builder() {
            $ = new PublicIpState();
        }

        public Builder(PublicIpState defaults) {
            $ = new PublicIpState(Objects.requireNonNull(defaults));
        }

        /**
         * @param linkPublicIpId (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
         * 
         * @return builder
         * 
         */
        public Builder linkPublicIpId(@Nullable Output<String> linkPublicIpId) {
            $.linkPublicIpId = linkPublicIpId;
            return this;
        }

        /**
         * @param linkPublicIpId (Required in a Net) The ID representing the association of the public IP with the VM or the NIC.
         * 
         * @return builder
         * 
         */
        public Builder linkPublicIpId(String linkPublicIpId) {
            return linkPublicIpId(Output.of(linkPublicIpId));
        }

        /**
         * @param nicAccountId The account ID of the owner of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder nicAccountId(@Nullable Output<String> nicAccountId) {
            $.nicAccountId = nicAccountId;
            return this;
        }

        /**
         * @param nicAccountId The account ID of the owner of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder nicAccountId(String nicAccountId) {
            return nicAccountId(Output.of(nicAccountId));
        }

        /**
         * @param nicId The ID of the NIC the public IP is associated with (if any).
         * 
         * @return builder
         * 
         */
        public Builder nicId(@Nullable Output<String> nicId) {
            $.nicId = nicId;
            return this;
        }

        /**
         * @param nicId The ID of the NIC the public IP is associated with (if any).
         * 
         * @return builder
         * 
         */
        public Builder nicId(String nicId) {
            return nicId(Output.of(nicId));
        }

        /**
         * @param privateIp The private IP associated with the public IP.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(@Nullable Output<String> privateIp) {
            $.privateIp = privateIp;
            return this;
        }

        /**
         * @param privateIp The private IP associated with the public IP.
         * 
         * @return builder
         * 
         */
        public Builder privateIp(String privateIp) {
            return privateIp(Output.of(privateIp));
        }

        /**
         * @param publicIp The public IP.
         * 
         * @return builder
         * 
         */
        public Builder publicIp(@Nullable Output<String> publicIp) {
            $.publicIp = publicIp;
            return this;
        }

        /**
         * @param publicIp The public IP.
         * 
         * @return builder
         * 
         */
        public Builder publicIp(String publicIp) {
            return publicIp(Output.of(publicIp));
        }

        /**
         * @param publicIpId The allocation ID of the public IP.
         * 
         * @return builder
         * 
         */
        public Builder publicIpId(@Nullable Output<String> publicIpId) {
            $.publicIpId = publicIpId;
            return this;
        }

        /**
         * @param publicIpId The allocation ID of the public IP.
         * 
         * @return builder
         * 
         */
        public Builder publicIpId(String publicIpId) {
            return publicIpId(Output.of(publicIpId));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<PublicIpTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<PublicIpTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(PublicIpTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param vmId The ID of the VM the public IP is associated with (if any).
         * 
         * @return builder
         * 
         */
        public Builder vmId(@Nullable Output<String> vmId) {
            $.vmId = vmId;
            return this;
        }

        /**
         * @param vmId The ID of the VM the public IP is associated with (if any).
         * 
         * @return builder
         * 
         */
        public Builder vmId(String vmId) {
            return vmId(Output.of(vmId));
        }

        public PublicIpState build() {
            return $;
        }
    }

}
