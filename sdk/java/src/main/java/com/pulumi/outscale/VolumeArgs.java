// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.VolumeTagArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    /**
     * The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
     * 
     */
    @Import(name="iops")
    private @Nullable Output<Integer> iops;

    /**
     * @return The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
     * 
     */
    public Optional<Output<Integer>> iops() {
        return Optional.ofNullable(this.iops);
    }

    /**
     * The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshot_id` unspecified).
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshot_id` unspecified).
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * The ID of the snapshot from which you want to create the volume.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return The ID of the snapshot from which you want to create the volume.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * The Subregion in which you want to create the volume.
     * 
     */
    @Import(name="subregionName", required=true)
    private Output<String> subregionName;

    /**
     * @return The Subregion in which you want to create the volume.
     * 
     */
    public Output<String> subregionName() {
        return this.subregionName;
    }

    /**
     * A tag to add to this resource. You can specify this argument several times.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<VolumeTagArgs>> tags;

    /**
     * @return A tag to add to this resource. You can specify this argument several times.
     * 
     */
    public Optional<Output<List<VolumeTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Whether you want to create a snapshot before the volume deletion.
     * 
     */
    @Import(name="terminationSnapshotName")
    private @Nullable Output<String> terminationSnapshotName;

    /**
     * @return Whether you want to create a snapshot before the volume deletion.
     * 
     */
    public Optional<Output<String>> terminationSnapshotName() {
        return Optional.ofNullable(this.terminationSnapshotName);
    }

    /**
     * The type of volume you want to create (`io1` \| `gp2` \| `standard`). If not specified, a `standard` volume is created.&lt;br /&gt;
     * For more information about volume types, see [About Volumes &gt; Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
     * 
     */
    @Import(name="volumeType")
    private @Nullable Output<String> volumeType;

    /**
     * @return The type of volume you want to create (`io1` \| `gp2` \| `standard`). If not specified, a `standard` volume is created.&lt;br /&gt;
     * For more information about volume types, see [About Volumes &gt; Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
     * 
     */
    public Optional<Output<String>> volumeType() {
        return Optional.ofNullable(this.volumeType);
    }

    private VolumeArgs() {}

    private VolumeArgs(VolumeArgs $) {
        this.iops = $.iops;
        this.size = $.size;
        this.snapshotId = $.snapshotId;
        this.subregionName = $.subregionName;
        this.tags = $.tags;
        this.terminationSnapshotName = $.terminationSnapshotName;
        this.volumeType = $.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeArgs $;

        public Builder() {
            $ = new VolumeArgs();
        }

        public Builder(VolumeArgs defaults) {
            $ = new VolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param iops The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
         * 
         * @return builder
         * 
         */
        public Builder iops(@Nullable Output<Integer> iops) {
            $.iops = iops;
            return this;
        }

        /**
         * @param iops The number of I/O operations per second (IOPS). This parameter must be specified only if you create an `io1` volume. The maximum number of IOPS allowed for `io1` volumes is `13000` with a maximum performance ratio of 300 IOPS per gibibyte.
         * 
         * @return builder
         * 
         */
        public Builder iops(Integer iops) {
            return iops(Output.of(iops));
        }

        /**
         * @param size The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshot_id` unspecified).
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the volume, in gibibytes (GiB). The maximum allowed size for a volume is 14901 GiB. This parameter is required if the volume is not created from a snapshot (`snapshot_id` unspecified).
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param snapshotId The ID of the snapshot from which you want to create the volume.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId The ID of the snapshot from which you want to create the volume.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param subregionName The Subregion in which you want to create the volume.
         * 
         * @return builder
         * 
         */
        public Builder subregionName(Output<String> subregionName) {
            $.subregionName = subregionName;
            return this;
        }

        /**
         * @param subregionName The Subregion in which you want to create the volume.
         * 
         * @return builder
         * 
         */
        public Builder subregionName(String subregionName) {
            return subregionName(Output.of(subregionName));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<VolumeTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<VolumeTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A tag to add to this resource. You can specify this argument several times.
         * 
         * @return builder
         * 
         */
        public Builder tags(VolumeTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param terminationSnapshotName Whether you want to create a snapshot before the volume deletion.
         * 
         * @return builder
         * 
         */
        public Builder terminationSnapshotName(@Nullable Output<String> terminationSnapshotName) {
            $.terminationSnapshotName = terminationSnapshotName;
            return this;
        }

        /**
         * @param terminationSnapshotName Whether you want to create a snapshot before the volume deletion.
         * 
         * @return builder
         * 
         */
        public Builder terminationSnapshotName(String terminationSnapshotName) {
            return terminationSnapshotName(Output.of(terminationSnapshotName));
        }

        /**
         * @param volumeType The type of volume you want to create (`io1` \| `gp2` \| `standard`). If not specified, a `standard` volume is created.&lt;br /&gt;
         * For more information about volume types, see [About Volumes &gt; Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
         * 
         * @return builder
         * 
         */
        public Builder volumeType(@Nullable Output<String> volumeType) {
            $.volumeType = volumeType;
            return this;
        }

        /**
         * @param volumeType The type of volume you want to create (`io1` \| `gp2` \| `standard`). If not specified, a `standard` volume is created.&lt;br /&gt;
         * For more information about volume types, see [About Volumes &gt; Volume Types and IOPS](https://docs.outscale.com/en/userguide/About-Volumes.html#_volume_types_and_iops).
         * 
         * @return builder
         * 
         */
        public Builder volumeType(String volumeType) {
            return volumeType(Output.of(volumeType));
        }

        public VolumeArgs build() {
            $.subregionName = Objects.requireNonNull($.subregionName, "expected parameter 'subregionName' to be non-null");
            return $;
        }
    }

}
