// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.LoadBalancerAttributesAccessLogArgs;
import com.pulumi.outscale.inputs.LoadBalancerAttributesHealthCheckArgs;
import com.pulumi.outscale.inputs.LoadBalancerAttributesTagArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerAttributesArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerAttributesArgs Empty = new LoadBalancerAttributesArgs();

    /**
     * Information about access logs.
     * 
     */
    @Import(name="accessLog")
    private @Nullable Output<LoadBalancerAttributesAccessLogArgs> accessLog;

    /**
     * @return Information about access logs.
     * 
     */
    public Optional<Output<LoadBalancerAttributesAccessLogArgs>> accessLog() {
        return Optional.ofNullable(this.accessLog);
    }

    /**
     * Information about the health check configuration.
     * 
     */
    @Import(name="healthCheck")
    private @Nullable Output<LoadBalancerAttributesHealthCheckArgs> healthCheck;

    /**
     * @return Information about the health check configuration.
     * 
     */
    public Optional<Output<LoadBalancerAttributesHealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * The name of the load balancer.
     * 
     */
    @Import(name="loadBalancerName", required=true)
    private Output<String> loadBalancerName;

    /**
     * @return The name of the load balancer.
     * 
     */
    public Output<String> loadBalancerName() {
        return this.loadBalancerName;
    }

    /**
     * The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
     * 
     */
    @Import(name="loadBalancerPort")
    private @Nullable Output<Integer> loadBalancerPort;

    /**
     * @return The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
     * 
     */
    public Optional<Output<Integer>> loadBalancerPort() {
        return Optional.ofNullable(this.loadBalancerPort);
    }

    /**
     * The name of the policy you want to enable for the listener.
     * 
     */
    @Import(name="policyNames")
    private @Nullable Output<List<String>> policyNames;

    /**
     * @return The name of the policy you want to enable for the listener.
     * 
     */
    public Optional<Output<List<String>>> policyNames() {
        return Optional.ofNullable(this.policyNames);
    }

    /**
     * The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
     * 
     */
    @Import(name="serverCertificateId")
    private @Nullable Output<String> serverCertificateId;

    /**
     * @return The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
     * 
     */
    public Optional<Output<String>> serverCertificateId() {
        return Optional.ofNullable(this.serverCertificateId);
    }

    /**
     * One or more tags associated with the load balancer.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<LoadBalancerAttributesTagArgs>> tags;

    /**
     * @return One or more tags associated with the load balancer.
     * 
     */
    public Optional<Output<List<LoadBalancerAttributesTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private LoadBalancerAttributesArgs() {}

    private LoadBalancerAttributesArgs(LoadBalancerAttributesArgs $) {
        this.accessLog = $.accessLog;
        this.healthCheck = $.healthCheck;
        this.loadBalancerName = $.loadBalancerName;
        this.loadBalancerPort = $.loadBalancerPort;
        this.policyNames = $.policyNames;
        this.serverCertificateId = $.serverCertificateId;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerAttributesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerAttributesArgs $;

        public Builder() {
            $ = new LoadBalancerAttributesArgs();
        }

        public Builder(LoadBalancerAttributesArgs defaults) {
            $ = new LoadBalancerAttributesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLog Information about access logs.
         * 
         * @return builder
         * 
         */
        public Builder accessLog(@Nullable Output<LoadBalancerAttributesAccessLogArgs> accessLog) {
            $.accessLog = accessLog;
            return this;
        }

        /**
         * @param accessLog Information about access logs.
         * 
         * @return builder
         * 
         */
        public Builder accessLog(LoadBalancerAttributesAccessLogArgs accessLog) {
            return accessLog(Output.of(accessLog));
        }

        /**
         * @param healthCheck Information about the health check configuration.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(@Nullable Output<LoadBalancerAttributesHealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        /**
         * @param healthCheck Information about the health check configuration.
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(LoadBalancerAttributesHealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param loadBalancerName The name of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerName(Output<String> loadBalancerName) {
            $.loadBalancerName = loadBalancerName;
            return this;
        }

        /**
         * @param loadBalancerName The name of the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerName(String loadBalancerName) {
            return loadBalancerName(Output.of(loadBalancerName));
        }

        /**
         * @param loadBalancerPort The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerPort(@Nullable Output<Integer> loadBalancerPort) {
            $.loadBalancerPort = loadBalancerPort;
            return this;
        }

        /**
         * @param loadBalancerPort The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerPort(Integer loadBalancerPort) {
            return loadBalancerPort(Output.of(loadBalancerPort));
        }

        /**
         * @param policyNames The name of the policy you want to enable for the listener.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(@Nullable Output<List<String>> policyNames) {
            $.policyNames = policyNames;
            return this;
        }

        /**
         * @param policyNames The name of the policy you want to enable for the listener.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(List<String> policyNames) {
            return policyNames(Output.of(policyNames));
        }

        /**
         * @param policyNames The name of the policy you want to enable for the listener.
         * 
         * @return builder
         * 
         */
        public Builder policyNames(String... policyNames) {
            return policyNames(List.of(policyNames));
        }

        /**
         * @param serverCertificateId The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateId(@Nullable Output<String> serverCertificateId) {
            $.serverCertificateId = serverCertificateId;
            return this;
        }

        /**
         * @param serverCertificateId The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers &gt; Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `load_balancer_port` parameter.
         * 
         * @return builder
         * 
         */
        public Builder serverCertificateId(String serverCertificateId) {
            return serverCertificateId(Output.of(serverCertificateId));
        }

        /**
         * @param tags One or more tags associated with the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<LoadBalancerAttributesTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags One or more tags associated with the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<LoadBalancerAttributesTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags One or more tags associated with the load balancer.
         * 
         * @return builder
         * 
         */
        public Builder tags(LoadBalancerAttributesTagArgs... tags) {
            return tags(List.of(tags));
        }

        public LoadBalancerAttributesArgs build() {
            $.loadBalancerName = Objects.requireNonNull($.loadBalancerName, "expected parameter 'loadBalancerName' to be non-null");
            return $;
        }
    }

}
