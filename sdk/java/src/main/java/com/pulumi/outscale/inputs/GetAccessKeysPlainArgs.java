// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.GetAccessKeysFilter;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetAccessKeysPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetAccessKeysPlainArgs Empty = new GetAccessKeysPlainArgs();

    /**
     * The IDs of the access keys.
     * 
     */
    @Import(name="accessKeyIds")
    private @Nullable List<String> accessKeyIds;

    /**
     * @return The IDs of the access keys.
     * 
     */
    public Optional<List<String>> accessKeyIds() {
        return Optional.ofNullable(this.accessKeyIds);
    }

    /**
     * A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    @Import(name="filters")
    private @Nullable List<GetAccessKeysFilter> filters;

    /**
     * @return A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
     * 
     */
    public Optional<List<GetAccessKeysFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * The states of the access keys (`ACTIVE` \| `INACTIVE`).
     * 
     */
    @Import(name="states")
    private @Nullable List<String> states;

    /**
     * @return The states of the access keys (`ACTIVE` \| `INACTIVE`).
     * 
     */
    public Optional<List<String>> states() {
        return Optional.ofNullable(this.states);
    }

    private GetAccessKeysPlainArgs() {}

    private GetAccessKeysPlainArgs(GetAccessKeysPlainArgs $) {
        this.accessKeyIds = $.accessKeyIds;
        this.filters = $.filters;
        this.states = $.states;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetAccessKeysPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetAccessKeysPlainArgs $;

        public Builder() {
            $ = new GetAccessKeysPlainArgs();
        }

        public Builder(GetAccessKeysPlainArgs defaults) {
            $ = new GetAccessKeysPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKeyIds The IDs of the access keys.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyIds(@Nullable List<String> accessKeyIds) {
            $.accessKeyIds = accessKeyIds;
            return this;
        }

        /**
         * @param accessKeyIds The IDs of the access keys.
         * 
         * @return builder
         * 
         */
        public Builder accessKeyIds(String... accessKeyIds) {
            return accessKeyIds(List.of(accessKeyIds));
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable List<GetAccessKeysFilter> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
         * 
         * @return builder
         * 
         */
        public Builder filters(GetAccessKeysFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param states The states of the access keys (`ACTIVE` \| `INACTIVE`).
         * 
         * @return builder
         * 
         */
        public Builder states(@Nullable List<String> states) {
            $.states = states;
            return this;
        }

        /**
         * @param states The states of the access keys (`ACTIVE` \| `INACTIVE`).
         * 
         * @return builder
         * 
         */
        public Builder states(String... states) {
            return states(List.of(states));
        }

        public GetAccessKeysPlainArgs build() {
            return $;
        }
    }

}
