// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.outscale.inputs.TagTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagArgs extends com.pulumi.resources.ResourceArgs {

    public static final TagArgs Empty = new TagArgs();

    @Import(name="resourceIds")
    private @Nullable Output<List<String>> resourceIds;

    public Optional<Output<List<String>>> resourceIds() {
        return Optional.ofNullable(this.resourceIds);
    }

    @Import(name="tag")
    private @Nullable Output<List<TagTagArgs>> tag;

    public Optional<Output<List<TagTagArgs>>> tag() {
        return Optional.ofNullable(this.tag);
    }

    private TagArgs() {}

    private TagArgs(TagArgs $) {
        this.resourceIds = $.resourceIds;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagArgs $;

        public Builder() {
            $ = new TagArgs();
        }

        public Builder(TagArgs defaults) {
            $ = new TagArgs(Objects.requireNonNull(defaults));
        }

        public Builder resourceIds(@Nullable Output<List<String>> resourceIds) {
            $.resourceIds = resourceIds;
            return this;
        }

        public Builder resourceIds(List<String> resourceIds) {
            return resourceIds(Output.of(resourceIds));
        }

        public Builder resourceIds(String... resourceIds) {
            return resourceIds(List.of(resourceIds));
        }

        public Builder tag(@Nullable Output<List<TagTagArgs>> tag) {
            $.tag = tag;
            return this;
        }

        public Builder tag(List<TagTagArgs> tag) {
            return tag(Output.of(tag));
        }

        public Builder tag(TagTagArgs... tag) {
            return tag(List.of(tag));
        }

        public TagArgs build() {
            return $;
        }
    }

}
