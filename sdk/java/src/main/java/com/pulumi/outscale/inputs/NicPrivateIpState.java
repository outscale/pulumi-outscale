// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.outscale.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NicPrivateIpState extends com.pulumi.resources.ResourceArgs {

    public static final NicPrivateIpState Empty = new NicPrivateIpState();

    /**
     * If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
     * 
     */
    @Import(name="allowRelink")
    private @Nullable Output<Boolean> allowRelink;

    /**
     * @return If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
     * 
     */
    public Optional<Output<Boolean>> allowRelink() {
        return Optional.ofNullable(this.allowRelink);
    }

    /**
     * The ID of the NIC.
     * 
     */
    @Import(name="nicId")
    private @Nullable Output<String> nicId;

    /**
     * @return The ID of the NIC.
     * 
     */
    public Optional<Output<String>> nicId() {
        return Optional.ofNullable(this.nicId);
    }

    @Import(name="primaryPrivateIp")
    private @Nullable Output<String> primaryPrivateIp;

    public Optional<Output<String>> primaryPrivateIp() {
        return Optional.ofNullable(this.primaryPrivateIp);
    }

    /**
     * The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
     * 
     */
    @Import(name="privateIps")
    private @Nullable Output<List<String>> privateIps;

    /**
     * @return The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
     * 
     */
    public Optional<Output<List<String>>> privateIps() {
        return Optional.ofNullable(this.privateIps);
    }

    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * The number of secondary private IPs to assign to the NIC.
     * 
     */
    @Import(name="secondaryPrivateIpCount")
    private @Nullable Output<Integer> secondaryPrivateIpCount;

    /**
     * @return The number of secondary private IPs to assign to the NIC.
     * 
     */
    public Optional<Output<Integer>> secondaryPrivateIpCount() {
        return Optional.ofNullable(this.secondaryPrivateIpCount);
    }

    private NicPrivateIpState() {}

    private NicPrivateIpState(NicPrivateIpState $) {
        this.allowRelink = $.allowRelink;
        this.nicId = $.nicId;
        this.primaryPrivateIp = $.primaryPrivateIp;
        this.privateIps = $.privateIps;
        this.requestId = $.requestId;
        this.secondaryPrivateIpCount = $.secondaryPrivateIpCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NicPrivateIpState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NicPrivateIpState $;

        public Builder() {
            $ = new NicPrivateIpState();
        }

        public Builder(NicPrivateIpState defaults) {
            $ = new NicPrivateIpState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowRelink If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
         * 
         * @return builder
         * 
         */
        public Builder allowRelink(@Nullable Output<Boolean> allowRelink) {
            $.allowRelink = allowRelink;
            return this;
        }

        /**
         * @param allowRelink If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
         * 
         * @return builder
         * 
         */
        public Builder allowRelink(Boolean allowRelink) {
            return allowRelink(Output.of(allowRelink));
        }

        /**
         * @param nicId The ID of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder nicId(@Nullable Output<String> nicId) {
            $.nicId = nicId;
            return this;
        }

        /**
         * @param nicId The ID of the NIC.
         * 
         * @return builder
         * 
         */
        public Builder nicId(String nicId) {
            return nicId(Output.of(nicId));
        }

        public Builder primaryPrivateIp(@Nullable Output<String> primaryPrivateIp) {
            $.primaryPrivateIp = primaryPrivateIp;
            return this;
        }

        public Builder primaryPrivateIp(String primaryPrivateIp) {
            return primaryPrivateIp(Output.of(primaryPrivateIp));
        }

        /**
         * @param privateIps The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
         * 
         * @return builder
         * 
         */
        public Builder privateIps(@Nullable Output<List<String>> privateIps) {
            $.privateIps = privateIps;
            return this;
        }

        /**
         * @param privateIps The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
         * 
         * @return builder
         * 
         */
        public Builder privateIps(List<String> privateIps) {
            return privateIps(Output.of(privateIps));
        }

        /**
         * @param privateIps The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
         * 
         * @return builder
         * 
         */
        public Builder privateIps(String... privateIps) {
            return privateIps(List.of(privateIps));
        }

        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param secondaryPrivateIpCount The number of secondary private IPs to assign to the NIC.
         * 
         * @return builder
         * 
         */
        public Builder secondaryPrivateIpCount(@Nullable Output<Integer> secondaryPrivateIpCount) {
            $.secondaryPrivateIpCount = secondaryPrivateIpCount;
            return this;
        }

        /**
         * @param secondaryPrivateIpCount The number of secondary private IPs to assign to the NIC.
         * 
         * @return builder
         * 
         */
        public Builder secondaryPrivateIpCount(Integer secondaryPrivateIpCount) {
            return secondaryPrivateIpCount(Output.of(secondaryPrivateIpCount));
        }

        public NicPrivateIpState build() {
            return $;
        }
    }

}
