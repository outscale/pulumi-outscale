// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a network interface card (NIC).
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-NICs.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-nic).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.LookupNic(ctx, &outscale.LookupNicArgs{
//				Filters: []outscale.GetNicFilter{
//					{
//						Name: "nic_ids",
//						Values: []string{
//							"eni-12345678",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNic(ctx *pulumi.Context, args *LookupNicArgs, opts ...pulumi.InvokeOption) (*LookupNicResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNicResult
	err := ctx.Invoke("outscale:index/getNic:getNic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNic.
type LookupNicArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters []GetNicFilter `pulumi:"filters"`
}

// A collection of values returned by getNic.
type LookupNicResult struct {
	// The account ID of the owner of the NIC.
	AccountId string `pulumi:"accountId"`
	// The description of the NIC.
	Description string         `pulumi:"description"`
	Filters     []GetNicFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (Net only) If true, the source/destination check is enabled. If false, it is disabled.
	IsSourceDestChecked bool `pulumi:"isSourceDestChecked"`
	// Information about the NIC attachment.
	LinkNics []GetNicLinkNic `pulumi:"linkNics"`
	// Information about the public IP association.
	LinkPublicIps []GetNicLinkPublicIp `pulumi:"linkPublicIps"`
	// The Media Access Control (MAC) address of the NIC.
	MacAddress string `pulumi:"macAddress"`
	// The ID of the Net for the NIC.
	NetId string `pulumi:"netId"`
	// The ID of the NIC.
	NicId string `pulumi:"nicId"`
	// The name of the private DNS.
	PrivateDnsName string `pulumi:"privateDnsName"`
	// The private IP of the NIC.
	PrivateIp string `pulumi:"privateIp"`
	// The private IPs of the NIC.
	PrivateIps       []GetNicPrivateIpType `pulumi:"privateIps"`
	RequestId        string                `pulumi:"requestId"`
	RequesterManaged bool                  `pulumi:"requesterManaged"`
	// The ID of the security group.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// One or more IDs of security groups for the NIC.
	SecurityGroups []GetNicSecurityGroup `pulumi:"securityGroups"`
	// The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
	State string `pulumi:"state"`
	// The ID of the Subnet.
	SubnetId string `pulumi:"subnetId"`
	// The Subregion in which the NIC is located.
	SubregionName string `pulumi:"subregionName"`
	// One or more tags associated with the NIC.
	Tags []GetNicTag `pulumi:"tags"`
}

func LookupNicOutput(ctx *pulumi.Context, args LookupNicOutputArgs, opts ...pulumi.InvokeOption) LookupNicResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNicResultOutput, error) {
			args := v.(LookupNicArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("outscale:index/getNic:getNic", args, LookupNicResultOutput{}, options).(LookupNicResultOutput), nil
		}).(LookupNicResultOutput)
}

// A collection of arguments for invoking getNic.
type LookupNicOutputArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters GetNicFilterArrayInput `pulumi:"filters"`
}

func (LookupNicOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNicArgs)(nil)).Elem()
}

// A collection of values returned by getNic.
type LookupNicResultOutput struct{ *pulumi.OutputState }

func (LookupNicResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNicResult)(nil)).Elem()
}

func (o LookupNicResultOutput) ToLookupNicResultOutput() LookupNicResultOutput {
	return o
}

func (o LookupNicResultOutput) ToLookupNicResultOutputWithContext(ctx context.Context) LookupNicResultOutput {
	return o
}

// The account ID of the owner of the NIC.
func (o LookupNicResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNicResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// The description of the NIC.
func (o LookupNicResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNicResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupNicResultOutput) Filters() GetNicFilterArrayOutput {
	return o.ApplyT(func(v LookupNicResult) []GetNicFilter { return v.Filters }).(GetNicFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNicResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNicResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Net only) If true, the source/destination check is enabled. If false, it is disabled.
func (o LookupNicResultOutput) IsSourceDestChecked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNicResult) bool { return v.IsSourceDestChecked }).(pulumi.BoolOutput)
}

// Information about the NIC attachment.
func (o LookupNicResultOutput) LinkNics() GetNicLinkNicArrayOutput {
	return o.ApplyT(func(v LookupNicResult) []GetNicLinkNic { return v.LinkNics }).(GetNicLinkNicArrayOutput)
}

// Information about the public IP association.
func (o LookupNicResultOutput) LinkPublicIps() GetNicLinkPublicIpArrayOutput {
	return o.ApplyT(func(v LookupNicResult) []GetNicLinkPublicIp { return v.LinkPublicIps }).(GetNicLinkPublicIpArrayOutput)
}

// The Media Access Control (MAC) address of the NIC.
func (o LookupNicResultOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNicResult) string { return v.MacAddress }).(pulumi.StringOutput)
}

// The ID of the Net for the NIC.
func (o LookupNicResultOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNicResult) string { return v.NetId }).(pulumi.StringOutput)
}

// The ID of the NIC.
func (o LookupNicResultOutput) NicId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNicResult) string { return v.NicId }).(pulumi.StringOutput)
}

// The name of the private DNS.
func (o LookupNicResultOutput) PrivateDnsName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNicResult) string { return v.PrivateDnsName }).(pulumi.StringOutput)
}

// The private IP of the NIC.
func (o LookupNicResultOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNicResult) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// The private IPs of the NIC.
func (o LookupNicResultOutput) PrivateIps() GetNicPrivateIpTypeArrayOutput {
	return o.ApplyT(func(v LookupNicResult) []GetNicPrivateIpType { return v.PrivateIps }).(GetNicPrivateIpTypeArrayOutput)
}

func (o LookupNicResultOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNicResult) string { return v.RequestId }).(pulumi.StringOutput)
}

func (o LookupNicResultOutput) RequesterManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNicResult) bool { return v.RequesterManaged }).(pulumi.BoolOutput)
}

// The ID of the security group.
func (o LookupNicResultOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNicResult) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// One or more IDs of security groups for the NIC.
func (o LookupNicResultOutput) SecurityGroups() GetNicSecurityGroupArrayOutput {
	return o.ApplyT(func(v LookupNicResult) []GetNicSecurityGroup { return v.SecurityGroups }).(GetNicSecurityGroupArrayOutput)
}

// The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
func (o LookupNicResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNicResult) string { return v.State }).(pulumi.StringOutput)
}

// The ID of the Subnet.
func (o LookupNicResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNicResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The Subregion in which the NIC is located.
func (o LookupNicResultOutput) SubregionName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNicResult) string { return v.SubregionName }).(pulumi.StringOutput)
}

// One or more tags associated with the NIC.
func (o LookupNicResultOutput) Tags() GetNicTagArrayOutput {
	return o.ApplyT(func(v LookupNicResult) []GetNicTag { return v.Tags }).(GetNicTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNicResultOutput{})
}
