// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a NIC's private IPs.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-FNIs.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-nic).
//
// ## Example Usage
// ### Required resources
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net01, err := outscale.NewNet(ctx, "net01", &outscale.NetArgs{
//				IpRange: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet01, err := outscale.NewSubnet(ctx, "subnet01", &outscale.SubnetArgs{
//				SubregionName: pulumi.String(fmt.Sprintf("%va", _var.Region)),
//				IpRange:       pulumi.String("10.0.0.0/16"),
//				NetId:         net01.NetId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewNic(ctx, "nic01", &outscale.NicArgs{
//				SubnetId: subnet01.SubnetId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Link a specific secondary private IP address to a NIC
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewNicPrivateIp(ctx, "nicPrivateIp01", &outscale.NicPrivateIpArgs{
//				NicId: pulumi.Any(outscale_nic.Nic01.Nic_id),
//				PrivateIps: pulumi.StringArray{
//					pulumi.String("10.0.12.34"),
//					pulumi.String("10.0.12.35"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Link several automatic secondary private IP addresses to a NIC
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewNicPrivateIp(ctx, "nicPrivateIp02", &outscale.NicPrivateIpArgs{
//				NicId:                   pulumi.Any(outscale_nic.Nic01.Nic_id),
//				SecondaryPrivateIpCount: pulumi.Int(2),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NicPrivateIp struct {
	pulumi.CustomResourceState

	// If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
	AllowRelink pulumi.BoolPtrOutput `pulumi:"allowRelink"`
	// The ID of the NIC.
	NicId            pulumi.StringOutput `pulumi:"nicId"`
	PrimaryPrivateIp pulumi.StringOutput `pulumi:"primaryPrivateIp"`
	// The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
	PrivateIps pulumi.StringArrayOutput `pulumi:"privateIps"`
	RequestId  pulumi.StringOutput      `pulumi:"requestId"`
	// The number of secondary private IPs to assign to the NIC.
	SecondaryPrivateIpCount pulumi.IntOutput `pulumi:"secondaryPrivateIpCount"`
}

// NewNicPrivateIp registers a new resource with the given unique name, arguments, and options.
func NewNicPrivateIp(ctx *pulumi.Context,
	name string, args *NicPrivateIpArgs, opts ...pulumi.ResourceOption) (*NicPrivateIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NicId == nil {
		return nil, errors.New("invalid value for required argument 'NicId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NicPrivateIp
	err := ctx.RegisterResource("outscale:index/nicPrivateIp:NicPrivateIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNicPrivateIp gets an existing NicPrivateIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNicPrivateIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NicPrivateIpState, opts ...pulumi.ResourceOption) (*NicPrivateIp, error) {
	var resource NicPrivateIp
	err := ctx.ReadResource("outscale:index/nicPrivateIp:NicPrivateIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NicPrivateIp resources.
type nicPrivateIpState struct {
	// If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
	AllowRelink *bool `pulumi:"allowRelink"`
	// The ID of the NIC.
	NicId            *string `pulumi:"nicId"`
	PrimaryPrivateIp *string `pulumi:"primaryPrivateIp"`
	// The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
	PrivateIps []string `pulumi:"privateIps"`
	RequestId  *string  `pulumi:"requestId"`
	// The number of secondary private IPs to assign to the NIC.
	SecondaryPrivateIpCount *int `pulumi:"secondaryPrivateIpCount"`
}

type NicPrivateIpState struct {
	// If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
	AllowRelink pulumi.BoolPtrInput
	// The ID of the NIC.
	NicId            pulumi.StringPtrInput
	PrimaryPrivateIp pulumi.StringPtrInput
	// The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
	PrivateIps pulumi.StringArrayInput
	RequestId  pulumi.StringPtrInput
	// The number of secondary private IPs to assign to the NIC.
	SecondaryPrivateIpCount pulumi.IntPtrInput
}

func (NicPrivateIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*nicPrivateIpState)(nil)).Elem()
}

type nicPrivateIpArgs struct {
	// If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
	AllowRelink *bool `pulumi:"allowRelink"`
	// The ID of the NIC.
	NicId string `pulumi:"nicId"`
	// The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
	PrivateIps []string `pulumi:"privateIps"`
	// The number of secondary private IPs to assign to the NIC.
	SecondaryPrivateIpCount *int `pulumi:"secondaryPrivateIpCount"`
}

// The set of arguments for constructing a NicPrivateIp resource.
type NicPrivateIpArgs struct {
	// If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
	AllowRelink pulumi.BoolPtrInput
	// The ID of the NIC.
	NicId pulumi.StringInput
	// The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
	PrivateIps pulumi.StringArrayInput
	// The number of secondary private IPs to assign to the NIC.
	SecondaryPrivateIpCount pulumi.IntPtrInput
}

func (NicPrivateIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nicPrivateIpArgs)(nil)).Elem()
}

type NicPrivateIpInput interface {
	pulumi.Input

	ToNicPrivateIpOutput() NicPrivateIpOutput
	ToNicPrivateIpOutputWithContext(ctx context.Context) NicPrivateIpOutput
}

func (*NicPrivateIp) ElementType() reflect.Type {
	return reflect.TypeOf((**NicPrivateIp)(nil)).Elem()
}

func (i *NicPrivateIp) ToNicPrivateIpOutput() NicPrivateIpOutput {
	return i.ToNicPrivateIpOutputWithContext(context.Background())
}

func (i *NicPrivateIp) ToNicPrivateIpOutputWithContext(ctx context.Context) NicPrivateIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicPrivateIpOutput)
}

// NicPrivateIpArrayInput is an input type that accepts NicPrivateIpArray and NicPrivateIpArrayOutput values.
// You can construct a concrete instance of `NicPrivateIpArrayInput` via:
//
//	NicPrivateIpArray{ NicPrivateIpArgs{...} }
type NicPrivateIpArrayInput interface {
	pulumi.Input

	ToNicPrivateIpArrayOutput() NicPrivateIpArrayOutput
	ToNicPrivateIpArrayOutputWithContext(context.Context) NicPrivateIpArrayOutput
}

type NicPrivateIpArray []NicPrivateIpInput

func (NicPrivateIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NicPrivateIp)(nil)).Elem()
}

func (i NicPrivateIpArray) ToNicPrivateIpArrayOutput() NicPrivateIpArrayOutput {
	return i.ToNicPrivateIpArrayOutputWithContext(context.Background())
}

func (i NicPrivateIpArray) ToNicPrivateIpArrayOutputWithContext(ctx context.Context) NicPrivateIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicPrivateIpArrayOutput)
}

// NicPrivateIpMapInput is an input type that accepts NicPrivateIpMap and NicPrivateIpMapOutput values.
// You can construct a concrete instance of `NicPrivateIpMapInput` via:
//
//	NicPrivateIpMap{ "key": NicPrivateIpArgs{...} }
type NicPrivateIpMapInput interface {
	pulumi.Input

	ToNicPrivateIpMapOutput() NicPrivateIpMapOutput
	ToNicPrivateIpMapOutputWithContext(context.Context) NicPrivateIpMapOutput
}

type NicPrivateIpMap map[string]NicPrivateIpInput

func (NicPrivateIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NicPrivateIp)(nil)).Elem()
}

func (i NicPrivateIpMap) ToNicPrivateIpMapOutput() NicPrivateIpMapOutput {
	return i.ToNicPrivateIpMapOutputWithContext(context.Background())
}

func (i NicPrivateIpMap) ToNicPrivateIpMapOutputWithContext(ctx context.Context) NicPrivateIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicPrivateIpMapOutput)
}

type NicPrivateIpOutput struct{ *pulumi.OutputState }

func (NicPrivateIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NicPrivateIp)(nil)).Elem()
}

func (o NicPrivateIpOutput) ToNicPrivateIpOutput() NicPrivateIpOutput {
	return o
}

func (o NicPrivateIpOutput) ToNicPrivateIpOutputWithContext(ctx context.Context) NicPrivateIpOutput {
	return o
}

// If true, allows an IP that is already assigned to another NIC in the same Subnet to be assigned to the NIC you specified.
func (o NicPrivateIpOutput) AllowRelink() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NicPrivateIp) pulumi.BoolPtrOutput { return v.AllowRelink }).(pulumi.BoolPtrOutput)
}

// The ID of the NIC.
func (o NicPrivateIpOutput) NicId() pulumi.StringOutput {
	return o.ApplyT(func(v *NicPrivateIp) pulumi.StringOutput { return v.NicId }).(pulumi.StringOutput)
}

func (o NicPrivateIpOutput) PrimaryPrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NicPrivateIp) pulumi.StringOutput { return v.PrimaryPrivateIp }).(pulumi.StringOutput)
}

// The secondary private IP or IPs you want to assign to the NIC within the IP range of the Subnet.
func (o NicPrivateIpOutput) PrivateIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NicPrivateIp) pulumi.StringArrayOutput { return v.PrivateIps }).(pulumi.StringArrayOutput)
}

func (o NicPrivateIpOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *NicPrivateIp) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// The number of secondary private IPs to assign to the NIC.
func (o NicPrivateIpOutput) SecondaryPrivateIpCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NicPrivateIp) pulumi.IntOutput { return v.SecondaryPrivateIpCount }).(pulumi.IntOutput)
}

type NicPrivateIpArrayOutput struct{ *pulumi.OutputState }

func (NicPrivateIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NicPrivateIp)(nil)).Elem()
}

func (o NicPrivateIpArrayOutput) ToNicPrivateIpArrayOutput() NicPrivateIpArrayOutput {
	return o
}

func (o NicPrivateIpArrayOutput) ToNicPrivateIpArrayOutputWithContext(ctx context.Context) NicPrivateIpArrayOutput {
	return o
}

func (o NicPrivateIpArrayOutput) Index(i pulumi.IntInput) NicPrivateIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NicPrivateIp {
		return vs[0].([]*NicPrivateIp)[vs[1].(int)]
	}).(NicPrivateIpOutput)
}

type NicPrivateIpMapOutput struct{ *pulumi.OutputState }

func (NicPrivateIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NicPrivateIp)(nil)).Elem()
}

func (o NicPrivateIpMapOutput) ToNicPrivateIpMapOutput() NicPrivateIpMapOutput {
	return o
}

func (o NicPrivateIpMapOutput) ToNicPrivateIpMapOutputWithContext(ctx context.Context) NicPrivateIpMapOutput {
	return o
}

func (o NicPrivateIpMapOutput) MapIndex(k pulumi.StringInput) NicPrivateIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NicPrivateIp {
		return vs[0].(map[string]*NicPrivateIp)[vs[1].(string)]
	}).(NicPrivateIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NicPrivateIpInput)(nil)).Elem(), &NicPrivateIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*NicPrivateIpArrayInput)(nil)).Elem(), NicPrivateIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NicPrivateIpMapInput)(nil)).Elem(), NicPrivateIpMap{})
	pulumi.RegisterOutputType(NicPrivateIpOutput{})
	pulumi.RegisterOutputType(NicPrivateIpArrayOutput{})
	pulumi.RegisterOutputType(NicPrivateIpMapOutput{})
}
