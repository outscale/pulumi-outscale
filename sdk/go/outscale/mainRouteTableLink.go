// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a main route table link.
//
// > **Note:** On Net creation, the OUTSCALE API always creates an initial main route table. The `mainRouteTableLink`resource records the ID of the inital route table under the `defaultRouteTableId` attribute. The "Destroy" action for a `mainRouteTableLink` consists of resetting the original route table as the main route table for the Net. The additional route table must remain intact in order for the `mainRouteTableLink` destroy to work properly.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Route-Tables.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-routetable).
//
// ## Example Usage
//
// ### Required resources
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net01, err := outscale.NewNet(ctx, "net01", &outscale.NetArgs{
//				IpRange: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewSubnet(ctx, "subnet01", &outscale.SubnetArgs{
//				NetId:   net01.NetId,
//				IpRange: pulumi.String("10.0.0.0/18"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewRouteTable(ctx, "route_table01", &outscale.RouteTableArgs{
//				NetId: net01.NetId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Link a main route table
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewMainRouteTableLink(ctx, "main", &outscale.MainRouteTableLinkArgs{
//				NetId:        pulumi.Any(net01.NetId),
//				RouteTableId: pulumi.Any(routeTable01.RouteTableId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type MainRouteTableLink struct {
	pulumi.CustomResourceState

	// The ID of the default route table.
	DefaultRouteTableId pulumi.StringOutput `pulumi:"defaultRouteTableId"`
	// The ID of the association between the route table and the Subnet.
	LinkRouteTableId pulumi.StringOutput `pulumi:"linkRouteTableId"`
	// If true, the route table is the main one.
	Main pulumi.BoolOutput `pulumi:"main"`
	// The ID of the Net.
	NetId     pulumi.StringOutput `pulumi:"netId"`
	RequestId pulumi.StringOutput `pulumi:"requestId"`
	// The ID of the route table.
	RouteTableId pulumi.StringOutput                 `pulumi:"routeTableId"`
	SubnetId     pulumi.StringOutput                 `pulumi:"subnetId"`
	Timeouts     MainRouteTableLinkTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewMainRouteTableLink registers a new resource with the given unique name, arguments, and options.
func NewMainRouteTableLink(ctx *pulumi.Context,
	name string, args *MainRouteTableLinkArgs, opts ...pulumi.ResourceOption) (*MainRouteTableLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetId == nil {
		return nil, errors.New("invalid value for required argument 'NetId'")
	}
	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MainRouteTableLink
	err := ctx.RegisterResource("outscale:index/mainRouteTableLink:MainRouteTableLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMainRouteTableLink gets an existing MainRouteTableLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMainRouteTableLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MainRouteTableLinkState, opts ...pulumi.ResourceOption) (*MainRouteTableLink, error) {
	var resource MainRouteTableLink
	err := ctx.ReadResource("outscale:index/mainRouteTableLink:MainRouteTableLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MainRouteTableLink resources.
type mainRouteTableLinkState struct {
	// The ID of the default route table.
	DefaultRouteTableId *string `pulumi:"defaultRouteTableId"`
	// The ID of the association between the route table and the Subnet.
	LinkRouteTableId *string `pulumi:"linkRouteTableId"`
	// If true, the route table is the main one.
	Main *bool `pulumi:"main"`
	// The ID of the Net.
	NetId     *string `pulumi:"netId"`
	RequestId *string `pulumi:"requestId"`
	// The ID of the route table.
	RouteTableId *string                     `pulumi:"routeTableId"`
	SubnetId     *string                     `pulumi:"subnetId"`
	Timeouts     *MainRouteTableLinkTimeouts `pulumi:"timeouts"`
}

type MainRouteTableLinkState struct {
	// The ID of the default route table.
	DefaultRouteTableId pulumi.StringPtrInput
	// The ID of the association between the route table and the Subnet.
	LinkRouteTableId pulumi.StringPtrInput
	// If true, the route table is the main one.
	Main pulumi.BoolPtrInput
	// The ID of the Net.
	NetId     pulumi.StringPtrInput
	RequestId pulumi.StringPtrInput
	// The ID of the route table.
	RouteTableId pulumi.StringPtrInput
	SubnetId     pulumi.StringPtrInput
	Timeouts     MainRouteTableLinkTimeoutsPtrInput
}

func (MainRouteTableLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*mainRouteTableLinkState)(nil)).Elem()
}

type mainRouteTableLinkArgs struct {
	// The ID of the Net.
	NetId string `pulumi:"netId"`
	// The ID of the route table.
	RouteTableId string                      `pulumi:"routeTableId"`
	Timeouts     *MainRouteTableLinkTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a MainRouteTableLink resource.
type MainRouteTableLinkArgs struct {
	// The ID of the Net.
	NetId pulumi.StringInput
	// The ID of the route table.
	RouteTableId pulumi.StringInput
	Timeouts     MainRouteTableLinkTimeoutsPtrInput
}

func (MainRouteTableLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mainRouteTableLinkArgs)(nil)).Elem()
}

type MainRouteTableLinkInput interface {
	pulumi.Input

	ToMainRouteTableLinkOutput() MainRouteTableLinkOutput
	ToMainRouteTableLinkOutputWithContext(ctx context.Context) MainRouteTableLinkOutput
}

func (*MainRouteTableLink) ElementType() reflect.Type {
	return reflect.TypeOf((**MainRouteTableLink)(nil)).Elem()
}

func (i *MainRouteTableLink) ToMainRouteTableLinkOutput() MainRouteTableLinkOutput {
	return i.ToMainRouteTableLinkOutputWithContext(context.Background())
}

func (i *MainRouteTableLink) ToMainRouteTableLinkOutputWithContext(ctx context.Context) MainRouteTableLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MainRouteTableLinkOutput)
}

// MainRouteTableLinkArrayInput is an input type that accepts MainRouteTableLinkArray and MainRouteTableLinkArrayOutput values.
// You can construct a concrete instance of `MainRouteTableLinkArrayInput` via:
//
//	MainRouteTableLinkArray{ MainRouteTableLinkArgs{...} }
type MainRouteTableLinkArrayInput interface {
	pulumi.Input

	ToMainRouteTableLinkArrayOutput() MainRouteTableLinkArrayOutput
	ToMainRouteTableLinkArrayOutputWithContext(context.Context) MainRouteTableLinkArrayOutput
}

type MainRouteTableLinkArray []MainRouteTableLinkInput

func (MainRouteTableLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MainRouteTableLink)(nil)).Elem()
}

func (i MainRouteTableLinkArray) ToMainRouteTableLinkArrayOutput() MainRouteTableLinkArrayOutput {
	return i.ToMainRouteTableLinkArrayOutputWithContext(context.Background())
}

func (i MainRouteTableLinkArray) ToMainRouteTableLinkArrayOutputWithContext(ctx context.Context) MainRouteTableLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MainRouteTableLinkArrayOutput)
}

// MainRouteTableLinkMapInput is an input type that accepts MainRouteTableLinkMap and MainRouteTableLinkMapOutput values.
// You can construct a concrete instance of `MainRouteTableLinkMapInput` via:
//
//	MainRouteTableLinkMap{ "key": MainRouteTableLinkArgs{...} }
type MainRouteTableLinkMapInput interface {
	pulumi.Input

	ToMainRouteTableLinkMapOutput() MainRouteTableLinkMapOutput
	ToMainRouteTableLinkMapOutputWithContext(context.Context) MainRouteTableLinkMapOutput
}

type MainRouteTableLinkMap map[string]MainRouteTableLinkInput

func (MainRouteTableLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MainRouteTableLink)(nil)).Elem()
}

func (i MainRouteTableLinkMap) ToMainRouteTableLinkMapOutput() MainRouteTableLinkMapOutput {
	return i.ToMainRouteTableLinkMapOutputWithContext(context.Background())
}

func (i MainRouteTableLinkMap) ToMainRouteTableLinkMapOutputWithContext(ctx context.Context) MainRouteTableLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MainRouteTableLinkMapOutput)
}

type MainRouteTableLinkOutput struct{ *pulumi.OutputState }

func (MainRouteTableLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MainRouteTableLink)(nil)).Elem()
}

func (o MainRouteTableLinkOutput) ToMainRouteTableLinkOutput() MainRouteTableLinkOutput {
	return o
}

func (o MainRouteTableLinkOutput) ToMainRouteTableLinkOutputWithContext(ctx context.Context) MainRouteTableLinkOutput {
	return o
}

// The ID of the default route table.
func (o MainRouteTableLinkOutput) DefaultRouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *MainRouteTableLink) pulumi.StringOutput { return v.DefaultRouteTableId }).(pulumi.StringOutput)
}

// The ID of the association between the route table and the Subnet.
func (o MainRouteTableLinkOutput) LinkRouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *MainRouteTableLink) pulumi.StringOutput { return v.LinkRouteTableId }).(pulumi.StringOutput)
}

// If true, the route table is the main one.
func (o MainRouteTableLinkOutput) Main() pulumi.BoolOutput {
	return o.ApplyT(func(v *MainRouteTableLink) pulumi.BoolOutput { return v.Main }).(pulumi.BoolOutput)
}

// The ID of the Net.
func (o MainRouteTableLinkOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v *MainRouteTableLink) pulumi.StringOutput { return v.NetId }).(pulumi.StringOutput)
}

func (o MainRouteTableLinkOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *MainRouteTableLink) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// The ID of the route table.
func (o MainRouteTableLinkOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *MainRouteTableLink) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

func (o MainRouteTableLinkOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *MainRouteTableLink) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o MainRouteTableLinkOutput) Timeouts() MainRouteTableLinkTimeoutsPtrOutput {
	return o.ApplyT(func(v *MainRouteTableLink) MainRouteTableLinkTimeoutsPtrOutput { return v.Timeouts }).(MainRouteTableLinkTimeoutsPtrOutput)
}

type MainRouteTableLinkArrayOutput struct{ *pulumi.OutputState }

func (MainRouteTableLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MainRouteTableLink)(nil)).Elem()
}

func (o MainRouteTableLinkArrayOutput) ToMainRouteTableLinkArrayOutput() MainRouteTableLinkArrayOutput {
	return o
}

func (o MainRouteTableLinkArrayOutput) ToMainRouteTableLinkArrayOutputWithContext(ctx context.Context) MainRouteTableLinkArrayOutput {
	return o
}

func (o MainRouteTableLinkArrayOutput) Index(i pulumi.IntInput) MainRouteTableLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MainRouteTableLink {
		return vs[0].([]*MainRouteTableLink)[vs[1].(int)]
	}).(MainRouteTableLinkOutput)
}

type MainRouteTableLinkMapOutput struct{ *pulumi.OutputState }

func (MainRouteTableLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MainRouteTableLink)(nil)).Elem()
}

func (o MainRouteTableLinkMapOutput) ToMainRouteTableLinkMapOutput() MainRouteTableLinkMapOutput {
	return o
}

func (o MainRouteTableLinkMapOutput) ToMainRouteTableLinkMapOutputWithContext(ctx context.Context) MainRouteTableLinkMapOutput {
	return o
}

func (o MainRouteTableLinkMapOutput) MapIndex(k pulumi.StringInput) MainRouteTableLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MainRouteTableLink {
		return vs[0].(map[string]*MainRouteTableLink)[vs[1].(string)]
	}).(MainRouteTableLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MainRouteTableLinkInput)(nil)).Elem(), &MainRouteTableLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*MainRouteTableLinkArrayInput)(nil)).Elem(), MainRouteTableLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MainRouteTableLinkMapInput)(nil)).Elem(), MainRouteTableLinkMap{})
	pulumi.RegisterOutputType(MainRouteTableLinkOutput{})
	pulumi.RegisterOutputType(MainRouteTableLinkArrayOutput{})
	pulumi.RegisterOutputType(MainRouteTableLinkMapOutput{})
}
