// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a volume link.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Volumes.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-volume).
//
// ## Example Usage
//
// ## Import
//
// A volume link can be imported using a volume ID. For exampleconsole
//
// ```sh
//
//	$ pulumi import outscale:index/volumesLink:VolumesLink ImportedVolumeLink vol-12345678
//
// ```
type VolumesLink struct {
	pulumi.CustomResourceState

	DeleteOnVmTermination pulumi.BoolPtrOutput `pulumi:"deleteOnVmTermination"`
	// The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
	DeviceName  pulumi.StringOutput `pulumi:"deviceName"`
	ForceUnlink pulumi.BoolOutput   `pulumi:"forceUnlink"`
	RequestId   pulumi.StringOutput `pulumi:"requestId"`
	// The state of the attachment of the volume (`attaching` | `detaching` | `attached` | `detached`).
	State pulumi.StringOutput `pulumi:"state"`
	// The ID of the VM you want to attach the volume to.
	VmId pulumi.StringOutput `pulumi:"vmId"`
	// The ID of the volume you want to attach.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
}

// NewVolumesLink registers a new resource with the given unique name, arguments, and options.
func NewVolumesLink(ctx *pulumi.Context,
	name string, args *VolumesLinkArgs, opts ...pulumi.ResourceOption) (*VolumesLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceName == nil {
		return nil, errors.New("invalid value for required argument 'DeviceName'")
	}
	if args.VmId == nil {
		return nil, errors.New("invalid value for required argument 'VmId'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumesLink
	err := ctx.RegisterResource("outscale:index/volumesLink:VolumesLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumesLink gets an existing VolumesLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumesLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumesLinkState, opts ...pulumi.ResourceOption) (*VolumesLink, error) {
	var resource VolumesLink
	err := ctx.ReadResource("outscale:index/volumesLink:VolumesLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumesLink resources.
type volumesLinkState struct {
	DeleteOnVmTermination *bool `pulumi:"deleteOnVmTermination"`
	// The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
	DeviceName  *string `pulumi:"deviceName"`
	ForceUnlink *bool   `pulumi:"forceUnlink"`
	RequestId   *string `pulumi:"requestId"`
	// The state of the attachment of the volume (`attaching` | `detaching` | `attached` | `detached`).
	State *string `pulumi:"state"`
	// The ID of the VM you want to attach the volume to.
	VmId *string `pulumi:"vmId"`
	// The ID of the volume you want to attach.
	VolumeId *string `pulumi:"volumeId"`
}

type VolumesLinkState struct {
	DeleteOnVmTermination pulumi.BoolPtrInput
	// The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
	DeviceName  pulumi.StringPtrInput
	ForceUnlink pulumi.BoolPtrInput
	RequestId   pulumi.StringPtrInput
	// The state of the attachment of the volume (`attaching` | `detaching` | `attached` | `detached`).
	State pulumi.StringPtrInput
	// The ID of the VM you want to attach the volume to.
	VmId pulumi.StringPtrInput
	// The ID of the volume you want to attach.
	VolumeId pulumi.StringPtrInput
}

func (VolumesLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumesLinkState)(nil)).Elem()
}

type volumesLinkArgs struct {
	DeleteOnVmTermination *bool `pulumi:"deleteOnVmTermination"`
	// The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
	DeviceName  string `pulumi:"deviceName"`
	ForceUnlink *bool  `pulumi:"forceUnlink"`
	// The ID of the VM you want to attach the volume to.
	VmId string `pulumi:"vmId"`
	// The ID of the volume you want to attach.
	VolumeId string `pulumi:"volumeId"`
}

// The set of arguments for constructing a VolumesLink resource.
type VolumesLinkArgs struct {
	DeleteOnVmTermination pulumi.BoolPtrInput
	// The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
	DeviceName  pulumi.StringInput
	ForceUnlink pulumi.BoolPtrInput
	// The ID of the VM you want to attach the volume to.
	VmId pulumi.StringInput
	// The ID of the volume you want to attach.
	VolumeId pulumi.StringInput
}

func (VolumesLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumesLinkArgs)(nil)).Elem()
}

type VolumesLinkInput interface {
	pulumi.Input

	ToVolumesLinkOutput() VolumesLinkOutput
	ToVolumesLinkOutputWithContext(ctx context.Context) VolumesLinkOutput
}

func (*VolumesLink) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumesLink)(nil)).Elem()
}

func (i *VolumesLink) ToVolumesLinkOutput() VolumesLinkOutput {
	return i.ToVolumesLinkOutputWithContext(context.Background())
}

func (i *VolumesLink) ToVolumesLinkOutputWithContext(ctx context.Context) VolumesLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumesLinkOutput)
}

func (i *VolumesLink) ToOutput(ctx context.Context) pulumix.Output[*VolumesLink] {
	return pulumix.Output[*VolumesLink]{
		OutputState: i.ToVolumesLinkOutputWithContext(ctx).OutputState,
	}
}

// VolumesLinkArrayInput is an input type that accepts VolumesLinkArray and VolumesLinkArrayOutput values.
// You can construct a concrete instance of `VolumesLinkArrayInput` via:
//
//	VolumesLinkArray{ VolumesLinkArgs{...} }
type VolumesLinkArrayInput interface {
	pulumi.Input

	ToVolumesLinkArrayOutput() VolumesLinkArrayOutput
	ToVolumesLinkArrayOutputWithContext(context.Context) VolumesLinkArrayOutput
}

type VolumesLinkArray []VolumesLinkInput

func (VolumesLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumesLink)(nil)).Elem()
}

func (i VolumesLinkArray) ToVolumesLinkArrayOutput() VolumesLinkArrayOutput {
	return i.ToVolumesLinkArrayOutputWithContext(context.Background())
}

func (i VolumesLinkArray) ToVolumesLinkArrayOutputWithContext(ctx context.Context) VolumesLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumesLinkArrayOutput)
}

func (i VolumesLinkArray) ToOutput(ctx context.Context) pulumix.Output[[]*VolumesLink] {
	return pulumix.Output[[]*VolumesLink]{
		OutputState: i.ToVolumesLinkArrayOutputWithContext(ctx).OutputState,
	}
}

// VolumesLinkMapInput is an input type that accepts VolumesLinkMap and VolumesLinkMapOutput values.
// You can construct a concrete instance of `VolumesLinkMapInput` via:
//
//	VolumesLinkMap{ "key": VolumesLinkArgs{...} }
type VolumesLinkMapInput interface {
	pulumi.Input

	ToVolumesLinkMapOutput() VolumesLinkMapOutput
	ToVolumesLinkMapOutputWithContext(context.Context) VolumesLinkMapOutput
}

type VolumesLinkMap map[string]VolumesLinkInput

func (VolumesLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumesLink)(nil)).Elem()
}

func (i VolumesLinkMap) ToVolumesLinkMapOutput() VolumesLinkMapOutput {
	return i.ToVolumesLinkMapOutputWithContext(context.Background())
}

func (i VolumesLinkMap) ToVolumesLinkMapOutputWithContext(ctx context.Context) VolumesLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumesLinkMapOutput)
}

func (i VolumesLinkMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VolumesLink] {
	return pulumix.Output[map[string]*VolumesLink]{
		OutputState: i.ToVolumesLinkMapOutputWithContext(ctx).OutputState,
	}
}

type VolumesLinkOutput struct{ *pulumi.OutputState }

func (VolumesLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumesLink)(nil)).Elem()
}

func (o VolumesLinkOutput) ToVolumesLinkOutput() VolumesLinkOutput {
	return o
}

func (o VolumesLinkOutput) ToVolumesLinkOutputWithContext(ctx context.Context) VolumesLinkOutput {
	return o
}

func (o VolumesLinkOutput) ToOutput(ctx context.Context) pulumix.Output[*VolumesLink] {
	return pulumix.Output[*VolumesLink]{
		OutputState: o.OutputState,
	}
}

func (o VolumesLinkOutput) DeleteOnVmTermination() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VolumesLink) pulumi.BoolPtrOutput { return v.DeleteOnVmTermination }).(pulumi.BoolPtrOutput)
}

// The name of the device. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
func (o VolumesLinkOutput) DeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumesLink) pulumi.StringOutput { return v.DeviceName }).(pulumi.StringOutput)
}

func (o VolumesLinkOutput) ForceUnlink() pulumi.BoolOutput {
	return o.ApplyT(func(v *VolumesLink) pulumi.BoolOutput { return v.ForceUnlink }).(pulumi.BoolOutput)
}

func (o VolumesLinkOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumesLink) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// The state of the attachment of the volume (`attaching` | `detaching` | `attached` | `detached`).
func (o VolumesLinkOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumesLink) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The ID of the VM you want to attach the volume to.
func (o VolumesLinkOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumesLink) pulumi.StringOutput { return v.VmId }).(pulumi.StringOutput)
}

// The ID of the volume you want to attach.
func (o VolumesLinkOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumesLink) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

type VolumesLinkArrayOutput struct{ *pulumi.OutputState }

func (VolumesLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumesLink)(nil)).Elem()
}

func (o VolumesLinkArrayOutput) ToVolumesLinkArrayOutput() VolumesLinkArrayOutput {
	return o
}

func (o VolumesLinkArrayOutput) ToVolumesLinkArrayOutputWithContext(ctx context.Context) VolumesLinkArrayOutput {
	return o
}

func (o VolumesLinkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VolumesLink] {
	return pulumix.Output[[]*VolumesLink]{
		OutputState: o.OutputState,
	}
}

func (o VolumesLinkArrayOutput) Index(i pulumi.IntInput) VolumesLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumesLink {
		return vs[0].([]*VolumesLink)[vs[1].(int)]
	}).(VolumesLinkOutput)
}

type VolumesLinkMapOutput struct{ *pulumi.OutputState }

func (VolumesLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumesLink)(nil)).Elem()
}

func (o VolumesLinkMapOutput) ToVolumesLinkMapOutput() VolumesLinkMapOutput {
	return o
}

func (o VolumesLinkMapOutput) ToVolumesLinkMapOutputWithContext(ctx context.Context) VolumesLinkMapOutput {
	return o
}

func (o VolumesLinkMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VolumesLink] {
	return pulumix.Output[map[string]*VolumesLink]{
		OutputState: o.OutputState,
	}
}

func (o VolumesLinkMapOutput) MapIndex(k pulumi.StringInput) VolumesLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumesLink {
		return vs[0].(map[string]*VolumesLink)[vs[1].(string)]
	}).(VolumesLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumesLinkInput)(nil)).Elem(), &VolumesLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumesLinkArrayInput)(nil)).Elem(), VolumesLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumesLinkMapInput)(nil)).Elem(), VolumesLinkMap{})
	pulumi.RegisterOutputType(VolumesLinkOutput{})
	pulumi.RegisterOutputType(VolumesLinkArrayOutput{})
	pulumi.RegisterOutputType(VolumesLinkMapOutput{})
}
