// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Net peering acceptation.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Net-Peerings.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-netpeering).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewNetPeeringAcceptation(ctx, "net_peering_acceptation01", &outscale.NetPeeringAcceptationArgs{
//				NetPeeringId: pulumi.Any(netPeering01.NetPeeringId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type NetPeeringAcceptation struct {
	pulumi.CustomResourceState

	AccepterNetId pulumi.StringOutput `pulumi:"accepterNetId"`
	// Information about the accepter Net.
	AccepterNets    NetPeeringAcceptationAccepterNetArrayOutput `pulumi:"accepterNets"`
	AccepterOwnerId pulumi.StringOutput                         `pulumi:"accepterOwnerId"`
	// The date and time (UTC) at which the Net peerings expire.
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`
	// The ID of the Net peering you want to accept.
	NetPeeringId       pulumi.StringOutput `pulumi:"netPeeringId"`
	RequestId          pulumi.StringOutput `pulumi:"requestId"`
	SourceNetAccountId pulumi.StringOutput `pulumi:"sourceNetAccountId"`
	SourceNetId        pulumi.StringOutput `pulumi:"sourceNetId"`
	// Information about the source Net.
	SourceNets NetPeeringAcceptationSourceNetArrayOutput `pulumi:"sourceNets"`
	// Information about the state of the Net peering.
	States NetPeeringAcceptationStateTypeArrayOutput `pulumi:"states"`
	// One or more tags associated with the Net peering.
	Tags     NetPeeringAcceptationTagArrayOutput    `pulumi:"tags"`
	Timeouts NetPeeringAcceptationTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewNetPeeringAcceptation registers a new resource with the given unique name, arguments, and options.
func NewNetPeeringAcceptation(ctx *pulumi.Context,
	name string, args *NetPeeringAcceptationArgs, opts ...pulumi.ResourceOption) (*NetPeeringAcceptation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetPeeringId == nil {
		return nil, errors.New("invalid value for required argument 'NetPeeringId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetPeeringAcceptation
	err := ctx.RegisterResource("outscale:index/netPeeringAcceptation:NetPeeringAcceptation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetPeeringAcceptation gets an existing NetPeeringAcceptation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetPeeringAcceptation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetPeeringAcceptationState, opts ...pulumi.ResourceOption) (*NetPeeringAcceptation, error) {
	var resource NetPeeringAcceptation
	err := ctx.ReadResource("outscale:index/netPeeringAcceptation:NetPeeringAcceptation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetPeeringAcceptation resources.
type netPeeringAcceptationState struct {
	AccepterNetId *string `pulumi:"accepterNetId"`
	// Information about the accepter Net.
	AccepterNets    []NetPeeringAcceptationAccepterNet `pulumi:"accepterNets"`
	AccepterOwnerId *string                            `pulumi:"accepterOwnerId"`
	// The date and time (UTC) at which the Net peerings expire.
	ExpirationDate *string `pulumi:"expirationDate"`
	// The ID of the Net peering you want to accept.
	NetPeeringId       *string `pulumi:"netPeeringId"`
	RequestId          *string `pulumi:"requestId"`
	SourceNetAccountId *string `pulumi:"sourceNetAccountId"`
	SourceNetId        *string `pulumi:"sourceNetId"`
	// Information about the source Net.
	SourceNets []NetPeeringAcceptationSourceNet `pulumi:"sourceNets"`
	// Information about the state of the Net peering.
	States []NetPeeringAcceptationStateType `pulumi:"states"`
	// One or more tags associated with the Net peering.
	Tags     []NetPeeringAcceptationTag     `pulumi:"tags"`
	Timeouts *NetPeeringAcceptationTimeouts `pulumi:"timeouts"`
}

type NetPeeringAcceptationState struct {
	AccepterNetId pulumi.StringPtrInput
	// Information about the accepter Net.
	AccepterNets    NetPeeringAcceptationAccepterNetArrayInput
	AccepterOwnerId pulumi.StringPtrInput
	// The date and time (UTC) at which the Net peerings expire.
	ExpirationDate pulumi.StringPtrInput
	// The ID of the Net peering you want to accept.
	NetPeeringId       pulumi.StringPtrInput
	RequestId          pulumi.StringPtrInput
	SourceNetAccountId pulumi.StringPtrInput
	SourceNetId        pulumi.StringPtrInput
	// Information about the source Net.
	SourceNets NetPeeringAcceptationSourceNetArrayInput
	// Information about the state of the Net peering.
	States NetPeeringAcceptationStateTypeArrayInput
	// One or more tags associated with the Net peering.
	Tags     NetPeeringAcceptationTagArrayInput
	Timeouts NetPeeringAcceptationTimeoutsPtrInput
}

func (NetPeeringAcceptationState) ElementType() reflect.Type {
	return reflect.TypeOf((*netPeeringAcceptationState)(nil)).Elem()
}

type netPeeringAcceptationArgs struct {
	// The ID of the Net peering you want to accept.
	NetPeeringId string                         `pulumi:"netPeeringId"`
	Timeouts     *NetPeeringAcceptationTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a NetPeeringAcceptation resource.
type NetPeeringAcceptationArgs struct {
	// The ID of the Net peering you want to accept.
	NetPeeringId pulumi.StringInput
	Timeouts     NetPeeringAcceptationTimeoutsPtrInput
}

func (NetPeeringAcceptationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netPeeringAcceptationArgs)(nil)).Elem()
}

type NetPeeringAcceptationInput interface {
	pulumi.Input

	ToNetPeeringAcceptationOutput() NetPeeringAcceptationOutput
	ToNetPeeringAcceptationOutputWithContext(ctx context.Context) NetPeeringAcceptationOutput
}

func (*NetPeeringAcceptation) ElementType() reflect.Type {
	return reflect.TypeOf((**NetPeeringAcceptation)(nil)).Elem()
}

func (i *NetPeeringAcceptation) ToNetPeeringAcceptationOutput() NetPeeringAcceptationOutput {
	return i.ToNetPeeringAcceptationOutputWithContext(context.Background())
}

func (i *NetPeeringAcceptation) ToNetPeeringAcceptationOutputWithContext(ctx context.Context) NetPeeringAcceptationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetPeeringAcceptationOutput)
}

// NetPeeringAcceptationArrayInput is an input type that accepts NetPeeringAcceptationArray and NetPeeringAcceptationArrayOutput values.
// You can construct a concrete instance of `NetPeeringAcceptationArrayInput` via:
//
//	NetPeeringAcceptationArray{ NetPeeringAcceptationArgs{...} }
type NetPeeringAcceptationArrayInput interface {
	pulumi.Input

	ToNetPeeringAcceptationArrayOutput() NetPeeringAcceptationArrayOutput
	ToNetPeeringAcceptationArrayOutputWithContext(context.Context) NetPeeringAcceptationArrayOutput
}

type NetPeeringAcceptationArray []NetPeeringAcceptationInput

func (NetPeeringAcceptationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetPeeringAcceptation)(nil)).Elem()
}

func (i NetPeeringAcceptationArray) ToNetPeeringAcceptationArrayOutput() NetPeeringAcceptationArrayOutput {
	return i.ToNetPeeringAcceptationArrayOutputWithContext(context.Background())
}

func (i NetPeeringAcceptationArray) ToNetPeeringAcceptationArrayOutputWithContext(ctx context.Context) NetPeeringAcceptationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetPeeringAcceptationArrayOutput)
}

// NetPeeringAcceptationMapInput is an input type that accepts NetPeeringAcceptationMap and NetPeeringAcceptationMapOutput values.
// You can construct a concrete instance of `NetPeeringAcceptationMapInput` via:
//
//	NetPeeringAcceptationMap{ "key": NetPeeringAcceptationArgs{...} }
type NetPeeringAcceptationMapInput interface {
	pulumi.Input

	ToNetPeeringAcceptationMapOutput() NetPeeringAcceptationMapOutput
	ToNetPeeringAcceptationMapOutputWithContext(context.Context) NetPeeringAcceptationMapOutput
}

type NetPeeringAcceptationMap map[string]NetPeeringAcceptationInput

func (NetPeeringAcceptationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetPeeringAcceptation)(nil)).Elem()
}

func (i NetPeeringAcceptationMap) ToNetPeeringAcceptationMapOutput() NetPeeringAcceptationMapOutput {
	return i.ToNetPeeringAcceptationMapOutputWithContext(context.Background())
}

func (i NetPeeringAcceptationMap) ToNetPeeringAcceptationMapOutputWithContext(ctx context.Context) NetPeeringAcceptationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetPeeringAcceptationMapOutput)
}

type NetPeeringAcceptationOutput struct{ *pulumi.OutputState }

func (NetPeeringAcceptationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetPeeringAcceptation)(nil)).Elem()
}

func (o NetPeeringAcceptationOutput) ToNetPeeringAcceptationOutput() NetPeeringAcceptationOutput {
	return o
}

func (o NetPeeringAcceptationOutput) ToNetPeeringAcceptationOutputWithContext(ctx context.Context) NetPeeringAcceptationOutput {
	return o
}

func (o NetPeeringAcceptationOutput) AccepterNetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetPeeringAcceptation) pulumi.StringOutput { return v.AccepterNetId }).(pulumi.StringOutput)
}

// Information about the accepter Net.
func (o NetPeeringAcceptationOutput) AccepterNets() NetPeeringAcceptationAccepterNetArrayOutput {
	return o.ApplyT(func(v *NetPeeringAcceptation) NetPeeringAcceptationAccepterNetArrayOutput { return v.AccepterNets }).(NetPeeringAcceptationAccepterNetArrayOutput)
}

func (o NetPeeringAcceptationOutput) AccepterOwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetPeeringAcceptation) pulumi.StringOutput { return v.AccepterOwnerId }).(pulumi.StringOutput)
}

// The date and time (UTC) at which the Net peerings expire.
func (o NetPeeringAcceptationOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *NetPeeringAcceptation) pulumi.StringOutput { return v.ExpirationDate }).(pulumi.StringOutput)
}

// The ID of the Net peering you want to accept.
func (o NetPeeringAcceptationOutput) NetPeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetPeeringAcceptation) pulumi.StringOutput { return v.NetPeeringId }).(pulumi.StringOutput)
}

func (o NetPeeringAcceptationOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetPeeringAcceptation) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o NetPeeringAcceptationOutput) SourceNetAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetPeeringAcceptation) pulumi.StringOutput { return v.SourceNetAccountId }).(pulumi.StringOutput)
}

func (o NetPeeringAcceptationOutput) SourceNetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetPeeringAcceptation) pulumi.StringOutput { return v.SourceNetId }).(pulumi.StringOutput)
}

// Information about the source Net.
func (o NetPeeringAcceptationOutput) SourceNets() NetPeeringAcceptationSourceNetArrayOutput {
	return o.ApplyT(func(v *NetPeeringAcceptation) NetPeeringAcceptationSourceNetArrayOutput { return v.SourceNets }).(NetPeeringAcceptationSourceNetArrayOutput)
}

// Information about the state of the Net peering.
func (o NetPeeringAcceptationOutput) States() NetPeeringAcceptationStateTypeArrayOutput {
	return o.ApplyT(func(v *NetPeeringAcceptation) NetPeeringAcceptationStateTypeArrayOutput { return v.States }).(NetPeeringAcceptationStateTypeArrayOutput)
}

// One or more tags associated with the Net peering.
func (o NetPeeringAcceptationOutput) Tags() NetPeeringAcceptationTagArrayOutput {
	return o.ApplyT(func(v *NetPeeringAcceptation) NetPeeringAcceptationTagArrayOutput { return v.Tags }).(NetPeeringAcceptationTagArrayOutput)
}

func (o NetPeeringAcceptationOutput) Timeouts() NetPeeringAcceptationTimeoutsPtrOutput {
	return o.ApplyT(func(v *NetPeeringAcceptation) NetPeeringAcceptationTimeoutsPtrOutput { return v.Timeouts }).(NetPeeringAcceptationTimeoutsPtrOutput)
}

type NetPeeringAcceptationArrayOutput struct{ *pulumi.OutputState }

func (NetPeeringAcceptationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetPeeringAcceptation)(nil)).Elem()
}

func (o NetPeeringAcceptationArrayOutput) ToNetPeeringAcceptationArrayOutput() NetPeeringAcceptationArrayOutput {
	return o
}

func (o NetPeeringAcceptationArrayOutput) ToNetPeeringAcceptationArrayOutputWithContext(ctx context.Context) NetPeeringAcceptationArrayOutput {
	return o
}

func (o NetPeeringAcceptationArrayOutput) Index(i pulumi.IntInput) NetPeeringAcceptationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetPeeringAcceptation {
		return vs[0].([]*NetPeeringAcceptation)[vs[1].(int)]
	}).(NetPeeringAcceptationOutput)
}

type NetPeeringAcceptationMapOutput struct{ *pulumi.OutputState }

func (NetPeeringAcceptationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetPeeringAcceptation)(nil)).Elem()
}

func (o NetPeeringAcceptationMapOutput) ToNetPeeringAcceptationMapOutput() NetPeeringAcceptationMapOutput {
	return o
}

func (o NetPeeringAcceptationMapOutput) ToNetPeeringAcceptationMapOutputWithContext(ctx context.Context) NetPeeringAcceptationMapOutput {
	return o
}

func (o NetPeeringAcceptationMapOutput) MapIndex(k pulumi.StringInput) NetPeeringAcceptationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetPeeringAcceptation {
		return vs[0].(map[string]*NetPeeringAcceptation)[vs[1].(string)]
	}).(NetPeeringAcceptationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetPeeringAcceptationInput)(nil)).Elem(), &NetPeeringAcceptation{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetPeeringAcceptationArrayInput)(nil)).Elem(), NetPeeringAcceptationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetPeeringAcceptationMapInput)(nil)).Elem(), NetPeeringAcceptationMap{})
	pulumi.RegisterOutputType(NetPeeringAcceptationOutput{})
	pulumi.RegisterOutputType(NetPeeringAcceptationArrayOutput{})
	pulumi.RegisterOutputType(NetPeeringAcceptationMapOutput{})
}
