// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a load balancer.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-loadbalancer).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.LookupLoadBalancer(ctx, &outscale.LookupLoadBalancerArgs{
//				Filters: []outscale.GetLoadBalancerFilter{
//					{
//						Name: "load_balancer_names",
//						Values: []string{
//							"load_balancer01",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLoadBalancer(ctx *pulumi.Context, args *LookupLoadBalancerArgs, opts ...pulumi.InvokeOption) (*LookupLoadBalancerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLoadBalancerResult
	err := ctx.Invoke("outscale:index/getLoadBalancer:getLoadBalancer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoadBalancer.
type LookupLoadBalancerArgs struct {
	// Information about access logs.
	AccessLogs []GetLoadBalancerAccessLog `pulumi:"accessLogs"`
	// One or more IDs of back-end VMs for the load balancer.
	BackendVmIds []string `pulumi:"backendVmIds"`
	// The DNS name of the load balancer.
	DnsName *string `pulumi:"dnsName"`
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters []GetLoadBalancerFilter `pulumi:"filters"`
	// Information about the health check configuration.
	HealthChecks []GetLoadBalancerHealthCheck `pulumi:"healthChecks"`
	// The listeners for the load balancer.
	Listeners []GetLoadBalancerListener `pulumi:"listeners"`
	// The name of the load balancer.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// The type of load balancer. Valid only for load balancers in a Net.<br />
	// If `loadBalancerType` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
	// If `loadBalancerType` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// The ID of the Net for the load balancer.
	NetId *string `pulumi:"netId"`
	// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The ID of the Subnet in which the load balancer was created.
	Subnets []string `pulumi:"subnets"`
	// One or more tags associated with the load balancer.
	Tags []GetLoadBalancerTag `pulumi:"tags"`
}

// A collection of values returned by getLoadBalancer.
type LookupLoadBalancerResult struct {
	// Information about access logs.
	AccessLogs []GetLoadBalancerAccessLog `pulumi:"accessLogs"`
	// The stickiness policies defined for the load balancer.
	ApplicationStickyCookiePolicies []GetLoadBalancerApplicationStickyCookiePolicy `pulumi:"applicationStickyCookiePolicies"`
	// One or more IDs of back-end VMs for the load balancer.
	BackendVmIds []string `pulumi:"backendVmIds"`
	// The DNS name of the load balancer.
	DnsName string                  `pulumi:"dnsName"`
	Filters []GetLoadBalancerFilter `pulumi:"filters"`
	// Information about the health check configuration.
	HealthChecks []GetLoadBalancerHealthCheck `pulumi:"healthChecks"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The listeners for the load balancer.
	Listeners []GetLoadBalancerListener `pulumi:"listeners"`
	// The name of the load balancer.
	LoadBalancerName string `pulumi:"loadBalancerName"`
	// The policies defined for the load balancer.
	LoadBalancerStickyCookiePolicies []GetLoadBalancerLoadBalancerStickyCookiePolicy `pulumi:"loadBalancerStickyCookiePolicies"`
	// The type of load balancer. Valid only for load balancers in a Net.<br />
	// If `loadBalancerType` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
	// If `loadBalancerType` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
	LoadBalancerType string `pulumi:"loadBalancerType"`
	// The ID of the Net for the load balancer.
	NetId string `pulumi:"netId"`
	// (internet-facing only) The public IP associated with the load balancer.
	PublicIp  string `pulumi:"publicIp"`
	RequestId string `pulumi:"requestId"`
	// Whether secure cookies are enabled for the load balancer.
	SecuredCookies bool `pulumi:"securedCookies"`
	// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
	// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
	SourceSecurityGroups []GetLoadBalancerSourceSecurityGroup `pulumi:"sourceSecurityGroups"`
	// The ID of the Subnet in which the load balancer was created.
	Subnets []string `pulumi:"subnets"`
	// The ID of the Subregion in which the load balancer was created.
	SubregionNames []string `pulumi:"subregionNames"`
	// One or more tags associated with the load balancer.
	Tags []GetLoadBalancerTag `pulumi:"tags"`
}

func LookupLoadBalancerOutput(ctx *pulumi.Context, args LookupLoadBalancerOutputArgs, opts ...pulumi.InvokeOption) LookupLoadBalancerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLoadBalancerResult, error) {
			args := v.(LookupLoadBalancerArgs)
			r, err := LookupLoadBalancer(ctx, &args, opts...)
			var s LookupLoadBalancerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLoadBalancerResultOutput)
}

// A collection of arguments for invoking getLoadBalancer.
type LookupLoadBalancerOutputArgs struct {
	// Information about access logs.
	AccessLogs GetLoadBalancerAccessLogArrayInput `pulumi:"accessLogs"`
	// One or more IDs of back-end VMs for the load balancer.
	BackendVmIds pulumi.StringArrayInput `pulumi:"backendVmIds"`
	// The DNS name of the load balancer.
	DnsName pulumi.StringPtrInput `pulumi:"dnsName"`
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters GetLoadBalancerFilterArrayInput `pulumi:"filters"`
	// Information about the health check configuration.
	HealthChecks GetLoadBalancerHealthCheckArrayInput `pulumi:"healthChecks"`
	// The listeners for the load balancer.
	Listeners GetLoadBalancerListenerArrayInput `pulumi:"listeners"`
	// The name of the load balancer.
	LoadBalancerName pulumi.StringPtrInput `pulumi:"loadBalancerName"`
	// The type of load balancer. Valid only for load balancers in a Net.<br />
	// If `loadBalancerType` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
	// If `loadBalancerType` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
	LoadBalancerType pulumi.StringPtrInput `pulumi:"loadBalancerType"`
	// The ID of the Net for the load balancer.
	NetId pulumi.StringPtrInput `pulumi:"netId"`
	// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
	SecurityGroups pulumi.StringArrayInput `pulumi:"securityGroups"`
	// The ID of the Subnet in which the load balancer was created.
	Subnets pulumi.StringArrayInput `pulumi:"subnets"`
	// One or more tags associated with the load balancer.
	Tags GetLoadBalancerTagArrayInput `pulumi:"tags"`
}

func (LookupLoadBalancerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerArgs)(nil)).Elem()
}

// A collection of values returned by getLoadBalancer.
type LookupLoadBalancerResultOutput struct{ *pulumi.OutputState }

func (LookupLoadBalancerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerResult)(nil)).Elem()
}

func (o LookupLoadBalancerResultOutput) ToLookupLoadBalancerResultOutput() LookupLoadBalancerResultOutput {
	return o
}

func (o LookupLoadBalancerResultOutput) ToLookupLoadBalancerResultOutputWithContext(ctx context.Context) LookupLoadBalancerResultOutput {
	return o
}

// Information about access logs.
func (o LookupLoadBalancerResultOutput) AccessLogs() GetLoadBalancerAccessLogArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []GetLoadBalancerAccessLog { return v.AccessLogs }).(GetLoadBalancerAccessLogArrayOutput)
}

// The stickiness policies defined for the load balancer.
func (o LookupLoadBalancerResultOutput) ApplicationStickyCookiePolicies() GetLoadBalancerApplicationStickyCookiePolicyArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []GetLoadBalancerApplicationStickyCookiePolicy {
		return v.ApplicationStickyCookiePolicies
	}).(GetLoadBalancerApplicationStickyCookiePolicyArrayOutput)
}

// One or more IDs of back-end VMs for the load balancer.
func (o LookupLoadBalancerResultOutput) BackendVmIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []string { return v.BackendVmIds }).(pulumi.StringArrayOutput)
}

// The DNS name of the load balancer.
func (o LookupLoadBalancerResultOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.DnsName }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerResultOutput) Filters() GetLoadBalancerFilterArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []GetLoadBalancerFilter { return v.Filters }).(GetLoadBalancerFilterArrayOutput)
}

// Information about the health check configuration.
func (o LookupLoadBalancerResultOutput) HealthChecks() GetLoadBalancerHealthCheckArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []GetLoadBalancerHealthCheck { return v.HealthChecks }).(GetLoadBalancerHealthCheckArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLoadBalancerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Id }).(pulumi.StringOutput)
}

// The listeners for the load balancer.
func (o LookupLoadBalancerResultOutput) Listeners() GetLoadBalancerListenerArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []GetLoadBalancerListener { return v.Listeners }).(GetLoadBalancerListenerArrayOutput)
}

// The name of the load balancer.
func (o LookupLoadBalancerResultOutput) LoadBalancerName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.LoadBalancerName }).(pulumi.StringOutput)
}

// The policies defined for the load balancer.
func (o LookupLoadBalancerResultOutput) LoadBalancerStickyCookiePolicies() GetLoadBalancerLoadBalancerStickyCookiePolicyArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []GetLoadBalancerLoadBalancerStickyCookiePolicy {
		return v.LoadBalancerStickyCookiePolicies
	}).(GetLoadBalancerLoadBalancerStickyCookiePolicyArrayOutput)
}

// The type of load balancer. Valid only for load balancers in a Net.<br />
// If `loadBalancerType` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
// If `loadBalancerType` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
func (o LookupLoadBalancerResultOutput) LoadBalancerType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.LoadBalancerType }).(pulumi.StringOutput)
}

// The ID of the Net for the load balancer.
func (o LookupLoadBalancerResultOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.NetId }).(pulumi.StringOutput)
}

// (internet-facing only) The public IP associated with the load balancer.
func (o LookupLoadBalancerResultOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.PublicIp }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerResultOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.RequestId }).(pulumi.StringOutput)
}

// Whether secure cookies are enabled for the load balancer.
func (o LookupLoadBalancerResultOutput) SecuredCookies() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) bool { return v.SecuredCookies }).(pulumi.BoolOutput)
}

// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
func (o LookupLoadBalancerResultOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []string { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
func (o LookupLoadBalancerResultOutput) SourceSecurityGroups() GetLoadBalancerSourceSecurityGroupArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []GetLoadBalancerSourceSecurityGroup { return v.SourceSecurityGroups }).(GetLoadBalancerSourceSecurityGroupArrayOutput)
}

// The ID of the Subnet in which the load balancer was created.
func (o LookupLoadBalancerResultOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []string { return v.Subnets }).(pulumi.StringArrayOutput)
}

// The ID of the Subregion in which the load balancer was created.
func (o LookupLoadBalancerResultOutput) SubregionNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []string { return v.SubregionNames }).(pulumi.StringArrayOutput)
}

// One or more tags associated with the load balancer.
func (o LookupLoadBalancerResultOutput) Tags() GetLoadBalancerTagArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) []GetLoadBalancerTag { return v.Tags }).(GetLoadBalancerTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoadBalancerResultOutput{})
}
