// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a load balancer.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-loadbalancer).
//
// ## Example Usage
//
// ### Create a load balancer in the public Cloud
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewLoadBalancer(ctx, "load_balancer01", &outscale.LoadBalancerArgs{
//				LoadBalancerName: pulumi.String("terraform-public-load-balancer"),
//				SubregionNames: pulumi.StringArray{
//					pulumi.Sprintf("%va", region),
//				},
//				Listeners: outscale.LoadBalancerListenerArray{
//					&outscale.LoadBalancerListenerArgs{
//						BackendPort:          pulumi.Int(8080),
//						BackendProtocol:      pulumi.String("HTTP"),
//						LoadBalancerProtocol: pulumi.String("HTTP"),
//						LoadBalancerPort:     pulumi.Int(8080),
//					},
//				},
//				Tags: outscale.LoadBalancerTagArray{
//					&outscale.LoadBalancerTagArgs{
//						Key:   pulumi.String("name"),
//						Value: pulumi.String("terraform-public-load-balancer"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a load balancer in a Net
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net01, err := outscale.NewNet(ctx, "net01", &outscale.NetArgs{
//				IpRange: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet01, err := outscale.NewSubnet(ctx, "subnet01", &outscale.SubnetArgs{
//				NetId:   net01.NetId,
//				IpRange: pulumi.String("10.0.0.0/24"),
//				Tags: outscale.SubnetTagArray{
//					&outscale.SubnetTagArgs{
//						Key:   pulumi.String("Name"),
//						Value: pulumi.String("terraform-subnet-for-internal-load-balancer"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			securityGroup01, err := outscale.NewSecurityGroup(ctx, "security_group01", &outscale.SecurityGroupArgs{
//				Description:       pulumi.String("Terraform security group for internal load balancer"),
//				SecurityGroupName: pulumi.String("terraform-security-group-for-internal-load-balancer"),
//				NetId:             net01.NetId,
//				Tags: outscale.SecurityGroupTagArray{
//					&outscale.SecurityGroupTagArgs{
//						Key:   pulumi.String("Name"),
//						Value: pulumi.String("terraform-security-group-for-internal-load-balancer"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewLoadBalancer(ctx, "load_balancer02", &outscale.LoadBalancerArgs{
//				LoadBalancerName: pulumi.String("terraform-private-load-balancer"),
//				Listeners: outscale.LoadBalancerListenerArray{
//					&outscale.LoadBalancerListenerArgs{
//						BackendPort:          pulumi.Int(80),
//						BackendProtocol:      pulumi.String("TCP"),
//						LoadBalancerProtocol: pulumi.String("TCP"),
//						LoadBalancerPort:     pulumi.Int(80),
//					},
//				},
//				Subnets: pulumi.StringArray{
//					subnet01.SubnetId,
//				},
//				SecurityGroups: pulumi.StringArray{
//					securityGroup01.SecurityGroupId,
//				},
//				LoadBalancerType: pulumi.String("internal"),
//				Tags: outscale.LoadBalancerTagArray{
//					&outscale.LoadBalancerTagArgs{
//						Key:   pulumi.String("name"),
//						Value: pulumi.String("terraform-private-load-balancer"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create an internet-facing load balancer in a Net
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net02, err := outscale.NewNet(ctx, "net02", &outscale.NetArgs{
//				IpRange: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet02, err := outscale.NewSubnet(ctx, "subnet02", &outscale.SubnetArgs{
//				NetId:   net02.NetId,
//				IpRange: pulumi.String("10.0.0.0/24"),
//				Tags: outscale.SubnetTagArray{
//					&outscale.SubnetTagArgs{
//						Key:   pulumi.String("Name"),
//						Value: pulumi.String("terraform-security-group-for-load-balancer"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			internetService01, err := outscale.NewInternetService(ctx, "internet_service01", nil, pulumi.DependsOn([]pulumi.Resource{
//				net02,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewInternetServiceLink(ctx, "internet_service_link01", &outscale.InternetServiceLinkArgs{
//				InternetServiceId: internetService01.InternetServiceId,
//				NetId:             net02.NetId,
//			})
//			if err != nil {
//				return err
//			}
//			routeTable01, err := outscale.NewRouteTable(ctx, "route_table01", &outscale.RouteTableArgs{
//				NetId: net02.NetId,
//				Tags: outscale.RouteTableTagArray{
//					&outscale.RouteTableTagArgs{
//						Key:   pulumi.String("name"),
//						Value: pulumi.String("terraform-route-table-for-load-balancer"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			route01, err := outscale.NewRoute(ctx, "route01", &outscale.RouteArgs{
//				GatewayId:          internetService01.ID(),
//				DestinationIpRange: pulumi.String("10.0.0.0/0"),
//				RouteTableId:       routeTable01.RouteTableId,
//			})
//			if err != nil {
//				return err
//			}
//			routeTableLink01, err := outscale.NewRouteTableLink(ctx, "route_table_link01", &outscale.RouteTableLinkArgs{
//				RouteTableId: routeTable01.RouteTableId,
//				SubnetId:     subnet02.SubnetId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewLoadBalancer(ctx, "load_balancer03", &outscale.LoadBalancerArgs{
//				LoadBalancerName: pulumi.String("terraform-internet-private-lb"),
//				Listeners: outscale.LoadBalancerListenerArray{
//					&outscale.LoadBalancerListenerArgs{
//						BackendPort:          pulumi.Int(80),
//						BackendProtocol:      pulumi.String("TCP"),
//						LoadBalancerProtocol: pulumi.String("TCP"),
//						LoadBalancerPort:     pulumi.Int(80),
//					},
//					&outscale.LoadBalancerListenerArgs{
//						BackendPort:          pulumi.Int(8080),
//						BackendProtocol:      pulumi.String("HTTP"),
//						LoadBalancerProtocol: pulumi.String("HTTP"),
//						LoadBalancerPort:     pulumi.Int(8080),
//					},
//				},
//				Subnets: pulumi.StringArray{
//					subnet02.SubnetId,
//				},
//				LoadBalancerType: pulumi.String("internet-facing"),
//				PublicIp:         pulumi.String("192.0.2.0"),
//				Tags: outscale.LoadBalancerTagArray{
//					&outscale.LoadBalancerTagArgs{
//						Key:   pulumi.String("name"),
//						Value: pulumi.String("terraform-internet-private-lb"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				route01,
//				routeTableLink01,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A load balancer can be imported using its name. For example:
//
// console
//
// ```sh
// $ pulumi import outscale:index/loadBalancer:LoadBalancer ImportedLbu Name-of-the-Lbu
// ```
type LoadBalancer struct {
	pulumi.CustomResourceState

	// Information about access logs.
	AccessLogs LoadBalancerAccessLogArrayOutput `pulumi:"accessLogs"`
	// The stickiness policies defined for the load balancer.
	ApplicationStickyCookiePolicies LoadBalancerApplicationStickyCookiePolicyArrayOutput `pulumi:"applicationStickyCookiePolicies"`
	// One or more public IPs of backend VMs.
	BackendIps pulumi.StringArrayOutput `pulumi:"backendIps"`
	// One or more IDs of backend VMs for the load balancer.
	BackendVmIds pulumi.StringArrayOutput `pulumi:"backendVmIds"`
	// The DNS name of the load balancer.
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// Information about the health check configuration.
	HealthChecks LoadBalancerHealthCheckArrayOutput `pulumi:"healthChecks"`
	// One or more listeners to create.
	Listeners LoadBalancerListenerArrayOutput `pulumi:"listeners"`
	// The unique name of the load balancer, with a maximum length of 32 alphanumeric characters and dashes (`-`). This name must not start or end with a dash.
	LoadBalancerName pulumi.StringOutput `pulumi:"loadBalancerName"`
	// The policies defined for the load balancer.
	LoadBalancerStickyCookiePolicies LoadBalancerLoadBalancerStickyCookiePolicyArrayOutput `pulumi:"loadBalancerStickyCookiePolicies"`
	// The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
	LoadBalancerType pulumi.StringOutput `pulumi:"loadBalancerType"`
	// The ID of the Net for the load balancer.
	NetId pulumi.StringOutput `pulumi:"netId"`
	// (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
	PublicIp  pulumi.StringOutput `pulumi:"publicIp"`
	RequestId pulumi.StringOutput `pulumi:"requestId"`
	// Whether secure cookies are enabled for the load balancer.
	SecuredCookies pulumi.BoolOutput `pulumi:"securedCookies"`
	// (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
	// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
	SourceSecurityGroups LoadBalancerSourceSecurityGroupArrayOutput `pulumi:"sourceSecurityGroups"`
	// (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
	Subnets pulumi.StringArrayOutput `pulumi:"subnets"`
	// (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
	SubregionNames pulumi.StringArrayOutput `pulumi:"subregionNames"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags LoadBalancerTagArrayOutput `pulumi:"tags"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Listeners == nil {
		return nil, errors.New("invalid value for required argument 'Listeners'")
	}
	if args.LoadBalancerName == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancer
	err := ctx.RegisterResource("outscale:index/loadBalancer:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("outscale:index/loadBalancer:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
	// Information about access logs.
	AccessLogs []LoadBalancerAccessLog `pulumi:"accessLogs"`
	// The stickiness policies defined for the load balancer.
	ApplicationStickyCookiePolicies []LoadBalancerApplicationStickyCookiePolicy `pulumi:"applicationStickyCookiePolicies"`
	// One or more public IPs of backend VMs.
	BackendIps []string `pulumi:"backendIps"`
	// One or more IDs of backend VMs for the load balancer.
	BackendVmIds []string `pulumi:"backendVmIds"`
	// The DNS name of the load balancer.
	DnsName *string `pulumi:"dnsName"`
	// Information about the health check configuration.
	HealthChecks []LoadBalancerHealthCheck `pulumi:"healthChecks"`
	// One or more listeners to create.
	Listeners []LoadBalancerListener `pulumi:"listeners"`
	// The unique name of the load balancer, with a maximum length of 32 alphanumeric characters and dashes (`-`). This name must not start or end with a dash.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// The policies defined for the load balancer.
	LoadBalancerStickyCookiePolicies []LoadBalancerLoadBalancerStickyCookiePolicy `pulumi:"loadBalancerStickyCookiePolicies"`
	// The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// The ID of the Net for the load balancer.
	NetId *string `pulumi:"netId"`
	// (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
	PublicIp  *string `pulumi:"publicIp"`
	RequestId *string `pulumi:"requestId"`
	// Whether secure cookies are enabled for the load balancer.
	SecuredCookies *bool `pulumi:"securedCookies"`
	// (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
	// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
	SourceSecurityGroups []LoadBalancerSourceSecurityGroup `pulumi:"sourceSecurityGroups"`
	// (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
	Subnets []string `pulumi:"subnets"`
	// (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
	SubregionNames []string `pulumi:"subregionNames"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []LoadBalancerTag `pulumi:"tags"`
}

type LoadBalancerState struct {
	// Information about access logs.
	AccessLogs LoadBalancerAccessLogArrayInput
	// The stickiness policies defined for the load balancer.
	ApplicationStickyCookiePolicies LoadBalancerApplicationStickyCookiePolicyArrayInput
	// One or more public IPs of backend VMs.
	BackendIps pulumi.StringArrayInput
	// One or more IDs of backend VMs for the load balancer.
	BackendVmIds pulumi.StringArrayInput
	// The DNS name of the load balancer.
	DnsName pulumi.StringPtrInput
	// Information about the health check configuration.
	HealthChecks LoadBalancerHealthCheckArrayInput
	// One or more listeners to create.
	Listeners LoadBalancerListenerArrayInput
	// The unique name of the load balancer, with a maximum length of 32 alphanumeric characters and dashes (`-`). This name must not start or end with a dash.
	LoadBalancerName pulumi.StringPtrInput
	// The policies defined for the load balancer.
	LoadBalancerStickyCookiePolicies LoadBalancerLoadBalancerStickyCookiePolicyArrayInput
	// The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
	LoadBalancerType pulumi.StringPtrInput
	// The ID of the Net for the load balancer.
	NetId pulumi.StringPtrInput
	// (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
	PublicIp  pulumi.StringPtrInput
	RequestId pulumi.StringPtrInput
	// Whether secure cookies are enabled for the load balancer.
	SecuredCookies pulumi.BoolPtrInput
	// (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
	SecurityGroups pulumi.StringArrayInput
	// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
	// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
	SourceSecurityGroups LoadBalancerSourceSecurityGroupArrayInput
	// (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
	Subnets pulumi.StringArrayInput
	// (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
	SubregionNames pulumi.StringArrayInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags LoadBalancerTagArrayInput
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// Information about access logs.
	AccessLogs []LoadBalancerAccessLog `pulumi:"accessLogs"`
	// One or more listeners to create.
	Listeners []LoadBalancerListener `pulumi:"listeners"`
	// The unique name of the load balancer, with a maximum length of 32 alphanumeric characters and dashes (`-`). This name must not start or end with a dash.
	LoadBalancerName string `pulumi:"loadBalancerName"`
	// The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
	PublicIp *string `pulumi:"publicIp"`
	// Whether secure cookies are enabled for the load balancer.
	SecuredCookies *bool `pulumi:"securedCookies"`
	// (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
	SecurityGroups []string `pulumi:"securityGroups"`
	// (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
	Subnets []string `pulumi:"subnets"`
	// (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
	SubregionNames []string `pulumi:"subregionNames"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []LoadBalancerTag `pulumi:"tags"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// Information about access logs.
	AccessLogs LoadBalancerAccessLogArrayInput
	// One or more listeners to create.
	Listeners LoadBalancerListenerArrayInput
	// The unique name of the load balancer, with a maximum length of 32 alphanumeric characters and dashes (`-`). This name must not start or end with a dash.
	LoadBalancerName pulumi.StringInput
	// The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
	LoadBalancerType pulumi.StringPtrInput
	// (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
	PublicIp pulumi.StringPtrInput
	// Whether secure cookies are enabled for the load balancer.
	SecuredCookies pulumi.BoolPtrInput
	// (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
	SecurityGroups pulumi.StringArrayInput
	// (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
	Subnets pulumi.StringArrayInput
	// (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
	SubregionNames pulumi.StringArrayInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags LoadBalancerTagArrayInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

type LoadBalancerInput interface {
	pulumi.Input

	ToLoadBalancerOutput() LoadBalancerOutput
	ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput
}

func (*LoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (i *LoadBalancer) ToLoadBalancerOutput() LoadBalancerOutput {
	return i.ToLoadBalancerOutputWithContext(context.Background())
}

func (i *LoadBalancer) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOutput)
}

// LoadBalancerArrayInput is an input type that accepts LoadBalancerArray and LoadBalancerArrayOutput values.
// You can construct a concrete instance of `LoadBalancerArrayInput` via:
//
//	LoadBalancerArray{ LoadBalancerArgs{...} }
type LoadBalancerArrayInput interface {
	pulumi.Input

	ToLoadBalancerArrayOutput() LoadBalancerArrayOutput
	ToLoadBalancerArrayOutputWithContext(context.Context) LoadBalancerArrayOutput
}

type LoadBalancerArray []LoadBalancerInput

func (LoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return i.ToLoadBalancerArrayOutputWithContext(context.Background())
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerArrayOutput)
}

// LoadBalancerMapInput is an input type that accepts LoadBalancerMap and LoadBalancerMapOutput values.
// You can construct a concrete instance of `LoadBalancerMapInput` via:
//
//	LoadBalancerMap{ "key": LoadBalancerArgs{...} }
type LoadBalancerMapInput interface {
	pulumi.Input

	ToLoadBalancerMapOutput() LoadBalancerMapOutput
	ToLoadBalancerMapOutputWithContext(context.Context) LoadBalancerMapOutput
}

type LoadBalancerMap map[string]LoadBalancerInput

func (LoadBalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerMap) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return i.ToLoadBalancerMapOutputWithContext(context.Background())
}

func (i LoadBalancerMap) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerMapOutput)
}

type LoadBalancerOutput struct{ *pulumi.OutputState }

func (LoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerOutput) ToLoadBalancerOutput() LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return o
}

// Information about access logs.
func (o LoadBalancerOutput) AccessLogs() LoadBalancerAccessLogArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerAccessLogArrayOutput { return v.AccessLogs }).(LoadBalancerAccessLogArrayOutput)
}

// The stickiness policies defined for the load balancer.
func (o LoadBalancerOutput) ApplicationStickyCookiePolicies() LoadBalancerApplicationStickyCookiePolicyArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerApplicationStickyCookiePolicyArrayOutput {
		return v.ApplicationStickyCookiePolicies
	}).(LoadBalancerApplicationStickyCookiePolicyArrayOutput)
}

// One or more public IPs of backend VMs.
func (o LoadBalancerOutput) BackendIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.BackendIps }).(pulumi.StringArrayOutput)
}

// One or more IDs of backend VMs for the load balancer.
func (o LoadBalancerOutput) BackendVmIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.BackendVmIds }).(pulumi.StringArrayOutput)
}

// The DNS name of the load balancer.
func (o LoadBalancerOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

// Information about the health check configuration.
func (o LoadBalancerOutput) HealthChecks() LoadBalancerHealthCheckArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerHealthCheckArrayOutput { return v.HealthChecks }).(LoadBalancerHealthCheckArrayOutput)
}

// One or more listeners to create.
func (o LoadBalancerOutput) Listeners() LoadBalancerListenerArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerListenerArrayOutput { return v.Listeners }).(LoadBalancerListenerArrayOutput)
}

// The unique name of the load balancer, with a maximum length of 32 alphanumeric characters and dashes (`-`). This name must not start or end with a dash.
func (o LoadBalancerOutput) LoadBalancerName() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.LoadBalancerName }).(pulumi.StringOutput)
}

// The policies defined for the load balancer.
func (o LoadBalancerOutput) LoadBalancerStickyCookiePolicies() LoadBalancerLoadBalancerStickyCookiePolicyArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerLoadBalancerStickyCookiePolicyArrayOutput {
		return v.LoadBalancerStickyCookiePolicies
	}).(LoadBalancerLoadBalancerStickyCookiePolicyArrayOutput)
}

// The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
func (o LoadBalancerOutput) LoadBalancerType() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.LoadBalancerType }).(pulumi.StringOutput)
}

// The ID of the Net for the load balancer.
func (o LoadBalancerOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.NetId }).(pulumi.StringOutput)
}

// (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
func (o LoadBalancerOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

func (o LoadBalancerOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// Whether secure cookies are enabled for the load balancer.
func (o LoadBalancerOutput) SecuredCookies() pulumi.BoolOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.BoolOutput { return v.SecuredCookies }).(pulumi.BoolOutput)
}

// (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
func (o LoadBalancerOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
func (o LoadBalancerOutput) SourceSecurityGroups() LoadBalancerSourceSecurityGroupArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerSourceSecurityGroupArrayOutput { return v.SourceSecurityGroups }).(LoadBalancerSourceSecurityGroupArrayOutput)
}

// (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
func (o LoadBalancerOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.Subnets }).(pulumi.StringArrayOutput)
}

// (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
func (o LoadBalancerOutput) SubregionNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.SubregionNames }).(pulumi.StringArrayOutput)
}

// A tag to add to this resource. You can specify this argument several times.
func (o LoadBalancerOutput) Tags() LoadBalancerTagArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerTagArrayOutput { return v.Tags }).(LoadBalancerTagArrayOutput)
}

type LoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) Index(i pulumi.IntInput) LoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].([]*LoadBalancer)[vs[1].(int)]
	}).(LoadBalancerOutput)
}

type LoadBalancerMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].(map[string]*LoadBalancer)[vs[1].(string)]
	}).(LoadBalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerInput)(nil)).Elem(), &LoadBalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerArrayInput)(nil)).Elem(), LoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerMapInput)(nil)).Elem(), LoadBalancerMap{})
	pulumi.RegisterOutputType(LoadBalancerOutput{})
	pulumi.RegisterOutputType(LoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerMapOutput{})
}
