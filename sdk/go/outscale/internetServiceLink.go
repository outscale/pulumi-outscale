// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Internet service link.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Internet-Services.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-internetservice).
//
// ## Example Usage
//
// ### Required resources
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewNet(ctx, "net01", &outscale.NetArgs{
//				IpRange: pulumi.String("10.0.0.0/18"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewInternetService(ctx, "internet_service01", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Link an Internet service to a Net
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewInternetServiceLink(ctx, "internet_service_link01", &outscale.InternetServiceLinkArgs{
//				InternetServiceId: pulumi.Any(internetService01.InternetServiceId),
//				NetId:             pulumi.Any(net01.NetId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An internet service link can be imported using the internet service ID. For example:
//
// console
//
// ```sh
// $ pulumi import outscale:index/internetServiceLink:InternetServiceLink ImportedInternetServiceLink igw-87654321
// ```
type InternetServiceLink struct {
	pulumi.CustomResourceState

	// The ID of the internet service you want to attach.
	InternetServiceId pulumi.StringOutput `pulumi:"internetServiceId"`
	// The ID of the Net to which you want to attach the internet service.
	NetId     pulumi.StringOutput `pulumi:"netId"`
	RequestId pulumi.StringOutput `pulumi:"requestId"`
	// The state of the attachment of the Internet service to the Net (always `available`).
	State pulumi.StringOutput `pulumi:"state"`
	// One or more tags associated with the Internet service.
	Tags     InternetServiceLinkTagArrayOutput    `pulumi:"tags"`
	Timeouts InternetServiceLinkTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewInternetServiceLink registers a new resource with the given unique name, arguments, and options.
func NewInternetServiceLink(ctx *pulumi.Context,
	name string, args *InternetServiceLinkArgs, opts ...pulumi.ResourceOption) (*InternetServiceLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InternetServiceId == nil {
		return nil, errors.New("invalid value for required argument 'InternetServiceId'")
	}
	if args.NetId == nil {
		return nil, errors.New("invalid value for required argument 'NetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InternetServiceLink
	err := ctx.RegisterResource("outscale:index/internetServiceLink:InternetServiceLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInternetServiceLink gets an existing InternetServiceLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInternetServiceLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InternetServiceLinkState, opts ...pulumi.ResourceOption) (*InternetServiceLink, error) {
	var resource InternetServiceLink
	err := ctx.ReadResource("outscale:index/internetServiceLink:InternetServiceLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InternetServiceLink resources.
type internetServiceLinkState struct {
	// The ID of the internet service you want to attach.
	InternetServiceId *string `pulumi:"internetServiceId"`
	// The ID of the Net to which you want to attach the internet service.
	NetId     *string `pulumi:"netId"`
	RequestId *string `pulumi:"requestId"`
	// The state of the attachment of the Internet service to the Net (always `available`).
	State *string `pulumi:"state"`
	// One or more tags associated with the Internet service.
	Tags     []InternetServiceLinkTag     `pulumi:"tags"`
	Timeouts *InternetServiceLinkTimeouts `pulumi:"timeouts"`
}

type InternetServiceLinkState struct {
	// The ID of the internet service you want to attach.
	InternetServiceId pulumi.StringPtrInput
	// The ID of the Net to which you want to attach the internet service.
	NetId     pulumi.StringPtrInput
	RequestId pulumi.StringPtrInput
	// The state of the attachment of the Internet service to the Net (always `available`).
	State pulumi.StringPtrInput
	// One or more tags associated with the Internet service.
	Tags     InternetServiceLinkTagArrayInput
	Timeouts InternetServiceLinkTimeoutsPtrInput
}

func (InternetServiceLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*internetServiceLinkState)(nil)).Elem()
}

type internetServiceLinkArgs struct {
	// The ID of the internet service you want to attach.
	InternetServiceId string `pulumi:"internetServiceId"`
	// The ID of the Net to which you want to attach the internet service.
	NetId    string                       `pulumi:"netId"`
	Timeouts *InternetServiceLinkTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a InternetServiceLink resource.
type InternetServiceLinkArgs struct {
	// The ID of the internet service you want to attach.
	InternetServiceId pulumi.StringInput
	// The ID of the Net to which you want to attach the internet service.
	NetId    pulumi.StringInput
	Timeouts InternetServiceLinkTimeoutsPtrInput
}

func (InternetServiceLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*internetServiceLinkArgs)(nil)).Elem()
}

type InternetServiceLinkInput interface {
	pulumi.Input

	ToInternetServiceLinkOutput() InternetServiceLinkOutput
	ToInternetServiceLinkOutputWithContext(ctx context.Context) InternetServiceLinkOutput
}

func (*InternetServiceLink) ElementType() reflect.Type {
	return reflect.TypeOf((**InternetServiceLink)(nil)).Elem()
}

func (i *InternetServiceLink) ToInternetServiceLinkOutput() InternetServiceLinkOutput {
	return i.ToInternetServiceLinkOutputWithContext(context.Background())
}

func (i *InternetServiceLink) ToInternetServiceLinkOutputWithContext(ctx context.Context) InternetServiceLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetServiceLinkOutput)
}

// InternetServiceLinkArrayInput is an input type that accepts InternetServiceLinkArray and InternetServiceLinkArrayOutput values.
// You can construct a concrete instance of `InternetServiceLinkArrayInput` via:
//
//	InternetServiceLinkArray{ InternetServiceLinkArgs{...} }
type InternetServiceLinkArrayInput interface {
	pulumi.Input

	ToInternetServiceLinkArrayOutput() InternetServiceLinkArrayOutput
	ToInternetServiceLinkArrayOutputWithContext(context.Context) InternetServiceLinkArrayOutput
}

type InternetServiceLinkArray []InternetServiceLinkInput

func (InternetServiceLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InternetServiceLink)(nil)).Elem()
}

func (i InternetServiceLinkArray) ToInternetServiceLinkArrayOutput() InternetServiceLinkArrayOutput {
	return i.ToInternetServiceLinkArrayOutputWithContext(context.Background())
}

func (i InternetServiceLinkArray) ToInternetServiceLinkArrayOutputWithContext(ctx context.Context) InternetServiceLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetServiceLinkArrayOutput)
}

// InternetServiceLinkMapInput is an input type that accepts InternetServiceLinkMap and InternetServiceLinkMapOutput values.
// You can construct a concrete instance of `InternetServiceLinkMapInput` via:
//
//	InternetServiceLinkMap{ "key": InternetServiceLinkArgs{...} }
type InternetServiceLinkMapInput interface {
	pulumi.Input

	ToInternetServiceLinkMapOutput() InternetServiceLinkMapOutput
	ToInternetServiceLinkMapOutputWithContext(context.Context) InternetServiceLinkMapOutput
}

type InternetServiceLinkMap map[string]InternetServiceLinkInput

func (InternetServiceLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InternetServiceLink)(nil)).Elem()
}

func (i InternetServiceLinkMap) ToInternetServiceLinkMapOutput() InternetServiceLinkMapOutput {
	return i.ToInternetServiceLinkMapOutputWithContext(context.Background())
}

func (i InternetServiceLinkMap) ToInternetServiceLinkMapOutputWithContext(ctx context.Context) InternetServiceLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InternetServiceLinkMapOutput)
}

type InternetServiceLinkOutput struct{ *pulumi.OutputState }

func (InternetServiceLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InternetServiceLink)(nil)).Elem()
}

func (o InternetServiceLinkOutput) ToInternetServiceLinkOutput() InternetServiceLinkOutput {
	return o
}

func (o InternetServiceLinkOutput) ToInternetServiceLinkOutputWithContext(ctx context.Context) InternetServiceLinkOutput {
	return o
}

// The ID of the internet service you want to attach.
func (o InternetServiceLinkOutput) InternetServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InternetServiceLink) pulumi.StringOutput { return v.InternetServiceId }).(pulumi.StringOutput)
}

// The ID of the Net to which you want to attach the internet service.
func (o InternetServiceLinkOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v *InternetServiceLink) pulumi.StringOutput { return v.NetId }).(pulumi.StringOutput)
}

func (o InternetServiceLinkOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *InternetServiceLink) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// The state of the attachment of the Internet service to the Net (always `available`).
func (o InternetServiceLinkOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *InternetServiceLink) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// One or more tags associated with the Internet service.
func (o InternetServiceLinkOutput) Tags() InternetServiceLinkTagArrayOutput {
	return o.ApplyT(func(v *InternetServiceLink) InternetServiceLinkTagArrayOutput { return v.Tags }).(InternetServiceLinkTagArrayOutput)
}

func (o InternetServiceLinkOutput) Timeouts() InternetServiceLinkTimeoutsPtrOutput {
	return o.ApplyT(func(v *InternetServiceLink) InternetServiceLinkTimeoutsPtrOutput { return v.Timeouts }).(InternetServiceLinkTimeoutsPtrOutput)
}

type InternetServiceLinkArrayOutput struct{ *pulumi.OutputState }

func (InternetServiceLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InternetServiceLink)(nil)).Elem()
}

func (o InternetServiceLinkArrayOutput) ToInternetServiceLinkArrayOutput() InternetServiceLinkArrayOutput {
	return o
}

func (o InternetServiceLinkArrayOutput) ToInternetServiceLinkArrayOutputWithContext(ctx context.Context) InternetServiceLinkArrayOutput {
	return o
}

func (o InternetServiceLinkArrayOutput) Index(i pulumi.IntInput) InternetServiceLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InternetServiceLink {
		return vs[0].([]*InternetServiceLink)[vs[1].(int)]
	}).(InternetServiceLinkOutput)
}

type InternetServiceLinkMapOutput struct{ *pulumi.OutputState }

func (InternetServiceLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InternetServiceLink)(nil)).Elem()
}

func (o InternetServiceLinkMapOutput) ToInternetServiceLinkMapOutput() InternetServiceLinkMapOutput {
	return o
}

func (o InternetServiceLinkMapOutput) ToInternetServiceLinkMapOutputWithContext(ctx context.Context) InternetServiceLinkMapOutput {
	return o
}

func (o InternetServiceLinkMapOutput) MapIndex(k pulumi.StringInput) InternetServiceLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InternetServiceLink {
		return vs[0].(map[string]*InternetServiceLink)[vs[1].(string)]
	}).(InternetServiceLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InternetServiceLinkInput)(nil)).Elem(), &InternetServiceLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternetServiceLinkArrayInput)(nil)).Elem(), InternetServiceLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InternetServiceLinkMapInput)(nil)).Elem(), InternetServiceLinkMap{})
	pulumi.RegisterOutputType(InternetServiceLinkOutput{})
	pulumi.RegisterOutputType(InternetServiceLinkArrayOutput{})
	pulumi.RegisterOutputType(InternetServiceLinkMapOutput{})
}
