// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a public IP link.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Public-IPs.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-publicip).
//
// ## Example Usage
//
// ### Required resources
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewPublicIp(ctx, "public_ip01", nil)
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewVm(ctx, "vm01", &outscale.VmArgs{
//				ImageId:     pulumi.Any(imageId),
//				VmType:      pulumi.Any(vmType),
//				KeypairName: pulumi.Any(keypairName),
//				SecurityGroupIds: pulumi.StringArray{
//					securityGroupId,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Link a public IP address to a VM
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewPublicIpLink(ctx, "public_ip_link01", &outscale.PublicIpLinkArgs{
//				VmId:     pulumi.Any(vm01.VmId),
//				PublicIp: pulumi.Any(publicIp01.PublicIp),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A public IP link can be imported using the public IP or the public IP link ID. For example:
//
// console
//
// ```sh
// $ pulumi import outscale:index/publicIpLink:PublicIpLink ImportedPublicIpLink eipassoc-12345678
// ```
type PublicIpLink struct {
	pulumi.CustomResourceState

	// If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
	AllowRelink pulumi.BoolPtrOutput `pulumi:"allowRelink"`
	// (Net only) The ID representing the association of the public IP with the VM or the NIC.
	LinkPublicIpId pulumi.StringOutput `pulumi:"linkPublicIpId"`
	NicAccountId   pulumi.StringOutput `pulumi:"nicAccountId"`
	// (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `vmId` parameter instead. You cannot specify both parameters at the same time.
	NicId pulumi.StringOutput `pulumi:"nicId"`
	// (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// The public IP. This parameter is required unless you use the `publicIpId` parameter.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// The allocation ID of the public IP. This parameter is required unless you use the `publicIp` parameter.
	PublicIpId pulumi.StringOutput        `pulumi:"publicIpId"`
	RequestId  pulumi.StringOutput        `pulumi:"requestId"`
	Tags       PublicIpLinkTagArrayOutput `pulumi:"tags"`
	// The ID of the VM.<br />- In the public Cloud, this parameter is required.<br />- In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `nicId` parameter instead. You cannot specify both parameters at the same time.
	VmId pulumi.StringOutput `pulumi:"vmId"`
}

// NewPublicIpLink registers a new resource with the given unique name, arguments, and options.
func NewPublicIpLink(ctx *pulumi.Context,
	name string, args *PublicIpLinkArgs, opts ...pulumi.ResourceOption) (*PublicIpLink, error) {
	if args == nil {
		args = &PublicIpLinkArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PublicIpLink
	err := ctx.RegisterResource("outscale:index/publicIpLink:PublicIpLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPublicIpLink gets an existing PublicIpLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPublicIpLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PublicIpLinkState, opts ...pulumi.ResourceOption) (*PublicIpLink, error) {
	var resource PublicIpLink
	err := ctx.ReadResource("outscale:index/publicIpLink:PublicIpLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PublicIpLink resources.
type publicIpLinkState struct {
	// If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
	AllowRelink *bool `pulumi:"allowRelink"`
	// (Net only) The ID representing the association of the public IP with the VM or the NIC.
	LinkPublicIpId *string `pulumi:"linkPublicIpId"`
	NicAccountId   *string `pulumi:"nicAccountId"`
	// (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `vmId` parameter instead. You cannot specify both parameters at the same time.
	NicId *string `pulumi:"nicId"`
	// (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
	PrivateIp *string `pulumi:"privateIp"`
	// The public IP. This parameter is required unless you use the `publicIpId` parameter.
	PublicIp *string `pulumi:"publicIp"`
	// The allocation ID of the public IP. This parameter is required unless you use the `publicIp` parameter.
	PublicIpId *string           `pulumi:"publicIpId"`
	RequestId  *string           `pulumi:"requestId"`
	Tags       []PublicIpLinkTag `pulumi:"tags"`
	// The ID of the VM.<br />- In the public Cloud, this parameter is required.<br />- In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `nicId` parameter instead. You cannot specify both parameters at the same time.
	VmId *string `pulumi:"vmId"`
}

type PublicIpLinkState struct {
	// If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
	AllowRelink pulumi.BoolPtrInput
	// (Net only) The ID representing the association of the public IP with the VM or the NIC.
	LinkPublicIpId pulumi.StringPtrInput
	NicAccountId   pulumi.StringPtrInput
	// (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `vmId` parameter instead. You cannot specify both parameters at the same time.
	NicId pulumi.StringPtrInput
	// (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
	PrivateIp pulumi.StringPtrInput
	// The public IP. This parameter is required unless you use the `publicIpId` parameter.
	PublicIp pulumi.StringPtrInput
	// The allocation ID of the public IP. This parameter is required unless you use the `publicIp` parameter.
	PublicIpId pulumi.StringPtrInput
	RequestId  pulumi.StringPtrInput
	Tags       PublicIpLinkTagArrayInput
	// The ID of the VM.<br />- In the public Cloud, this parameter is required.<br />- In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `nicId` parameter instead. You cannot specify both parameters at the same time.
	VmId pulumi.StringPtrInput
}

func (PublicIpLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*publicIpLinkState)(nil)).Elem()
}

type publicIpLinkArgs struct {
	// If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
	AllowRelink *bool `pulumi:"allowRelink"`
	// (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `vmId` parameter instead. You cannot specify both parameters at the same time.
	NicId *string `pulumi:"nicId"`
	// (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
	PrivateIp *string `pulumi:"privateIp"`
	// The public IP. This parameter is required unless you use the `publicIpId` parameter.
	PublicIp *string `pulumi:"publicIp"`
	// The allocation ID of the public IP. This parameter is required unless you use the `publicIp` parameter.
	PublicIpId *string `pulumi:"publicIpId"`
	// The ID of the VM.<br />- In the public Cloud, this parameter is required.<br />- In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `nicId` parameter instead. You cannot specify both parameters at the same time.
	VmId *string `pulumi:"vmId"`
}

// The set of arguments for constructing a PublicIpLink resource.
type PublicIpLinkArgs struct {
	// If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
	AllowRelink pulumi.BoolPtrInput
	// (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `vmId` parameter instead. You cannot specify both parameters at the same time.
	NicId pulumi.StringPtrInput
	// (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
	PrivateIp pulumi.StringPtrInput
	// The public IP. This parameter is required unless you use the `publicIpId` parameter.
	PublicIp pulumi.StringPtrInput
	// The allocation ID of the public IP. This parameter is required unless you use the `publicIp` parameter.
	PublicIpId pulumi.StringPtrInput
	// The ID of the VM.<br />- In the public Cloud, this parameter is required.<br />- In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `nicId` parameter instead. You cannot specify both parameters at the same time.
	VmId pulumi.StringPtrInput
}

func (PublicIpLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicIpLinkArgs)(nil)).Elem()
}

type PublicIpLinkInput interface {
	pulumi.Input

	ToPublicIpLinkOutput() PublicIpLinkOutput
	ToPublicIpLinkOutputWithContext(ctx context.Context) PublicIpLinkOutput
}

func (*PublicIpLink) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIpLink)(nil)).Elem()
}

func (i *PublicIpLink) ToPublicIpLinkOutput() PublicIpLinkOutput {
	return i.ToPublicIpLinkOutputWithContext(context.Background())
}

func (i *PublicIpLink) ToPublicIpLinkOutputWithContext(ctx context.Context) PublicIpLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpLinkOutput)
}

// PublicIpLinkArrayInput is an input type that accepts PublicIpLinkArray and PublicIpLinkArrayOutput values.
// You can construct a concrete instance of `PublicIpLinkArrayInput` via:
//
//	PublicIpLinkArray{ PublicIpLinkArgs{...} }
type PublicIpLinkArrayInput interface {
	pulumi.Input

	ToPublicIpLinkArrayOutput() PublicIpLinkArrayOutput
	ToPublicIpLinkArrayOutputWithContext(context.Context) PublicIpLinkArrayOutput
}

type PublicIpLinkArray []PublicIpLinkInput

func (PublicIpLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicIpLink)(nil)).Elem()
}

func (i PublicIpLinkArray) ToPublicIpLinkArrayOutput() PublicIpLinkArrayOutput {
	return i.ToPublicIpLinkArrayOutputWithContext(context.Background())
}

func (i PublicIpLinkArray) ToPublicIpLinkArrayOutputWithContext(ctx context.Context) PublicIpLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpLinkArrayOutput)
}

// PublicIpLinkMapInput is an input type that accepts PublicIpLinkMap and PublicIpLinkMapOutput values.
// You can construct a concrete instance of `PublicIpLinkMapInput` via:
//
//	PublicIpLinkMap{ "key": PublicIpLinkArgs{...} }
type PublicIpLinkMapInput interface {
	pulumi.Input

	ToPublicIpLinkMapOutput() PublicIpLinkMapOutput
	ToPublicIpLinkMapOutputWithContext(context.Context) PublicIpLinkMapOutput
}

type PublicIpLinkMap map[string]PublicIpLinkInput

func (PublicIpLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicIpLink)(nil)).Elem()
}

func (i PublicIpLinkMap) ToPublicIpLinkMapOutput() PublicIpLinkMapOutput {
	return i.ToPublicIpLinkMapOutputWithContext(context.Background())
}

func (i PublicIpLinkMap) ToPublicIpLinkMapOutputWithContext(ctx context.Context) PublicIpLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicIpLinkMapOutput)
}

type PublicIpLinkOutput struct{ *pulumi.OutputState }

func (PublicIpLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicIpLink)(nil)).Elem()
}

func (o PublicIpLinkOutput) ToPublicIpLinkOutput() PublicIpLinkOutput {
	return o
}

func (o PublicIpLinkOutput) ToPublicIpLinkOutputWithContext(ctx context.Context) PublicIpLinkOutput {
	return o
}

// If true, allows the public IP to be associated with the VM or NIC that you specify even if it is already associated with another VM or NIC. If false, prevents the public IP from being associated with the VM or NIC that you specify if it is already associated with another VM or NIC. (By default, true in the public Cloud, false in a Net.)
func (o PublicIpLinkOutput) AllowRelink() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.BoolPtrOutput { return v.AllowRelink }).(pulumi.BoolPtrOutput)
}

// (Net only) The ID representing the association of the public IP with the VM or the NIC.
func (o PublicIpLinkOutput) LinkPublicIpId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.LinkPublicIpId }).(pulumi.StringOutput)
}

func (o PublicIpLinkOutput) NicAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.NicAccountId }).(pulumi.StringOutput)
}

// (Net only) The ID of the NIC. This parameter is required if the VM has more than one NIC attached. Otherwise, you need to specify the `vmId` parameter instead. You cannot specify both parameters at the same time.
func (o PublicIpLinkOutput) NicId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.NicId }).(pulumi.StringOutput)
}

// (Net only) The primary or secondary private IP of the specified NIC. By default, the primary private IP.
func (o PublicIpLinkOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// The public IP. This parameter is required unless you use the `publicIpId` parameter.
func (o PublicIpLinkOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// The allocation ID of the public IP. This parameter is required unless you use the `publicIp` parameter.
func (o PublicIpLinkOutput) PublicIpId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.PublicIpId }).(pulumi.StringOutput)
}

func (o PublicIpLinkOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o PublicIpLinkOutput) Tags() PublicIpLinkTagArrayOutput {
	return o.ApplyT(func(v *PublicIpLink) PublicIpLinkTagArrayOutput { return v.Tags }).(PublicIpLinkTagArrayOutput)
}

// The ID of the VM.<br />- In the public Cloud, this parameter is required.<br />- In a Net, this parameter is required if the VM has only one NIC. Otherwise, you need to specify the `nicId` parameter instead. You cannot specify both parameters at the same time.
func (o PublicIpLinkOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v *PublicIpLink) pulumi.StringOutput { return v.VmId }).(pulumi.StringOutput)
}

type PublicIpLinkArrayOutput struct{ *pulumi.OutputState }

func (PublicIpLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicIpLink)(nil)).Elem()
}

func (o PublicIpLinkArrayOutput) ToPublicIpLinkArrayOutput() PublicIpLinkArrayOutput {
	return o
}

func (o PublicIpLinkArrayOutput) ToPublicIpLinkArrayOutputWithContext(ctx context.Context) PublicIpLinkArrayOutput {
	return o
}

func (o PublicIpLinkArrayOutput) Index(i pulumi.IntInput) PublicIpLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicIpLink {
		return vs[0].([]*PublicIpLink)[vs[1].(int)]
	}).(PublicIpLinkOutput)
}

type PublicIpLinkMapOutput struct{ *pulumi.OutputState }

func (PublicIpLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicIpLink)(nil)).Elem()
}

func (o PublicIpLinkMapOutput) ToPublicIpLinkMapOutput() PublicIpLinkMapOutput {
	return o
}

func (o PublicIpLinkMapOutput) ToPublicIpLinkMapOutputWithContext(ctx context.Context) PublicIpLinkMapOutput {
	return o
}

func (o PublicIpLinkMapOutput) MapIndex(k pulumi.StringInput) PublicIpLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicIpLink {
		return vs[0].(map[string]*PublicIpLink)[vs[1].(string)]
	}).(PublicIpLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpLinkInput)(nil)).Elem(), &PublicIpLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpLinkArrayInput)(nil)).Elem(), PublicIpLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicIpLinkMapInput)(nil)).Elem(), PublicIpLinkMap{})
	pulumi.RegisterOutputType(PublicIpLinkOutput{})
	pulumi.RegisterOutputType(PublicIpLinkArrayOutput{})
	pulumi.RegisterOutputType(PublicIpLinkMapOutput{})
}
