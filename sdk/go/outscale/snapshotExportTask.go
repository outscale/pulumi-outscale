// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a snapshot export task.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Snapshots.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-snapshot).
//
// ## Example Usage
type SnapshotExportTask struct {
	pulumi.CustomResourceState

	// If the snapshot export task fails, an error message appears.
	Comment pulumi.StringOutput `pulumi:"comment"`
	// Information about the OOS export task to create.
	OsuExports SnapshotExportTaskOsuExportArrayOutput `pulumi:"osuExports"`
	// The progress of the snapshot export task, as a percentage.
	Progress  pulumi.IntOutput    `pulumi:"progress"`
	RequestId pulumi.StringOutput `pulumi:"requestId"`
	// The ID of the snapshot to export.
	SnapshotId pulumi.StringOutput `pulumi:"snapshotId"`
	// The state of the snapshot export task (`pending` \| `active` \| `completed` \| `failed`).
	State pulumi.StringOutput `pulumi:"state"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags SnapshotExportTaskTagArrayOutput `pulumi:"tags"`
	// The ID of the snapshot export task.
	TaskId pulumi.StringOutput `pulumi:"taskId"`
}

// NewSnapshotExportTask registers a new resource with the given unique name, arguments, and options.
func NewSnapshotExportTask(ctx *pulumi.Context,
	name string, args *SnapshotExportTaskArgs, opts ...pulumi.ResourceOption) (*SnapshotExportTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OsuExports == nil {
		return nil, errors.New("invalid value for required argument 'OsuExports'")
	}
	if args.SnapshotId == nil {
		return nil, errors.New("invalid value for required argument 'SnapshotId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnapshotExportTask
	err := ctx.RegisterResource("outscale:index/snapshotExportTask:SnapshotExportTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotExportTask gets an existing SnapshotExportTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotExportTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotExportTaskState, opts ...pulumi.ResourceOption) (*SnapshotExportTask, error) {
	var resource SnapshotExportTask
	err := ctx.ReadResource("outscale:index/snapshotExportTask:SnapshotExportTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotExportTask resources.
type snapshotExportTaskState struct {
	// If the snapshot export task fails, an error message appears.
	Comment *string `pulumi:"comment"`
	// Information about the OOS export task to create.
	OsuExports []SnapshotExportTaskOsuExport `pulumi:"osuExports"`
	// The progress of the snapshot export task, as a percentage.
	Progress  *int    `pulumi:"progress"`
	RequestId *string `pulumi:"requestId"`
	// The ID of the snapshot to export.
	SnapshotId *string `pulumi:"snapshotId"`
	// The state of the snapshot export task (`pending` \| `active` \| `completed` \| `failed`).
	State *string `pulumi:"state"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []SnapshotExportTaskTag `pulumi:"tags"`
	// The ID of the snapshot export task.
	TaskId *string `pulumi:"taskId"`
}

type SnapshotExportTaskState struct {
	// If the snapshot export task fails, an error message appears.
	Comment pulumi.StringPtrInput
	// Information about the OOS export task to create.
	OsuExports SnapshotExportTaskOsuExportArrayInput
	// The progress of the snapshot export task, as a percentage.
	Progress  pulumi.IntPtrInput
	RequestId pulumi.StringPtrInput
	// The ID of the snapshot to export.
	SnapshotId pulumi.StringPtrInput
	// The state of the snapshot export task (`pending` \| `active` \| `completed` \| `failed`).
	State pulumi.StringPtrInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags SnapshotExportTaskTagArrayInput
	// The ID of the snapshot export task.
	TaskId pulumi.StringPtrInput
}

func (SnapshotExportTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotExportTaskState)(nil)).Elem()
}

type snapshotExportTaskArgs struct {
	// Information about the OOS export task to create.
	OsuExports []SnapshotExportTaskOsuExport `pulumi:"osuExports"`
	// The ID of the snapshot to export.
	SnapshotId string `pulumi:"snapshotId"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []SnapshotExportTaskTag `pulumi:"tags"`
}

// The set of arguments for constructing a SnapshotExportTask resource.
type SnapshotExportTaskArgs struct {
	// Information about the OOS export task to create.
	OsuExports SnapshotExportTaskOsuExportArrayInput
	// The ID of the snapshot to export.
	SnapshotId pulumi.StringInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags SnapshotExportTaskTagArrayInput
}

func (SnapshotExportTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotExportTaskArgs)(nil)).Elem()
}

type SnapshotExportTaskInput interface {
	pulumi.Input

	ToSnapshotExportTaskOutput() SnapshotExportTaskOutput
	ToSnapshotExportTaskOutputWithContext(ctx context.Context) SnapshotExportTaskOutput
}

func (*SnapshotExportTask) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotExportTask)(nil)).Elem()
}

func (i *SnapshotExportTask) ToSnapshotExportTaskOutput() SnapshotExportTaskOutput {
	return i.ToSnapshotExportTaskOutputWithContext(context.Background())
}

func (i *SnapshotExportTask) ToSnapshotExportTaskOutputWithContext(ctx context.Context) SnapshotExportTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotExportTaskOutput)
}

func (i *SnapshotExportTask) ToOutput(ctx context.Context) pulumix.Output[*SnapshotExportTask] {
	return pulumix.Output[*SnapshotExportTask]{
		OutputState: i.ToSnapshotExportTaskOutputWithContext(ctx).OutputState,
	}
}

// SnapshotExportTaskArrayInput is an input type that accepts SnapshotExportTaskArray and SnapshotExportTaskArrayOutput values.
// You can construct a concrete instance of `SnapshotExportTaskArrayInput` via:
//
//	SnapshotExportTaskArray{ SnapshotExportTaskArgs{...} }
type SnapshotExportTaskArrayInput interface {
	pulumi.Input

	ToSnapshotExportTaskArrayOutput() SnapshotExportTaskArrayOutput
	ToSnapshotExportTaskArrayOutputWithContext(context.Context) SnapshotExportTaskArrayOutput
}

type SnapshotExportTaskArray []SnapshotExportTaskInput

func (SnapshotExportTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotExportTask)(nil)).Elem()
}

func (i SnapshotExportTaskArray) ToSnapshotExportTaskArrayOutput() SnapshotExportTaskArrayOutput {
	return i.ToSnapshotExportTaskArrayOutputWithContext(context.Background())
}

func (i SnapshotExportTaskArray) ToSnapshotExportTaskArrayOutputWithContext(ctx context.Context) SnapshotExportTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotExportTaskArrayOutput)
}

func (i SnapshotExportTaskArray) ToOutput(ctx context.Context) pulumix.Output[[]*SnapshotExportTask] {
	return pulumix.Output[[]*SnapshotExportTask]{
		OutputState: i.ToSnapshotExportTaskArrayOutputWithContext(ctx).OutputState,
	}
}

// SnapshotExportTaskMapInput is an input type that accepts SnapshotExportTaskMap and SnapshotExportTaskMapOutput values.
// You can construct a concrete instance of `SnapshotExportTaskMapInput` via:
//
//	SnapshotExportTaskMap{ "key": SnapshotExportTaskArgs{...} }
type SnapshotExportTaskMapInput interface {
	pulumi.Input

	ToSnapshotExportTaskMapOutput() SnapshotExportTaskMapOutput
	ToSnapshotExportTaskMapOutputWithContext(context.Context) SnapshotExportTaskMapOutput
}

type SnapshotExportTaskMap map[string]SnapshotExportTaskInput

func (SnapshotExportTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotExportTask)(nil)).Elem()
}

func (i SnapshotExportTaskMap) ToSnapshotExportTaskMapOutput() SnapshotExportTaskMapOutput {
	return i.ToSnapshotExportTaskMapOutputWithContext(context.Background())
}

func (i SnapshotExportTaskMap) ToSnapshotExportTaskMapOutputWithContext(ctx context.Context) SnapshotExportTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotExportTaskMapOutput)
}

func (i SnapshotExportTaskMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SnapshotExportTask] {
	return pulumix.Output[map[string]*SnapshotExportTask]{
		OutputState: i.ToSnapshotExportTaskMapOutputWithContext(ctx).OutputState,
	}
}

type SnapshotExportTaskOutput struct{ *pulumi.OutputState }

func (SnapshotExportTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotExportTask)(nil)).Elem()
}

func (o SnapshotExportTaskOutput) ToSnapshotExportTaskOutput() SnapshotExportTaskOutput {
	return o
}

func (o SnapshotExportTaskOutput) ToSnapshotExportTaskOutputWithContext(ctx context.Context) SnapshotExportTaskOutput {
	return o
}

func (o SnapshotExportTaskOutput) ToOutput(ctx context.Context) pulumix.Output[*SnapshotExportTask] {
	return pulumix.Output[*SnapshotExportTask]{
		OutputState: o.OutputState,
	}
}

// If the snapshot export task fails, an error message appears.
func (o SnapshotExportTaskOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotExportTask) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

// Information about the OOS export task to create.
func (o SnapshotExportTaskOutput) OsuExports() SnapshotExportTaskOsuExportArrayOutput {
	return o.ApplyT(func(v *SnapshotExportTask) SnapshotExportTaskOsuExportArrayOutput { return v.OsuExports }).(SnapshotExportTaskOsuExportArrayOutput)
}

// The progress of the snapshot export task, as a percentage.
func (o SnapshotExportTaskOutput) Progress() pulumi.IntOutput {
	return o.ApplyT(func(v *SnapshotExportTask) pulumi.IntOutput { return v.Progress }).(pulumi.IntOutput)
}

func (o SnapshotExportTaskOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotExportTask) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// The ID of the snapshot to export.
func (o SnapshotExportTaskOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotExportTask) pulumi.StringOutput { return v.SnapshotId }).(pulumi.StringOutput)
}

// The state of the snapshot export task (`pending` \| `active` \| `completed` \| `failed`).
func (o SnapshotExportTaskOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotExportTask) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A tag to add to this resource. You can specify this argument several times.
func (o SnapshotExportTaskOutput) Tags() SnapshotExportTaskTagArrayOutput {
	return o.ApplyT(func(v *SnapshotExportTask) SnapshotExportTaskTagArrayOutput { return v.Tags }).(SnapshotExportTaskTagArrayOutput)
}

// The ID of the snapshot export task.
func (o SnapshotExportTaskOutput) TaskId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotExportTask) pulumi.StringOutput { return v.TaskId }).(pulumi.StringOutput)
}

type SnapshotExportTaskArrayOutput struct{ *pulumi.OutputState }

func (SnapshotExportTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotExportTask)(nil)).Elem()
}

func (o SnapshotExportTaskArrayOutput) ToSnapshotExportTaskArrayOutput() SnapshotExportTaskArrayOutput {
	return o
}

func (o SnapshotExportTaskArrayOutput) ToSnapshotExportTaskArrayOutputWithContext(ctx context.Context) SnapshotExportTaskArrayOutput {
	return o
}

func (o SnapshotExportTaskArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SnapshotExportTask] {
	return pulumix.Output[[]*SnapshotExportTask]{
		OutputState: o.OutputState,
	}
}

func (o SnapshotExportTaskArrayOutput) Index(i pulumi.IntInput) SnapshotExportTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnapshotExportTask {
		return vs[0].([]*SnapshotExportTask)[vs[1].(int)]
	}).(SnapshotExportTaskOutput)
}

type SnapshotExportTaskMapOutput struct{ *pulumi.OutputState }

func (SnapshotExportTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotExportTask)(nil)).Elem()
}

func (o SnapshotExportTaskMapOutput) ToSnapshotExportTaskMapOutput() SnapshotExportTaskMapOutput {
	return o
}

func (o SnapshotExportTaskMapOutput) ToSnapshotExportTaskMapOutputWithContext(ctx context.Context) SnapshotExportTaskMapOutput {
	return o
}

func (o SnapshotExportTaskMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SnapshotExportTask] {
	return pulumix.Output[map[string]*SnapshotExportTask]{
		OutputState: o.OutputState,
	}
}

func (o SnapshotExportTaskMapOutput) MapIndex(k pulumi.StringInput) SnapshotExportTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnapshotExportTask {
		return vs[0].(map[string]*SnapshotExportTask)[vs[1].(string)]
	}).(SnapshotExportTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotExportTaskInput)(nil)).Elem(), &SnapshotExportTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotExportTaskArrayInput)(nil)).Elem(), SnapshotExportTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotExportTaskMapInput)(nil)).Elem(), SnapshotExportTaskMap{})
	pulumi.RegisterOutputType(SnapshotExportTaskOutput{})
	pulumi.RegisterOutputType(SnapshotExportTaskArrayOutput{})
	pulumi.RegisterOutputType(SnapshotExportTaskMapOutput{})
}
