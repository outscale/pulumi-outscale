// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a snapshot.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Snapshots.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-snapshot).
func LookupSnapshot(ctx *pulumi.Context, args *LookupSnapshotArgs, opts ...pulumi.InvokeOption) (*LookupSnapshotResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSnapshotResult
	err := ctx.Invoke("outscale:index/getSnapshot:getSnapshot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSnapshot.
type LookupSnapshotArgs struct {
	// The account ID of the owner of the snapshot.
	AccountId *string `pulumi:"accountId"`
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters []GetSnapshotFilter `pulumi:"filters"`
	// The ID of the snapshot.
	SnapshotId *string `pulumi:"snapshotId"`
}

// A collection of values returned by getSnapshot.
type LookupSnapshotResult struct {
	// The account alias of the owner of the snapshot.
	AccountAlias string `pulumi:"accountAlias"`
	// The account ID of the owner of the snapshot.
	AccountId string `pulumi:"accountId"`
	// The date and time of creation of the snapshot.
	CreationDate string `pulumi:"creationDate"`
	// The description of the snapshot.
	Description string              `pulumi:"description"`
	Filters     []GetSnapshotFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Information about the users who have permissions for the resource.
	PermissionsToCreateVolumes []GetSnapshotPermissionsToCreateVolume `pulumi:"permissionsToCreateVolumes"`
	// The progress of the snapshot, as a percentage.
	Progress  int    `pulumi:"progress"`
	RequestId string `pulumi:"requestId"`
	// The ID of the snapshot.
	SnapshotId string `pulumi:"snapshotId"`
	// The state of the snapshot (`in-queue` \| `completed` \| `error`).
	State string `pulumi:"state"`
	// One or more tags associated with the snapshot.
	Tags []GetSnapshotTag `pulumi:"tags"`
	// The ID of the volume used to create the snapshot.
	VolumeId string `pulumi:"volumeId"`
	// The size of the volume used to create the snapshot, in gibibytes (GiB).
	VolumeSize int `pulumi:"volumeSize"`
}

func LookupSnapshotOutput(ctx *pulumi.Context, args LookupSnapshotOutputArgs, opts ...pulumi.InvokeOption) LookupSnapshotResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSnapshotResult, error) {
			args := v.(LookupSnapshotArgs)
			r, err := LookupSnapshot(ctx, &args, opts...)
			var s LookupSnapshotResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSnapshotResultOutput)
}

// A collection of arguments for invoking getSnapshot.
type LookupSnapshotOutputArgs struct {
	// The account ID of the owner of the snapshot.
	AccountId pulumi.StringPtrInput `pulumi:"accountId"`
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters GetSnapshotFilterArrayInput `pulumi:"filters"`
	// The ID of the snapshot.
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
}

func (LookupSnapshotOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnapshotArgs)(nil)).Elem()
}

// A collection of values returned by getSnapshot.
type LookupSnapshotResultOutput struct{ *pulumi.OutputState }

func (LookupSnapshotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnapshotResult)(nil)).Elem()
}

func (o LookupSnapshotResultOutput) ToLookupSnapshotResultOutput() LookupSnapshotResultOutput {
	return o
}

func (o LookupSnapshotResultOutput) ToLookupSnapshotResultOutputWithContext(ctx context.Context) LookupSnapshotResultOutput {
	return o
}

func (o LookupSnapshotResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupSnapshotResult] {
	return pulumix.Output[LookupSnapshotResult]{
		OutputState: o.OutputState,
	}
}

// The account alias of the owner of the snapshot.
func (o LookupSnapshotResultOutput) AccountAlias() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.AccountAlias }).(pulumi.StringOutput)
}

// The account ID of the owner of the snapshot.
func (o LookupSnapshotResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// The date and time of creation of the snapshot.
func (o LookupSnapshotResultOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.CreationDate }).(pulumi.StringOutput)
}

// The description of the snapshot.
func (o LookupSnapshotResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupSnapshotResultOutput) Filters() GetSnapshotFilterArrayOutput {
	return o.ApplyT(func(v LookupSnapshotResult) []GetSnapshotFilter { return v.Filters }).(GetSnapshotFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSnapshotResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.Id }).(pulumi.StringOutput)
}

// Information about the users who have permissions for the resource.
func (o LookupSnapshotResultOutput) PermissionsToCreateVolumes() GetSnapshotPermissionsToCreateVolumeArrayOutput {
	return o.ApplyT(func(v LookupSnapshotResult) []GetSnapshotPermissionsToCreateVolume {
		return v.PermissionsToCreateVolumes
	}).(GetSnapshotPermissionsToCreateVolumeArrayOutput)
}

// The progress of the snapshot, as a percentage.
func (o LookupSnapshotResultOutput) Progress() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnapshotResult) int { return v.Progress }).(pulumi.IntOutput)
}

func (o LookupSnapshotResultOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.RequestId }).(pulumi.StringOutput)
}

// The ID of the snapshot.
func (o LookupSnapshotResultOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// The state of the snapshot (`in-queue` \| `completed` \| `error`).
func (o LookupSnapshotResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.State }).(pulumi.StringOutput)
}

// One or more tags associated with the snapshot.
func (o LookupSnapshotResultOutput) Tags() GetSnapshotTagArrayOutput {
	return o.ApplyT(func(v LookupSnapshotResult) []GetSnapshotTag { return v.Tags }).(GetSnapshotTagArrayOutput)
}

// The ID of the volume used to create the snapshot.
func (o LookupSnapshotResultOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnapshotResult) string { return v.VolumeId }).(pulumi.StringOutput)
}

// The size of the volume used to create the snapshot, in gibibytes (GiB).
func (o LookupSnapshotResultOutput) VolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnapshotResult) int { return v.VolumeSize }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSnapshotResultOutput{})
}
