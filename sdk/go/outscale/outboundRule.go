// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type OutboundRule struct {
	pulumi.CustomResourceState

	Flow                         pulumi.StringOutput         `pulumi:"flow"`
	FromPortRange                pulumi.IntPtrOutput         `pulumi:"fromPortRange"`
	IpProtocol                   pulumi.StringPtrOutput      `pulumi:"ipProtocol"`
	IpRange                      pulumi.StringPtrOutput      `pulumi:"ipRange"`
	NetId                        pulumi.StringOutput         `pulumi:"netId"`
	RequestId                    pulumi.StringOutput         `pulumi:"requestId"`
	Rules                        OutboundRuleRuleArrayOutput `pulumi:"rules"`
	SecurityGroupAccountIdToLink pulumi.StringPtrOutput      `pulumi:"securityGroupAccountIdToLink"`
	SecurityGroupId              pulumi.StringOutput         `pulumi:"securityGroupId"`
	SecurityGroupName            pulumi.StringOutput         `pulumi:"securityGroupName"`
	SecurityGroupNameToLink      pulumi.StringPtrOutput      `pulumi:"securityGroupNameToLink"`
	ToPortRange                  pulumi.IntPtrOutput         `pulumi:"toPortRange"`
}

// NewOutboundRule registers a new resource with the given unique name, arguments, and options.
func NewOutboundRule(ctx *pulumi.Context,
	name string, args *OutboundRuleArgs, opts ...pulumi.ResourceOption) (*OutboundRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Flow == nil {
		return nil, errors.New("invalid value for required argument 'Flow'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OutboundRule
	err := ctx.RegisterResource("outscale:index/outboundRule:OutboundRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOutboundRule gets an existing OutboundRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOutboundRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OutboundRuleState, opts ...pulumi.ResourceOption) (*OutboundRule, error) {
	var resource OutboundRule
	err := ctx.ReadResource("outscale:index/outboundRule:OutboundRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OutboundRule resources.
type outboundRuleState struct {
	Flow                         *string            `pulumi:"flow"`
	FromPortRange                *int               `pulumi:"fromPortRange"`
	IpProtocol                   *string            `pulumi:"ipProtocol"`
	IpRange                      *string            `pulumi:"ipRange"`
	NetId                        *string            `pulumi:"netId"`
	RequestId                    *string            `pulumi:"requestId"`
	Rules                        []OutboundRuleRule `pulumi:"rules"`
	SecurityGroupAccountIdToLink *string            `pulumi:"securityGroupAccountIdToLink"`
	SecurityGroupId              *string            `pulumi:"securityGroupId"`
	SecurityGroupName            *string            `pulumi:"securityGroupName"`
	SecurityGroupNameToLink      *string            `pulumi:"securityGroupNameToLink"`
	ToPortRange                  *int               `pulumi:"toPortRange"`
}

type OutboundRuleState struct {
	Flow                         pulumi.StringPtrInput
	FromPortRange                pulumi.IntPtrInput
	IpProtocol                   pulumi.StringPtrInput
	IpRange                      pulumi.StringPtrInput
	NetId                        pulumi.StringPtrInput
	RequestId                    pulumi.StringPtrInput
	Rules                        OutboundRuleRuleArrayInput
	SecurityGroupAccountIdToLink pulumi.StringPtrInput
	SecurityGroupId              pulumi.StringPtrInput
	SecurityGroupName            pulumi.StringPtrInput
	SecurityGroupNameToLink      pulumi.StringPtrInput
	ToPortRange                  pulumi.IntPtrInput
}

func (OutboundRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*outboundRuleState)(nil)).Elem()
}

type outboundRuleArgs struct {
	Flow                         string             `pulumi:"flow"`
	FromPortRange                *int               `pulumi:"fromPortRange"`
	IpProtocol                   *string            `pulumi:"ipProtocol"`
	IpRange                      *string            `pulumi:"ipRange"`
	Rules                        []OutboundRuleRule `pulumi:"rules"`
	SecurityGroupAccountIdToLink *string            `pulumi:"securityGroupAccountIdToLink"`
	SecurityGroupId              string             `pulumi:"securityGroupId"`
	SecurityGroupNameToLink      *string            `pulumi:"securityGroupNameToLink"`
	ToPortRange                  *int               `pulumi:"toPortRange"`
}

// The set of arguments for constructing a OutboundRule resource.
type OutboundRuleArgs struct {
	Flow                         pulumi.StringInput
	FromPortRange                pulumi.IntPtrInput
	IpProtocol                   pulumi.StringPtrInput
	IpRange                      pulumi.StringPtrInput
	Rules                        OutboundRuleRuleArrayInput
	SecurityGroupAccountIdToLink pulumi.StringPtrInput
	SecurityGroupId              pulumi.StringInput
	SecurityGroupNameToLink      pulumi.StringPtrInput
	ToPortRange                  pulumi.IntPtrInput
}

func (OutboundRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*outboundRuleArgs)(nil)).Elem()
}

type OutboundRuleInput interface {
	pulumi.Input

	ToOutboundRuleOutput() OutboundRuleOutput
	ToOutboundRuleOutputWithContext(ctx context.Context) OutboundRuleOutput
}

func (*OutboundRule) ElementType() reflect.Type {
	return reflect.TypeOf((**OutboundRule)(nil)).Elem()
}

func (i *OutboundRule) ToOutboundRuleOutput() OutboundRuleOutput {
	return i.ToOutboundRuleOutputWithContext(context.Background())
}

func (i *OutboundRule) ToOutboundRuleOutputWithContext(ctx context.Context) OutboundRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutboundRuleOutput)
}

// OutboundRuleArrayInput is an input type that accepts OutboundRuleArray and OutboundRuleArrayOutput values.
// You can construct a concrete instance of `OutboundRuleArrayInput` via:
//
//	OutboundRuleArray{ OutboundRuleArgs{...} }
type OutboundRuleArrayInput interface {
	pulumi.Input

	ToOutboundRuleArrayOutput() OutboundRuleArrayOutput
	ToOutboundRuleArrayOutputWithContext(context.Context) OutboundRuleArrayOutput
}

type OutboundRuleArray []OutboundRuleInput

func (OutboundRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OutboundRule)(nil)).Elem()
}

func (i OutboundRuleArray) ToOutboundRuleArrayOutput() OutboundRuleArrayOutput {
	return i.ToOutboundRuleArrayOutputWithContext(context.Background())
}

func (i OutboundRuleArray) ToOutboundRuleArrayOutputWithContext(ctx context.Context) OutboundRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutboundRuleArrayOutput)
}

// OutboundRuleMapInput is an input type that accepts OutboundRuleMap and OutboundRuleMapOutput values.
// You can construct a concrete instance of `OutboundRuleMapInput` via:
//
//	OutboundRuleMap{ "key": OutboundRuleArgs{...} }
type OutboundRuleMapInput interface {
	pulumi.Input

	ToOutboundRuleMapOutput() OutboundRuleMapOutput
	ToOutboundRuleMapOutputWithContext(context.Context) OutboundRuleMapOutput
}

type OutboundRuleMap map[string]OutboundRuleInput

func (OutboundRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OutboundRule)(nil)).Elem()
}

func (i OutboundRuleMap) ToOutboundRuleMapOutput() OutboundRuleMapOutput {
	return i.ToOutboundRuleMapOutputWithContext(context.Background())
}

func (i OutboundRuleMap) ToOutboundRuleMapOutputWithContext(ctx context.Context) OutboundRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutboundRuleMapOutput)
}

type OutboundRuleOutput struct{ *pulumi.OutputState }

func (OutboundRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutboundRule)(nil)).Elem()
}

func (o OutboundRuleOutput) ToOutboundRuleOutput() OutboundRuleOutput {
	return o
}

func (o OutboundRuleOutput) ToOutboundRuleOutputWithContext(ctx context.Context) OutboundRuleOutput {
	return o
}

func (o OutboundRuleOutput) Flow() pulumi.StringOutput {
	return o.ApplyT(func(v *OutboundRule) pulumi.StringOutput { return v.Flow }).(pulumi.StringOutput)
}

func (o OutboundRuleOutput) FromPortRange() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutboundRule) pulumi.IntPtrOutput { return v.FromPortRange }).(pulumi.IntPtrOutput)
}

func (o OutboundRuleOutput) IpProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutboundRule) pulumi.StringPtrOutput { return v.IpProtocol }).(pulumi.StringPtrOutput)
}

func (o OutboundRuleOutput) IpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutboundRule) pulumi.StringPtrOutput { return v.IpRange }).(pulumi.StringPtrOutput)
}

func (o OutboundRuleOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v *OutboundRule) pulumi.StringOutput { return v.NetId }).(pulumi.StringOutput)
}

func (o OutboundRuleOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *OutboundRule) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o OutboundRuleOutput) Rules() OutboundRuleRuleArrayOutput {
	return o.ApplyT(func(v *OutboundRule) OutboundRuleRuleArrayOutput { return v.Rules }).(OutboundRuleRuleArrayOutput)
}

func (o OutboundRuleOutput) SecurityGroupAccountIdToLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutboundRule) pulumi.StringPtrOutput { return v.SecurityGroupAccountIdToLink }).(pulumi.StringPtrOutput)
}

func (o OutboundRuleOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *OutboundRule) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

func (o OutboundRuleOutput) SecurityGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *OutboundRule) pulumi.StringOutput { return v.SecurityGroupName }).(pulumi.StringOutput)
}

func (o OutboundRuleOutput) SecurityGroupNameToLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutboundRule) pulumi.StringPtrOutput { return v.SecurityGroupNameToLink }).(pulumi.StringPtrOutput)
}

func (o OutboundRuleOutput) ToPortRange() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutboundRule) pulumi.IntPtrOutput { return v.ToPortRange }).(pulumi.IntPtrOutput)
}

type OutboundRuleArrayOutput struct{ *pulumi.OutputState }

func (OutboundRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OutboundRule)(nil)).Elem()
}

func (o OutboundRuleArrayOutput) ToOutboundRuleArrayOutput() OutboundRuleArrayOutput {
	return o
}

func (o OutboundRuleArrayOutput) ToOutboundRuleArrayOutputWithContext(ctx context.Context) OutboundRuleArrayOutput {
	return o
}

func (o OutboundRuleArrayOutput) Index(i pulumi.IntInput) OutboundRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OutboundRule {
		return vs[0].([]*OutboundRule)[vs[1].(int)]
	}).(OutboundRuleOutput)
}

type OutboundRuleMapOutput struct{ *pulumi.OutputState }

func (OutboundRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OutboundRule)(nil)).Elem()
}

func (o OutboundRuleMapOutput) ToOutboundRuleMapOutput() OutboundRuleMapOutput {
	return o
}

func (o OutboundRuleMapOutput) ToOutboundRuleMapOutputWithContext(ctx context.Context) OutboundRuleMapOutput {
	return o
}

func (o OutboundRuleMapOutput) MapIndex(k pulumi.StringInput) OutboundRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OutboundRule {
		return vs[0].(map[string]*OutboundRule)[vs[1].(string)]
	}).(OutboundRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OutboundRuleInput)(nil)).Elem(), &OutboundRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutboundRuleArrayInput)(nil)).Elem(), OutboundRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutboundRuleMapInput)(nil)).Elem(), OutboundRuleMap{})
	pulumi.RegisterOutputType(OutboundRuleOutput{})
	pulumi.RegisterOutputType(OutboundRuleArrayOutput{})
	pulumi.RegisterOutputType(OutboundRuleMapOutput{})
}
