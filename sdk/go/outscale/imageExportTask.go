// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an image export task.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-OMIs.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-image).
//
// ## Example Usage
type ImageExportTask struct {
	pulumi.CustomResourceState

	// If the OMI export task fails, an error message appears.
	Comment pulumi.StringOutput `pulumi:"comment"`
	// The ID of the OMI to export.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// Information about the OOS export task to create.
	OsuExports ImageExportTaskOsuExportArrayOutput `pulumi:"osuExports"`
	// The progress of the OMI export task, as a percentage.
	Progress  pulumi.IntOutput    `pulumi:"progress"`
	RequestId pulumi.StringOutput `pulumi:"requestId"`
	// The state of the OMI export task (`pending/queued` \| `pending` \| `completed` \| `failed` \| `cancelled`).
	State pulumi.StringOutput `pulumi:"state"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags ImageExportTaskTagArrayOutput `pulumi:"tags"`
	// The ID of the OMI export task.
	TaskId pulumi.StringOutput `pulumi:"taskId"`
}

// NewImageExportTask registers a new resource with the given unique name, arguments, and options.
func NewImageExportTask(ctx *pulumi.Context,
	name string, args *ImageExportTaskArgs, opts ...pulumi.ResourceOption) (*ImageExportTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	if args.OsuExports == nil {
		return nil, errors.New("invalid value for required argument 'OsuExports'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageExportTask
	err := ctx.RegisterResource("outscale:index/imageExportTask:ImageExportTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageExportTask gets an existing ImageExportTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageExportTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageExportTaskState, opts ...pulumi.ResourceOption) (*ImageExportTask, error) {
	var resource ImageExportTask
	err := ctx.ReadResource("outscale:index/imageExportTask:ImageExportTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageExportTask resources.
type imageExportTaskState struct {
	// If the OMI export task fails, an error message appears.
	Comment *string `pulumi:"comment"`
	// The ID of the OMI to export.
	ImageId *string `pulumi:"imageId"`
	// Information about the OOS export task to create.
	OsuExports []ImageExportTaskOsuExport `pulumi:"osuExports"`
	// The progress of the OMI export task, as a percentage.
	Progress  *int    `pulumi:"progress"`
	RequestId *string `pulumi:"requestId"`
	// The state of the OMI export task (`pending/queued` \| `pending` \| `completed` \| `failed` \| `cancelled`).
	State *string `pulumi:"state"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []ImageExportTaskTag `pulumi:"tags"`
	// The ID of the OMI export task.
	TaskId *string `pulumi:"taskId"`
}

type ImageExportTaskState struct {
	// If the OMI export task fails, an error message appears.
	Comment pulumi.StringPtrInput
	// The ID of the OMI to export.
	ImageId pulumi.StringPtrInput
	// Information about the OOS export task to create.
	OsuExports ImageExportTaskOsuExportArrayInput
	// The progress of the OMI export task, as a percentage.
	Progress  pulumi.IntPtrInput
	RequestId pulumi.StringPtrInput
	// The state of the OMI export task (`pending/queued` \| `pending` \| `completed` \| `failed` \| `cancelled`).
	State pulumi.StringPtrInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags ImageExportTaskTagArrayInput
	// The ID of the OMI export task.
	TaskId pulumi.StringPtrInput
}

func (ImageExportTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageExportTaskState)(nil)).Elem()
}

type imageExportTaskArgs struct {
	// The ID of the OMI to export.
	ImageId string `pulumi:"imageId"`
	// Information about the OOS export task to create.
	OsuExports []ImageExportTaskOsuExport `pulumi:"osuExports"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []ImageExportTaskTag `pulumi:"tags"`
}

// The set of arguments for constructing a ImageExportTask resource.
type ImageExportTaskArgs struct {
	// The ID of the OMI to export.
	ImageId pulumi.StringInput
	// Information about the OOS export task to create.
	OsuExports ImageExportTaskOsuExportArrayInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags ImageExportTaskTagArrayInput
}

func (ImageExportTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageExportTaskArgs)(nil)).Elem()
}

type ImageExportTaskInput interface {
	pulumi.Input

	ToImageExportTaskOutput() ImageExportTaskOutput
	ToImageExportTaskOutputWithContext(ctx context.Context) ImageExportTaskOutput
}

func (*ImageExportTask) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageExportTask)(nil)).Elem()
}

func (i *ImageExportTask) ToImageExportTaskOutput() ImageExportTaskOutput {
	return i.ToImageExportTaskOutputWithContext(context.Background())
}

func (i *ImageExportTask) ToImageExportTaskOutputWithContext(ctx context.Context) ImageExportTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageExportTaskOutput)
}

func (i *ImageExportTask) ToOutput(ctx context.Context) pulumix.Output[*ImageExportTask] {
	return pulumix.Output[*ImageExportTask]{
		OutputState: i.ToImageExportTaskOutputWithContext(ctx).OutputState,
	}
}

// ImageExportTaskArrayInput is an input type that accepts ImageExportTaskArray and ImageExportTaskArrayOutput values.
// You can construct a concrete instance of `ImageExportTaskArrayInput` via:
//
//	ImageExportTaskArray{ ImageExportTaskArgs{...} }
type ImageExportTaskArrayInput interface {
	pulumi.Input

	ToImageExportTaskArrayOutput() ImageExportTaskArrayOutput
	ToImageExportTaskArrayOutputWithContext(context.Context) ImageExportTaskArrayOutput
}

type ImageExportTaskArray []ImageExportTaskInput

func (ImageExportTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageExportTask)(nil)).Elem()
}

func (i ImageExportTaskArray) ToImageExportTaskArrayOutput() ImageExportTaskArrayOutput {
	return i.ToImageExportTaskArrayOutputWithContext(context.Background())
}

func (i ImageExportTaskArray) ToImageExportTaskArrayOutputWithContext(ctx context.Context) ImageExportTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageExportTaskArrayOutput)
}

func (i ImageExportTaskArray) ToOutput(ctx context.Context) pulumix.Output[[]*ImageExportTask] {
	return pulumix.Output[[]*ImageExportTask]{
		OutputState: i.ToImageExportTaskArrayOutputWithContext(ctx).OutputState,
	}
}

// ImageExportTaskMapInput is an input type that accepts ImageExportTaskMap and ImageExportTaskMapOutput values.
// You can construct a concrete instance of `ImageExportTaskMapInput` via:
//
//	ImageExportTaskMap{ "key": ImageExportTaskArgs{...} }
type ImageExportTaskMapInput interface {
	pulumi.Input

	ToImageExportTaskMapOutput() ImageExportTaskMapOutput
	ToImageExportTaskMapOutputWithContext(context.Context) ImageExportTaskMapOutput
}

type ImageExportTaskMap map[string]ImageExportTaskInput

func (ImageExportTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageExportTask)(nil)).Elem()
}

func (i ImageExportTaskMap) ToImageExportTaskMapOutput() ImageExportTaskMapOutput {
	return i.ToImageExportTaskMapOutputWithContext(context.Background())
}

func (i ImageExportTaskMap) ToImageExportTaskMapOutputWithContext(ctx context.Context) ImageExportTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageExportTaskMapOutput)
}

func (i ImageExportTaskMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ImageExportTask] {
	return pulumix.Output[map[string]*ImageExportTask]{
		OutputState: i.ToImageExportTaskMapOutputWithContext(ctx).OutputState,
	}
}

type ImageExportTaskOutput struct{ *pulumi.OutputState }

func (ImageExportTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageExportTask)(nil)).Elem()
}

func (o ImageExportTaskOutput) ToImageExportTaskOutput() ImageExportTaskOutput {
	return o
}

func (o ImageExportTaskOutput) ToImageExportTaskOutputWithContext(ctx context.Context) ImageExportTaskOutput {
	return o
}

func (o ImageExportTaskOutput) ToOutput(ctx context.Context) pulumix.Output[*ImageExportTask] {
	return pulumix.Output[*ImageExportTask]{
		OutputState: o.OutputState,
	}
}

// If the OMI export task fails, an error message appears.
func (o ImageExportTaskOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageExportTask) pulumi.StringOutput { return v.Comment }).(pulumi.StringOutput)
}

// The ID of the OMI to export.
func (o ImageExportTaskOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageExportTask) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// Information about the OOS export task to create.
func (o ImageExportTaskOutput) OsuExports() ImageExportTaskOsuExportArrayOutput {
	return o.ApplyT(func(v *ImageExportTask) ImageExportTaskOsuExportArrayOutput { return v.OsuExports }).(ImageExportTaskOsuExportArrayOutput)
}

// The progress of the OMI export task, as a percentage.
func (o ImageExportTaskOutput) Progress() pulumi.IntOutput {
	return o.ApplyT(func(v *ImageExportTask) pulumi.IntOutput { return v.Progress }).(pulumi.IntOutput)
}

func (o ImageExportTaskOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageExportTask) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// The state of the OMI export task (`pending/queued` \| `pending` \| `completed` \| `failed` \| `cancelled`).
func (o ImageExportTaskOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageExportTask) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A tag to add to this resource. You can specify this argument several times.
func (o ImageExportTaskOutput) Tags() ImageExportTaskTagArrayOutput {
	return o.ApplyT(func(v *ImageExportTask) ImageExportTaskTagArrayOutput { return v.Tags }).(ImageExportTaskTagArrayOutput)
}

// The ID of the OMI export task.
func (o ImageExportTaskOutput) TaskId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageExportTask) pulumi.StringOutput { return v.TaskId }).(pulumi.StringOutput)
}

type ImageExportTaskArrayOutput struct{ *pulumi.OutputState }

func (ImageExportTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageExportTask)(nil)).Elem()
}

func (o ImageExportTaskArrayOutput) ToImageExportTaskArrayOutput() ImageExportTaskArrayOutput {
	return o
}

func (o ImageExportTaskArrayOutput) ToImageExportTaskArrayOutputWithContext(ctx context.Context) ImageExportTaskArrayOutput {
	return o
}

func (o ImageExportTaskArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ImageExportTask] {
	return pulumix.Output[[]*ImageExportTask]{
		OutputState: o.OutputState,
	}
}

func (o ImageExportTaskArrayOutput) Index(i pulumi.IntInput) ImageExportTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageExportTask {
		return vs[0].([]*ImageExportTask)[vs[1].(int)]
	}).(ImageExportTaskOutput)
}

type ImageExportTaskMapOutput struct{ *pulumi.OutputState }

func (ImageExportTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageExportTask)(nil)).Elem()
}

func (o ImageExportTaskMapOutput) ToImageExportTaskMapOutput() ImageExportTaskMapOutput {
	return o
}

func (o ImageExportTaskMapOutput) ToImageExportTaskMapOutputWithContext(ctx context.Context) ImageExportTaskMapOutput {
	return o
}

func (o ImageExportTaskMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ImageExportTask] {
	return pulumix.Output[map[string]*ImageExportTask]{
		OutputState: o.OutputState,
	}
}

func (o ImageExportTaskMapOutput) MapIndex(k pulumi.StringInput) ImageExportTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageExportTask {
		return vs[0].(map[string]*ImageExportTask)[vs[1].(string)]
	}).(ImageExportTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageExportTaskInput)(nil)).Elem(), &ImageExportTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageExportTaskArrayInput)(nil)).Elem(), ImageExportTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageExportTaskMapInput)(nil)).Elem(), ImageExportTaskMap{})
	pulumi.RegisterOutputType(ImageExportTaskOutput{})
	pulumi.RegisterOutputType(ImageExportTaskArrayOutput{})
	pulumi.RegisterOutputType(ImageExportTaskMapOutput{})
}
