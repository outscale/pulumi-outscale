// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a load balancer listener rule.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-listener).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.LookupLoadBalancerListenerRule(ctx, &outscale.LookupLoadBalancerListenerRuleArgs{
//				Filters: []outscale.GetLoadBalancerListenerRuleFilter{
//					{
//						Name: "listener_rule_names",
//						Values: []string{
//							"terraform-listener-rule02",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLoadBalancerListenerRule(ctx *pulumi.Context, args *LookupLoadBalancerListenerRuleArgs, opts ...pulumi.InvokeOption) (*LookupLoadBalancerListenerRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLoadBalancerListenerRuleResult
	err := ctx.Invoke("outscale:index/getLoadBalancerListenerRule:getLoadBalancerListenerRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoadBalancerListenerRule.
type LookupLoadBalancerListenerRuleArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters []GetLoadBalancerListenerRuleFilter `pulumi:"filters"`
	// A human-readable name for the listener rule.
	ListenerRuleName *string `pulumi:"listenerRuleName"`
}

// A collection of values returned by getLoadBalancerListenerRule.
type LookupLoadBalancerListenerRuleResult struct {
	// The type of action for the rule (always `forward`).
	Action  string                              `pulumi:"action"`
	Filters []GetLoadBalancerListenerRuleFilter `pulumi:"filters"`
	// A host-name pattern for the rule, with a maximum length of 128 characters. This host-name pattern supports maximum three wildcards, and must not contain any special characters except `-.?`.
	HostNamePattern string `pulumi:"hostNamePattern"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the listener.
	ListenerId int `pulumi:"listenerId"`
	// The ID of the listener rule.
	ListenerRuleId int `pulumi:"listenerRuleId"`
	// A human-readable name for the listener rule.
	ListenerRuleName string `pulumi:"listenerRuleName"`
	// A path pattern for the rule, with a maximum length of 128 characters. This path pattern supports maximum three wildcards, and must not contain any special characters except `_-.$/~&quot;'@:+?`.
	PathPattern string `pulumi:"pathPattern"`
	// The priority level of the listener rule, between `1` and `19999` both included. Each rule must have a unique priority level. Otherwise, an error is returned.
	Priority  int    `pulumi:"priority"`
	RequestId string `pulumi:"requestId"`
	// The IDs of the backend VMs.
	VmIds []string `pulumi:"vmIds"`
}

func LookupLoadBalancerListenerRuleOutput(ctx *pulumi.Context, args LookupLoadBalancerListenerRuleOutputArgs, opts ...pulumi.InvokeOption) LookupLoadBalancerListenerRuleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLoadBalancerListenerRuleResultOutput, error) {
			args := v.(LookupLoadBalancerListenerRuleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("outscale:index/getLoadBalancerListenerRule:getLoadBalancerListenerRule", args, LookupLoadBalancerListenerRuleResultOutput{}, options).(LookupLoadBalancerListenerRuleResultOutput), nil
		}).(LookupLoadBalancerListenerRuleResultOutput)
}

// A collection of arguments for invoking getLoadBalancerListenerRule.
type LookupLoadBalancerListenerRuleOutputArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters GetLoadBalancerListenerRuleFilterArrayInput `pulumi:"filters"`
	// A human-readable name for the listener rule.
	ListenerRuleName pulumi.StringPtrInput `pulumi:"listenerRuleName"`
}

func (LookupLoadBalancerListenerRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerListenerRuleArgs)(nil)).Elem()
}

// A collection of values returned by getLoadBalancerListenerRule.
type LookupLoadBalancerListenerRuleResultOutput struct{ *pulumi.OutputState }

func (LookupLoadBalancerListenerRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerListenerRuleResult)(nil)).Elem()
}

func (o LookupLoadBalancerListenerRuleResultOutput) ToLookupLoadBalancerListenerRuleResultOutput() LookupLoadBalancerListenerRuleResultOutput {
	return o
}

func (o LookupLoadBalancerListenerRuleResultOutput) ToLookupLoadBalancerListenerRuleResultOutputWithContext(ctx context.Context) LookupLoadBalancerListenerRuleResultOutput {
	return o
}

// The type of action for the rule (always `forward`).
func (o LookupLoadBalancerListenerRuleResultOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerListenerRuleResult) string { return v.Action }).(pulumi.StringOutput)
}

func (o LookupLoadBalancerListenerRuleResultOutput) Filters() GetLoadBalancerListenerRuleFilterArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerListenerRuleResult) []GetLoadBalancerListenerRuleFilter { return v.Filters }).(GetLoadBalancerListenerRuleFilterArrayOutput)
}

// A host-name pattern for the rule, with a maximum length of 128 characters. This host-name pattern supports maximum three wildcards, and must not contain any special characters except `-.?`.
func (o LookupLoadBalancerListenerRuleResultOutput) HostNamePattern() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerListenerRuleResult) string { return v.HostNamePattern }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupLoadBalancerListenerRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerListenerRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the listener.
func (o LookupLoadBalancerListenerRuleResultOutput) ListenerId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLoadBalancerListenerRuleResult) int { return v.ListenerId }).(pulumi.IntOutput)
}

// The ID of the listener rule.
func (o LookupLoadBalancerListenerRuleResultOutput) ListenerRuleId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLoadBalancerListenerRuleResult) int { return v.ListenerRuleId }).(pulumi.IntOutput)
}

// A human-readable name for the listener rule.
func (o LookupLoadBalancerListenerRuleResultOutput) ListenerRuleName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerListenerRuleResult) string { return v.ListenerRuleName }).(pulumi.StringOutput)
}

// A path pattern for the rule, with a maximum length of 128 characters. This path pattern supports maximum three wildcards, and must not contain any special characters except `_-.$/~&quot;'@:+?`.
func (o LookupLoadBalancerListenerRuleResultOutput) PathPattern() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerListenerRuleResult) string { return v.PathPattern }).(pulumi.StringOutput)
}

// The priority level of the listener rule, between `1` and `19999` both included. Each rule must have a unique priority level. Otherwise, an error is returned.
func (o LookupLoadBalancerListenerRuleResultOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupLoadBalancerListenerRuleResult) int { return v.Priority }).(pulumi.IntOutput)
}

func (o LookupLoadBalancerListenerRuleResultOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerListenerRuleResult) string { return v.RequestId }).(pulumi.StringOutput)
}

// The IDs of the backend VMs.
func (o LookupLoadBalancerListenerRuleResultOutput) VmIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupLoadBalancerListenerRuleResult) []string { return v.VmIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoadBalancerListenerRuleResultOutput{})
}
