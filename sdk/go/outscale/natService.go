// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a NAT service.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-NAT-Gateways.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-natservice).
//
// ## Example Usage
// ### Required resources
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net01, err := outscale.NewNet(ctx, "net01", &outscale.NetArgs{
//				IpRange: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet01, err := outscale.NewSubnet(ctx, "subnet01", &outscale.SubnetArgs{
//				NetId:   net01.NetId,
//				IpRange: pulumi.String("10.0.0.0/18"),
//			})
//			if err != nil {
//				return err
//			}
//			routeTable01, err := outscale.NewRouteTable(ctx, "routeTable01", &outscale.RouteTableArgs{
//				NetId: net01.NetId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewRouteTableLink(ctx, "outscaleRouteTableLink01", &outscale.RouteTableLinkArgs{
//				SubnetId:     subnet01.SubnetId,
//				RouteTableId: routeTable01.RouteTableId,
//			})
//			if err != nil {
//				return err
//			}
//			internetService01, err := outscale.NewInternetService(ctx, "internetService01", nil)
//			if err != nil {
//				return err
//			}
//			internetServiceLink01, err := outscale.NewInternetServiceLink(ctx, "internetServiceLink01", &outscale.InternetServiceLinkArgs{
//				NetId:             net01.NetId,
//				InternetServiceId: internetService01.InternetServiceId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewRoute(ctx, "route01", &outscale.RouteArgs{
//				DestinationIpRange: pulumi.String("0.0.0.0/0"),
//				GatewayId:          internetService01.InternetServiceId,
//				RouteTableId:       routeTable01.RouteTableId,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				internetServiceLink01,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewPublicIp(ctx, "publicIp01", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a NAT service
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewNatService(ctx, "natService01", &outscale.NatServiceArgs{
//				SubnetId:   pulumi.Any(outscale_subnet.Subnet01.Subnet_id),
//				PublicIpId: pulumi.Any(outscale_public_ip.Public_ip01.Public_ip_id),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				outscale_route.Route01,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A NAT service can be imported using its ID. For exampleconsole
//
// ```sh
//
//	$ pulumi import outscale:index/natService:NatService ImportedNatService nat-87654321
//
// ```
type NatService struct {
	pulumi.CustomResourceState

	// The ID of the NAT service.
	NatServiceId pulumi.StringOutput `pulumi:"natServiceId"`
	// The ID of the Net in which the NAT service is.
	NetId pulumi.StringOutput `pulumi:"netId"`
	// The allocation ID of the public IP to associate with the NAT service.<br />
	// If the public IP is already associated with another resource, you must first disassociate it.
	PublicIpId pulumi.StringOutput `pulumi:"publicIpId"`
	// Information about the public IP or IPs associated with the NAT service.
	PublicIps NatServicePublicIpArrayOutput `pulumi:"publicIps"`
	RequestId pulumi.StringOutput           `pulumi:"requestId"`
	// The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
	State pulumi.StringOutput `pulumi:"state"`
	// The ID of the Subnet in which you want to create the NAT service.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags NatServiceTagArrayOutput `pulumi:"tags"`
}

// NewNatService registers a new resource with the given unique name, arguments, and options.
func NewNatService(ctx *pulumi.Context,
	name string, args *NatServiceArgs, opts ...pulumi.ResourceOption) (*NatService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicIpId == nil {
		return nil, errors.New("invalid value for required argument 'PublicIpId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatService
	err := ctx.RegisterResource("outscale:index/natService:NatService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatService gets an existing NatService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatServiceState, opts ...pulumi.ResourceOption) (*NatService, error) {
	var resource NatService
	err := ctx.ReadResource("outscale:index/natService:NatService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatService resources.
type natServiceState struct {
	// The ID of the NAT service.
	NatServiceId *string `pulumi:"natServiceId"`
	// The ID of the Net in which the NAT service is.
	NetId *string `pulumi:"netId"`
	// The allocation ID of the public IP to associate with the NAT service.<br />
	// If the public IP is already associated with another resource, you must first disassociate it.
	PublicIpId *string `pulumi:"publicIpId"`
	// Information about the public IP or IPs associated with the NAT service.
	PublicIps []NatServicePublicIp `pulumi:"publicIps"`
	RequestId *string              `pulumi:"requestId"`
	// The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
	State *string `pulumi:"state"`
	// The ID of the Subnet in which you want to create the NAT service.
	SubnetId *string `pulumi:"subnetId"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []NatServiceTag `pulumi:"tags"`
}

type NatServiceState struct {
	// The ID of the NAT service.
	NatServiceId pulumi.StringPtrInput
	// The ID of the Net in which the NAT service is.
	NetId pulumi.StringPtrInput
	// The allocation ID of the public IP to associate with the NAT service.<br />
	// If the public IP is already associated with another resource, you must first disassociate it.
	PublicIpId pulumi.StringPtrInput
	// Information about the public IP or IPs associated with the NAT service.
	PublicIps NatServicePublicIpArrayInput
	RequestId pulumi.StringPtrInput
	// The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
	State pulumi.StringPtrInput
	// The ID of the Subnet in which you want to create the NAT service.
	SubnetId pulumi.StringPtrInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags NatServiceTagArrayInput
}

func (NatServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*natServiceState)(nil)).Elem()
}

type natServiceArgs struct {
	// The allocation ID of the public IP to associate with the NAT service.<br />
	// If the public IP is already associated with another resource, you must first disassociate it.
	PublicIpId string `pulumi:"publicIpId"`
	// The ID of the Subnet in which you want to create the NAT service.
	SubnetId string `pulumi:"subnetId"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []NatServiceTag `pulumi:"tags"`
}

// The set of arguments for constructing a NatService resource.
type NatServiceArgs struct {
	// The allocation ID of the public IP to associate with the NAT service.<br />
	// If the public IP is already associated with another resource, you must first disassociate it.
	PublicIpId pulumi.StringInput
	// The ID of the Subnet in which you want to create the NAT service.
	SubnetId pulumi.StringInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags NatServiceTagArrayInput
}

func (NatServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natServiceArgs)(nil)).Elem()
}

type NatServiceInput interface {
	pulumi.Input

	ToNatServiceOutput() NatServiceOutput
	ToNatServiceOutputWithContext(ctx context.Context) NatServiceOutput
}

func (*NatService) ElementType() reflect.Type {
	return reflect.TypeOf((**NatService)(nil)).Elem()
}

func (i *NatService) ToNatServiceOutput() NatServiceOutput {
	return i.ToNatServiceOutputWithContext(context.Background())
}

func (i *NatService) ToNatServiceOutputWithContext(ctx context.Context) NatServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatServiceOutput)
}

// NatServiceArrayInput is an input type that accepts NatServiceArray and NatServiceArrayOutput values.
// You can construct a concrete instance of `NatServiceArrayInput` via:
//
//	NatServiceArray{ NatServiceArgs{...} }
type NatServiceArrayInput interface {
	pulumi.Input

	ToNatServiceArrayOutput() NatServiceArrayOutput
	ToNatServiceArrayOutputWithContext(context.Context) NatServiceArrayOutput
}

type NatServiceArray []NatServiceInput

func (NatServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatService)(nil)).Elem()
}

func (i NatServiceArray) ToNatServiceArrayOutput() NatServiceArrayOutput {
	return i.ToNatServiceArrayOutputWithContext(context.Background())
}

func (i NatServiceArray) ToNatServiceArrayOutputWithContext(ctx context.Context) NatServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatServiceArrayOutput)
}

// NatServiceMapInput is an input type that accepts NatServiceMap and NatServiceMapOutput values.
// You can construct a concrete instance of `NatServiceMapInput` via:
//
//	NatServiceMap{ "key": NatServiceArgs{...} }
type NatServiceMapInput interface {
	pulumi.Input

	ToNatServiceMapOutput() NatServiceMapOutput
	ToNatServiceMapOutputWithContext(context.Context) NatServiceMapOutput
}

type NatServiceMap map[string]NatServiceInput

func (NatServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatService)(nil)).Elem()
}

func (i NatServiceMap) ToNatServiceMapOutput() NatServiceMapOutput {
	return i.ToNatServiceMapOutputWithContext(context.Background())
}

func (i NatServiceMap) ToNatServiceMapOutputWithContext(ctx context.Context) NatServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatServiceMapOutput)
}

type NatServiceOutput struct{ *pulumi.OutputState }

func (NatServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatService)(nil)).Elem()
}

func (o NatServiceOutput) ToNatServiceOutput() NatServiceOutput {
	return o
}

func (o NatServiceOutput) ToNatServiceOutputWithContext(ctx context.Context) NatServiceOutput {
	return o
}

// The ID of the NAT service.
func (o NatServiceOutput) NatServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatService) pulumi.StringOutput { return v.NatServiceId }).(pulumi.StringOutput)
}

// The ID of the Net in which the NAT service is.
func (o NatServiceOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatService) pulumi.StringOutput { return v.NetId }).(pulumi.StringOutput)
}

// The allocation ID of the public IP to associate with the NAT service.<br />
// If the public IP is already associated with another resource, you must first disassociate it.
func (o NatServiceOutput) PublicIpId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatService) pulumi.StringOutput { return v.PublicIpId }).(pulumi.StringOutput)
}

// Information about the public IP or IPs associated with the NAT service.
func (o NatServiceOutput) PublicIps() NatServicePublicIpArrayOutput {
	return o.ApplyT(func(v *NatService) NatServicePublicIpArrayOutput { return v.PublicIps }).(NatServicePublicIpArrayOutput)
}

func (o NatServiceOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatService) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
func (o NatServiceOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NatService) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The ID of the Subnet in which you want to create the NAT service.
func (o NatServiceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NatService) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// A tag to add to this resource. You can specify this argument several times.
func (o NatServiceOutput) Tags() NatServiceTagArrayOutput {
	return o.ApplyT(func(v *NatService) NatServiceTagArrayOutput { return v.Tags }).(NatServiceTagArrayOutput)
}

type NatServiceArrayOutput struct{ *pulumi.OutputState }

func (NatServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatService)(nil)).Elem()
}

func (o NatServiceArrayOutput) ToNatServiceArrayOutput() NatServiceArrayOutput {
	return o
}

func (o NatServiceArrayOutput) ToNatServiceArrayOutputWithContext(ctx context.Context) NatServiceArrayOutput {
	return o
}

func (o NatServiceArrayOutput) Index(i pulumi.IntInput) NatServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NatService {
		return vs[0].([]*NatService)[vs[1].(int)]
	}).(NatServiceOutput)
}

type NatServiceMapOutput struct{ *pulumi.OutputState }

func (NatServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatService)(nil)).Elem()
}

func (o NatServiceMapOutput) ToNatServiceMapOutput() NatServiceMapOutput {
	return o
}

func (o NatServiceMapOutput) ToNatServiceMapOutputWithContext(ctx context.Context) NatServiceMapOutput {
	return o
}

func (o NatServiceMapOutput) MapIndex(k pulumi.StringInput) NatServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NatService {
		return vs[0].(map[string]*NatService)[vs[1].(string)]
	}).(NatServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatServiceInput)(nil)).Elem(), &NatService{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatServiceArrayInput)(nil)).Elem(), NatServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatServiceMapInput)(nil)).Elem(), NatServiceMap{})
	pulumi.RegisterOutputType(NatServiceOutput{})
	pulumi.RegisterOutputType(NatServiceArrayOutput{})
	pulumi.RegisterOutputType(NatServiceMapOutput{})
}
