// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a Subnet.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPCs.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-subnet).
func LookupSubnet(ctx *pulumi.Context, args *LookupSubnetArgs, opts ...pulumi.InvokeOption) (*LookupSubnetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSubnetResult
	err := ctx.Invoke("outscale:index/getSubnet:getSubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters []GetSubnetFilter `pulumi:"filters"`
	// The ID of the Subnet.
	SubnetId *string `pulumi:"subnetId"`
}

// A collection of values returned by getSubnet.
type LookupSubnetResult struct {
	// The number of available IPs in the Subnets.
	AvailableIpsCount int               `pulumi:"availableIpsCount"`
	Filters           []GetSubnetFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).
	IpRange string `pulumi:"ipRange"`
	// If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.
	MapPublicIpOnLaunch bool `pulumi:"mapPublicIpOnLaunch"`
	// The ID of the Net in which the Subnet is.
	NetId     string `pulumi:"netId"`
	RequestId string `pulumi:"requestId"`
	// The state of the Subnet (`pending` \| `available` \| `deleted`).
	State string `pulumi:"state"`
	// The ID of the Subnet.
	SubnetId string `pulumi:"subnetId"`
	// The name of the Subregion in which the Subnet is located.
	SubregionName string `pulumi:"subregionName"`
	// One or more tags associated with the Subnet.
	Tags []GetSubnetTag `pulumi:"tags"`
}

func LookupSubnetOutput(ctx *pulumi.Context, args LookupSubnetOutputArgs, opts ...pulumi.InvokeOption) LookupSubnetResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSubnetResult, error) {
			args := v.(LookupSubnetArgs)
			r, err := LookupSubnet(ctx, &args, opts...)
			var s LookupSubnetResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSubnetResultOutput)
}

// A collection of arguments for invoking getSubnet.
type LookupSubnetOutputArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters GetSubnetFilterArrayInput `pulumi:"filters"`
	// The ID of the Subnet.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (LookupSubnetOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetArgs)(nil)).Elem()
}

// A collection of values returned by getSubnet.
type LookupSubnetResultOutput struct{ *pulumi.OutputState }

func (LookupSubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSubnetResult)(nil)).Elem()
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutput() LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) ToLookupSubnetResultOutputWithContext(ctx context.Context) LookupSubnetResultOutput {
	return o
}

func (o LookupSubnetResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupSubnetResult] {
	return pulumix.Output[LookupSubnetResult]{
		OutputState: o.OutputState,
	}
}

// The number of available IPs in the Subnets.
func (o LookupSubnetResultOutput) AvailableIpsCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSubnetResult) int { return v.AvailableIpsCount }).(pulumi.IntOutput)
}

func (o LookupSubnetResultOutput) Filters() GetSubnetFilterArrayOutput {
	return o.ApplyT(func(v LookupSubnetResult) []GetSubnetFilter { return v.Filters }).(GetSubnetFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSubnetResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.Id }).(pulumi.StringOutput)
}

// The IP range in the Subnet, in CIDR notation (for example, `10.0.0.0/16`).
func (o LookupSubnetResultOutput) IpRange() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.IpRange }).(pulumi.StringOutput)
}

// If true, a public IP is assigned to the network interface cards (NICs) created in the specified Subnet.
func (o LookupSubnetResultOutput) MapPublicIpOnLaunch() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSubnetResult) bool { return v.MapPublicIpOnLaunch }).(pulumi.BoolOutput)
}

// The ID of the Net in which the Subnet is.
func (o LookupSubnetResultOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.NetId }).(pulumi.StringOutput)
}

func (o LookupSubnetResultOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.RequestId }).(pulumi.StringOutput)
}

// The state of the Subnet (`pending` \| `available` \| `deleted`).
func (o LookupSubnetResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.State }).(pulumi.StringOutput)
}

// The ID of the Subnet.
func (o LookupSubnetResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The name of the Subregion in which the Subnet is located.
func (o LookupSubnetResultOutput) SubregionName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSubnetResult) string { return v.SubregionName }).(pulumi.StringOutput)
}

// One or more tags associated with the Subnet.
func (o LookupSubnetResultOutput) Tags() GetSubnetTagArrayOutput {
	return o.ApplyT(func(v LookupSubnetResult) []GetSubnetTag { return v.Tags }).(GetSubnetTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSubnetResultOutput{})
}
