// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a route table.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Route-Tables.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-routetable).
//
// ## Example Usage
// ### Required resource
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewNet(ctx, "net01", &outscale.NetArgs{
//				IpRange: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a route table
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewRouteTable(ctx, "routeTable01", &outscale.RouteTableArgs{
//				NetId: pulumi.Any(outscale_net.Net01.Net_id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A route table can be imported using its ID. For exampleconsole
//
// ```sh
//
//	$ pulumi import outscale:index/routeTable:RouteTable ImportedRouteTable rtb-12345678
//
// ```
type RouteTable struct {
	pulumi.CustomResourceState

	// One or more associations between the route table and Subnets.
	LinkRouteTables RouteTableLinkRouteTableArrayOutput `pulumi:"linkRouteTables"`
	// The ID of the Net for which you want to create a route table.
	NetId     pulumi.StringOutput `pulumi:"netId"`
	RequestId pulumi.StringOutput `pulumi:"requestId"`
	// Information about virtual gateways propagating routes.
	RoutePropagatingVirtualGateways RouteTableRoutePropagatingVirtualGatewayArrayOutput `pulumi:"routePropagatingVirtualGateways"`
	// The ID of the route table.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// One or more routes in the route table.
	Routes RouteTableRouteArrayOutput `pulumi:"routes"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags RouteTableTagArrayOutput `pulumi:"tags"`
}

// NewRouteTable registers a new resource with the given unique name, arguments, and options.
func NewRouteTable(ctx *pulumi.Context,
	name string, args *RouteTableArgs, opts ...pulumi.ResourceOption) (*RouteTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetId == nil {
		return nil, errors.New("invalid value for required argument 'NetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteTable
	err := ctx.RegisterResource("outscale:index/routeTable:RouteTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTable gets an existing RouteTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteTableState, opts ...pulumi.ResourceOption) (*RouteTable, error) {
	var resource RouteTable
	err := ctx.ReadResource("outscale:index/routeTable:RouteTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteTable resources.
type routeTableState struct {
	// One or more associations between the route table and Subnets.
	LinkRouteTables []RouteTableLinkRouteTable `pulumi:"linkRouteTables"`
	// The ID of the Net for which you want to create a route table.
	NetId     *string `pulumi:"netId"`
	RequestId *string `pulumi:"requestId"`
	// Information about virtual gateways propagating routes.
	RoutePropagatingVirtualGateways []RouteTableRoutePropagatingVirtualGateway `pulumi:"routePropagatingVirtualGateways"`
	// The ID of the route table.
	RouteTableId *string `pulumi:"routeTableId"`
	// One or more routes in the route table.
	Routes []RouteTableRoute `pulumi:"routes"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []RouteTableTag `pulumi:"tags"`
}

type RouteTableState struct {
	// One or more associations between the route table and Subnets.
	LinkRouteTables RouteTableLinkRouteTableArrayInput
	// The ID of the Net for which you want to create a route table.
	NetId     pulumi.StringPtrInput
	RequestId pulumi.StringPtrInput
	// Information about virtual gateways propagating routes.
	RoutePropagatingVirtualGateways RouteTableRoutePropagatingVirtualGatewayArrayInput
	// The ID of the route table.
	RouteTableId pulumi.StringPtrInput
	// One or more routes in the route table.
	Routes RouteTableRouteArrayInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags RouteTableTagArrayInput
}

func (RouteTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableState)(nil)).Elem()
}

type routeTableArgs struct {
	// The ID of the Net for which you want to create a route table.
	NetId string `pulumi:"netId"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []RouteTableTag `pulumi:"tags"`
}

// The set of arguments for constructing a RouteTable resource.
type RouteTableArgs struct {
	// The ID of the Net for which you want to create a route table.
	NetId pulumi.StringInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags RouteTableTagArrayInput
}

func (RouteTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableArgs)(nil)).Elem()
}

type RouteTableInput interface {
	pulumi.Input

	ToRouteTableOutput() RouteTableOutput
	ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput
}

func (*RouteTable) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTable)(nil)).Elem()
}

func (i *RouteTable) ToRouteTableOutput() RouteTableOutput {
	return i.ToRouteTableOutputWithContext(context.Background())
}

func (i *RouteTable) ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableOutput)
}

// RouteTableArrayInput is an input type that accepts RouteTableArray and RouteTableArrayOutput values.
// You can construct a concrete instance of `RouteTableArrayInput` via:
//
//	RouteTableArray{ RouteTableArgs{...} }
type RouteTableArrayInput interface {
	pulumi.Input

	ToRouteTableArrayOutput() RouteTableArrayOutput
	ToRouteTableArrayOutputWithContext(context.Context) RouteTableArrayOutput
}

type RouteTableArray []RouteTableInput

func (RouteTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTable)(nil)).Elem()
}

func (i RouteTableArray) ToRouteTableArrayOutput() RouteTableArrayOutput {
	return i.ToRouteTableArrayOutputWithContext(context.Background())
}

func (i RouteTableArray) ToRouteTableArrayOutputWithContext(ctx context.Context) RouteTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableArrayOutput)
}

// RouteTableMapInput is an input type that accepts RouteTableMap and RouteTableMapOutput values.
// You can construct a concrete instance of `RouteTableMapInput` via:
//
//	RouteTableMap{ "key": RouteTableArgs{...} }
type RouteTableMapInput interface {
	pulumi.Input

	ToRouteTableMapOutput() RouteTableMapOutput
	ToRouteTableMapOutputWithContext(context.Context) RouteTableMapOutput
}

type RouteTableMap map[string]RouteTableInput

func (RouteTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTable)(nil)).Elem()
}

func (i RouteTableMap) ToRouteTableMapOutput() RouteTableMapOutput {
	return i.ToRouteTableMapOutputWithContext(context.Background())
}

func (i RouteTableMap) ToRouteTableMapOutputWithContext(ctx context.Context) RouteTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableMapOutput)
}

type RouteTableOutput struct{ *pulumi.OutputState }

func (RouteTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTable)(nil)).Elem()
}

func (o RouteTableOutput) ToRouteTableOutput() RouteTableOutput {
	return o
}

func (o RouteTableOutput) ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput {
	return o
}

// One or more associations between the route table and Subnets.
func (o RouteTableOutput) LinkRouteTables() RouteTableLinkRouteTableArrayOutput {
	return o.ApplyT(func(v *RouteTable) RouteTableLinkRouteTableArrayOutput { return v.LinkRouteTables }).(RouteTableLinkRouteTableArrayOutput)
}

// The ID of the Net for which you want to create a route table.
func (o RouteTableOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.NetId }).(pulumi.StringOutput)
}

func (o RouteTableOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// Information about virtual gateways propagating routes.
func (o RouteTableOutput) RoutePropagatingVirtualGateways() RouteTableRoutePropagatingVirtualGatewayArrayOutput {
	return o.ApplyT(func(v *RouteTable) RouteTableRoutePropagatingVirtualGatewayArrayOutput {
		return v.RoutePropagatingVirtualGateways
	}).(RouteTableRoutePropagatingVirtualGatewayArrayOutput)
}

// The ID of the route table.
func (o RouteTableOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

// One or more routes in the route table.
func (o RouteTableOutput) Routes() RouteTableRouteArrayOutput {
	return o.ApplyT(func(v *RouteTable) RouteTableRouteArrayOutput { return v.Routes }).(RouteTableRouteArrayOutput)
}

// A tag to add to this resource. You can specify this argument several times.
func (o RouteTableOutput) Tags() RouteTableTagArrayOutput {
	return o.ApplyT(func(v *RouteTable) RouteTableTagArrayOutput { return v.Tags }).(RouteTableTagArrayOutput)
}

type RouteTableArrayOutput struct{ *pulumi.OutputState }

func (RouteTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTable)(nil)).Elem()
}

func (o RouteTableArrayOutput) ToRouteTableArrayOutput() RouteTableArrayOutput {
	return o
}

func (o RouteTableArrayOutput) ToRouteTableArrayOutputWithContext(ctx context.Context) RouteTableArrayOutput {
	return o
}

func (o RouteTableArrayOutput) Index(i pulumi.IntInput) RouteTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteTable {
		return vs[0].([]*RouteTable)[vs[1].(int)]
	}).(RouteTableOutput)
}

type RouteTableMapOutput struct{ *pulumi.OutputState }

func (RouteTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTable)(nil)).Elem()
}

func (o RouteTableMapOutput) ToRouteTableMapOutput() RouteTableMapOutput {
	return o
}

func (o RouteTableMapOutput) ToRouteTableMapOutputWithContext(ctx context.Context) RouteTableMapOutput {
	return o
}

func (o RouteTableMapOutput) MapIndex(k pulumi.StringInput) RouteTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteTable {
		return vs[0].(map[string]*RouteTable)[vs[1].(string)]
	}).(RouteTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableInput)(nil)).Elem(), &RouteTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableArrayInput)(nil)).Elem(), RouteTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableMapInput)(nil)).Elem(), RouteTableMap{})
	pulumi.RegisterOutputType(RouteTableOutput{})
	pulumi.RegisterOutputType(RouteTableArrayOutput{})
	pulumi.RegisterOutputType(RouteTableMapOutput{})
}
