// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a snapshot.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Snapshots.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-snapshot).
//
// ## Example Usage
// ### Required resource
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewVolume(ctx, "volume01", &outscale.VolumeArgs{
//				Size:          pulumi.Int(40),
//				SubregionName: pulumi.String(fmt.Sprintf("%va", _var.Region)),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a snapshot
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewSnapshot(ctx, "snapshot01", &outscale.SnapshotArgs{
//				VolumeId: pulumi.Any(outscale_volume.Volume01.Volume_id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Copy a snapshot
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewSnapshot(ctx, "snapshot02", &outscale.SnapshotArgs{
//				Description:      pulumi.String("Terraform snapshot copy"),
//				SourceRegionName: pulumi.String("eu-west-2"),
//				SourceSnapshotId: pulumi.String("snap-12345678"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A snapshot can be imported using its ID. For exampleconsole
//
// ```sh
//
//	$ pulumi import outscale:index/snapshot:Snapshot ImportedSnapshot snap-12345678
//
// ```
type Snapshot struct {
	pulumi.CustomResourceState

	// The account alias of the owner of the snapshot.
	AccountAlias pulumi.StringOutput `pulumi:"accountAlias"`
	// The account ID of the owner of the snapshot.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The date and time of creation of the snapshot.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// A description for the snapshot.
	Description pulumi.StringOutput `pulumi:"description"`
	// (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
	FileLocation pulumi.StringOutput `pulumi:"fileLocation"`
	// Permissions for the resource.
	PermissionsToCreateVolumes SnapshotPermissionsToCreateVolumeArrayOutput `pulumi:"permissionsToCreateVolumes"`
	// The progress of the snapshot, as a percentage.
	Progress  pulumi.IntOutput    `pulumi:"progress"`
	RequestId pulumi.StringOutput `pulumi:"requestId"`
	// The ID of the snapshot.
	SnapshotId pulumi.StringOutput `pulumi:"snapshotId"`
	// (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
	SnapshotSize pulumi.IntOutput `pulumi:"snapshotSize"`
	// (When copying) The name of the source Region, which must be the same as the Region of your account.
	SourceRegionName pulumi.StringOutput `pulumi:"sourceRegionName"`
	// (When copying) The ID of the snapshot you want to copy.
	SourceSnapshotId pulumi.StringOutput `pulumi:"sourceSnapshotId"`
	// The state of the snapshot (`in-queue` \| `completed` \| `error`).
	State pulumi.StringOutput `pulumi:"state"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags SnapshotTagArrayOutput `pulumi:"tags"`
	// (When creating) The ID of the volume you want to create a snapshot of.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
	// The size of the volume used to create the snapshot, in gibibytes (GiB).
	VolumeSize pulumi.IntOutput `pulumi:"volumeSize"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		args = &SnapshotArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snapshot
	err := ctx.RegisterResource("outscale:index/snapshot:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("outscale:index/snapshot:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
	// The account alias of the owner of the snapshot.
	AccountAlias *string `pulumi:"accountAlias"`
	// The account ID of the owner of the snapshot.
	AccountId *string `pulumi:"accountId"`
	// The date and time of creation of the snapshot.
	CreationDate *string `pulumi:"creationDate"`
	// A description for the snapshot.
	Description *string `pulumi:"description"`
	// (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
	FileLocation *string `pulumi:"fileLocation"`
	// Permissions for the resource.
	PermissionsToCreateVolumes []SnapshotPermissionsToCreateVolume `pulumi:"permissionsToCreateVolumes"`
	// The progress of the snapshot, as a percentage.
	Progress  *int    `pulumi:"progress"`
	RequestId *string `pulumi:"requestId"`
	// The ID of the snapshot.
	SnapshotId *string `pulumi:"snapshotId"`
	// (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
	SnapshotSize *int `pulumi:"snapshotSize"`
	// (When copying) The name of the source Region, which must be the same as the Region of your account.
	SourceRegionName *string `pulumi:"sourceRegionName"`
	// (When copying) The ID of the snapshot you want to copy.
	SourceSnapshotId *string `pulumi:"sourceSnapshotId"`
	// The state of the snapshot (`in-queue` \| `completed` \| `error`).
	State *string `pulumi:"state"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []SnapshotTag `pulumi:"tags"`
	// (When creating) The ID of the volume you want to create a snapshot of.
	VolumeId *string `pulumi:"volumeId"`
	// The size of the volume used to create the snapshot, in gibibytes (GiB).
	VolumeSize *int `pulumi:"volumeSize"`
}

type SnapshotState struct {
	// The account alias of the owner of the snapshot.
	AccountAlias pulumi.StringPtrInput
	// The account ID of the owner of the snapshot.
	AccountId pulumi.StringPtrInput
	// The date and time of creation of the snapshot.
	CreationDate pulumi.StringPtrInput
	// A description for the snapshot.
	Description pulumi.StringPtrInput
	// (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
	FileLocation pulumi.StringPtrInput
	// Permissions for the resource.
	PermissionsToCreateVolumes SnapshotPermissionsToCreateVolumeArrayInput
	// The progress of the snapshot, as a percentage.
	Progress  pulumi.IntPtrInput
	RequestId pulumi.StringPtrInput
	// The ID of the snapshot.
	SnapshotId pulumi.StringPtrInput
	// (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
	SnapshotSize pulumi.IntPtrInput
	// (When copying) The name of the source Region, which must be the same as the Region of your account.
	SourceRegionName pulumi.StringPtrInput
	// (When copying) The ID of the snapshot you want to copy.
	SourceSnapshotId pulumi.StringPtrInput
	// The state of the snapshot (`in-queue` \| `completed` \| `error`).
	State pulumi.StringPtrInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags SnapshotTagArrayInput
	// (When creating) The ID of the volume you want to create a snapshot of.
	VolumeId pulumi.StringPtrInput
	// The size of the volume used to create the snapshot, in gibibytes (GiB).
	VolumeSize pulumi.IntPtrInput
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	// A description for the snapshot.
	Description *string `pulumi:"description"`
	// (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
	FileLocation *string `pulumi:"fileLocation"`
	// (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
	SnapshotSize *int `pulumi:"snapshotSize"`
	// (When copying) The name of the source Region, which must be the same as the Region of your account.
	SourceRegionName *string `pulumi:"sourceRegionName"`
	// (When copying) The ID of the snapshot you want to copy.
	SourceSnapshotId *string `pulumi:"sourceSnapshotId"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []SnapshotTag `pulumi:"tags"`
	// (When creating) The ID of the volume you want to create a snapshot of.
	VolumeId *string `pulumi:"volumeId"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// A description for the snapshot.
	Description pulumi.StringPtrInput
	// (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
	FileLocation pulumi.StringPtrInput
	// (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
	SnapshotSize pulumi.IntPtrInput
	// (When copying) The name of the source Region, which must be the same as the Region of your account.
	SourceRegionName pulumi.StringPtrInput
	// (When copying) The ID of the snapshot you want to copy.
	SourceSnapshotId pulumi.StringPtrInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags SnapshotTagArrayInput
	// (When creating) The ID of the volume you want to create a snapshot of.
	VolumeId pulumi.StringPtrInput
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotInput interface {
	pulumi.Input

	ToSnapshotOutput() SnapshotOutput
	ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput
}

func (*Snapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (i *Snapshot) ToSnapshotOutput() SnapshotOutput {
	return i.ToSnapshotOutputWithContext(context.Background())
}

func (i *Snapshot) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotOutput)
}

// SnapshotArrayInput is an input type that accepts SnapshotArray and SnapshotArrayOutput values.
// You can construct a concrete instance of `SnapshotArrayInput` via:
//
//	SnapshotArray{ SnapshotArgs{...} }
type SnapshotArrayInput interface {
	pulumi.Input

	ToSnapshotArrayOutput() SnapshotArrayOutput
	ToSnapshotArrayOutputWithContext(context.Context) SnapshotArrayOutput
}

type SnapshotArray []SnapshotInput

func (SnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (i SnapshotArray) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return i.ToSnapshotArrayOutputWithContext(context.Background())
}

func (i SnapshotArray) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotArrayOutput)
}

// SnapshotMapInput is an input type that accepts SnapshotMap and SnapshotMapOutput values.
// You can construct a concrete instance of `SnapshotMapInput` via:
//
//	SnapshotMap{ "key": SnapshotArgs{...} }
type SnapshotMapInput interface {
	pulumi.Input

	ToSnapshotMapOutput() SnapshotMapOutput
	ToSnapshotMapOutputWithContext(context.Context) SnapshotMapOutput
}

type SnapshotMap map[string]SnapshotInput

func (SnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (i SnapshotMap) ToSnapshotMapOutput() SnapshotMapOutput {
	return i.ToSnapshotMapOutputWithContext(context.Background())
}

func (i SnapshotMap) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotMapOutput)
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

// The account alias of the owner of the snapshot.
func (o SnapshotOutput) AccountAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.AccountAlias }).(pulumi.StringOutput)
}

// The account ID of the owner of the snapshot.
func (o SnapshotOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The date and time of creation of the snapshot.
func (o SnapshotOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// A description for the snapshot.
func (o SnapshotOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
func (o SnapshotOutput) FileLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.FileLocation }).(pulumi.StringOutput)
}

// Permissions for the resource.
func (o SnapshotOutput) PermissionsToCreateVolumes() SnapshotPermissionsToCreateVolumeArrayOutput {
	return o.ApplyT(func(v *Snapshot) SnapshotPermissionsToCreateVolumeArrayOutput { return v.PermissionsToCreateVolumes }).(SnapshotPermissionsToCreateVolumeArrayOutput)
}

// The progress of the snapshot, as a percentage.
func (o SnapshotOutput) Progress() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.Progress }).(pulumi.IntOutput)
}

func (o SnapshotOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// The ID of the snapshot.
func (o SnapshotOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.SnapshotId }).(pulumi.StringOutput)
}

// (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
func (o SnapshotOutput) SnapshotSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.SnapshotSize }).(pulumi.IntOutput)
}

// (When copying) The name of the source Region, which must be the same as the Region of your account.
func (o SnapshotOutput) SourceRegionName() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.SourceRegionName }).(pulumi.StringOutput)
}

// (When copying) The ID of the snapshot you want to copy.
func (o SnapshotOutput) SourceSnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.SourceSnapshotId }).(pulumi.StringOutput)
}

// The state of the snapshot (`in-queue` \| `completed` \| `error`).
func (o SnapshotOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A tag to add to this resource. You can specify this argument several times.
func (o SnapshotOutput) Tags() SnapshotTagArrayOutput {
	return o.ApplyT(func(v *Snapshot) SnapshotTagArrayOutput { return v.Tags }).(SnapshotTagArrayOutput)
}

// (When creating) The ID of the volume you want to create a snapshot of.
func (o SnapshotOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

// The size of the volume used to create the snapshot, in gibibytes (GiB).
func (o SnapshotOutput) VolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.VolumeSize }).(pulumi.IntOutput)
}

type SnapshotArrayOutput struct{ *pulumi.OutputState }

func (SnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) Index(i pulumi.IntInput) SnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].([]*Snapshot)[vs[1].(int)]
	}).(SnapshotOutput)
}

type SnapshotMapOutput struct{ *pulumi.OutputState }

func (SnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (o SnapshotMapOutput) ToSnapshotMapOutput() SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) MapIndex(k pulumi.StringInput) SnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].(map[string]*Snapshot)[vs[1].(string)]
	}).(SnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotInput)(nil)).Elem(), &Snapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotArrayInput)(nil)).Elem(), SnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotMapInput)(nil)).Elem(), SnapshotMap{})
	pulumi.RegisterOutputType(SnapshotOutput{})
	pulumi.RegisterOutputType(SnapshotArrayOutput{})
	pulumi.RegisterOutputType(SnapshotMapOutput{})
}
