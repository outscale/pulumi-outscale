// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an image.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-OMIs.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-image).
//
// ## Example Usage
//
// ## Import
//
// An image can be imported using its ID. For exampleconsole
//
// ```sh
//
//	$ pulumi import outscale:index/image:Image ImportedImage ami-12345678
//
// ```
type Image struct {
	pulumi.CustomResourceState

	// The account alias of the owner of the OMI.
	AccountAlias pulumi.StringOutput `pulumi:"accountAlias"`
	// The account ID of the owner of the OMI.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The architecture of the OMI (by default, `i386` if you specified the `fileLocation` or `rootDeviceName` parameter).
	Architecture pulumi.StringOutput `pulumi:"architecture"`
	// One or more block device mappings.
	BlockDeviceMappings ImageBlockDeviceMappingArrayOutput `pulumi:"blockDeviceMappings"`
	// The date and time of creation of the OMI.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// A description for the new OMI.
	Description pulumi.StringOutput `pulumi:"description"`
	// The pre-signed URL of the OMI manifest file, or the full path to the OMI stored in a bucket. If you specify this parameter, a copy of the OMI is created in your account. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	FileLocation pulumi.StringOutput `pulumi:"fileLocation"`
	// The ID of the OMI.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// A unique name for the new OMI.<br />
	// Constraints: 3-128 alphanumeric characters, underscores (_), spaces ( ), parentheses (()), slashes (/), periods (.), or dashes (-).
	ImageName pulumi.StringOutput `pulumi:"imageName"`
	// The type of the OMI.
	ImageType pulumi.StringOutput `pulumi:"imageType"`
	IsPublic  pulumi.BoolOutput   `pulumi:"isPublic"`
	// If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
	NoReboot pulumi.BoolOutput `pulumi:"noReboot"`
	// Information about the users who have permissions for the resource.
	PermissionsToLaunches ImagePermissionsToLaunchArrayOutput `pulumi:"permissionsToLaunches"`
	// The product code associated with the OMI (`0001` Linux/Unix \| `0002` Windows \| `0004` Linux/Oracle \| `0005` Windows 10).
	ProductCodes pulumi.StringArrayOutput `pulumi:"productCodes"`
	RequestId    pulumi.StringOutput      `pulumi:"requestId"`
	// The name of the root device. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	RootDeviceName pulumi.StringOutput `pulumi:"rootDeviceName"`
	// The type of root device used by the OMI (always `bsu`).
	RootDeviceType pulumi.StringOutput `pulumi:"rootDeviceType"`
	// The ID of the OMI you want to copy. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	SourceImageId pulumi.StringOutput `pulumi:"sourceImageId"`
	// The name of the source Region, which must be the same as the Region of your account.
	SourceRegionName pulumi.StringPtrOutput `pulumi:"sourceRegionName"`
	// The state of the OMI (`pending` \| `available` \| `failed`).
	State pulumi.StringOutput `pulumi:"state"`
	// Information about the change of state.
	StateComments ImageStateCommentArrayOutput `pulumi:"stateComments"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags ImageTagArrayOutput `pulumi:"tags"`
	// The ID of the VM from which you want to create the OMI. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	VmId pulumi.StringOutput `pulumi:"vmId"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		args = &ImageArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Image
	err := ctx.RegisterResource("outscale:index/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("outscale:index/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	// The account alias of the owner of the OMI.
	AccountAlias *string `pulumi:"accountAlias"`
	// The account ID of the owner of the OMI.
	AccountId *string `pulumi:"accountId"`
	// The architecture of the OMI (by default, `i386` if you specified the `fileLocation` or `rootDeviceName` parameter).
	Architecture *string `pulumi:"architecture"`
	// One or more block device mappings.
	BlockDeviceMappings []ImageBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// The date and time of creation of the OMI.
	CreationDate *string `pulumi:"creationDate"`
	// A description for the new OMI.
	Description *string `pulumi:"description"`
	// The pre-signed URL of the OMI manifest file, or the full path to the OMI stored in a bucket. If you specify this parameter, a copy of the OMI is created in your account. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	FileLocation *string `pulumi:"fileLocation"`
	// The ID of the OMI.
	ImageId *string `pulumi:"imageId"`
	// A unique name for the new OMI.<br />
	// Constraints: 3-128 alphanumeric characters, underscores (_), spaces ( ), parentheses (()), slashes (/), periods (.), or dashes (-).
	ImageName *string `pulumi:"imageName"`
	// The type of the OMI.
	ImageType *string `pulumi:"imageType"`
	IsPublic  *bool   `pulumi:"isPublic"`
	// If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
	NoReboot *bool `pulumi:"noReboot"`
	// Information about the users who have permissions for the resource.
	PermissionsToLaunches []ImagePermissionsToLaunch `pulumi:"permissionsToLaunches"`
	// The product code associated with the OMI (`0001` Linux/Unix \| `0002` Windows \| `0004` Linux/Oracle \| `0005` Windows 10).
	ProductCodes []string `pulumi:"productCodes"`
	RequestId    *string  `pulumi:"requestId"`
	// The name of the root device. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	RootDeviceName *string `pulumi:"rootDeviceName"`
	// The type of root device used by the OMI (always `bsu`).
	RootDeviceType *string `pulumi:"rootDeviceType"`
	// The ID of the OMI you want to copy. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	SourceImageId *string `pulumi:"sourceImageId"`
	// The name of the source Region, which must be the same as the Region of your account.
	SourceRegionName *string `pulumi:"sourceRegionName"`
	// The state of the OMI (`pending` \| `available` \| `failed`).
	State *string `pulumi:"state"`
	// Information about the change of state.
	StateComments []ImageStateComment `pulumi:"stateComments"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []ImageTag `pulumi:"tags"`
	// The ID of the VM from which you want to create the OMI. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	VmId *string `pulumi:"vmId"`
}

type ImageState struct {
	// The account alias of the owner of the OMI.
	AccountAlias pulumi.StringPtrInput
	// The account ID of the owner of the OMI.
	AccountId pulumi.StringPtrInput
	// The architecture of the OMI (by default, `i386` if you specified the `fileLocation` or `rootDeviceName` parameter).
	Architecture pulumi.StringPtrInput
	// One or more block device mappings.
	BlockDeviceMappings ImageBlockDeviceMappingArrayInput
	// The date and time of creation of the OMI.
	CreationDate pulumi.StringPtrInput
	// A description for the new OMI.
	Description pulumi.StringPtrInput
	// The pre-signed URL of the OMI manifest file, or the full path to the OMI stored in a bucket. If you specify this parameter, a copy of the OMI is created in your account. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	FileLocation pulumi.StringPtrInput
	// The ID of the OMI.
	ImageId pulumi.StringPtrInput
	// A unique name for the new OMI.<br />
	// Constraints: 3-128 alphanumeric characters, underscores (_), spaces ( ), parentheses (()), slashes (/), periods (.), or dashes (-).
	ImageName pulumi.StringPtrInput
	// The type of the OMI.
	ImageType pulumi.StringPtrInput
	IsPublic  pulumi.BoolPtrInput
	// If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
	NoReboot pulumi.BoolPtrInput
	// Information about the users who have permissions for the resource.
	PermissionsToLaunches ImagePermissionsToLaunchArrayInput
	// The product code associated with the OMI (`0001` Linux/Unix \| `0002` Windows \| `0004` Linux/Oracle \| `0005` Windows 10).
	ProductCodes pulumi.StringArrayInput
	RequestId    pulumi.StringPtrInput
	// The name of the root device. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	RootDeviceName pulumi.StringPtrInput
	// The type of root device used by the OMI (always `bsu`).
	RootDeviceType pulumi.StringPtrInput
	// The ID of the OMI you want to copy. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	SourceImageId pulumi.StringPtrInput
	// The name of the source Region, which must be the same as the Region of your account.
	SourceRegionName pulumi.StringPtrInput
	// The state of the OMI (`pending` \| `available` \| `failed`).
	State pulumi.StringPtrInput
	// Information about the change of state.
	StateComments ImageStateCommentArrayInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags ImageTagArrayInput
	// The ID of the VM from which you want to create the OMI. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	VmId pulumi.StringPtrInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	// The architecture of the OMI (by default, `i386` if you specified the `fileLocation` or `rootDeviceName` parameter).
	Architecture *string `pulumi:"architecture"`
	// One or more block device mappings.
	BlockDeviceMappings []ImageBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// A description for the new OMI.
	Description *string `pulumi:"description"`
	// The pre-signed URL of the OMI manifest file, or the full path to the OMI stored in a bucket. If you specify this parameter, a copy of the OMI is created in your account. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	FileLocation *string `pulumi:"fileLocation"`
	// A unique name for the new OMI.<br />
	// Constraints: 3-128 alphanumeric characters, underscores (_), spaces ( ), parentheses (()), slashes (/), periods (.), or dashes (-).
	ImageName *string `pulumi:"imageName"`
	// If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
	NoReboot *bool `pulumi:"noReboot"`
	// The name of the root device. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	RootDeviceName *string `pulumi:"rootDeviceName"`
	// The ID of the OMI you want to copy. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	SourceImageId *string `pulumi:"sourceImageId"`
	// The name of the source Region, which must be the same as the Region of your account.
	SourceRegionName *string `pulumi:"sourceRegionName"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []ImageTag `pulumi:"tags"`
	// The ID of the VM from which you want to create the OMI. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	VmId *string `pulumi:"vmId"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// The architecture of the OMI (by default, `i386` if you specified the `fileLocation` or `rootDeviceName` parameter).
	Architecture pulumi.StringPtrInput
	// One or more block device mappings.
	BlockDeviceMappings ImageBlockDeviceMappingArrayInput
	// A description for the new OMI.
	Description pulumi.StringPtrInput
	// The pre-signed URL of the OMI manifest file, or the full path to the OMI stored in a bucket. If you specify this parameter, a copy of the OMI is created in your account. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	FileLocation pulumi.StringPtrInput
	// A unique name for the new OMI.<br />
	// Constraints: 3-128 alphanumeric characters, underscores (_), spaces ( ), parentheses (()), slashes (/), periods (.), or dashes (-).
	ImageName pulumi.StringPtrInput
	// If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
	NoReboot pulumi.BoolPtrInput
	// The name of the root device. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	RootDeviceName pulumi.StringPtrInput
	// The ID of the OMI you want to copy. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	SourceImageId pulumi.StringPtrInput
	// The name of the source Region, which must be the same as the Region of your account.
	SourceRegionName pulumi.StringPtrInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags ImageTagArrayInput
	// The ID of the VM from which you want to create the OMI. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
	VmId pulumi.StringPtrInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

func (i *Image) ToOutput(ctx context.Context) pulumix.Output[*Image] {
	return pulumix.Output[*Image]{
		OutputState: i.ToImageOutputWithContext(ctx).OutputState,
	}
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//	ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

func (i ImageArray) ToOutput(ctx context.Context) pulumix.Output[[]*Image] {
	return pulumix.Output[[]*Image]{
		OutputState: i.ToImageArrayOutputWithContext(ctx).OutputState,
	}
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//	ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

func (i ImageMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Image] {
	return pulumix.Output[map[string]*Image]{
		OutputState: i.ToImageMapOutputWithContext(ctx).OutputState,
	}
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

func (o ImageOutput) ToOutput(ctx context.Context) pulumix.Output[*Image] {
	return pulumix.Output[*Image]{
		OutputState: o.OutputState,
	}
}

// The account alias of the owner of the OMI.
func (o ImageOutput) AccountAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.AccountAlias }).(pulumi.StringOutput)
}

// The account ID of the owner of the OMI.
func (o ImageOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The architecture of the OMI (by default, `i386` if you specified the `fileLocation` or `rootDeviceName` parameter).
func (o ImageOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Architecture }).(pulumi.StringOutput)
}

// One or more block device mappings.
func (o ImageOutput) BlockDeviceMappings() ImageBlockDeviceMappingArrayOutput {
	return o.ApplyT(func(v *Image) ImageBlockDeviceMappingArrayOutput { return v.BlockDeviceMappings }).(ImageBlockDeviceMappingArrayOutput)
}

// The date and time of creation of the OMI.
func (o ImageOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// A description for the new OMI.
func (o ImageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The pre-signed URL of the OMI manifest file, or the full path to the OMI stored in a bucket. If you specify this parameter, a copy of the OMI is created in your account. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
func (o ImageOutput) FileLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.FileLocation }).(pulumi.StringOutput)
}

// The ID of the OMI.
func (o ImageOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// A unique name for the new OMI.<br />
// Constraints: 3-128 alphanumeric characters, underscores (_), spaces ( ), parentheses (()), slashes (/), periods (.), or dashes (-).
func (o ImageOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

// The type of the OMI.
func (o ImageOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ImageType }).(pulumi.StringOutput)
}

func (o ImageOutput) IsPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolOutput { return v.IsPublic }).(pulumi.BoolOutput)
}

// If false, the VM shuts down before creating the OMI and then reboots. If true, the VM does not.
func (o ImageOutput) NoReboot() pulumi.BoolOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolOutput { return v.NoReboot }).(pulumi.BoolOutput)
}

// Information about the users who have permissions for the resource.
func (o ImageOutput) PermissionsToLaunches() ImagePermissionsToLaunchArrayOutput {
	return o.ApplyT(func(v *Image) ImagePermissionsToLaunchArrayOutput { return v.PermissionsToLaunches }).(ImagePermissionsToLaunchArrayOutput)
}

// The product code associated with the OMI (`0001` Linux/Unix \| `0002` Windows \| `0004` Linux/Oracle \| `0005` Windows 10).
func (o ImageOutput) ProductCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) pulumi.StringArrayOutput { return v.ProductCodes }).(pulumi.StringArrayOutput)
}

func (o ImageOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// The name of the root device. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
func (o ImageOutput) RootDeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.RootDeviceName }).(pulumi.StringOutput)
}

// The type of root device used by the OMI (always `bsu`).
func (o ImageOutput) RootDeviceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.RootDeviceType }).(pulumi.StringOutput)
}

// The ID of the OMI you want to copy. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
func (o ImageOutput) SourceImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.SourceImageId }).(pulumi.StringOutput)
}

// The name of the source Region, which must be the same as the Region of your account.
func (o ImageOutput) SourceRegionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Image) pulumi.StringPtrOutput { return v.SourceRegionName }).(pulumi.StringPtrOutput)
}

// The state of the OMI (`pending` \| `available` \| `failed`).
func (o ImageOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Information about the change of state.
func (o ImageOutput) StateComments() ImageStateCommentArrayOutput {
	return o.ApplyT(func(v *Image) ImageStateCommentArrayOutput { return v.StateComments }).(ImageStateCommentArrayOutput)
}

// A tag to add to this resource. You can specify this argument several times.
func (o ImageOutput) Tags() ImageTagArrayOutput {
	return o.ApplyT(func(v *Image) ImageTagArrayOutput { return v.Tags }).(ImageTagArrayOutput)
}

// The ID of the VM from which you want to create the OMI. You must specify only one of the following parameters: `fileLocation`, `rootDeviceName`, `sourceImageId` or `vmId`.
func (o ImageOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.VmId }).(pulumi.StringOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Image] {
	return pulumix.Output[[]*Image]{
		OutputState: o.OutputState,
	}
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Image] {
	return pulumix.Output[map[string]*Image]{
		OutputState: o.OutputState,
	}
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}
