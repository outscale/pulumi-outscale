// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a product type.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/Software-Licenses.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-producttype).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.GetProductType(ctx, &outscale.GetProductTypeArgs{
//				Filters: []outscale.GetProductTypeFilter{
//					{
//						Name: "product_type_ids",
//						Values: []string{
//							"0001",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetProductType(ctx *pulumi.Context, args *GetProductTypeArgs, opts ...pulumi.InvokeOption) (*GetProductTypeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProductTypeResult
	err := ctx.Invoke("outscale:index/getProductType:getProductType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProductType.
type GetProductTypeArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters []GetProductTypeFilter `pulumi:"filters"`
}

// A collection of values returned by getProductType.
type GetProductTypeResult struct {
	// The description of the product type.
	Description string                 `pulumi:"description"`
	Filters     []GetProductTypeFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the product type.
	ProductTypeId string `pulumi:"productTypeId"`
	RequestId     string `pulumi:"requestId"`
	// The vendor of the product type.
	Vendor string `pulumi:"vendor"`
}

func GetProductTypeOutput(ctx *pulumi.Context, args GetProductTypeOutputArgs, opts ...pulumi.InvokeOption) GetProductTypeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetProductTypeResultOutput, error) {
			args := v.(GetProductTypeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("outscale:index/getProductType:getProductType", args, GetProductTypeResultOutput{}, options).(GetProductTypeResultOutput), nil
		}).(GetProductTypeResultOutput)
}

// A collection of arguments for invoking getProductType.
type GetProductTypeOutputArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters GetProductTypeFilterArrayInput `pulumi:"filters"`
}

func (GetProductTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductTypeArgs)(nil)).Elem()
}

// A collection of values returned by getProductType.
type GetProductTypeResultOutput struct{ *pulumi.OutputState }

func (GetProductTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProductTypeResult)(nil)).Elem()
}

func (o GetProductTypeResultOutput) ToGetProductTypeResultOutput() GetProductTypeResultOutput {
	return o
}

func (o GetProductTypeResultOutput) ToGetProductTypeResultOutputWithContext(ctx context.Context) GetProductTypeResultOutput {
	return o
}

// The description of the product type.
func (o GetProductTypeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductTypeResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetProductTypeResultOutput) Filters() GetProductTypeFilterArrayOutput {
	return o.ApplyT(func(v GetProductTypeResult) []GetProductTypeFilter { return v.Filters }).(GetProductTypeFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetProductTypeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductTypeResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the product type.
func (o GetProductTypeResultOutput) ProductTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductTypeResult) string { return v.ProductTypeId }).(pulumi.StringOutput)
}

func (o GetProductTypeResultOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductTypeResult) string { return v.RequestId }).(pulumi.StringOutput)
}

// The vendor of the product type.
func (o GetProductTypeResultOutput) Vendor() pulumi.StringOutput {
	return o.ApplyT(func(v GetProductTypeResult) string { return v.Vendor }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProductTypeResultOutput{})
}
