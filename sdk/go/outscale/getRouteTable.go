// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a route table.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Route-Tables.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-routetable).
func LookupRouteTable(ctx *pulumi.Context, args *LookupRouteTableArgs, opts ...pulumi.InvokeOption) (*LookupRouteTableResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRouteTableResult
	err := ctx.Invoke("outscale:index/getRouteTable:getRouteTable", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRouteTable.
type LookupRouteTableArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters []GetRouteTableFilter `pulumi:"filters"`
	// The ID of the route table.
	RouteTableId *string `pulumi:"routeTableId"`
}

// A collection of values returned by getRouteTable.
type LookupRouteTableResult struct {
	Filters []GetRouteTableFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// One or more associations between the route table and Subnets.
	LinkRouteTables []GetRouteTableLinkRouteTable `pulumi:"linkRouteTables"`
	// The ID of the Net for the route table.
	NetId     string `pulumi:"netId"`
	RequestId string `pulumi:"requestId"`
	// Information about virtual gateways propagating routes.
	RoutePropagatingVirtualGateways []GetRouteTableRoutePropagatingVirtualGateway `pulumi:"routePropagatingVirtualGateways"`
	// The ID of the route table.
	RouteTableId string `pulumi:"routeTableId"`
	// One or more routes in the route table.
	Routes []GetRouteTableRoute `pulumi:"routes"`
	// One or more tags associated with the route table.
	Tags []GetRouteTableTag `pulumi:"tags"`
}

func LookupRouteTableOutput(ctx *pulumi.Context, args LookupRouteTableOutputArgs, opts ...pulumi.InvokeOption) LookupRouteTableResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRouteTableResult, error) {
			args := v.(LookupRouteTableArgs)
			r, err := LookupRouteTable(ctx, &args, opts...)
			var s LookupRouteTableResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRouteTableResultOutput)
}

// A collection of arguments for invoking getRouteTable.
type LookupRouteTableOutputArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters GetRouteTableFilterArrayInput `pulumi:"filters"`
	// The ID of the route table.
	RouteTableId pulumi.StringPtrInput `pulumi:"routeTableId"`
}

func (LookupRouteTableOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteTableArgs)(nil)).Elem()
}

// A collection of values returned by getRouteTable.
type LookupRouteTableResultOutput struct{ *pulumi.OutputState }

func (LookupRouteTableResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteTableResult)(nil)).Elem()
}

func (o LookupRouteTableResultOutput) ToLookupRouteTableResultOutput() LookupRouteTableResultOutput {
	return o
}

func (o LookupRouteTableResultOutput) ToLookupRouteTableResultOutputWithContext(ctx context.Context) LookupRouteTableResultOutput {
	return o
}

func (o LookupRouteTableResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupRouteTableResult] {
	return pulumix.Output[LookupRouteTableResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupRouteTableResultOutput) Filters() GetRouteTableFilterArrayOutput {
	return o.ApplyT(func(v LookupRouteTableResult) []GetRouteTableFilter { return v.Filters }).(GetRouteTableFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRouteTableResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteTableResult) string { return v.Id }).(pulumi.StringOutput)
}

// One or more associations between the route table and Subnets.
func (o LookupRouteTableResultOutput) LinkRouteTables() GetRouteTableLinkRouteTableArrayOutput {
	return o.ApplyT(func(v LookupRouteTableResult) []GetRouteTableLinkRouteTable { return v.LinkRouteTables }).(GetRouteTableLinkRouteTableArrayOutput)
}

// The ID of the Net for the route table.
func (o LookupRouteTableResultOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteTableResult) string { return v.NetId }).(pulumi.StringOutput)
}

func (o LookupRouteTableResultOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteTableResult) string { return v.RequestId }).(pulumi.StringOutput)
}

// Information about virtual gateways propagating routes.
func (o LookupRouteTableResultOutput) RoutePropagatingVirtualGateways() GetRouteTableRoutePropagatingVirtualGatewayArrayOutput {
	return o.ApplyT(func(v LookupRouteTableResult) []GetRouteTableRoutePropagatingVirtualGateway {
		return v.RoutePropagatingVirtualGateways
	}).(GetRouteTableRoutePropagatingVirtualGatewayArrayOutput)
}

// The ID of the route table.
func (o LookupRouteTableResultOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteTableResult) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// One or more routes in the route table.
func (o LookupRouteTableResultOutput) Routes() GetRouteTableRouteArrayOutput {
	return o.ApplyT(func(v LookupRouteTableResult) []GetRouteTableRoute { return v.Routes }).(GetRouteTableRouteArrayOutput)
}

// One or more tags associated with the route table.
func (o LookupRouteTableResultOutput) Tags() GetRouteTableTagArrayOutput {
	return o.ApplyT(func(v LookupRouteTableResult) []GetRouteTableTag { return v.Tags }).(GetRouteTableTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRouteTableResultOutput{})
}
