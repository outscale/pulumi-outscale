// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a network interface card (NIC).
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-FNIs.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-nic).
//
// ## Example Usage
// ### Required resources
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net01, err := outscale.NewNet(ctx, "net01", &outscale.NetArgs{
//				IpRange: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewSubnet(ctx, "subnet01", &outscale.SubnetArgs{
//				SubregionName: pulumi.String("eu-west-2a"),
//				IpRange:       pulumi.String("10.0.0.0/18"),
//				NetId:         net01.NetId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewSecurityGroup(ctx, "securityGroup01", &outscale.SecurityGroupArgs{
//				Description:       pulumi.String("Terraform security group for nic with private IPs"),
//				SecurityGroupName: pulumi.String("terraform-security-group-nic-ips"),
//				NetId:             net01.NetId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a NIC
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewNic(ctx, "nic01", &outscale.NicArgs{
//				SubnetId: pulumi.Any(outscale_subnet.Subnet01.Subnet_id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a NIC with private IP addresses
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewNic(ctx, "nic02", &outscale.NicArgs{
//				Description: pulumi.String("Terraform nic with private IPs"),
//				SubnetId:    pulumi.Any(outscale_subnet.Subnet01.Subnet_id),
//				SecurityGroupIds: pulumi.StringArray{
//					outscale_security_group.Security_group01.Security_group_id,
//				},
//				PrivateIps: outscale.NicPrivateIpTypeArray{
//					&outscale.NicPrivateIpTypeArgs{
//						IsPrimary: pulumi.Bool(true),
//						PrivateIp: pulumi.String("10.0.0.1"),
//					},
//					&outscale.NicPrivateIpTypeArgs{
//						IsPrimary: pulumi.Bool(false),
//						PrivateIp: pulumi.String("10.0.0.2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A NIC can be imported using its ID. For exampleconsole
//
// ```sh
//
//	$ pulumi import outscale:index/nic:Nic ImportedNic eni-12345678
//
// ```
type Nic struct {
	pulumi.CustomResourceState

	// The account ID of the owner of the NIC.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// A description for the NIC.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
	IsSourceDestChecked pulumi.BoolOutput `pulumi:"isSourceDestChecked"`
	// Information about the NIC attachment.
	LinkNics NicLinkNicArrayOutput `pulumi:"linkNics"`
	// Information about the public IP association.
	LinkPublicIps NicLinkPublicIpArrayOutput `pulumi:"linkPublicIps"`
	// The Media Access Control (MAC) address of the NIC.
	MacAddress pulumi.StringOutput `pulumi:"macAddress"`
	// The ID of the Net for the NIC.
	NetId pulumi.StringOutput `pulumi:"netId"`
	// The ID of the NIC.
	NicId pulumi.StringOutput `pulumi:"nicId"`
	// The name of the private DNS.
	PrivateDnsName pulumi.StringOutput `pulumi:"privateDnsName"`
	// The private IP of the NIC.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// The primary private IP for the NIC.<br />
	// This IP must be within the IP range of the Subnet that you specify with the `subnetId` attribute.<br />
	// If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
	PrivateIps       NicPrivateIpTypeArrayOutput `pulumi:"privateIps"`
	RequestId        pulumi.StringOutput         `pulumi:"requestId"`
	RequesterManaged pulumi.BoolOutput           `pulumi:"requesterManaged"`
	// One or more IDs of security groups for the NIC.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// One or more IDs of security groups for the NIC.
	SecurityGroups NicSecurityGroupArrayOutput `pulumi:"securityGroups"`
	// The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
	State pulumi.StringOutput `pulumi:"state"`
	// The ID of the Subnet in which you want to create the NIC.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The Subregion in which the NIC is located.
	SubregionName pulumi.StringOutput `pulumi:"subregionName"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags NicTagArrayOutput `pulumi:"tags"`
}

// NewNic registers a new resource with the given unique name, arguments, and options.
func NewNic(ctx *pulumi.Context,
	name string, args *NicArgs, opts ...pulumi.ResourceOption) (*Nic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Nic
	err := ctx.RegisterResource("outscale:index/nic:Nic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNic gets an existing Nic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NicState, opts ...pulumi.ResourceOption) (*Nic, error) {
	var resource Nic
	err := ctx.ReadResource("outscale:index/nic:Nic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Nic resources.
type nicState struct {
	// The account ID of the owner of the NIC.
	AccountId *string `pulumi:"accountId"`
	// A description for the NIC.
	Description *string `pulumi:"description"`
	// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
	IsSourceDestChecked *bool `pulumi:"isSourceDestChecked"`
	// Information about the NIC attachment.
	LinkNics []NicLinkNic `pulumi:"linkNics"`
	// Information about the public IP association.
	LinkPublicIps []NicLinkPublicIp `pulumi:"linkPublicIps"`
	// The Media Access Control (MAC) address of the NIC.
	MacAddress *string `pulumi:"macAddress"`
	// The ID of the Net for the NIC.
	NetId *string `pulumi:"netId"`
	// The ID of the NIC.
	NicId *string `pulumi:"nicId"`
	// The name of the private DNS.
	PrivateDnsName *string `pulumi:"privateDnsName"`
	// The private IP of the NIC.
	PrivateIp *string `pulumi:"privateIp"`
	// The primary private IP for the NIC.<br />
	// This IP must be within the IP range of the Subnet that you specify with the `subnetId` attribute.<br />
	// If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
	PrivateIps       []NicPrivateIpType `pulumi:"privateIps"`
	RequestId        *string            `pulumi:"requestId"`
	RequesterManaged *bool              `pulumi:"requesterManaged"`
	// One or more IDs of security groups for the NIC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// One or more IDs of security groups for the NIC.
	SecurityGroups []NicSecurityGroup `pulumi:"securityGroups"`
	// The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
	State *string `pulumi:"state"`
	// The ID of the Subnet in which you want to create the NIC.
	SubnetId *string `pulumi:"subnetId"`
	// The Subregion in which the NIC is located.
	SubregionName *string `pulumi:"subregionName"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []NicTag `pulumi:"tags"`
}

type NicState struct {
	// The account ID of the owner of the NIC.
	AccountId pulumi.StringPtrInput
	// A description for the NIC.
	Description pulumi.StringPtrInput
	// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
	IsSourceDestChecked pulumi.BoolPtrInput
	// Information about the NIC attachment.
	LinkNics NicLinkNicArrayInput
	// Information about the public IP association.
	LinkPublicIps NicLinkPublicIpArrayInput
	// The Media Access Control (MAC) address of the NIC.
	MacAddress pulumi.StringPtrInput
	// The ID of the Net for the NIC.
	NetId pulumi.StringPtrInput
	// The ID of the NIC.
	NicId pulumi.StringPtrInput
	// The name of the private DNS.
	PrivateDnsName pulumi.StringPtrInput
	// The private IP of the NIC.
	PrivateIp pulumi.StringPtrInput
	// The primary private IP for the NIC.<br />
	// This IP must be within the IP range of the Subnet that you specify with the `subnetId` attribute.<br />
	// If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
	PrivateIps       NicPrivateIpTypeArrayInput
	RequestId        pulumi.StringPtrInput
	RequesterManaged pulumi.BoolPtrInput
	// One or more IDs of security groups for the NIC.
	SecurityGroupIds pulumi.StringArrayInput
	// One or more IDs of security groups for the NIC.
	SecurityGroups NicSecurityGroupArrayInput
	// The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
	State pulumi.StringPtrInput
	// The ID of the Subnet in which you want to create the NIC.
	SubnetId pulumi.StringPtrInput
	// The Subregion in which the NIC is located.
	SubregionName pulumi.StringPtrInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags NicTagArrayInput
}

func (NicState) ElementType() reflect.Type {
	return reflect.TypeOf((*nicState)(nil)).Elem()
}

type nicArgs struct {
	// A description for the NIC.
	Description *string `pulumi:"description"`
	// The private IP of the NIC.
	PrivateIp *string `pulumi:"privateIp"`
	// The primary private IP for the NIC.<br />
	// This IP must be within the IP range of the Subnet that you specify with the `subnetId` attribute.<br />
	// If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
	PrivateIps []NicPrivateIpType `pulumi:"privateIps"`
	// One or more IDs of security groups for the NIC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The ID of the Subnet in which you want to create the NIC.
	SubnetId string `pulumi:"subnetId"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []NicTag `pulumi:"tags"`
}

// The set of arguments for constructing a Nic resource.
type NicArgs struct {
	// A description for the NIC.
	Description pulumi.StringPtrInput
	// The private IP of the NIC.
	PrivateIp pulumi.StringPtrInput
	// The primary private IP for the NIC.<br />
	// This IP must be within the IP range of the Subnet that you specify with the `subnetId` attribute.<br />
	// If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
	PrivateIps NicPrivateIpTypeArrayInput
	// One or more IDs of security groups for the NIC.
	SecurityGroupIds pulumi.StringArrayInput
	// The ID of the Subnet in which you want to create the NIC.
	SubnetId pulumi.StringInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags NicTagArrayInput
}

func (NicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nicArgs)(nil)).Elem()
}

type NicInput interface {
	pulumi.Input

	ToNicOutput() NicOutput
	ToNicOutputWithContext(ctx context.Context) NicOutput
}

func (*Nic) ElementType() reflect.Type {
	return reflect.TypeOf((**Nic)(nil)).Elem()
}

func (i *Nic) ToNicOutput() NicOutput {
	return i.ToNicOutputWithContext(context.Background())
}

func (i *Nic) ToNicOutputWithContext(ctx context.Context) NicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicOutput)
}

// NicArrayInput is an input type that accepts NicArray and NicArrayOutput values.
// You can construct a concrete instance of `NicArrayInput` via:
//
//	NicArray{ NicArgs{...} }
type NicArrayInput interface {
	pulumi.Input

	ToNicArrayOutput() NicArrayOutput
	ToNicArrayOutputWithContext(context.Context) NicArrayOutput
}

type NicArray []NicInput

func (NicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nic)(nil)).Elem()
}

func (i NicArray) ToNicArrayOutput() NicArrayOutput {
	return i.ToNicArrayOutputWithContext(context.Background())
}

func (i NicArray) ToNicArrayOutputWithContext(ctx context.Context) NicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicArrayOutput)
}

// NicMapInput is an input type that accepts NicMap and NicMapOutput values.
// You can construct a concrete instance of `NicMapInput` via:
//
//	NicMap{ "key": NicArgs{...} }
type NicMapInput interface {
	pulumi.Input

	ToNicMapOutput() NicMapOutput
	ToNicMapOutputWithContext(context.Context) NicMapOutput
}

type NicMap map[string]NicInput

func (NicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nic)(nil)).Elem()
}

func (i NicMap) ToNicMapOutput() NicMapOutput {
	return i.ToNicMapOutputWithContext(context.Background())
}

func (i NicMap) ToNicMapOutputWithContext(ctx context.Context) NicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicMapOutput)
}

type NicOutput struct{ *pulumi.OutputState }

func (NicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Nic)(nil)).Elem()
}

func (o NicOutput) ToNicOutput() NicOutput {
	return o
}

func (o NicOutput) ToNicOutputWithContext(ctx context.Context) NicOutput {
	return o
}

// The account ID of the owner of the NIC.
func (o NicOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// A description for the NIC.
func (o NicOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
func (o NicOutput) IsSourceDestChecked() pulumi.BoolOutput {
	return o.ApplyT(func(v *Nic) pulumi.BoolOutput { return v.IsSourceDestChecked }).(pulumi.BoolOutput)
}

// Information about the NIC attachment.
func (o NicOutput) LinkNics() NicLinkNicArrayOutput {
	return o.ApplyT(func(v *Nic) NicLinkNicArrayOutput { return v.LinkNics }).(NicLinkNicArrayOutput)
}

// Information about the public IP association.
func (o NicOutput) LinkPublicIps() NicLinkPublicIpArrayOutput {
	return o.ApplyT(func(v *Nic) NicLinkPublicIpArrayOutput { return v.LinkPublicIps }).(NicLinkPublicIpArrayOutput)
}

// The Media Access Control (MAC) address of the NIC.
func (o NicOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

// The ID of the Net for the NIC.
func (o NicOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.NetId }).(pulumi.StringOutput)
}

// The ID of the NIC.
func (o NicOutput) NicId() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.NicId }).(pulumi.StringOutput)
}

// The name of the private DNS.
func (o NicOutput) PrivateDnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.PrivateDnsName }).(pulumi.StringOutput)
}

// The private IP of the NIC.
func (o NicOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// The primary private IP for the NIC.<br />
// This IP must be within the IP range of the Subnet that you specify with the `subnetId` attribute.<br />
// If you do not specify this attribute, a random private IP is selected within the IP range of the Subnet.
func (o NicOutput) PrivateIps() NicPrivateIpTypeArrayOutput {
	return o.ApplyT(func(v *Nic) NicPrivateIpTypeArrayOutput { return v.PrivateIps }).(NicPrivateIpTypeArrayOutput)
}

func (o NicOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o NicOutput) RequesterManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v *Nic) pulumi.BoolOutput { return v.RequesterManaged }).(pulumi.BoolOutput)
}

// One or more IDs of security groups for the NIC.
func (o NicOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// One or more IDs of security groups for the NIC.
func (o NicOutput) SecurityGroups() NicSecurityGroupArrayOutput {
	return o.ApplyT(func(v *Nic) NicSecurityGroupArrayOutput { return v.SecurityGroups }).(NicSecurityGroupArrayOutput)
}

// The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
func (o NicOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The ID of the Subnet in which you want to create the NIC.
func (o NicOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The Subregion in which the NIC is located.
func (o NicOutput) SubregionName() pulumi.StringOutput {
	return o.ApplyT(func(v *Nic) pulumi.StringOutput { return v.SubregionName }).(pulumi.StringOutput)
}

// A tag to add to this resource. You can specify this argument several times.
func (o NicOutput) Tags() NicTagArrayOutput {
	return o.ApplyT(func(v *Nic) NicTagArrayOutput { return v.Tags }).(NicTagArrayOutput)
}

type NicArrayOutput struct{ *pulumi.OutputState }

func (NicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Nic)(nil)).Elem()
}

func (o NicArrayOutput) ToNicArrayOutput() NicArrayOutput {
	return o
}

func (o NicArrayOutput) ToNicArrayOutputWithContext(ctx context.Context) NicArrayOutput {
	return o
}

func (o NicArrayOutput) Index(i pulumi.IntInput) NicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Nic {
		return vs[0].([]*Nic)[vs[1].(int)]
	}).(NicOutput)
}

type NicMapOutput struct{ *pulumi.OutputState }

func (NicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Nic)(nil)).Elem()
}

func (o NicMapOutput) ToNicMapOutput() NicMapOutput {
	return o
}

func (o NicMapOutput) ToNicMapOutputWithContext(ctx context.Context) NicMapOutput {
	return o
}

func (o NicMapOutput) MapIndex(k pulumi.StringInput) NicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Nic {
		return vs[0].(map[string]*Nic)[vs[1].(string)]
	}).(NicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NicInput)(nil)).Elem(), &Nic{})
	pulumi.RegisterInputType(reflect.TypeOf((*NicArrayInput)(nil)).Elem(), NicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NicMapInput)(nil)).Elem(), NicMap{})
	pulumi.RegisterOutputType(NicOutput{})
	pulumi.RegisterOutputType(NicArrayOutput{})
	pulumi.RegisterOutputType(NicMapOutput{})
}
