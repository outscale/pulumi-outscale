// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a Net peering.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPC-Peering-Connections.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-netpeering).
func LookupNetPeering(ctx *pulumi.Context, args *LookupNetPeeringArgs, opts ...pulumi.InvokeOption) (*LookupNetPeeringResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetPeeringResult
	err := ctx.Invoke("outscale:index/getNetPeering:getNetPeering", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetPeering.
type LookupNetPeeringArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters []GetNetPeeringFilter `pulumi:"filters"`
}

// A collection of values returned by getNetPeering.
type LookupNetPeeringResult struct {
	// Information about the accepter Net.
	AccepterNet GetNetPeeringAccepterNet `pulumi:"accepterNet"`
	Filters     []GetNetPeeringFilter    `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the Net peering.
	NetPeeringId string `pulumi:"netPeeringId"`
	RequestId    string `pulumi:"requestId"`
	// Information about the source Net.
	SourceNet GetNetPeeringSourceNet `pulumi:"sourceNet"`
	// Information about the state of the Net peering.
	State GetNetPeeringState `pulumi:"state"`
	// One or more tags associated with the Net peering.
	Tags []GetNetPeeringTag `pulumi:"tags"`
}

func LookupNetPeeringOutput(ctx *pulumi.Context, args LookupNetPeeringOutputArgs, opts ...pulumi.InvokeOption) LookupNetPeeringResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetPeeringResult, error) {
			args := v.(LookupNetPeeringArgs)
			r, err := LookupNetPeering(ctx, &args, opts...)
			var s LookupNetPeeringResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetPeeringResultOutput)
}

// A collection of arguments for invoking getNetPeering.
type LookupNetPeeringOutputArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters GetNetPeeringFilterArrayInput `pulumi:"filters"`
}

func (LookupNetPeeringOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetPeeringArgs)(nil)).Elem()
}

// A collection of values returned by getNetPeering.
type LookupNetPeeringResultOutput struct{ *pulumi.OutputState }

func (LookupNetPeeringResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetPeeringResult)(nil)).Elem()
}

func (o LookupNetPeeringResultOutput) ToLookupNetPeeringResultOutput() LookupNetPeeringResultOutput {
	return o
}

func (o LookupNetPeeringResultOutput) ToLookupNetPeeringResultOutputWithContext(ctx context.Context) LookupNetPeeringResultOutput {
	return o
}

func (o LookupNetPeeringResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupNetPeeringResult] {
	return pulumix.Output[LookupNetPeeringResult]{
		OutputState: o.OutputState,
	}
}

// Information about the accepter Net.
func (o LookupNetPeeringResultOutput) AccepterNet() GetNetPeeringAccepterNetOutput {
	return o.ApplyT(func(v LookupNetPeeringResult) GetNetPeeringAccepterNet { return v.AccepterNet }).(GetNetPeeringAccepterNetOutput)
}

func (o LookupNetPeeringResultOutput) Filters() GetNetPeeringFilterArrayOutput {
	return o.ApplyT(func(v LookupNetPeeringResult) []GetNetPeeringFilter { return v.Filters }).(GetNetPeeringFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNetPeeringResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetPeeringResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the Net peering.
func (o LookupNetPeeringResultOutput) NetPeeringId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetPeeringResult) string { return v.NetPeeringId }).(pulumi.StringOutput)
}

func (o LookupNetPeeringResultOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetPeeringResult) string { return v.RequestId }).(pulumi.StringOutput)
}

// Information about the source Net.
func (o LookupNetPeeringResultOutput) SourceNet() GetNetPeeringSourceNetOutput {
	return o.ApplyT(func(v LookupNetPeeringResult) GetNetPeeringSourceNet { return v.SourceNet }).(GetNetPeeringSourceNetOutput)
}

// Information about the state of the Net peering.
func (o LookupNetPeeringResultOutput) State() GetNetPeeringStateOutput {
	return o.ApplyT(func(v LookupNetPeeringResult) GetNetPeeringState { return v.State }).(GetNetPeeringStateOutput)
}

// One or more tags associated with the Net peering.
func (o LookupNetPeeringResultOutput) Tags() GetNetPeeringTagArrayOutput {
	return o.ApplyT(func(v LookupNetPeeringResult) []GetNetPeeringTag { return v.Tags }).(GetNetPeeringTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetPeeringResultOutput{})
}
