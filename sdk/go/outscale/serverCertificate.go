// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a server certificate.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Server-Certificates-in-EIM.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-servercertificate).
//
// ## Import
//
// A server certificate can be imported using its ID. For example:
//
// console
//
// ```sh
// $ pulumi import outscale:index/serverCertificate:ServerCertificate ImportedServerCertificate 0123456789
// ```
type ServerCertificate struct {
	pulumi.CustomResourceState

	// The PEM-encoded X509 certificate.
	Body pulumi.StringPtrOutput `pulumi:"body"`
	// The PEM-encoded intermediate certification authorities.
	Chain  pulumi.StringPtrOutput `pulumi:"chain"`
	DryRun pulumi.StringPtrOutput `pulumi:"dryRun"`
	// The date on which the server certificate expires.
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`
	// A unique name for the certificate. Constraints: 1-128 alphanumeric characters, pluses (`+`), equals (`=`), commas (`,`), periods (`.`), at signs (`@`), minuses (`-`), or underscores (`_`).
	Name pulumi.StringOutput `pulumi:"name"`
	// The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
	Orn pulumi.StringOutput `pulumi:"orn"`
	// The path to the server certificate, set to a slash (`/`) if not specified.
	Path pulumi.StringOutput `pulumi:"path"`
	// The PEM-encoded private key matching the certificate.
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	RequestId  pulumi.StringOutput    `pulumi:"requestId"`
	// The date on which the server certificate has been uploaded.
	UploadDate pulumi.StringOutput `pulumi:"uploadDate"`
}

// NewServerCertificate registers a new resource with the given unique name, arguments, and options.
func NewServerCertificate(ctx *pulumi.Context,
	name string, args *ServerCertificateArgs, opts ...pulumi.ResourceOption) (*ServerCertificate, error) {
	if args == nil {
		args = &ServerCertificateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerCertificate
	err := ctx.RegisterResource("outscale:index/serverCertificate:ServerCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerCertificate gets an existing ServerCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerCertificateState, opts ...pulumi.ResourceOption) (*ServerCertificate, error) {
	var resource ServerCertificate
	err := ctx.ReadResource("outscale:index/serverCertificate:ServerCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerCertificate resources.
type serverCertificateState struct {
	// The PEM-encoded X509 certificate.
	Body *string `pulumi:"body"`
	// The PEM-encoded intermediate certification authorities.
	Chain  *string `pulumi:"chain"`
	DryRun *string `pulumi:"dryRun"`
	// The date on which the server certificate expires.
	ExpirationDate *string `pulumi:"expirationDate"`
	// A unique name for the certificate. Constraints: 1-128 alphanumeric characters, pluses (`+`), equals (`=`), commas (`,`), periods (`.`), at signs (`@`), minuses (`-`), or underscores (`_`).
	Name *string `pulumi:"name"`
	// The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
	Orn *string `pulumi:"orn"`
	// The path to the server certificate, set to a slash (`/`) if not specified.
	Path *string `pulumi:"path"`
	// The PEM-encoded private key matching the certificate.
	PrivateKey *string `pulumi:"privateKey"`
	RequestId  *string `pulumi:"requestId"`
	// The date on which the server certificate has been uploaded.
	UploadDate *string `pulumi:"uploadDate"`
}

type ServerCertificateState struct {
	// The PEM-encoded X509 certificate.
	Body pulumi.StringPtrInput
	// The PEM-encoded intermediate certification authorities.
	Chain  pulumi.StringPtrInput
	DryRun pulumi.StringPtrInput
	// The date on which the server certificate expires.
	ExpirationDate pulumi.StringPtrInput
	// A unique name for the certificate. Constraints: 1-128 alphanumeric characters, pluses (`+`), equals (`=`), commas (`,`), periods (`.`), at signs (`@`), minuses (`-`), or underscores (`_`).
	Name pulumi.StringPtrInput
	// The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
	Orn pulumi.StringPtrInput
	// The path to the server certificate, set to a slash (`/`) if not specified.
	Path pulumi.StringPtrInput
	// The PEM-encoded private key matching the certificate.
	PrivateKey pulumi.StringPtrInput
	RequestId  pulumi.StringPtrInput
	// The date on which the server certificate has been uploaded.
	UploadDate pulumi.StringPtrInput
}

func (ServerCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverCertificateState)(nil)).Elem()
}

type serverCertificateArgs struct {
	// The PEM-encoded X509 certificate.
	Body *string `pulumi:"body"`
	// The PEM-encoded intermediate certification authorities.
	Chain  *string `pulumi:"chain"`
	DryRun *string `pulumi:"dryRun"`
	// A unique name for the certificate. Constraints: 1-128 alphanumeric characters, pluses (`+`), equals (`=`), commas (`,`), periods (`.`), at signs (`@`), minuses (`-`), or underscores (`_`).
	Name *string `pulumi:"name"`
	// The path to the server certificate, set to a slash (`/`) if not specified.
	Path *string `pulumi:"path"`
	// The PEM-encoded private key matching the certificate.
	PrivateKey *string `pulumi:"privateKey"`
}

// The set of arguments for constructing a ServerCertificate resource.
type ServerCertificateArgs struct {
	// The PEM-encoded X509 certificate.
	Body pulumi.StringPtrInput
	// The PEM-encoded intermediate certification authorities.
	Chain  pulumi.StringPtrInput
	DryRun pulumi.StringPtrInput
	// A unique name for the certificate. Constraints: 1-128 alphanumeric characters, pluses (`+`), equals (`=`), commas (`,`), periods (`.`), at signs (`@`), minuses (`-`), or underscores (`_`).
	Name pulumi.StringPtrInput
	// The path to the server certificate, set to a slash (`/`) if not specified.
	Path pulumi.StringPtrInput
	// The PEM-encoded private key matching the certificate.
	PrivateKey pulumi.StringPtrInput
}

func (ServerCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverCertificateArgs)(nil)).Elem()
}

type ServerCertificateInput interface {
	pulumi.Input

	ToServerCertificateOutput() ServerCertificateOutput
	ToServerCertificateOutputWithContext(ctx context.Context) ServerCertificateOutput
}

func (*ServerCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerCertificate)(nil)).Elem()
}

func (i *ServerCertificate) ToServerCertificateOutput() ServerCertificateOutput {
	return i.ToServerCertificateOutputWithContext(context.Background())
}

func (i *ServerCertificate) ToServerCertificateOutputWithContext(ctx context.Context) ServerCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateOutput)
}

// ServerCertificateArrayInput is an input type that accepts ServerCertificateArray and ServerCertificateArrayOutput values.
// You can construct a concrete instance of `ServerCertificateArrayInput` via:
//
//	ServerCertificateArray{ ServerCertificateArgs{...} }
type ServerCertificateArrayInput interface {
	pulumi.Input

	ToServerCertificateArrayOutput() ServerCertificateArrayOutput
	ToServerCertificateArrayOutputWithContext(context.Context) ServerCertificateArrayOutput
}

type ServerCertificateArray []ServerCertificateInput

func (ServerCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerCertificate)(nil)).Elem()
}

func (i ServerCertificateArray) ToServerCertificateArrayOutput() ServerCertificateArrayOutput {
	return i.ToServerCertificateArrayOutputWithContext(context.Background())
}

func (i ServerCertificateArray) ToServerCertificateArrayOutputWithContext(ctx context.Context) ServerCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateArrayOutput)
}

// ServerCertificateMapInput is an input type that accepts ServerCertificateMap and ServerCertificateMapOutput values.
// You can construct a concrete instance of `ServerCertificateMapInput` via:
//
//	ServerCertificateMap{ "key": ServerCertificateArgs{...} }
type ServerCertificateMapInput interface {
	pulumi.Input

	ToServerCertificateMapOutput() ServerCertificateMapOutput
	ToServerCertificateMapOutputWithContext(context.Context) ServerCertificateMapOutput
}

type ServerCertificateMap map[string]ServerCertificateInput

func (ServerCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerCertificate)(nil)).Elem()
}

func (i ServerCertificateMap) ToServerCertificateMapOutput() ServerCertificateMapOutput {
	return i.ToServerCertificateMapOutputWithContext(context.Background())
}

func (i ServerCertificateMap) ToServerCertificateMapOutputWithContext(ctx context.Context) ServerCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerCertificateMapOutput)
}

type ServerCertificateOutput struct{ *pulumi.OutputState }

func (ServerCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerCertificate)(nil)).Elem()
}

func (o ServerCertificateOutput) ToServerCertificateOutput() ServerCertificateOutput {
	return o
}

func (o ServerCertificateOutput) ToServerCertificateOutputWithContext(ctx context.Context) ServerCertificateOutput {
	return o
}

// The PEM-encoded X509 certificate.
func (o ServerCertificateOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringPtrOutput { return v.Body }).(pulumi.StringPtrOutput)
}

// The PEM-encoded intermediate certification authorities.
func (o ServerCertificateOutput) Chain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringPtrOutput { return v.Chain }).(pulumi.StringPtrOutput)
}

func (o ServerCertificateOutput) DryRun() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringPtrOutput { return v.DryRun }).(pulumi.StringPtrOutput)
}

// The date on which the server certificate expires.
func (o ServerCertificateOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringOutput { return v.ExpirationDate }).(pulumi.StringOutput)
}

// A unique name for the certificate. Constraints: 1-128 alphanumeric characters, pluses (`+`), equals (`=`), commas (`,`), periods (`.`), at signs (`@`), minuses (`-`), or underscores (`_`).
func (o ServerCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The OUTSCALE Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > OUTSCALE Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns).
func (o ServerCertificateOutput) Orn() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringOutput { return v.Orn }).(pulumi.StringOutput)
}

// The path to the server certificate, set to a slash (`/`) if not specified.
func (o ServerCertificateOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The PEM-encoded private key matching the certificate.
func (o ServerCertificateOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

func (o ServerCertificateOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// The date on which the server certificate has been uploaded.
func (o ServerCertificateOutput) UploadDate() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerCertificate) pulumi.StringOutput { return v.UploadDate }).(pulumi.StringOutput)
}

type ServerCertificateArrayOutput struct{ *pulumi.OutputState }

func (ServerCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerCertificate)(nil)).Elem()
}

func (o ServerCertificateArrayOutput) ToServerCertificateArrayOutput() ServerCertificateArrayOutput {
	return o
}

func (o ServerCertificateArrayOutput) ToServerCertificateArrayOutputWithContext(ctx context.Context) ServerCertificateArrayOutput {
	return o
}

func (o ServerCertificateArrayOutput) Index(i pulumi.IntInput) ServerCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerCertificate {
		return vs[0].([]*ServerCertificate)[vs[1].(int)]
	}).(ServerCertificateOutput)
}

type ServerCertificateMapOutput struct{ *pulumi.OutputState }

func (ServerCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerCertificate)(nil)).Elem()
}

func (o ServerCertificateMapOutput) ToServerCertificateMapOutput() ServerCertificateMapOutput {
	return o
}

func (o ServerCertificateMapOutput) ToServerCertificateMapOutputWithContext(ctx context.Context) ServerCertificateMapOutput {
	return o
}

func (o ServerCertificateMapOutput) MapIndex(k pulumi.StringInput) ServerCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerCertificate {
		return vs[0].(map[string]*ServerCertificate)[vs[1].(string)]
	}).(ServerCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerCertificateInput)(nil)).Elem(), &ServerCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerCertificateArrayInput)(nil)).Elem(), ServerCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerCertificateMapInput)(nil)).Elem(), ServerCertificateMap{})
	pulumi.RegisterOutputType(ServerCertificateOutput{})
	pulumi.RegisterOutputType(ServerCertificateArrayOutput{})
	pulumi.RegisterOutputType(ServerCertificateMapOutput{})
}
