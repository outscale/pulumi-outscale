// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a NAT service.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-NAT-Services.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-natservice).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.LookupNatService(ctx, &outscale.LookupNatServiceArgs{
//				Filters: []outscale.GetNatServiceFilter{
//					{
//						Name: "nat_service_ids",
//						Values: []string{
//							"nat-12345678",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNatService(ctx *pulumi.Context, args *LookupNatServiceArgs, opts ...pulumi.InvokeOption) (*LookupNatServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNatServiceResult
	err := ctx.Invoke("outscale:index/getNatService:getNatService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNatService.
type LookupNatServiceArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters []GetNatServiceFilter `pulumi:"filters"`
	// The ID of the NAT service.
	NatServiceId *string `pulumi:"natServiceId"`
}

// A collection of values returned by getNatService.
type LookupNatServiceResult struct {
	Filters []GetNatServiceFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the NAT service.
	NatServiceId *string `pulumi:"natServiceId"`
	// The ID of the Net in which the NAT service is.
	NetId string `pulumi:"netId"`
	// Information about the public IP or IPs associated with the NAT service.
	PublicIps []GetNatServicePublicIp `pulumi:"publicIps"`
	RequestId string                  `pulumi:"requestId"`
	// The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
	State string `pulumi:"state"`
	// The ID of the Subnet in which the NAT service is.
	SubnetId string `pulumi:"subnetId"`
	// One or more tags associated with the NAT service.
	Tags []GetNatServiceTag `pulumi:"tags"`
}

func LookupNatServiceOutput(ctx *pulumi.Context, args LookupNatServiceOutputArgs, opts ...pulumi.InvokeOption) LookupNatServiceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNatServiceResultOutput, error) {
			args := v.(LookupNatServiceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("outscale:index/getNatService:getNatService", args, LookupNatServiceResultOutput{}, options).(LookupNatServiceResultOutput), nil
		}).(LookupNatServiceResultOutput)
}

// A collection of arguments for invoking getNatService.
type LookupNatServiceOutputArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters GetNatServiceFilterArrayInput `pulumi:"filters"`
	// The ID of the NAT service.
	NatServiceId pulumi.StringPtrInput `pulumi:"natServiceId"`
}

func (LookupNatServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNatServiceArgs)(nil)).Elem()
}

// A collection of values returned by getNatService.
type LookupNatServiceResultOutput struct{ *pulumi.OutputState }

func (LookupNatServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNatServiceResult)(nil)).Elem()
}

func (o LookupNatServiceResultOutput) ToLookupNatServiceResultOutput() LookupNatServiceResultOutput {
	return o
}

func (o LookupNatServiceResultOutput) ToLookupNatServiceResultOutputWithContext(ctx context.Context) LookupNatServiceResultOutput {
	return o
}

func (o LookupNatServiceResultOutput) Filters() GetNatServiceFilterArrayOutput {
	return o.ApplyT(func(v LookupNatServiceResult) []GetNatServiceFilter { return v.Filters }).(GetNatServiceFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNatServiceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatServiceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the NAT service.
func (o LookupNatServiceResultOutput) NatServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNatServiceResult) *string { return v.NatServiceId }).(pulumi.StringPtrOutput)
}

// The ID of the Net in which the NAT service is.
func (o LookupNatServiceResultOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatServiceResult) string { return v.NetId }).(pulumi.StringOutput)
}

// Information about the public IP or IPs associated with the NAT service.
func (o LookupNatServiceResultOutput) PublicIps() GetNatServicePublicIpArrayOutput {
	return o.ApplyT(func(v LookupNatServiceResult) []GetNatServicePublicIp { return v.PublicIps }).(GetNatServicePublicIpArrayOutput)
}

func (o LookupNatServiceResultOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatServiceResult) string { return v.RequestId }).(pulumi.StringOutput)
}

// The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
func (o LookupNatServiceResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatServiceResult) string { return v.State }).(pulumi.StringOutput)
}

// The ID of the Subnet in which the NAT service is.
func (o LookupNatServiceResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatServiceResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// One or more tags associated with the NAT service.
func (o LookupNatServiceResultOutput) Tags() GetNatServiceTagArrayOutput {
	return o.ApplyT(func(v LookupNatServiceResult) []GetNatServiceTag { return v.Tags }).(GetNatServiceTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNatServiceResultOutput{})
}
