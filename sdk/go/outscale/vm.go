// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a virtual machine (VM).
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Instances.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vm).
//
// ## Example Usage
// ### Optional resource
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewKeypair(ctx, "keypair01", &outscale.KeypairArgs{
//				KeypairName: pulumi.String("terraform-keypair-for-vm"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a VM with block device mappings
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewVm(ctx, "vm02", &outscale.VmArgs{
//				ImageId:     pulumi.Any(_var.Image_id),
//				VmType:      pulumi.Any(_var.Vm_type),
//				KeypairName: pulumi.Any(_var.Keypair_name),
//				BlockDeviceMappings: outscale.VmBlockDeviceMappingArray{
//					&outscale.VmBlockDeviceMappingArgs{
//						DeviceName: pulumi.String("/dev/sda1"),
//						Bsu: &outscale.VmBlockDeviceMappingBsuArgs{
//							VolumeSize: pulumi.Int(15),
//							VolumeType: pulumi.String("gp2"),
//							SnapshotId: pulumi.Any(_var.Snapshot_id),
//						},
//					},
//					&outscale.VmBlockDeviceMappingArgs{
//						DeviceName: pulumi.String("/dev/sdb"),
//						Bsu: &outscale.VmBlockDeviceMappingBsuArgs{
//							VolumeSize:         pulumi.Int(22),
//							VolumeType:         pulumi.String("io1"),
//							Iops:               pulumi.Int(150),
//							DeleteOnVmDeletion: pulumi.Bool(true),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a VM in a Net with a network
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net01, err := outscale.NewNet(ctx, "net01", &outscale.NetArgs{
//				IpRange: pulumi.String("10.0.0.0/16"),
//				Tags: outscale.NetTagArray{
//					&outscale.NetTagArgs{
//						Key:   pulumi.String("name"),
//						Value: pulumi.String("terraform-net-for-vm"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			subnet01, err := outscale.NewSubnet(ctx, "subnet01", &outscale.SubnetArgs{
//				NetId:         net01.NetId,
//				IpRange:       pulumi.String("10.0.0.0/24"),
//				SubregionName: pulumi.String("eu-west-2b"),
//				Tags: outscale.SubnetTagArray{
//					&outscale.SubnetTagArgs{
//						Key:   pulumi.String("name"),
//						Value: pulumi.String("terraform-subnet-for-vm"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			securityGroup01, err := outscale.NewSecurityGroup(ctx, "securityGroup01", &outscale.SecurityGroupArgs{
//				Description:       pulumi.String("Terraform security group for VM"),
//				SecurityGroupName: pulumi.String("terraform-security-group-for-vm"),
//				NetId:             net01.NetId,
//			})
//			if err != nil {
//				return err
//			}
//			internetService01, err := outscale.NewInternetService(ctx, "internetService01", nil)
//			if err != nil {
//				return err
//			}
//			routeTable01, err := outscale.NewRouteTable(ctx, "routeTable01", &outscale.RouteTableArgs{
//				NetId: net01.NetId,
//				Tags: outscale.RouteTableTagArray{
//					&outscale.RouteTableTagArgs{
//						Key:   pulumi.String("name"),
//						Value: pulumi.String("terraform-route-table-for-vm"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewRouteTableLink(ctx, "routeTableLink01", &outscale.RouteTableLinkArgs{
//				RouteTableId: routeTable01.RouteTableId,
//				SubnetId:     subnet01.SubnetId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewInternetServiceLink(ctx, "internetServiceLink01", &outscale.InternetServiceLinkArgs{
//				InternetServiceId: internetService01.InternetServiceId,
//				NetId:             net01.NetId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewRoute(ctx, "route01", &outscale.RouteArgs{
//				GatewayId:          internetService01.InternetServiceId,
//				DestinationIpRange: pulumi.String("0.0.0.0/0"),
//				RouteTableId:       routeTable01.RouteTableId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewVm(ctx, "vm03", &outscale.VmArgs{
//				ImageId:     pulumi.Any(_var.Image_id),
//				VmType:      pulumi.Any(_var.Vm_type),
//				KeypairName: pulumi.Any(_var.Keypair_name),
//				SecurityGroupIds: pulumi.StringArray{
//					securityGroup01.SecurityGroupId,
//				},
//				SubnetId: subnet01.SubnetId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create a VM with a NIC
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net02, err := outscale.NewNet(ctx, "net02", &outscale.NetArgs{
//				IpRange: pulumi.String("10.0.0.0/16"),
//				Tags: outscale.NetTagArray{
//					&outscale.NetTagArgs{
//						Key:   pulumi.String("name"),
//						Value: pulumi.String("terraform-net-for-vm-with-nic"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			subnet02, err := outscale.NewSubnet(ctx, "subnet02", &outscale.SubnetArgs{
//				NetId:         net02.NetId,
//				IpRange:       pulumi.String("10.0.0.0/24"),
//				SubregionName: pulumi.String("eu-west-2a"),
//				Tags: outscale.SubnetTagArray{
//					&outscale.SubnetTagArgs{
//						Key:   pulumi.String("name"),
//						Value: pulumi.String("terraform-subnet-for-vm-with-nic"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			nic01, err := outscale.NewNic(ctx, "nic01", &outscale.NicArgs{
//				SubnetId: subnet02.SubnetId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewVm(ctx, "vm04", &outscale.VmArgs{
//				ImageId:     pulumi.Any(_var.Image_id),
//				VmType:      pulumi.String("c4.large"),
//				KeypairName: pulumi.Any(_var.Keypair_name),
//				PrimaryNics: outscale.VmPrimaryNicArray{
//					&outscale.VmPrimaryNicArgs{
//						NicId:        nic01.NicId,
//						DeviceNumber: pulumi.Int(0),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A VM can be imported using its ID. For exampleconsole
//
// ```sh
//
//	$ pulumi import outscale:index/vm:Vm ImportedVm i-12345678
//
// ```
type Vm struct {
	pulumi.CustomResourceState

	AdminPassword pulumi.StringOutput `pulumi:"adminPassword"`
	// The architecture of the VM (`i386` \| `x8664`).
	Architecture pulumi.StringOutput `pulumi:"architecture"`
	// One or more block device mappings.
	BlockDeviceMappings VmBlockDeviceMappingArrayOutput `pulumi:"blockDeviceMappings"`
	// The block device mapping of the VM.
	BlockDeviceMappingsCreateds VmBlockDeviceMappingsCreatedArrayOutput `pulumi:"blockDeviceMappingsCreateds"`
	BsuOptimized                pulumi.BoolOutput                       `pulumi:"bsuOptimized"`
	// A unique identifier which enables you to manage the idempotency.
	ClientToken pulumi.StringOutput `pulumi:"clientToken"`
	// The date and time of creation of the VM.
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// If true, you cannot delete the VM unless you change this parameter back to false.
	DeletionProtection pulumi.BoolOutput `pulumi:"deletionProtection"`
	// (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `adminPassword` attribute.
	GetAdminPassword pulumi.BoolPtrOutput `pulumi:"getAdminPassword"`
	// The hypervisor type of the VMs (`ovm` \| `xen`).
	Hypervisor pulumi.StringOutput `pulumi:"hypervisor"`
	// The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
	IsSourceDestChecked pulumi.BoolOutput `pulumi:"isSourceDestChecked"`
	// The name of the keypair.
	KeypairName pulumi.StringOutput `pulumi:"keypairName"`
	// The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
	LaunchNumber pulumi.IntOutput `pulumi:"launchNumber"`
	// (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
	NestedVirtualization pulumi.BoolPtrOutput `pulumi:"nestedVirtualization"`
	// The ID of the Net for the NIC.
	NetId pulumi.StringOutput `pulumi:"netId"`
	// One or more NICs. If you specify this parameter, you must not specify the `subnetId` and `subregionName` parameters. To define a NIC as the primary network interface of the VM, use the `primaryNic` argument.
	Nics VmNicArrayOutput `pulumi:"nics"`
	// Indicates the operating system (OS) of the VM.
	OsFamily pulumi.StringOutput `pulumi:"osFamily"`
	// The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
	Performance pulumi.StringOutput `pulumi:"performance"`
	// The name of the Subregion where the VM is placed.
	PlacementSubregionName pulumi.StringOutput `pulumi:"placementSubregionName"`
	// The tenancy of the VM (`default` | `dedicated`).
	PlacementTenancy pulumi.StringOutput `pulumi:"placementTenancy"`
	// The primary network interface of the VM.
	PrimaryNics VmPrimaryNicArrayOutput `pulumi:"primaryNics"`
	// The name of the private DNS.
	PrivateDnsName pulumi.StringOutput `pulumi:"privateDnsName"`
	// The private IP of the NIC.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// One or more private IPs of the VM.
	PrivateIps pulumi.StringArrayOutput `pulumi:"privateIps"`
	// The product codes associated with the OMI used to create the VM.
	ProductCodes pulumi.StringArrayOutput `pulumi:"productCodes"`
	// The name of the public DNS.
	PublicDnsName pulumi.StringOutput `pulumi:"publicDnsName"`
	// The public IP of the VM.
	PublicIp  pulumi.StringOutput `pulumi:"publicIp"`
	RequestId pulumi.StringOutput `pulumi:"requestId"`
	// The reservation ID of the VM.
	ReservationId pulumi.StringOutput `pulumi:"reservationId"`
	// The name of the root device for the VM (for example, `/dev/vda1`).
	RootDeviceName pulumi.StringOutput `pulumi:"rootDeviceName"`
	// The type of root device used by the VM (always `bsu`).
	RootDeviceType pulumi.StringOutput `pulumi:"rootDeviceType"`
	// One or more IDs of security group for the VMs.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// One or more names of security groups for the VMs.
	SecurityGroupNames pulumi.StringArrayOutput `pulumi:"securityGroupNames"`
	// One or more security groups associated with the VM.
	SecurityGroups VmSecurityGroupArrayOutput `pulumi:"securityGroups"`
	// The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vmInitiatedShutdownBehavior` argument.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// The reason explaining the current state of the VM.
	StateReason pulumi.StringOutput `pulumi:"stateReason"`
	// The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags VmTagArrayOutput `pulumi:"tags"`
	// Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
	UserData pulumi.StringPtrOutput `pulumi:"userData"`
	// The ID of the VM.
	VmId pulumi.StringOutput `pulumi:"vmId"`
	// The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
	VmInitiatedShutdownBehavior pulumi.StringOutput `pulumi:"vmInitiatedShutdownBehavior"`
	// The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.<br /> For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
	VmType pulumi.StringOutput `pulumi:"vmType"`
}

// NewVm registers a new resource with the given unique name, arguments, and options.
func NewVm(ctx *pulumi.Context,
	name string, args *VmArgs, opts ...pulumi.ResourceOption) (*Vm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vm
	err := ctx.RegisterResource("outscale:index/vm:Vm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVm gets an existing Vm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmState, opts ...pulumi.ResourceOption) (*Vm, error) {
	var resource Vm
	err := ctx.ReadResource("outscale:index/vm:Vm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vm resources.
type vmState struct {
	AdminPassword *string `pulumi:"adminPassword"`
	// The architecture of the VM (`i386` \| `x8664`).
	Architecture *string `pulumi:"architecture"`
	// One or more block device mappings.
	BlockDeviceMappings []VmBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// The block device mapping of the VM.
	BlockDeviceMappingsCreateds []VmBlockDeviceMappingsCreated `pulumi:"blockDeviceMappingsCreateds"`
	BsuOptimized                *bool                          `pulumi:"bsuOptimized"`
	// A unique identifier which enables you to manage the idempotency.
	ClientToken *string `pulumi:"clientToken"`
	// The date and time of creation of the VM.
	CreationDate *string `pulumi:"creationDate"`
	// If true, you cannot delete the VM unless you change this parameter back to false.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `adminPassword` attribute.
	GetAdminPassword *bool `pulumi:"getAdminPassword"`
	// The hypervisor type of the VMs (`ovm` \| `xen`).
	Hypervisor *string `pulumi:"hypervisor"`
	// The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
	ImageId *string `pulumi:"imageId"`
	// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
	IsSourceDestChecked *bool `pulumi:"isSourceDestChecked"`
	// The name of the keypair.
	KeypairName *string `pulumi:"keypairName"`
	// The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
	LaunchNumber *int `pulumi:"launchNumber"`
	// (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
	NestedVirtualization *bool `pulumi:"nestedVirtualization"`
	// The ID of the Net for the NIC.
	NetId *string `pulumi:"netId"`
	// One or more NICs. If you specify this parameter, you must not specify the `subnetId` and `subregionName` parameters. To define a NIC as the primary network interface of the VM, use the `primaryNic` argument.
	Nics []VmNic `pulumi:"nics"`
	// Indicates the operating system (OS) of the VM.
	OsFamily *string `pulumi:"osFamily"`
	// The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
	Performance *string `pulumi:"performance"`
	// The name of the Subregion where the VM is placed.
	PlacementSubregionName *string `pulumi:"placementSubregionName"`
	// The tenancy of the VM (`default` | `dedicated`).
	PlacementTenancy *string `pulumi:"placementTenancy"`
	// The primary network interface of the VM.
	PrimaryNics []VmPrimaryNic `pulumi:"primaryNics"`
	// The name of the private DNS.
	PrivateDnsName *string `pulumi:"privateDnsName"`
	// The private IP of the NIC.
	PrivateIp *string `pulumi:"privateIp"`
	// One or more private IPs of the VM.
	PrivateIps []string `pulumi:"privateIps"`
	// The product codes associated with the OMI used to create the VM.
	ProductCodes []string `pulumi:"productCodes"`
	// The name of the public DNS.
	PublicDnsName *string `pulumi:"publicDnsName"`
	// The public IP of the VM.
	PublicIp  *string `pulumi:"publicIp"`
	RequestId *string `pulumi:"requestId"`
	// The reservation ID of the VM.
	ReservationId *string `pulumi:"reservationId"`
	// The name of the root device for the VM (for example, `/dev/vda1`).
	RootDeviceName *string `pulumi:"rootDeviceName"`
	// The type of root device used by the VM (always `bsu`).
	RootDeviceType *string `pulumi:"rootDeviceType"`
	// One or more IDs of security group for the VMs.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// One or more names of security groups for the VMs.
	SecurityGroupNames []string `pulumi:"securityGroupNames"`
	// One or more security groups associated with the VM.
	SecurityGroups []VmSecurityGroup `pulumi:"securityGroups"`
	// The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vmInitiatedShutdownBehavior` argument.
	State *string `pulumi:"state"`
	// The reason explaining the current state of the VM.
	StateReason *string `pulumi:"stateReason"`
	// The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
	SubnetId *string `pulumi:"subnetId"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []VmTag `pulumi:"tags"`
	// Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
	UserData *string `pulumi:"userData"`
	// The ID of the VM.
	VmId *string `pulumi:"vmId"`
	// The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
	VmInitiatedShutdownBehavior *string `pulumi:"vmInitiatedShutdownBehavior"`
	// The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.<br /> For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
	VmType *string `pulumi:"vmType"`
}

type VmState struct {
	AdminPassword pulumi.StringPtrInput
	// The architecture of the VM (`i386` \| `x8664`).
	Architecture pulumi.StringPtrInput
	// One or more block device mappings.
	BlockDeviceMappings VmBlockDeviceMappingArrayInput
	// The block device mapping of the VM.
	BlockDeviceMappingsCreateds VmBlockDeviceMappingsCreatedArrayInput
	BsuOptimized                pulumi.BoolPtrInput
	// A unique identifier which enables you to manage the idempotency.
	ClientToken pulumi.StringPtrInput
	// The date and time of creation of the VM.
	CreationDate pulumi.StringPtrInput
	// If true, you cannot delete the VM unless you change this parameter back to false.
	DeletionProtection pulumi.BoolPtrInput
	// (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `adminPassword` attribute.
	GetAdminPassword pulumi.BoolPtrInput
	// The hypervisor type of the VMs (`ovm` \| `xen`).
	Hypervisor pulumi.StringPtrInput
	// The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
	ImageId pulumi.StringPtrInput
	// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
	IsSourceDestChecked pulumi.BoolPtrInput
	// The name of the keypair.
	KeypairName pulumi.StringPtrInput
	// The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
	LaunchNumber pulumi.IntPtrInput
	// (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
	NestedVirtualization pulumi.BoolPtrInput
	// The ID of the Net for the NIC.
	NetId pulumi.StringPtrInput
	// One or more NICs. If you specify this parameter, you must not specify the `subnetId` and `subregionName` parameters. To define a NIC as the primary network interface of the VM, use the `primaryNic` argument.
	Nics VmNicArrayInput
	// Indicates the operating system (OS) of the VM.
	OsFamily pulumi.StringPtrInput
	// The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
	Performance pulumi.StringPtrInput
	// The name of the Subregion where the VM is placed.
	PlacementSubregionName pulumi.StringPtrInput
	// The tenancy of the VM (`default` | `dedicated`).
	PlacementTenancy pulumi.StringPtrInput
	// The primary network interface of the VM.
	PrimaryNics VmPrimaryNicArrayInput
	// The name of the private DNS.
	PrivateDnsName pulumi.StringPtrInput
	// The private IP of the NIC.
	PrivateIp pulumi.StringPtrInput
	// One or more private IPs of the VM.
	PrivateIps pulumi.StringArrayInput
	// The product codes associated with the OMI used to create the VM.
	ProductCodes pulumi.StringArrayInput
	// The name of the public DNS.
	PublicDnsName pulumi.StringPtrInput
	// The public IP of the VM.
	PublicIp  pulumi.StringPtrInput
	RequestId pulumi.StringPtrInput
	// The reservation ID of the VM.
	ReservationId pulumi.StringPtrInput
	// The name of the root device for the VM (for example, `/dev/vda1`).
	RootDeviceName pulumi.StringPtrInput
	// The type of root device used by the VM (always `bsu`).
	RootDeviceType pulumi.StringPtrInput
	// One or more IDs of security group for the VMs.
	SecurityGroupIds pulumi.StringArrayInput
	// One or more names of security groups for the VMs.
	SecurityGroupNames pulumi.StringArrayInput
	// One or more security groups associated with the VM.
	SecurityGroups VmSecurityGroupArrayInput
	// The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vmInitiatedShutdownBehavior` argument.
	State pulumi.StringPtrInput
	// The reason explaining the current state of the VM.
	StateReason pulumi.StringPtrInput
	// The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
	SubnetId pulumi.StringPtrInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags VmTagArrayInput
	// Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
	UserData pulumi.StringPtrInput
	// The ID of the VM.
	VmId pulumi.StringPtrInput
	// The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
	VmInitiatedShutdownBehavior pulumi.StringPtrInput
	// The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.<br /> For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
	VmType pulumi.StringPtrInput
}

func (VmState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmState)(nil)).Elem()
}

type vmArgs struct {
	// One or more block device mappings.
	BlockDeviceMappings []VmBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	BsuOptimized        *bool                  `pulumi:"bsuOptimized"`
	// If true, you cannot delete the VM unless you change this parameter back to false.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `adminPassword` attribute.
	GetAdminPassword *bool `pulumi:"getAdminPassword"`
	// The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
	ImageId string `pulumi:"imageId"`
	// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
	IsSourceDestChecked *bool `pulumi:"isSourceDestChecked"`
	// The name of the keypair.
	KeypairName *string `pulumi:"keypairName"`
	// (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
	NestedVirtualization *bool `pulumi:"nestedVirtualization"`
	// One or more NICs. If you specify this parameter, you must not specify the `subnetId` and `subregionName` parameters. To define a NIC as the primary network interface of the VM, use the `primaryNic` argument.
	Nics []VmNic `pulumi:"nics"`
	// The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
	Performance *string `pulumi:"performance"`
	// The name of the Subregion where the VM is placed.
	PlacementSubregionName *string `pulumi:"placementSubregionName"`
	// The tenancy of the VM (`default` | `dedicated`).
	PlacementTenancy *string `pulumi:"placementTenancy"`
	// The primary network interface of the VM.
	PrimaryNics []VmPrimaryNic `pulumi:"primaryNics"`
	// One or more private IPs of the VM.
	PrivateIps []string `pulumi:"privateIps"`
	// One or more IDs of security group for the VMs.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// One or more names of security groups for the VMs.
	SecurityGroupNames []string `pulumi:"securityGroupNames"`
	// The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vmInitiatedShutdownBehavior` argument.
	State *string `pulumi:"state"`
	// The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
	SubnetId *string `pulumi:"subnetId"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []VmTag `pulumi:"tags"`
	// Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
	UserData *string `pulumi:"userData"`
	// The ID of the VM.
	VmId *string `pulumi:"vmId"`
	// The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
	VmInitiatedShutdownBehavior *string `pulumi:"vmInitiatedShutdownBehavior"`
	// The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.<br /> For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
	VmType *string `pulumi:"vmType"`
}

// The set of arguments for constructing a Vm resource.
type VmArgs struct {
	// One or more block device mappings.
	BlockDeviceMappings VmBlockDeviceMappingArrayInput
	BsuOptimized        pulumi.BoolPtrInput
	// If true, you cannot delete the VM unless you change this parameter back to false.
	DeletionProtection pulumi.BoolPtrInput
	// (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `adminPassword` attribute.
	GetAdminPassword pulumi.BoolPtrInput
	// The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
	ImageId pulumi.StringInput
	// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
	IsSourceDestChecked pulumi.BoolPtrInput
	// The name of the keypair.
	KeypairName pulumi.StringPtrInput
	// (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
	NestedVirtualization pulumi.BoolPtrInput
	// One or more NICs. If you specify this parameter, you must not specify the `subnetId` and `subregionName` parameters. To define a NIC as the primary network interface of the VM, use the `primaryNic` argument.
	Nics VmNicArrayInput
	// The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
	Performance pulumi.StringPtrInput
	// The name of the Subregion where the VM is placed.
	PlacementSubregionName pulumi.StringPtrInput
	// The tenancy of the VM (`default` | `dedicated`).
	PlacementTenancy pulumi.StringPtrInput
	// The primary network interface of the VM.
	PrimaryNics VmPrimaryNicArrayInput
	// One or more private IPs of the VM.
	PrivateIps pulumi.StringArrayInput
	// One or more IDs of security group for the VMs.
	SecurityGroupIds pulumi.StringArrayInput
	// One or more names of security groups for the VMs.
	SecurityGroupNames pulumi.StringArrayInput
	// The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vmInitiatedShutdownBehavior` argument.
	State pulumi.StringPtrInput
	// The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
	SubnetId pulumi.StringPtrInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags VmTagArrayInput
	// Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
	UserData pulumi.StringPtrInput
	// The ID of the VM.
	VmId pulumi.StringPtrInput
	// The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
	VmInitiatedShutdownBehavior pulumi.StringPtrInput
	// The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.<br /> For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
	VmType pulumi.StringPtrInput
}

func (VmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmArgs)(nil)).Elem()
}

type VmInput interface {
	pulumi.Input

	ToVmOutput() VmOutput
	ToVmOutputWithContext(ctx context.Context) VmOutput
}

func (*Vm) ElementType() reflect.Type {
	return reflect.TypeOf((**Vm)(nil)).Elem()
}

func (i *Vm) ToVmOutput() VmOutput {
	return i.ToVmOutputWithContext(context.Background())
}

func (i *Vm) ToVmOutputWithContext(ctx context.Context) VmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmOutput)
}

// VmArrayInput is an input type that accepts VmArray and VmArrayOutput values.
// You can construct a concrete instance of `VmArrayInput` via:
//
//	VmArray{ VmArgs{...} }
type VmArrayInput interface {
	pulumi.Input

	ToVmArrayOutput() VmArrayOutput
	ToVmArrayOutputWithContext(context.Context) VmArrayOutput
}

type VmArray []VmInput

func (VmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vm)(nil)).Elem()
}

func (i VmArray) ToVmArrayOutput() VmArrayOutput {
	return i.ToVmArrayOutputWithContext(context.Background())
}

func (i VmArray) ToVmArrayOutputWithContext(ctx context.Context) VmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmArrayOutput)
}

// VmMapInput is an input type that accepts VmMap and VmMapOutput values.
// You can construct a concrete instance of `VmMapInput` via:
//
//	VmMap{ "key": VmArgs{...} }
type VmMapInput interface {
	pulumi.Input

	ToVmMapOutput() VmMapOutput
	ToVmMapOutputWithContext(context.Context) VmMapOutput
}

type VmMap map[string]VmInput

func (VmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vm)(nil)).Elem()
}

func (i VmMap) ToVmMapOutput() VmMapOutput {
	return i.ToVmMapOutputWithContext(context.Background())
}

func (i VmMap) ToVmMapOutputWithContext(ctx context.Context) VmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmMapOutput)
}

type VmOutput struct{ *pulumi.OutputState }

func (VmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vm)(nil)).Elem()
}

func (o VmOutput) ToVmOutput() VmOutput {
	return o
}

func (o VmOutput) ToVmOutputWithContext(ctx context.Context) VmOutput {
	return o
}

func (o VmOutput) AdminPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.AdminPassword }).(pulumi.StringOutput)
}

// The architecture of the VM (`i386` \| `x8664`).
func (o VmOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.Architecture }).(pulumi.StringOutput)
}

// One or more block device mappings.
func (o VmOutput) BlockDeviceMappings() VmBlockDeviceMappingArrayOutput {
	return o.ApplyT(func(v *Vm) VmBlockDeviceMappingArrayOutput { return v.BlockDeviceMappings }).(VmBlockDeviceMappingArrayOutput)
}

// The block device mapping of the VM.
func (o VmOutput) BlockDeviceMappingsCreateds() VmBlockDeviceMappingsCreatedArrayOutput {
	return o.ApplyT(func(v *Vm) VmBlockDeviceMappingsCreatedArrayOutput { return v.BlockDeviceMappingsCreateds }).(VmBlockDeviceMappingsCreatedArrayOutput)
}

func (o VmOutput) BsuOptimized() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vm) pulumi.BoolOutput { return v.BsuOptimized }).(pulumi.BoolOutput)
}

// A unique identifier which enables you to manage the idempotency.
func (o VmOutput) ClientToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.ClientToken }).(pulumi.StringOutput)
}

// The date and time of creation of the VM.
func (o VmOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// If true, you cannot delete the VM unless you change this parameter back to false.
func (o VmOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vm) pulumi.BoolOutput { return v.DeletionProtection }).(pulumi.BoolOutput)
}

// (Windows VM only) If true, waits for the administrator password of the VM to become available in order to retrieve the VM. The password is exported to the `adminPassword` attribute.
func (o VmOutput) GetAdminPassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.BoolPtrOutput { return v.GetAdminPassword }).(pulumi.BoolPtrOutput)
}

// The hypervisor type of the VMs (`ovm` \| `xen`).
func (o VmOutput) Hypervisor() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.Hypervisor }).(pulumi.StringOutput)
}

// The ID of the OMI used to create the VM. You can find the list of OMIs by calling the [ReadImages](https://docs.outscale.com/api#readimages) method.
func (o VmOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
func (o VmOutput) IsSourceDestChecked() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vm) pulumi.BoolOutput { return v.IsSourceDestChecked }).(pulumi.BoolOutput)
}

// The name of the keypair.
func (o VmOutput) KeypairName() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.KeypairName }).(pulumi.StringOutput)
}

// The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
func (o VmOutput) LaunchNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Vm) pulumi.IntOutput { return v.LaunchNumber }).(pulumi.IntOutput)
}

// (dedicated tenancy only) If true, nested virtualization is enabled. If false, it is disabled.
func (o VmOutput) NestedVirtualization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.BoolPtrOutput { return v.NestedVirtualization }).(pulumi.BoolPtrOutput)
}

// The ID of the Net for the NIC.
func (o VmOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.NetId }).(pulumi.StringOutput)
}

// One or more NICs. If you specify this parameter, you must not specify the `subnetId` and `subregionName` parameters. To define a NIC as the primary network interface of the VM, use the `primaryNic` argument.
func (o VmOutput) Nics() VmNicArrayOutput {
	return o.ApplyT(func(v *Vm) VmNicArrayOutput { return v.Nics }).(VmNicArrayOutput)
}

// Indicates the operating system (OS) of the VM.
func (o VmOutput) OsFamily() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.OsFamily }).(pulumi.StringOutput)
}

// The performance of the VM (`medium` | `high` | `highest`). Updating this parameter will trigger a stop/start of the VM.
func (o VmOutput) Performance() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.Performance }).(pulumi.StringOutput)
}

// The name of the Subregion where the VM is placed.
func (o VmOutput) PlacementSubregionName() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.PlacementSubregionName }).(pulumi.StringOutput)
}

// The tenancy of the VM (`default` | `dedicated`).
func (o VmOutput) PlacementTenancy() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.PlacementTenancy }).(pulumi.StringOutput)
}

// The primary network interface of the VM.
func (o VmOutput) PrimaryNics() VmPrimaryNicArrayOutput {
	return o.ApplyT(func(v *Vm) VmPrimaryNicArrayOutput { return v.PrimaryNics }).(VmPrimaryNicArrayOutput)
}

// The name of the private DNS.
func (o VmOutput) PrivateDnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.PrivateDnsName }).(pulumi.StringOutput)
}

// The private IP of the NIC.
func (o VmOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// One or more private IPs of the VM.
func (o VmOutput) PrivateIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringArrayOutput { return v.PrivateIps }).(pulumi.StringArrayOutput)
}

// The product codes associated with the OMI used to create the VM.
func (o VmOutput) ProductCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringArrayOutput { return v.ProductCodes }).(pulumi.StringArrayOutput)
}

// The name of the public DNS.
func (o VmOutput) PublicDnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.PublicDnsName }).(pulumi.StringOutput)
}

// The public IP of the VM.
func (o VmOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

func (o VmOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// The reservation ID of the VM.
func (o VmOutput) ReservationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.ReservationId }).(pulumi.StringOutput)
}

// The name of the root device for the VM (for example, `/dev/vda1`).
func (o VmOutput) RootDeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.RootDeviceName }).(pulumi.StringOutput)
}

// The type of root device used by the VM (always `bsu`).
func (o VmOutput) RootDeviceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.RootDeviceType }).(pulumi.StringOutput)
}

// One or more IDs of security group for the VMs.
func (o VmOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// One or more names of security groups for the VMs.
func (o VmOutput) SecurityGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringArrayOutput { return v.SecurityGroupNames }).(pulumi.StringArrayOutput)
}

// One or more security groups associated with the VM.
func (o VmOutput) SecurityGroups() VmSecurityGroupArrayOutput {
	return o.ApplyT(func(v *Vm) VmSecurityGroupArrayOutput { return v.SecurityGroups }).(VmSecurityGroupArrayOutput)
}

// The state of the VM (`running` | `stopped`). If set to `stopped`, the VM is stopped regardless of the value of the `vmInitiatedShutdownBehavior` argument.
func (o VmOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// The reason explaining the current state of the VM.
func (o VmOutput) StateReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.StateReason }).(pulumi.StringOutput)
}

// The ID of the Subnet in which you want to create the VM. If you specify this parameter, you must not specify the `nics` parameter.
func (o VmOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// A tag to add to this resource. You can specify this argument several times.
func (o VmOutput) Tags() VmTagArrayOutput {
	return o.ApplyT(func(v *Vm) VmTagArrayOutput { return v.Tags }).(VmTagArrayOutput)
}

// Data or script used to add a specific configuration to the VM. It must be Base64-encoded, either directly or using the base64encode. Updating this parameter will trigger a stop/start of the VM.
func (o VmOutput) UserData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringPtrOutput { return v.UserData }).(pulumi.StringPtrOutput)
}

// The ID of the VM.
func (o VmOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.VmId }).(pulumi.StringOutput)
}

// The VM behavior when you stop it. By default or if set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is terminated.
func (o VmOutput) VmInitiatedShutdownBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.VmInitiatedShutdownBehavior }).(pulumi.StringOutput)
}

// The type of VM (`t2.small` by default). Updating this parameter will trigger a stop/start of the VM.<br /> For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
func (o VmOutput) VmType() pulumi.StringOutput {
	return o.ApplyT(func(v *Vm) pulumi.StringOutput { return v.VmType }).(pulumi.StringOutput)
}

type VmArrayOutput struct{ *pulumi.OutputState }

func (VmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vm)(nil)).Elem()
}

func (o VmArrayOutput) ToVmArrayOutput() VmArrayOutput {
	return o
}

func (o VmArrayOutput) ToVmArrayOutputWithContext(ctx context.Context) VmArrayOutput {
	return o
}

func (o VmArrayOutput) Index(i pulumi.IntInput) VmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vm {
		return vs[0].([]*Vm)[vs[1].(int)]
	}).(VmOutput)
}

type VmMapOutput struct{ *pulumi.OutputState }

func (VmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vm)(nil)).Elem()
}

func (o VmMapOutput) ToVmMapOutput() VmMapOutput {
	return o
}

func (o VmMapOutput) ToVmMapOutputWithContext(ctx context.Context) VmMapOutput {
	return o
}

func (o VmMapOutput) MapIndex(k pulumi.StringInput) VmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vm {
		return vs[0].(map[string]*Vm)[vs[1].(string)]
	}).(VmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmInput)(nil)).Elem(), &Vm{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmArrayInput)(nil)).Elem(), VmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmMapInput)(nil)).Elem(), VmMap{})
	pulumi.RegisterOutputType(VmOutput{})
	pulumi.RegisterOutputType(VmArrayOutput{})
	pulumi.RegisterOutputType(VmMapOutput{})
}
