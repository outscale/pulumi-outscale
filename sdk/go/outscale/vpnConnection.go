// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a VPN connection.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPN-Connections.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vpnconnection).
//
// ## Example Usage
//
// ## Import
//
// A VPN connection can be imported using its ID. For exampleconsole
//
// ```sh
//
//	$ pulumi import outscale:index/vpnConnection:VpnConnection ImportedVPN vpn-12345678
//
// ```
type VpnConnection struct {
	pulumi.CustomResourceState

	// Example configuration for the client gateway.
	ClientGatewayConfiguration pulumi.StringOutput `pulumi:"clientGatewayConfiguration"`
	// The ID of the client gateway.
	ClientGatewayId pulumi.StringOutput `pulumi:"clientGatewayId"`
	// The type of VPN connection (only `ipsec.1` is supported).
	ConnectionType pulumi.StringOutput `pulumi:"connectionType"`
	RequestId      pulumi.StringOutput `pulumi:"requestId"`
	// Information about one or more static routes associated with the VPN connection, if any.
	Routes VpnConnectionRouteTypeArrayOutput `pulumi:"routes"`
	// The state of the IPSEC tunnel (`UP` \| `DOWN`).
	State pulumi.StringOutput `pulumi:"state"`
	// If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
	StaticRoutesOnly pulumi.BoolPtrOutput `pulumi:"staticRoutesOnly"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags VpnConnectionTagArrayOutput `pulumi:"tags"`
	// Information about the current state of one or more of the VPN tunnels.
	VgwTelemetries VpnConnectionVgwTelemetryArrayOutput `pulumi:"vgwTelemetries"`
	// The ID of the virtual gateway.
	VirtualGatewayId pulumi.StringOutput `pulumi:"virtualGatewayId"`
	// The ID of the VPN connection.
	VpnConnectionId pulumi.StringOutput `pulumi:"vpnConnectionId"`
}

// NewVpnConnection registers a new resource with the given unique name, arguments, and options.
func NewVpnConnection(ctx *pulumi.Context,
	name string, args *VpnConnectionArgs, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'ClientGatewayId'")
	}
	if args.ConnectionType == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionType'")
	}
	if args.VirtualGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualGatewayId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnConnection
	err := ctx.RegisterResource("outscale:index/vpnConnection:VpnConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnConnection gets an existing VpnConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnConnectionState, opts ...pulumi.ResourceOption) (*VpnConnection, error) {
	var resource VpnConnection
	err := ctx.ReadResource("outscale:index/vpnConnection:VpnConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnConnection resources.
type vpnConnectionState struct {
	// Example configuration for the client gateway.
	ClientGatewayConfiguration *string `pulumi:"clientGatewayConfiguration"`
	// The ID of the client gateway.
	ClientGatewayId *string `pulumi:"clientGatewayId"`
	// The type of VPN connection (only `ipsec.1` is supported).
	ConnectionType *string `pulumi:"connectionType"`
	RequestId      *string `pulumi:"requestId"`
	// Information about one or more static routes associated with the VPN connection, if any.
	Routes []VpnConnectionRouteType `pulumi:"routes"`
	// The state of the IPSEC tunnel (`UP` \| `DOWN`).
	State *string `pulumi:"state"`
	// If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
	StaticRoutesOnly *bool `pulumi:"staticRoutesOnly"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []VpnConnectionTag `pulumi:"tags"`
	// Information about the current state of one or more of the VPN tunnels.
	VgwTelemetries []VpnConnectionVgwTelemetry `pulumi:"vgwTelemetries"`
	// The ID of the virtual gateway.
	VirtualGatewayId *string `pulumi:"virtualGatewayId"`
	// The ID of the VPN connection.
	VpnConnectionId *string `pulumi:"vpnConnectionId"`
}

type VpnConnectionState struct {
	// Example configuration for the client gateway.
	ClientGatewayConfiguration pulumi.StringPtrInput
	// The ID of the client gateway.
	ClientGatewayId pulumi.StringPtrInput
	// The type of VPN connection (only `ipsec.1` is supported).
	ConnectionType pulumi.StringPtrInput
	RequestId      pulumi.StringPtrInput
	// Information about one or more static routes associated with the VPN connection, if any.
	Routes VpnConnectionRouteTypeArrayInput
	// The state of the IPSEC tunnel (`UP` \| `DOWN`).
	State pulumi.StringPtrInput
	// If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
	StaticRoutesOnly pulumi.BoolPtrInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags VpnConnectionTagArrayInput
	// Information about the current state of one or more of the VPN tunnels.
	VgwTelemetries VpnConnectionVgwTelemetryArrayInput
	// The ID of the virtual gateway.
	VirtualGatewayId pulumi.StringPtrInput
	// The ID of the VPN connection.
	VpnConnectionId pulumi.StringPtrInput
}

func (VpnConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionState)(nil)).Elem()
}

type vpnConnectionArgs struct {
	// The ID of the client gateway.
	ClientGatewayId string `pulumi:"clientGatewayId"`
	// The type of VPN connection (only `ipsec.1` is supported).
	ConnectionType string `pulumi:"connectionType"`
	// If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
	StaticRoutesOnly *bool `pulumi:"staticRoutesOnly"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []VpnConnectionTag `pulumi:"tags"`
	// The ID of the virtual gateway.
	VirtualGatewayId string `pulumi:"virtualGatewayId"`
}

// The set of arguments for constructing a VpnConnection resource.
type VpnConnectionArgs struct {
	// The ID of the client gateway.
	ClientGatewayId pulumi.StringInput
	// The type of VPN connection (only `ipsec.1` is supported).
	ConnectionType pulumi.StringInput
	// If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
	StaticRoutesOnly pulumi.BoolPtrInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags VpnConnectionTagArrayInput
	// The ID of the virtual gateway.
	VirtualGatewayId pulumi.StringInput
}

func (VpnConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnConnectionArgs)(nil)).Elem()
}

type VpnConnectionInput interface {
	pulumi.Input

	ToVpnConnectionOutput() VpnConnectionOutput
	ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput
}

func (*VpnConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnection)(nil)).Elem()
}

func (i *VpnConnection) ToVpnConnectionOutput() VpnConnectionOutput {
	return i.ToVpnConnectionOutputWithContext(context.Background())
}

func (i *VpnConnection) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionOutput)
}

func (i *VpnConnection) ToOutput(ctx context.Context) pulumix.Output[*VpnConnection] {
	return pulumix.Output[*VpnConnection]{
		OutputState: i.ToVpnConnectionOutputWithContext(ctx).OutputState,
	}
}

// VpnConnectionArrayInput is an input type that accepts VpnConnectionArray and VpnConnectionArrayOutput values.
// You can construct a concrete instance of `VpnConnectionArrayInput` via:
//
//	VpnConnectionArray{ VpnConnectionArgs{...} }
type VpnConnectionArrayInput interface {
	pulumi.Input

	ToVpnConnectionArrayOutput() VpnConnectionArrayOutput
	ToVpnConnectionArrayOutputWithContext(context.Context) VpnConnectionArrayOutput
}

type VpnConnectionArray []VpnConnectionInput

func (VpnConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnConnection)(nil)).Elem()
}

func (i VpnConnectionArray) ToVpnConnectionArrayOutput() VpnConnectionArrayOutput {
	return i.ToVpnConnectionArrayOutputWithContext(context.Background())
}

func (i VpnConnectionArray) ToVpnConnectionArrayOutputWithContext(ctx context.Context) VpnConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionArrayOutput)
}

func (i VpnConnectionArray) ToOutput(ctx context.Context) pulumix.Output[[]*VpnConnection] {
	return pulumix.Output[[]*VpnConnection]{
		OutputState: i.ToVpnConnectionArrayOutputWithContext(ctx).OutputState,
	}
}

// VpnConnectionMapInput is an input type that accepts VpnConnectionMap and VpnConnectionMapOutput values.
// You can construct a concrete instance of `VpnConnectionMapInput` via:
//
//	VpnConnectionMap{ "key": VpnConnectionArgs{...} }
type VpnConnectionMapInput interface {
	pulumi.Input

	ToVpnConnectionMapOutput() VpnConnectionMapOutput
	ToVpnConnectionMapOutputWithContext(context.Context) VpnConnectionMapOutput
}

type VpnConnectionMap map[string]VpnConnectionInput

func (VpnConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnConnection)(nil)).Elem()
}

func (i VpnConnectionMap) ToVpnConnectionMapOutput() VpnConnectionMapOutput {
	return i.ToVpnConnectionMapOutputWithContext(context.Background())
}

func (i VpnConnectionMap) ToVpnConnectionMapOutputWithContext(ctx context.Context) VpnConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnConnectionMapOutput)
}

func (i VpnConnectionMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpnConnection] {
	return pulumix.Output[map[string]*VpnConnection]{
		OutputState: i.ToVpnConnectionMapOutputWithContext(ctx).OutputState,
	}
}

type VpnConnectionOutput struct{ *pulumi.OutputState }

func (VpnConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnConnection)(nil)).Elem()
}

func (o VpnConnectionOutput) ToVpnConnectionOutput() VpnConnectionOutput {
	return o
}

func (o VpnConnectionOutput) ToVpnConnectionOutputWithContext(ctx context.Context) VpnConnectionOutput {
	return o
}

func (o VpnConnectionOutput) ToOutput(ctx context.Context) pulumix.Output[*VpnConnection] {
	return pulumix.Output[*VpnConnection]{
		OutputState: o.OutputState,
	}
}

// Example configuration for the client gateway.
func (o VpnConnectionOutput) ClientGatewayConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.ClientGatewayConfiguration }).(pulumi.StringOutput)
}

// The ID of the client gateway.
func (o VpnConnectionOutput) ClientGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.ClientGatewayId }).(pulumi.StringOutput)
}

// The type of VPN connection (only `ipsec.1` is supported).
func (o VpnConnectionOutput) ConnectionType() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.ConnectionType }).(pulumi.StringOutput)
}

func (o VpnConnectionOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// Information about one or more static routes associated with the VPN connection, if any.
func (o VpnConnectionOutput) Routes() VpnConnectionRouteTypeArrayOutput {
	return o.ApplyT(func(v *VpnConnection) VpnConnectionRouteTypeArrayOutput { return v.Routes }).(VpnConnectionRouteTypeArrayOutput)
}

// The state of the IPSEC tunnel (`UP` \| `DOWN`).
func (o VpnConnectionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](https://docs.outscale.com/api#createvpnconnectionroute) and [DeleteVpnConnectionRoute](https://docs.outscale.com/api#deletevpnconnectionroute).
func (o VpnConnectionOutput) StaticRoutesOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.BoolPtrOutput { return v.StaticRoutesOnly }).(pulumi.BoolPtrOutput)
}

// A tag to add to this resource. You can specify this argument several times.
func (o VpnConnectionOutput) Tags() VpnConnectionTagArrayOutput {
	return o.ApplyT(func(v *VpnConnection) VpnConnectionTagArrayOutput { return v.Tags }).(VpnConnectionTagArrayOutput)
}

// Information about the current state of one or more of the VPN tunnels.
func (o VpnConnectionOutput) VgwTelemetries() VpnConnectionVgwTelemetryArrayOutput {
	return o.ApplyT(func(v *VpnConnection) VpnConnectionVgwTelemetryArrayOutput { return v.VgwTelemetries }).(VpnConnectionVgwTelemetryArrayOutput)
}

// The ID of the virtual gateway.
func (o VpnConnectionOutput) VirtualGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.VirtualGatewayId }).(pulumi.StringOutput)
}

// The ID of the VPN connection.
func (o VpnConnectionOutput) VpnConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnConnection) pulumi.StringOutput { return v.VpnConnectionId }).(pulumi.StringOutput)
}

type VpnConnectionArrayOutput struct{ *pulumi.OutputState }

func (VpnConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnConnection)(nil)).Elem()
}

func (o VpnConnectionArrayOutput) ToVpnConnectionArrayOutput() VpnConnectionArrayOutput {
	return o
}

func (o VpnConnectionArrayOutput) ToVpnConnectionArrayOutputWithContext(ctx context.Context) VpnConnectionArrayOutput {
	return o
}

func (o VpnConnectionArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VpnConnection] {
	return pulumix.Output[[]*VpnConnection]{
		OutputState: o.OutputState,
	}
}

func (o VpnConnectionArrayOutput) Index(i pulumi.IntInput) VpnConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnConnection {
		return vs[0].([]*VpnConnection)[vs[1].(int)]
	}).(VpnConnectionOutput)
}

type VpnConnectionMapOutput struct{ *pulumi.OutputState }

func (VpnConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnConnection)(nil)).Elem()
}

func (o VpnConnectionMapOutput) ToVpnConnectionMapOutput() VpnConnectionMapOutput {
	return o
}

func (o VpnConnectionMapOutput) ToVpnConnectionMapOutputWithContext(ctx context.Context) VpnConnectionMapOutput {
	return o
}

func (o VpnConnectionMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VpnConnection] {
	return pulumix.Output[map[string]*VpnConnection]{
		OutputState: o.OutputState,
	}
}

func (o VpnConnectionMapOutput) MapIndex(k pulumi.StringInput) VpnConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnConnection {
		return vs[0].(map[string]*VpnConnection)[vs[1].(string)]
	}).(VpnConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionInput)(nil)).Elem(), &VpnConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionArrayInput)(nil)).Elem(), VpnConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnConnectionMapInput)(nil)).Elem(), VpnConnectionMap{})
	pulumi.RegisterOutputType(VpnConnectionOutput{})
	pulumi.RegisterOutputType(VpnConnectionArrayOutput{})
	pulumi.RegisterOutputType(VpnConnectionMapOutput{})
}
