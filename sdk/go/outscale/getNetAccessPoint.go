// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a Net access point.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPC-Endpoints.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-netaccesspoint).
//
// ## Example Usage
func LookupNetAccessPoint(ctx *pulumi.Context, args *LookupNetAccessPointArgs, opts ...pulumi.InvokeOption) (*LookupNetAccessPointResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNetAccessPointResult
	err := ctx.Invoke("outscale:index/getNetAccessPoint:getNetAccessPoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetAccessPoint.
type LookupNetAccessPointArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters []GetNetAccessPointFilter `pulumi:"filters"`
}

// A collection of values returned by getNetAccessPoint.
type LookupNetAccessPointResult struct {
	Filters []GetNetAccessPointFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the Net access point.
	NetAccessPointId string `pulumi:"netAccessPointId"`
	// The ID of the Net with which the Net access point is associated.
	NetId     string `pulumi:"netId"`
	RequestId string `pulumi:"requestId"`
	// The ID of the route tables associated with the Net access point.
	RouteTableIds []string `pulumi:"routeTableIds"`
	// The name of the service with which the Net access point is associated.
	ServiceName string `pulumi:"serviceName"`
	// The state of the Net access point (`pending` \| `available` \| `deleting` \| `deleted`).
	State string `pulumi:"state"`
	// One or more tags associated with the Net access point.
	Tags []GetNetAccessPointTag `pulumi:"tags"`
}

func LookupNetAccessPointOutput(ctx *pulumi.Context, args LookupNetAccessPointOutputArgs, opts ...pulumi.InvokeOption) LookupNetAccessPointResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetAccessPointResult, error) {
			args := v.(LookupNetAccessPointArgs)
			r, err := LookupNetAccessPoint(ctx, &args, opts...)
			var s LookupNetAccessPointResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetAccessPointResultOutput)
}

// A collection of arguments for invoking getNetAccessPoint.
type LookupNetAccessPointOutputArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters GetNetAccessPointFilterArrayInput `pulumi:"filters"`
}

func (LookupNetAccessPointOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetAccessPointArgs)(nil)).Elem()
}

// A collection of values returned by getNetAccessPoint.
type LookupNetAccessPointResultOutput struct{ *pulumi.OutputState }

func (LookupNetAccessPointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetAccessPointResult)(nil)).Elem()
}

func (o LookupNetAccessPointResultOutput) ToLookupNetAccessPointResultOutput() LookupNetAccessPointResultOutput {
	return o
}

func (o LookupNetAccessPointResultOutput) ToLookupNetAccessPointResultOutputWithContext(ctx context.Context) LookupNetAccessPointResultOutput {
	return o
}

func (o LookupNetAccessPointResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupNetAccessPointResult] {
	return pulumix.Output[LookupNetAccessPointResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupNetAccessPointResultOutput) Filters() GetNetAccessPointFilterArrayOutput {
	return o.ApplyT(func(v LookupNetAccessPointResult) []GetNetAccessPointFilter { return v.Filters }).(GetNetAccessPointFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNetAccessPointResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetAccessPointResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the Net access point.
func (o LookupNetAccessPointResultOutput) NetAccessPointId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetAccessPointResult) string { return v.NetAccessPointId }).(pulumi.StringOutput)
}

// The ID of the Net with which the Net access point is associated.
func (o LookupNetAccessPointResultOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetAccessPointResult) string { return v.NetId }).(pulumi.StringOutput)
}

func (o LookupNetAccessPointResultOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetAccessPointResult) string { return v.RequestId }).(pulumi.StringOutput)
}

// The ID of the route tables associated with the Net access point.
func (o LookupNetAccessPointResultOutput) RouteTableIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNetAccessPointResult) []string { return v.RouteTableIds }).(pulumi.StringArrayOutput)
}

// The name of the service with which the Net access point is associated.
func (o LookupNetAccessPointResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetAccessPointResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

// The state of the Net access point (`pending` \| `available` \| `deleting` \| `deleted`).
func (o LookupNetAccessPointResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetAccessPointResult) string { return v.State }).(pulumi.StringOutput)
}

// One or more tags associated with the Net access point.
func (o LookupNetAccessPointResultOutput) Tags() GetNetAccessPointTagArrayOutput {
	return o.ApplyT(func(v LookupNetAccessPointResult) []GetNetAccessPointTag { return v.Tags }).(GetNetAccessPointTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetAccessPointResultOutput{})
}
