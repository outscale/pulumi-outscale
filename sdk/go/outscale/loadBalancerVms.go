// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages load balancer VMs.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-loadbalancer).
//
// ## Example Usage
// ### Required resources
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewVm(ctx, "outscaleVm01", &outscale.VmArgs{
//				ImageId:     pulumi.String("ami-12345678"),
//				VmType:      pulumi.String("t2.small"),
//				KeypairName: pulumi.Any(_var.Keypair_name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewVm(ctx, "outscaleVm02", &outscale.VmArgs{
//				ImageId:     pulumi.Any(_var.Image_id),
//				VmType:      pulumi.Any(_var.Vm_type),
//				KeypairName: pulumi.Any(_var.Keypair_name),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewLoadBalancer(ctx, "loadBalancer01", &outscale.LoadBalancerArgs{
//				LoadBalancerName: pulumi.String("load-balancer-for-backend-vms"),
//				SubregionNames: pulumi.StringArray{
//					pulumi.String(fmt.Sprintf("%va", _var.Region)),
//				},
//				Listeners: outscale.LoadBalancerListenerArray{
//					&outscale.LoadBalancerListenerArgs{
//						BackendPort:          pulumi.Int(80),
//						BackendProtocol:      pulumi.String("TCP"),
//						LoadBalancerProtocol: pulumi.String("TCP"),
//						LoadBalancerPort:     pulumi.Int(80),
//					},
//				},
//				Tags: outscale.LoadBalancerTagArray{
//					&outscale.LoadBalancerTagArgs{
//						Key:   pulumi.String("name"),
//						Value: pulumi.String("outscale_load_balancer01"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Register VMs with a load balancer
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewLoadBalancerVms(ctx, "outscaleLoadBalancerVms01", &outscale.LoadBalancerVmsArgs{
//				LoadBalancerName: pulumi.String("load-balancer-for-backend-vms"),
//				BackendVmIds: pulumi.StringArray{
//					outscale_vm.Outscale_vm01.Vm_id,
//					outscale_vm.Outscale_vm_02.Vm_id,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LoadBalancerVms struct {
	pulumi.CustomResourceState

	// One or more IDs of back-end VMs.<br />
	// Specifying the same ID several times has no effect as each back-end VM has equal weight.
	BackendVmIds pulumi.StringArrayOutput `pulumi:"backendVmIds"`
	// The name of the load balancer.
	LoadBalancerName pulumi.StringOutput `pulumi:"loadBalancerName"`
	RequestId        pulumi.StringOutput `pulumi:"requestId"`
}

// NewLoadBalancerVms registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancerVms(ctx *pulumi.Context,
	name string, args *LoadBalancerVmsArgs, opts ...pulumi.ResourceOption) (*LoadBalancerVms, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackendVmIds == nil {
		return nil, errors.New("invalid value for required argument 'BackendVmIds'")
	}
	if args.LoadBalancerName == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancerVms
	err := ctx.RegisterResource("outscale:index/loadBalancerVms:LoadBalancerVms", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancerVms gets an existing LoadBalancerVms resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancerVms(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerVmsState, opts ...pulumi.ResourceOption) (*LoadBalancerVms, error) {
	var resource LoadBalancerVms
	err := ctx.ReadResource("outscale:index/loadBalancerVms:LoadBalancerVms", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancerVms resources.
type loadBalancerVmsState struct {
	// One or more IDs of back-end VMs.<br />
	// Specifying the same ID several times has no effect as each back-end VM has equal weight.
	BackendVmIds []string `pulumi:"backendVmIds"`
	// The name of the load balancer.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	RequestId        *string `pulumi:"requestId"`
}

type LoadBalancerVmsState struct {
	// One or more IDs of back-end VMs.<br />
	// Specifying the same ID several times has no effect as each back-end VM has equal weight.
	BackendVmIds pulumi.StringArrayInput
	// The name of the load balancer.
	LoadBalancerName pulumi.StringPtrInput
	RequestId        pulumi.StringPtrInput
}

func (LoadBalancerVmsState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerVmsState)(nil)).Elem()
}

type loadBalancerVmsArgs struct {
	// One or more IDs of back-end VMs.<br />
	// Specifying the same ID several times has no effect as each back-end VM has equal weight.
	BackendVmIds []string `pulumi:"backendVmIds"`
	// The name of the load balancer.
	LoadBalancerName string `pulumi:"loadBalancerName"`
}

// The set of arguments for constructing a LoadBalancerVms resource.
type LoadBalancerVmsArgs struct {
	// One or more IDs of back-end VMs.<br />
	// Specifying the same ID several times has no effect as each back-end VM has equal weight.
	BackendVmIds pulumi.StringArrayInput
	// The name of the load balancer.
	LoadBalancerName pulumi.StringInput
}

func (LoadBalancerVmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerVmsArgs)(nil)).Elem()
}

type LoadBalancerVmsInput interface {
	pulumi.Input

	ToLoadBalancerVmsOutput() LoadBalancerVmsOutput
	ToLoadBalancerVmsOutputWithContext(ctx context.Context) LoadBalancerVmsOutput
}

func (*LoadBalancerVms) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerVms)(nil)).Elem()
}

func (i *LoadBalancerVms) ToLoadBalancerVmsOutput() LoadBalancerVmsOutput {
	return i.ToLoadBalancerVmsOutputWithContext(context.Background())
}

func (i *LoadBalancerVms) ToLoadBalancerVmsOutputWithContext(ctx context.Context) LoadBalancerVmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerVmsOutput)
}

// LoadBalancerVmsArrayInput is an input type that accepts LoadBalancerVmsArray and LoadBalancerVmsArrayOutput values.
// You can construct a concrete instance of `LoadBalancerVmsArrayInput` via:
//
//	LoadBalancerVmsArray{ LoadBalancerVmsArgs{...} }
type LoadBalancerVmsArrayInput interface {
	pulumi.Input

	ToLoadBalancerVmsArrayOutput() LoadBalancerVmsArrayOutput
	ToLoadBalancerVmsArrayOutputWithContext(context.Context) LoadBalancerVmsArrayOutput
}

type LoadBalancerVmsArray []LoadBalancerVmsInput

func (LoadBalancerVmsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancerVms)(nil)).Elem()
}

func (i LoadBalancerVmsArray) ToLoadBalancerVmsArrayOutput() LoadBalancerVmsArrayOutput {
	return i.ToLoadBalancerVmsArrayOutputWithContext(context.Background())
}

func (i LoadBalancerVmsArray) ToLoadBalancerVmsArrayOutputWithContext(ctx context.Context) LoadBalancerVmsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerVmsArrayOutput)
}

// LoadBalancerVmsMapInput is an input type that accepts LoadBalancerVmsMap and LoadBalancerVmsMapOutput values.
// You can construct a concrete instance of `LoadBalancerVmsMapInput` via:
//
//	LoadBalancerVmsMap{ "key": LoadBalancerVmsArgs{...} }
type LoadBalancerVmsMapInput interface {
	pulumi.Input

	ToLoadBalancerVmsMapOutput() LoadBalancerVmsMapOutput
	ToLoadBalancerVmsMapOutputWithContext(context.Context) LoadBalancerVmsMapOutput
}

type LoadBalancerVmsMap map[string]LoadBalancerVmsInput

func (LoadBalancerVmsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancerVms)(nil)).Elem()
}

func (i LoadBalancerVmsMap) ToLoadBalancerVmsMapOutput() LoadBalancerVmsMapOutput {
	return i.ToLoadBalancerVmsMapOutputWithContext(context.Background())
}

func (i LoadBalancerVmsMap) ToLoadBalancerVmsMapOutputWithContext(ctx context.Context) LoadBalancerVmsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerVmsMapOutput)
}

type LoadBalancerVmsOutput struct{ *pulumi.OutputState }

func (LoadBalancerVmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerVms)(nil)).Elem()
}

func (o LoadBalancerVmsOutput) ToLoadBalancerVmsOutput() LoadBalancerVmsOutput {
	return o
}

func (o LoadBalancerVmsOutput) ToLoadBalancerVmsOutputWithContext(ctx context.Context) LoadBalancerVmsOutput {
	return o
}

// One or more IDs of back-end VMs.<br />
// Specifying the same ID several times has no effect as each back-end VM has equal weight.
func (o LoadBalancerVmsOutput) BackendVmIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerVms) pulumi.StringArrayOutput { return v.BackendVmIds }).(pulumi.StringArrayOutput)
}

// The name of the load balancer.
func (o LoadBalancerVmsOutput) LoadBalancerName() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerVms) pulumi.StringOutput { return v.LoadBalancerName }).(pulumi.StringOutput)
}

func (o LoadBalancerVmsOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerVms) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

type LoadBalancerVmsArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerVmsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancerVms)(nil)).Elem()
}

func (o LoadBalancerVmsArrayOutput) ToLoadBalancerVmsArrayOutput() LoadBalancerVmsArrayOutput {
	return o
}

func (o LoadBalancerVmsArrayOutput) ToLoadBalancerVmsArrayOutputWithContext(ctx context.Context) LoadBalancerVmsArrayOutput {
	return o
}

func (o LoadBalancerVmsArrayOutput) Index(i pulumi.IntInput) LoadBalancerVmsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadBalancerVms {
		return vs[0].([]*LoadBalancerVms)[vs[1].(int)]
	}).(LoadBalancerVmsOutput)
}

type LoadBalancerVmsMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerVmsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancerVms)(nil)).Elem()
}

func (o LoadBalancerVmsMapOutput) ToLoadBalancerVmsMapOutput() LoadBalancerVmsMapOutput {
	return o
}

func (o LoadBalancerVmsMapOutput) ToLoadBalancerVmsMapOutputWithContext(ctx context.Context) LoadBalancerVmsMapOutput {
	return o
}

func (o LoadBalancerVmsMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerVmsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadBalancerVms {
		return vs[0].(map[string]*LoadBalancerVms)[vs[1].(string)]
	}).(LoadBalancerVmsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerVmsInput)(nil)).Elem(), &LoadBalancerVms{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerVmsArrayInput)(nil)).Elem(), LoadBalancerVmsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerVmsMapInput)(nil)).Elem(), LoadBalancerVmsMap{})
	pulumi.RegisterOutputType(LoadBalancerVmsOutput{})
	pulumi.RegisterOutputType(LoadBalancerVmsArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerVmsMapOutput{})
}
