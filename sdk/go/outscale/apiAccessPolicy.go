// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages the API access policy.
//
// To activate a trusted session, first you must:
// * Set expiration dates to all your access keys.
// * Specify a Certificate Authority (CA) in all your API access rules.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Your-API-Access-Policy.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-apiaccesspolicy).
//
// ## Example Usage
// ### Require expiration dates for your access keys
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewApiAccessPolicy(ctx, "unique", &outscale.ApiAccessPolicyArgs{
//				MaxAccessKeyExpirationSeconds: pulumi.Int(31536000),
//				RequireTrustedEnv:             pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Activate a trusted session
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewApiAccessPolicy(ctx, "unique", &outscale.ApiAccessPolicyArgs{
//				MaxAccessKeyExpirationSeconds: pulumi.Int(3153600000),
//				RequireTrustedEnv:             pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Deactivate a trusted session
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewApiAccessPolicy(ctx, "unique", &outscale.ApiAccessPolicyArgs{
//				MaxAccessKeyExpirationSeconds: pulumi.Int(0),
//				RequireTrustedEnv:             pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ApiAccessPolicy struct {
	pulumi.CustomResourceState

	// The maximum possible lifetime for your access keys, in seconds (between `0` and `3153600000`, both included). If set to `O`, your access keys can have unlimited lifetimes, but a trusted session cannot be activated. Otherwise, all your access keys must have an expiration date. This value must be greater than the remaining lifetime of each access key of your account.
	MaxAccessKeyExpirationSeconds pulumi.IntOutput    `pulumi:"maxAccessKeyExpirationSeconds"`
	RequestId                     pulumi.StringOutput `pulumi:"requestId"`
	// If true, a trusted session is activated, provided that you specify the `maxAccessKeyExpirationSeconds` parameter with a value greater than `0`.
	RequireTrustedEnv pulumi.BoolOutput `pulumi:"requireTrustedEnv"`
}

// NewApiAccessPolicy registers a new resource with the given unique name, arguments, and options.
func NewApiAccessPolicy(ctx *pulumi.Context,
	name string, args *ApiAccessPolicyArgs, opts ...pulumi.ResourceOption) (*ApiAccessPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaxAccessKeyExpirationSeconds == nil {
		return nil, errors.New("invalid value for required argument 'MaxAccessKeyExpirationSeconds'")
	}
	if args.RequireTrustedEnv == nil {
		return nil, errors.New("invalid value for required argument 'RequireTrustedEnv'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiAccessPolicy
	err := ctx.RegisterResource("outscale:index/apiAccessPolicy:ApiAccessPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiAccessPolicy gets an existing ApiAccessPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiAccessPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiAccessPolicyState, opts ...pulumi.ResourceOption) (*ApiAccessPolicy, error) {
	var resource ApiAccessPolicy
	err := ctx.ReadResource("outscale:index/apiAccessPolicy:ApiAccessPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiAccessPolicy resources.
type apiAccessPolicyState struct {
	// The maximum possible lifetime for your access keys, in seconds (between `0` and `3153600000`, both included). If set to `O`, your access keys can have unlimited lifetimes, but a trusted session cannot be activated. Otherwise, all your access keys must have an expiration date. This value must be greater than the remaining lifetime of each access key of your account.
	MaxAccessKeyExpirationSeconds *int    `pulumi:"maxAccessKeyExpirationSeconds"`
	RequestId                     *string `pulumi:"requestId"`
	// If true, a trusted session is activated, provided that you specify the `maxAccessKeyExpirationSeconds` parameter with a value greater than `0`.
	RequireTrustedEnv *bool `pulumi:"requireTrustedEnv"`
}

type ApiAccessPolicyState struct {
	// The maximum possible lifetime for your access keys, in seconds (between `0` and `3153600000`, both included). If set to `O`, your access keys can have unlimited lifetimes, but a trusted session cannot be activated. Otherwise, all your access keys must have an expiration date. This value must be greater than the remaining lifetime of each access key of your account.
	MaxAccessKeyExpirationSeconds pulumi.IntPtrInput
	RequestId                     pulumi.StringPtrInput
	// If true, a trusted session is activated, provided that you specify the `maxAccessKeyExpirationSeconds` parameter with a value greater than `0`.
	RequireTrustedEnv pulumi.BoolPtrInput
}

func (ApiAccessPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiAccessPolicyState)(nil)).Elem()
}

type apiAccessPolicyArgs struct {
	// The maximum possible lifetime for your access keys, in seconds (between `0` and `3153600000`, both included). If set to `O`, your access keys can have unlimited lifetimes, but a trusted session cannot be activated. Otherwise, all your access keys must have an expiration date. This value must be greater than the remaining lifetime of each access key of your account.
	MaxAccessKeyExpirationSeconds int `pulumi:"maxAccessKeyExpirationSeconds"`
	// If true, a trusted session is activated, provided that you specify the `maxAccessKeyExpirationSeconds` parameter with a value greater than `0`.
	RequireTrustedEnv bool `pulumi:"requireTrustedEnv"`
}

// The set of arguments for constructing a ApiAccessPolicy resource.
type ApiAccessPolicyArgs struct {
	// The maximum possible lifetime for your access keys, in seconds (between `0` and `3153600000`, both included). If set to `O`, your access keys can have unlimited lifetimes, but a trusted session cannot be activated. Otherwise, all your access keys must have an expiration date. This value must be greater than the remaining lifetime of each access key of your account.
	MaxAccessKeyExpirationSeconds pulumi.IntInput
	// If true, a trusted session is activated, provided that you specify the `maxAccessKeyExpirationSeconds` parameter with a value greater than `0`.
	RequireTrustedEnv pulumi.BoolInput
}

func (ApiAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiAccessPolicyArgs)(nil)).Elem()
}

type ApiAccessPolicyInput interface {
	pulumi.Input

	ToApiAccessPolicyOutput() ApiAccessPolicyOutput
	ToApiAccessPolicyOutputWithContext(ctx context.Context) ApiAccessPolicyOutput
}

func (*ApiAccessPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiAccessPolicy)(nil)).Elem()
}

func (i *ApiAccessPolicy) ToApiAccessPolicyOutput() ApiAccessPolicyOutput {
	return i.ToApiAccessPolicyOutputWithContext(context.Background())
}

func (i *ApiAccessPolicy) ToApiAccessPolicyOutputWithContext(ctx context.Context) ApiAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiAccessPolicyOutput)
}

// ApiAccessPolicyArrayInput is an input type that accepts ApiAccessPolicyArray and ApiAccessPolicyArrayOutput values.
// You can construct a concrete instance of `ApiAccessPolicyArrayInput` via:
//
//	ApiAccessPolicyArray{ ApiAccessPolicyArgs{...} }
type ApiAccessPolicyArrayInput interface {
	pulumi.Input

	ToApiAccessPolicyArrayOutput() ApiAccessPolicyArrayOutput
	ToApiAccessPolicyArrayOutputWithContext(context.Context) ApiAccessPolicyArrayOutput
}

type ApiAccessPolicyArray []ApiAccessPolicyInput

func (ApiAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiAccessPolicy)(nil)).Elem()
}

func (i ApiAccessPolicyArray) ToApiAccessPolicyArrayOutput() ApiAccessPolicyArrayOutput {
	return i.ToApiAccessPolicyArrayOutputWithContext(context.Background())
}

func (i ApiAccessPolicyArray) ToApiAccessPolicyArrayOutputWithContext(ctx context.Context) ApiAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiAccessPolicyArrayOutput)
}

// ApiAccessPolicyMapInput is an input type that accepts ApiAccessPolicyMap and ApiAccessPolicyMapOutput values.
// You can construct a concrete instance of `ApiAccessPolicyMapInput` via:
//
//	ApiAccessPolicyMap{ "key": ApiAccessPolicyArgs{...} }
type ApiAccessPolicyMapInput interface {
	pulumi.Input

	ToApiAccessPolicyMapOutput() ApiAccessPolicyMapOutput
	ToApiAccessPolicyMapOutputWithContext(context.Context) ApiAccessPolicyMapOutput
}

type ApiAccessPolicyMap map[string]ApiAccessPolicyInput

func (ApiAccessPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiAccessPolicy)(nil)).Elem()
}

func (i ApiAccessPolicyMap) ToApiAccessPolicyMapOutput() ApiAccessPolicyMapOutput {
	return i.ToApiAccessPolicyMapOutputWithContext(context.Background())
}

func (i ApiAccessPolicyMap) ToApiAccessPolicyMapOutputWithContext(ctx context.Context) ApiAccessPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiAccessPolicyMapOutput)
}

type ApiAccessPolicyOutput struct{ *pulumi.OutputState }

func (ApiAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiAccessPolicy)(nil)).Elem()
}

func (o ApiAccessPolicyOutput) ToApiAccessPolicyOutput() ApiAccessPolicyOutput {
	return o
}

func (o ApiAccessPolicyOutput) ToApiAccessPolicyOutputWithContext(ctx context.Context) ApiAccessPolicyOutput {
	return o
}

// The maximum possible lifetime for your access keys, in seconds (between `0` and `3153600000`, both included). If set to `O`, your access keys can have unlimited lifetimes, but a trusted session cannot be activated. Otherwise, all your access keys must have an expiration date. This value must be greater than the remaining lifetime of each access key of your account.
func (o ApiAccessPolicyOutput) MaxAccessKeyExpirationSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *ApiAccessPolicy) pulumi.IntOutput { return v.MaxAccessKeyExpirationSeconds }).(pulumi.IntOutput)
}

func (o ApiAccessPolicyOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiAccessPolicy) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// If true, a trusted session is activated, provided that you specify the `maxAccessKeyExpirationSeconds` parameter with a value greater than `0`.
func (o ApiAccessPolicyOutput) RequireTrustedEnv() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApiAccessPolicy) pulumi.BoolOutput { return v.RequireTrustedEnv }).(pulumi.BoolOutput)
}

type ApiAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (ApiAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiAccessPolicy)(nil)).Elem()
}

func (o ApiAccessPolicyArrayOutput) ToApiAccessPolicyArrayOutput() ApiAccessPolicyArrayOutput {
	return o
}

func (o ApiAccessPolicyArrayOutput) ToApiAccessPolicyArrayOutputWithContext(ctx context.Context) ApiAccessPolicyArrayOutput {
	return o
}

func (o ApiAccessPolicyArrayOutput) Index(i pulumi.IntInput) ApiAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiAccessPolicy {
		return vs[0].([]*ApiAccessPolicy)[vs[1].(int)]
	}).(ApiAccessPolicyOutput)
}

type ApiAccessPolicyMapOutput struct{ *pulumi.OutputState }

func (ApiAccessPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiAccessPolicy)(nil)).Elem()
}

func (o ApiAccessPolicyMapOutput) ToApiAccessPolicyMapOutput() ApiAccessPolicyMapOutput {
	return o
}

func (o ApiAccessPolicyMapOutput) ToApiAccessPolicyMapOutputWithContext(ctx context.Context) ApiAccessPolicyMapOutput {
	return o
}

func (o ApiAccessPolicyMapOutput) MapIndex(k pulumi.StringInput) ApiAccessPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiAccessPolicy {
		return vs[0].(map[string]*ApiAccessPolicy)[vs[1].(string)]
	}).(ApiAccessPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiAccessPolicyInput)(nil)).Elem(), &ApiAccessPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiAccessPolicyArrayInput)(nil)).Elem(), ApiAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiAccessPolicyMapInput)(nil)).Elem(), ApiAccessPolicyMap{})
	pulumi.RegisterOutputType(ApiAccessPolicyOutput{})
	pulumi.RegisterOutputType(ApiAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(ApiAccessPolicyMapOutput{})
}
