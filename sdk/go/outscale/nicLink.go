// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a NIC link.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-FNIs.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-nic).
//
// ## Example Usage
// ### Required resources
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net01, err := outscale.NewNet(ctx, "net01", &outscale.NetArgs{
//				IpRange: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet01, err := outscale.NewSubnet(ctx, "subnet01", &outscale.SubnetArgs{
//				SubregionName: pulumi.String(fmt.Sprintf("%va", _var.Region)),
//				IpRange:       pulumi.String("10.0.0.0/16"),
//				NetId:         net01.NetId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewVm(ctx, "vm01", &outscale.VmArgs{
//				ImageId:     pulumi.Any(_var.Image_id),
//				VmType:      pulumi.Any(_var.Vm_type),
//				KeypairName: pulumi.Any(_var.Keypair_name),
//				SubnetId:    subnet01.SubnetId,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewNic(ctx, "nic01", &outscale.NicArgs{
//				SubnetId: subnet01.SubnetId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Link a NIC to a VM
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewNicLink(ctx, "nicLink01", &outscale.NicLinkArgs{
//				DeviceNumber: pulumi.Int(1),
//				VmId:         pulumi.Any(outscale_vm.Vm01.Vm_id),
//				NicId:        pulumi.Any(outscale_nic.Nic01.Nic_id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A NIC link can be imported using the NIC ID. For exampleconsole
//
// ```sh
//
//	$ pulumi import outscale:index/nicLink:NicLink ImportedNicLink eni-12345678
//
// ```
type NicLink struct {
	pulumi.CustomResourceState

	DeleteOnVmDeletion pulumi.BoolOutput `pulumi:"deleteOnVmDeletion"`
	// The index of the VM device for the NIC attachment (between `1` and `7`, both included).
	DeviceNumber pulumi.IntOutput `pulumi:"deviceNumber"`
	// The ID of the NIC attachment.
	LinkNicId pulumi.StringOutput `pulumi:"linkNicId"`
	// The ID of the NIC you want to attach.
	NicId       pulumi.StringOutput `pulumi:"nicId"`
	RequestId   pulumi.StringOutput `pulumi:"requestId"`
	State       pulumi.StringOutput `pulumi:"state"`
	VmAccountId pulumi.StringOutput `pulumi:"vmAccountId"`
	// The ID of the VM to which you want to attach the NIC.
	VmId pulumi.StringOutput `pulumi:"vmId"`
}

// NewNicLink registers a new resource with the given unique name, arguments, and options.
func NewNicLink(ctx *pulumi.Context,
	name string, args *NicLinkArgs, opts ...pulumi.ResourceOption) (*NicLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeviceNumber == nil {
		return nil, errors.New("invalid value for required argument 'DeviceNumber'")
	}
	if args.NicId == nil {
		return nil, errors.New("invalid value for required argument 'NicId'")
	}
	if args.VmId == nil {
		return nil, errors.New("invalid value for required argument 'VmId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NicLink
	err := ctx.RegisterResource("outscale:index/nicLink:NicLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNicLink gets an existing NicLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNicLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NicLinkState, opts ...pulumi.ResourceOption) (*NicLink, error) {
	var resource NicLink
	err := ctx.ReadResource("outscale:index/nicLink:NicLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NicLink resources.
type nicLinkState struct {
	DeleteOnVmDeletion *bool `pulumi:"deleteOnVmDeletion"`
	// The index of the VM device for the NIC attachment (between `1` and `7`, both included).
	DeviceNumber *int `pulumi:"deviceNumber"`
	// The ID of the NIC attachment.
	LinkNicId *string `pulumi:"linkNicId"`
	// The ID of the NIC you want to attach.
	NicId       *string `pulumi:"nicId"`
	RequestId   *string `pulumi:"requestId"`
	State       *string `pulumi:"state"`
	VmAccountId *string `pulumi:"vmAccountId"`
	// The ID of the VM to which you want to attach the NIC.
	VmId *string `pulumi:"vmId"`
}

type NicLinkState struct {
	DeleteOnVmDeletion pulumi.BoolPtrInput
	// The index of the VM device for the NIC attachment (between `1` and `7`, both included).
	DeviceNumber pulumi.IntPtrInput
	// The ID of the NIC attachment.
	LinkNicId pulumi.StringPtrInput
	// The ID of the NIC you want to attach.
	NicId       pulumi.StringPtrInput
	RequestId   pulumi.StringPtrInput
	State       pulumi.StringPtrInput
	VmAccountId pulumi.StringPtrInput
	// The ID of the VM to which you want to attach the NIC.
	VmId pulumi.StringPtrInput
}

func (NicLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*nicLinkState)(nil)).Elem()
}

type nicLinkArgs struct {
	// The index of the VM device for the NIC attachment (between `1` and `7`, both included).
	DeviceNumber int `pulumi:"deviceNumber"`
	// The ID of the NIC you want to attach.
	NicId string `pulumi:"nicId"`
	// The ID of the VM to which you want to attach the NIC.
	VmId string `pulumi:"vmId"`
}

// The set of arguments for constructing a NicLink resource.
type NicLinkArgs struct {
	// The index of the VM device for the NIC attachment (between `1` and `7`, both included).
	DeviceNumber pulumi.IntInput
	// The ID of the NIC you want to attach.
	NicId pulumi.StringInput
	// The ID of the VM to which you want to attach the NIC.
	VmId pulumi.StringInput
}

func (NicLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nicLinkArgs)(nil)).Elem()
}

type NicLinkInput interface {
	pulumi.Input

	ToNicLinkOutput() NicLinkOutput
	ToNicLinkOutputWithContext(ctx context.Context) NicLinkOutput
}

func (*NicLink) ElementType() reflect.Type {
	return reflect.TypeOf((**NicLink)(nil)).Elem()
}

func (i *NicLink) ToNicLinkOutput() NicLinkOutput {
	return i.ToNicLinkOutputWithContext(context.Background())
}

func (i *NicLink) ToNicLinkOutputWithContext(ctx context.Context) NicLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicLinkOutput)
}

// NicLinkArrayInput is an input type that accepts NicLinkArray and NicLinkArrayOutput values.
// You can construct a concrete instance of `NicLinkArrayInput` via:
//
//	NicLinkArray{ NicLinkArgs{...} }
type NicLinkArrayInput interface {
	pulumi.Input

	ToNicLinkArrayOutput() NicLinkArrayOutput
	ToNicLinkArrayOutputWithContext(context.Context) NicLinkArrayOutput
}

type NicLinkArray []NicLinkInput

func (NicLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NicLink)(nil)).Elem()
}

func (i NicLinkArray) ToNicLinkArrayOutput() NicLinkArrayOutput {
	return i.ToNicLinkArrayOutputWithContext(context.Background())
}

func (i NicLinkArray) ToNicLinkArrayOutputWithContext(ctx context.Context) NicLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicLinkArrayOutput)
}

// NicLinkMapInput is an input type that accepts NicLinkMap and NicLinkMapOutput values.
// You can construct a concrete instance of `NicLinkMapInput` via:
//
//	NicLinkMap{ "key": NicLinkArgs{...} }
type NicLinkMapInput interface {
	pulumi.Input

	ToNicLinkMapOutput() NicLinkMapOutput
	ToNicLinkMapOutputWithContext(context.Context) NicLinkMapOutput
}

type NicLinkMap map[string]NicLinkInput

func (NicLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NicLink)(nil)).Elem()
}

func (i NicLinkMap) ToNicLinkMapOutput() NicLinkMapOutput {
	return i.ToNicLinkMapOutputWithContext(context.Background())
}

func (i NicLinkMap) ToNicLinkMapOutputWithContext(ctx context.Context) NicLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NicLinkMapOutput)
}

type NicLinkOutput struct{ *pulumi.OutputState }

func (NicLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NicLink)(nil)).Elem()
}

func (o NicLinkOutput) ToNicLinkOutput() NicLinkOutput {
	return o
}

func (o NicLinkOutput) ToNicLinkOutputWithContext(ctx context.Context) NicLinkOutput {
	return o
}

func (o NicLinkOutput) DeleteOnVmDeletion() pulumi.BoolOutput {
	return o.ApplyT(func(v *NicLink) pulumi.BoolOutput { return v.DeleteOnVmDeletion }).(pulumi.BoolOutput)
}

// The index of the VM device for the NIC attachment (between `1` and `7`, both included).
func (o NicLinkOutput) DeviceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *NicLink) pulumi.IntOutput { return v.DeviceNumber }).(pulumi.IntOutput)
}

// The ID of the NIC attachment.
func (o NicLinkOutput) LinkNicId() pulumi.StringOutput {
	return o.ApplyT(func(v *NicLink) pulumi.StringOutput { return v.LinkNicId }).(pulumi.StringOutput)
}

// The ID of the NIC you want to attach.
func (o NicLinkOutput) NicId() pulumi.StringOutput {
	return o.ApplyT(func(v *NicLink) pulumi.StringOutput { return v.NicId }).(pulumi.StringOutput)
}

func (o NicLinkOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *NicLink) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

func (o NicLinkOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *NicLink) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o NicLinkOutput) VmAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *NicLink) pulumi.StringOutput { return v.VmAccountId }).(pulumi.StringOutput)
}

// The ID of the VM to which you want to attach the NIC.
func (o NicLinkOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v *NicLink) pulumi.StringOutput { return v.VmId }).(pulumi.StringOutput)
}

type NicLinkArrayOutput struct{ *pulumi.OutputState }

func (NicLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NicLink)(nil)).Elem()
}

func (o NicLinkArrayOutput) ToNicLinkArrayOutput() NicLinkArrayOutput {
	return o
}

func (o NicLinkArrayOutput) ToNicLinkArrayOutputWithContext(ctx context.Context) NicLinkArrayOutput {
	return o
}

func (o NicLinkArrayOutput) Index(i pulumi.IntInput) NicLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NicLink {
		return vs[0].([]*NicLink)[vs[1].(int)]
	}).(NicLinkOutput)
}

type NicLinkMapOutput struct{ *pulumi.OutputState }

func (NicLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NicLink)(nil)).Elem()
}

func (o NicLinkMapOutput) ToNicLinkMapOutput() NicLinkMapOutput {
	return o
}

func (o NicLinkMapOutput) ToNicLinkMapOutputWithContext(ctx context.Context) NicLinkMapOutput {
	return o
}

func (o NicLinkMapOutput) MapIndex(k pulumi.StringInput) NicLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NicLink {
		return vs[0].(map[string]*NicLink)[vs[1].(string)]
	}).(NicLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NicLinkInput)(nil)).Elem(), &NicLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*NicLinkArrayInput)(nil)).Elem(), NicLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NicLinkMapInput)(nil)).Elem(), NicLinkMap{})
	pulumi.RegisterOutputType(NicLinkOutput{})
	pulumi.RegisterOutputType(NicLinkArrayOutput{})
	pulumi.RegisterOutputType(NicLinkMapOutput{})
}
