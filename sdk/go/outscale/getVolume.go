// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about a volume.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Volumes.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-volume).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.LookupVolume(ctx, &outscale.LookupVolumeArgs{
//				Filters: []outscale.GetVolumeFilter{
//					{
//						Name: "volume_ids",
//						Values: []string{
//							"vol-12345678",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupVolume(ctx *pulumi.Context, args *LookupVolumeArgs, opts ...pulumi.InvokeOption) (*LookupVolumeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVolumeResult
	err := ctx.Invoke("outscale:index/getVolume:getVolume", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolume.
type LookupVolumeArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters   []GetVolumeFilter `pulumi:"filters"`
	RequestId *string           `pulumi:"requestId"`
	// The ID of the volume.
	VolumeId *string `pulumi:"volumeId"`
}

// A collection of values returned by getVolume.
type LookupVolumeResult struct {
	// The date and time (UTC) at which the volume was created.
	CreationDate string            `pulumi:"creationDate"`
	Filters      []GetVolumeFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The number of I/O operations per second (IOPS):<br />- For `io1` volumes, the number of provisioned IOPS.<br />- For `gp2` volumes, the baseline performance of the volume.
	Iops int `pulumi:"iops"`
	// Information about your volume attachment.
	LinkedVolumes []GetVolumeLinkedVolume `pulumi:"linkedVolumes"`
	RequestId     *string                 `pulumi:"requestId"`
	// The size of the volume, in gibibytes (GiB).
	Size int `pulumi:"size"`
	// The snapshot from which the volume was created.
	SnapshotId string `pulumi:"snapshotId"`
	// The state of the volume (`creating` \| `available` \| `in-use` \| `updating` \| `deleting` \| `error`).
	State string `pulumi:"state"`
	// The Subregion in which the volume was created.
	SubregionName string `pulumi:"subregionName"`
	// One or more tags associated with the volume.
	Tags []GetVolumeTag `pulumi:"tags"`
	// The ID of the volume.
	VolumeId *string `pulumi:"volumeId"`
	// The type of the volume (`standard` \| `gp2` \| `io1`).
	VolumeType string `pulumi:"volumeType"`
}

func LookupVolumeOutput(ctx *pulumi.Context, args LookupVolumeOutputArgs, opts ...pulumi.InvokeOption) LookupVolumeResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVolumeResultOutput, error) {
			args := v.(LookupVolumeArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("outscale:index/getVolume:getVolume", args, LookupVolumeResultOutput{}, options).(LookupVolumeResultOutput), nil
		}).(LookupVolumeResultOutput)
}

// A collection of arguments for invoking getVolume.
type LookupVolumeOutputArgs struct {
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters   GetVolumeFilterArrayInput `pulumi:"filters"`
	RequestId pulumi.StringPtrInput     `pulumi:"requestId"`
	// The ID of the volume.
	VolumeId pulumi.StringPtrInput `pulumi:"volumeId"`
}

func (LookupVolumeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeArgs)(nil)).Elem()
}

// A collection of values returned by getVolume.
type LookupVolumeResultOutput struct{ *pulumi.OutputState }

func (LookupVolumeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeResult)(nil)).Elem()
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutput() LookupVolumeResultOutput {
	return o
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutputWithContext(ctx context.Context) LookupVolumeResultOutput {
	return o
}

// The date and time (UTC) at which the volume was created.
func (o LookupVolumeResultOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.CreationDate }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) Filters() GetVolumeFilterArrayOutput {
	return o.ApplyT(func(v LookupVolumeResult) []GetVolumeFilter { return v.Filters }).(GetVolumeFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVolumeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Id }).(pulumi.StringOutput)
}

// The number of I/O operations per second (IOPS):<br />- For `io1` volumes, the number of provisioned IOPS.<br />- For `gp2` volumes, the baseline performance of the volume.
func (o LookupVolumeResultOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVolumeResult) int { return v.Iops }).(pulumi.IntOutput)
}

// Information about your volume attachment.
func (o LookupVolumeResultOutput) LinkedVolumes() GetVolumeLinkedVolumeArrayOutput {
	return o.ApplyT(func(v LookupVolumeResult) []GetVolumeLinkedVolume { return v.LinkedVolumes }).(GetVolumeLinkedVolumeArrayOutput)
}

func (o LookupVolumeResultOutput) RequestId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.RequestId }).(pulumi.StringPtrOutput)
}

// The size of the volume, in gibibytes (GiB).
func (o LookupVolumeResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVolumeResult) int { return v.Size }).(pulumi.IntOutput)
}

// The snapshot from which the volume was created.
func (o LookupVolumeResultOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// The state of the volume (`creating` \| `available` \| `in-use` \| `updating` \| `deleting` \| `error`).
func (o LookupVolumeResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.State }).(pulumi.StringOutput)
}

// The Subregion in which the volume was created.
func (o LookupVolumeResultOutput) SubregionName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.SubregionName }).(pulumi.StringOutput)
}

// One or more tags associated with the volume.
func (o LookupVolumeResultOutput) Tags() GetVolumeTagArrayOutput {
	return o.ApplyT(func(v LookupVolumeResult) []GetVolumeTag { return v.Tags }).(GetVolumeTagArrayOutput)
}

// The ID of the volume.
func (o LookupVolumeResultOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.VolumeId }).(pulumi.StringPtrOutput)
}

// The type of the volume (`standard` \| `gp2` \| `io1`).
func (o LookupVolumeResultOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.VolumeType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVolumeResultOutput{})
}
