// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Net.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-VPCs.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-net).
//
// ## Example Usage
//
// ## Import
//
// A Net can be imported using its ID. For exampleconsole
//
// ```sh
//
//	$ pulumi import outscale:index/net:Net ImportedNet vpc-87654321
//
// ```
type Net struct {
	pulumi.CustomResourceState

	// The ID of the DHCP options set (or `default` if you want to associate the default one).
	DhcpOptionsSetId pulumi.StringOutput `pulumi:"dhcpOptionsSetId"`
	// The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
	IpRange pulumi.StringOutput `pulumi:"ipRange"`
	// The ID of the Net.
	NetId     pulumi.StringOutput `pulumi:"netId"`
	RequestId pulumi.StringOutput `pulumi:"requestId"`
	// The state of the Net (`pending` \| `available` \| `deleted`).
	State pulumi.StringOutput `pulumi:"state"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags NetTagArrayOutput `pulumi:"tags"`
	// The tenancy options for the VMs (`default` if a VM created in a Net can be launched with any tenancy, `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware).
	Tenancy pulumi.StringOutput `pulumi:"tenancy"`
}

// NewNet registers a new resource with the given unique name, arguments, and options.
func NewNet(ctx *pulumi.Context,
	name string, args *NetArgs, opts ...pulumi.ResourceOption) (*Net, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpRange == nil {
		return nil, errors.New("invalid value for required argument 'IpRange'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Net
	err := ctx.RegisterResource("outscale:index/net:Net", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNet gets an existing Net resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetState, opts ...pulumi.ResourceOption) (*Net, error) {
	var resource Net
	err := ctx.ReadResource("outscale:index/net:Net", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Net resources.
type netState struct {
	// The ID of the DHCP options set (or `default` if you want to associate the default one).
	DhcpOptionsSetId *string `pulumi:"dhcpOptionsSetId"`
	// The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
	IpRange *string `pulumi:"ipRange"`
	// The ID of the Net.
	NetId     *string `pulumi:"netId"`
	RequestId *string `pulumi:"requestId"`
	// The state of the Net (`pending` \| `available` \| `deleted`).
	State *string `pulumi:"state"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []NetTag `pulumi:"tags"`
	// The tenancy options for the VMs (`default` if a VM created in a Net can be launched with any tenancy, `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware).
	Tenancy *string `pulumi:"tenancy"`
}

type NetState struct {
	// The ID of the DHCP options set (or `default` if you want to associate the default one).
	DhcpOptionsSetId pulumi.StringPtrInput
	// The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
	IpRange pulumi.StringPtrInput
	// The ID of the Net.
	NetId     pulumi.StringPtrInput
	RequestId pulumi.StringPtrInput
	// The state of the Net (`pending` \| `available` \| `deleted`).
	State pulumi.StringPtrInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags NetTagArrayInput
	// The tenancy options for the VMs (`default` if a VM created in a Net can be launched with any tenancy, `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware).
	Tenancy pulumi.StringPtrInput
}

func (NetState) ElementType() reflect.Type {
	return reflect.TypeOf((*netState)(nil)).Elem()
}

type netArgs struct {
	// The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
	IpRange string `pulumi:"ipRange"`
	// A tag to add to this resource. You can specify this argument several times.
	Tags []NetTag `pulumi:"tags"`
	// The tenancy options for the VMs (`default` if a VM created in a Net can be launched with any tenancy, `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware).
	Tenancy *string `pulumi:"tenancy"`
}

// The set of arguments for constructing a Net resource.
type NetArgs struct {
	// The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
	IpRange pulumi.StringInput
	// A tag to add to this resource. You can specify this argument several times.
	Tags NetTagArrayInput
	// The tenancy options for the VMs (`default` if a VM created in a Net can be launched with any tenancy, `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware).
	Tenancy pulumi.StringPtrInput
}

func (NetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netArgs)(nil)).Elem()
}

type NetInput interface {
	pulumi.Input

	ToNetOutput() NetOutput
	ToNetOutputWithContext(ctx context.Context) NetOutput
}

func (*Net) ElementType() reflect.Type {
	return reflect.TypeOf((**Net)(nil)).Elem()
}

func (i *Net) ToNetOutput() NetOutput {
	return i.ToNetOutputWithContext(context.Background())
}

func (i *Net) ToNetOutputWithContext(ctx context.Context) NetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetOutput)
}

func (i *Net) ToOutput(ctx context.Context) pulumix.Output[*Net] {
	return pulumix.Output[*Net]{
		OutputState: i.ToNetOutputWithContext(ctx).OutputState,
	}
}

// NetArrayInput is an input type that accepts NetArray and NetArrayOutput values.
// You can construct a concrete instance of `NetArrayInput` via:
//
//	NetArray{ NetArgs{...} }
type NetArrayInput interface {
	pulumi.Input

	ToNetArrayOutput() NetArrayOutput
	ToNetArrayOutputWithContext(context.Context) NetArrayOutput
}

type NetArray []NetInput

func (NetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Net)(nil)).Elem()
}

func (i NetArray) ToNetArrayOutput() NetArrayOutput {
	return i.ToNetArrayOutputWithContext(context.Background())
}

func (i NetArray) ToNetArrayOutputWithContext(ctx context.Context) NetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetArrayOutput)
}

func (i NetArray) ToOutput(ctx context.Context) pulumix.Output[[]*Net] {
	return pulumix.Output[[]*Net]{
		OutputState: i.ToNetArrayOutputWithContext(ctx).OutputState,
	}
}

// NetMapInput is an input type that accepts NetMap and NetMapOutput values.
// You can construct a concrete instance of `NetMapInput` via:
//
//	NetMap{ "key": NetArgs{...} }
type NetMapInput interface {
	pulumi.Input

	ToNetMapOutput() NetMapOutput
	ToNetMapOutputWithContext(context.Context) NetMapOutput
}

type NetMap map[string]NetInput

func (NetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Net)(nil)).Elem()
}

func (i NetMap) ToNetMapOutput() NetMapOutput {
	return i.ToNetMapOutputWithContext(context.Background())
}

func (i NetMap) ToNetMapOutputWithContext(ctx context.Context) NetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetMapOutput)
}

func (i NetMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Net] {
	return pulumix.Output[map[string]*Net]{
		OutputState: i.ToNetMapOutputWithContext(ctx).OutputState,
	}
}

type NetOutput struct{ *pulumi.OutputState }

func (NetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Net)(nil)).Elem()
}

func (o NetOutput) ToNetOutput() NetOutput {
	return o
}

func (o NetOutput) ToNetOutputWithContext(ctx context.Context) NetOutput {
	return o
}

func (o NetOutput) ToOutput(ctx context.Context) pulumix.Output[*Net] {
	return pulumix.Output[*Net]{
		OutputState: o.OutputState,
	}
}

// The ID of the DHCP options set (or `default` if you want to associate the default one).
func (o NetOutput) DhcpOptionsSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Net) pulumi.StringOutput { return v.DhcpOptionsSetId }).(pulumi.StringOutput)
}

// The IP range for the Net, in CIDR notation (for example, `10.0.0.0/16`).
func (o NetOutput) IpRange() pulumi.StringOutput {
	return o.ApplyT(func(v *Net) pulumi.StringOutput { return v.IpRange }).(pulumi.StringOutput)
}

// The ID of the Net.
func (o NetOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Net) pulumi.StringOutput { return v.NetId }).(pulumi.StringOutput)
}

func (o NetOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *Net) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// The state of the Net (`pending` \| `available` \| `deleted`).
func (o NetOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Net) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A tag to add to this resource. You can specify this argument several times.
func (o NetOutput) Tags() NetTagArrayOutput {
	return o.ApplyT(func(v *Net) NetTagArrayOutput { return v.Tags }).(NetTagArrayOutput)
}

// The tenancy options for the VMs (`default` if a VM created in a Net can be launched with any tenancy, `dedicated` if it can be launched with dedicated tenancy VMs running on single-tenant hardware).
func (o NetOutput) Tenancy() pulumi.StringOutput {
	return o.ApplyT(func(v *Net) pulumi.StringOutput { return v.Tenancy }).(pulumi.StringOutput)
}

type NetArrayOutput struct{ *pulumi.OutputState }

func (NetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Net)(nil)).Elem()
}

func (o NetArrayOutput) ToNetArrayOutput() NetArrayOutput {
	return o
}

func (o NetArrayOutput) ToNetArrayOutputWithContext(ctx context.Context) NetArrayOutput {
	return o
}

func (o NetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Net] {
	return pulumix.Output[[]*Net]{
		OutputState: o.OutputState,
	}
}

func (o NetArrayOutput) Index(i pulumi.IntInput) NetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Net {
		return vs[0].([]*Net)[vs[1].(int)]
	}).(NetOutput)
}

type NetMapOutput struct{ *pulumi.OutputState }

func (NetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Net)(nil)).Elem()
}

func (o NetMapOutput) ToNetMapOutput() NetMapOutput {
	return o
}

func (o NetMapOutput) ToNetMapOutputWithContext(ctx context.Context) NetMapOutput {
	return o
}

func (o NetMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Net] {
	return pulumix.Output[map[string]*Net]{
		OutputState: o.OutputState,
	}
}

func (o NetMapOutput) MapIndex(k pulumi.StringInput) NetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Net {
		return vs[0].(map[string]*Net)[vs[1].(string)]
	}).(NetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetInput)(nil)).Elem(), &Net{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetArrayInput)(nil)).Elem(), NetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetMapInput)(nil)).Elem(), NetMap{})
	pulumi.RegisterOutputType(NetOutput{})
	pulumi.RegisterOutputType(NetArrayOutput{})
	pulumi.RegisterOutputType(NetMapOutput{})
}
