// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a route table link.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Route-Tables.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-routetable).
//
// ## Example Usage
//
// ### Required resources
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			net01, err := outscale.NewNet(ctx, "net01", &outscale.NetArgs{
//				IpRange: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewSubnet(ctx, "subnet01", &outscale.SubnetArgs{
//				NetId:   net01.NetId,
//				IpRange: pulumi.String("10.0.0.0/18"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = outscale.NewRouteTable(ctx, "route_table01", &outscale.RouteTableArgs{
//				NetId: net01.NetId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Link a route table to a subnet
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.NewRouteTableLink(ctx, "route_table_link01", &outscale.RouteTableLinkArgs{
//				SubnetId:     pulumi.Any(subnet01.SubnetId),
//				RouteTableId: pulumi.Any(routeTable01.RouteTableId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A route table link can be imported using the route table ID and the route table link ID. For example:
//
// console
//
// ```sh
// $ pulumi import outscale:index/routeTableLink:RouteTableLink ImportedRouteTableLink rtb-12345678_rtbassoc-87654321
// ```
type RouteTableLink struct {
	pulumi.CustomResourceState

	// The ID of the association between the route table and the Subnet.
	LinkRouteTableId pulumi.StringOutput `pulumi:"linkRouteTableId"`
	// If true, the route table is the main one.
	Main      pulumi.BoolOutput   `pulumi:"main"`
	NetId     pulumi.StringOutput `pulumi:"netId"`
	RequestId pulumi.StringOutput `pulumi:"requestId"`
	// The ID of the route table.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// The ID of the Net.
	SubnetId pulumi.StringOutput             `pulumi:"subnetId"`
	Timeouts RouteTableLinkTimeoutsPtrOutput `pulumi:"timeouts"`
}

// NewRouteTableLink registers a new resource with the given unique name, arguments, and options.
func NewRouteTableLink(ctx *pulumi.Context,
	name string, args *RouteTableLinkArgs, opts ...pulumi.ResourceOption) (*RouteTableLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteTableLink
	err := ctx.RegisterResource("outscale:index/routeTableLink:RouteTableLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTableLink gets an existing RouteTableLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTableLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteTableLinkState, opts ...pulumi.ResourceOption) (*RouteTableLink, error) {
	var resource RouteTableLink
	err := ctx.ReadResource("outscale:index/routeTableLink:RouteTableLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteTableLink resources.
type routeTableLinkState struct {
	// The ID of the association between the route table and the Subnet.
	LinkRouteTableId *string `pulumi:"linkRouteTableId"`
	// If true, the route table is the main one.
	Main      *bool   `pulumi:"main"`
	NetId     *string `pulumi:"netId"`
	RequestId *string `pulumi:"requestId"`
	// The ID of the route table.
	RouteTableId *string `pulumi:"routeTableId"`
	// The ID of the Net.
	SubnetId *string                 `pulumi:"subnetId"`
	Timeouts *RouteTableLinkTimeouts `pulumi:"timeouts"`
}

type RouteTableLinkState struct {
	// The ID of the association between the route table and the Subnet.
	LinkRouteTableId pulumi.StringPtrInput
	// If true, the route table is the main one.
	Main      pulumi.BoolPtrInput
	NetId     pulumi.StringPtrInput
	RequestId pulumi.StringPtrInput
	// The ID of the route table.
	RouteTableId pulumi.StringPtrInput
	// The ID of the Net.
	SubnetId pulumi.StringPtrInput
	Timeouts RouteTableLinkTimeoutsPtrInput
}

func (RouteTableLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableLinkState)(nil)).Elem()
}

type routeTableLinkArgs struct {
	// The ID of the route table.
	RouteTableId string `pulumi:"routeTableId"`
	// The ID of the Net.
	SubnetId string                  `pulumi:"subnetId"`
	Timeouts *RouteTableLinkTimeouts `pulumi:"timeouts"`
}

// The set of arguments for constructing a RouteTableLink resource.
type RouteTableLinkArgs struct {
	// The ID of the route table.
	RouteTableId pulumi.StringInput
	// The ID of the Net.
	SubnetId pulumi.StringInput
	Timeouts RouteTableLinkTimeoutsPtrInput
}

func (RouteTableLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableLinkArgs)(nil)).Elem()
}

type RouteTableLinkInput interface {
	pulumi.Input

	ToRouteTableLinkOutput() RouteTableLinkOutput
	ToRouteTableLinkOutputWithContext(ctx context.Context) RouteTableLinkOutput
}

func (*RouteTableLink) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTableLink)(nil)).Elem()
}

func (i *RouteTableLink) ToRouteTableLinkOutput() RouteTableLinkOutput {
	return i.ToRouteTableLinkOutputWithContext(context.Background())
}

func (i *RouteTableLink) ToRouteTableLinkOutputWithContext(ctx context.Context) RouteTableLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableLinkOutput)
}

// RouteTableLinkArrayInput is an input type that accepts RouteTableLinkArray and RouteTableLinkArrayOutput values.
// You can construct a concrete instance of `RouteTableLinkArrayInput` via:
//
//	RouteTableLinkArray{ RouteTableLinkArgs{...} }
type RouteTableLinkArrayInput interface {
	pulumi.Input

	ToRouteTableLinkArrayOutput() RouteTableLinkArrayOutput
	ToRouteTableLinkArrayOutputWithContext(context.Context) RouteTableLinkArrayOutput
}

type RouteTableLinkArray []RouteTableLinkInput

func (RouteTableLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTableLink)(nil)).Elem()
}

func (i RouteTableLinkArray) ToRouteTableLinkArrayOutput() RouteTableLinkArrayOutput {
	return i.ToRouteTableLinkArrayOutputWithContext(context.Background())
}

func (i RouteTableLinkArray) ToRouteTableLinkArrayOutputWithContext(ctx context.Context) RouteTableLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableLinkArrayOutput)
}

// RouteTableLinkMapInput is an input type that accepts RouteTableLinkMap and RouteTableLinkMapOutput values.
// You can construct a concrete instance of `RouteTableLinkMapInput` via:
//
//	RouteTableLinkMap{ "key": RouteTableLinkArgs{...} }
type RouteTableLinkMapInput interface {
	pulumi.Input

	ToRouteTableLinkMapOutput() RouteTableLinkMapOutput
	ToRouteTableLinkMapOutputWithContext(context.Context) RouteTableLinkMapOutput
}

type RouteTableLinkMap map[string]RouteTableLinkInput

func (RouteTableLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTableLink)(nil)).Elem()
}

func (i RouteTableLinkMap) ToRouteTableLinkMapOutput() RouteTableLinkMapOutput {
	return i.ToRouteTableLinkMapOutputWithContext(context.Background())
}

func (i RouteTableLinkMap) ToRouteTableLinkMapOutputWithContext(ctx context.Context) RouteTableLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableLinkMapOutput)
}

type RouteTableLinkOutput struct{ *pulumi.OutputState }

func (RouteTableLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTableLink)(nil)).Elem()
}

func (o RouteTableLinkOutput) ToRouteTableLinkOutput() RouteTableLinkOutput {
	return o
}

func (o RouteTableLinkOutput) ToRouteTableLinkOutputWithContext(ctx context.Context) RouteTableLinkOutput {
	return o
}

// The ID of the association between the route table and the Subnet.
func (o RouteTableLinkOutput) LinkRouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTableLink) pulumi.StringOutput { return v.LinkRouteTableId }).(pulumi.StringOutput)
}

// If true, the route table is the main one.
func (o RouteTableLinkOutput) Main() pulumi.BoolOutput {
	return o.ApplyT(func(v *RouteTableLink) pulumi.BoolOutput { return v.Main }).(pulumi.BoolOutput)
}

func (o RouteTableLinkOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTableLink) pulumi.StringOutput { return v.NetId }).(pulumi.StringOutput)
}

func (o RouteTableLinkOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTableLink) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// The ID of the route table.
func (o RouteTableLinkOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTableLink) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

// The ID of the Net.
func (o RouteTableLinkOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTableLink) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o RouteTableLinkOutput) Timeouts() RouteTableLinkTimeoutsPtrOutput {
	return o.ApplyT(func(v *RouteTableLink) RouteTableLinkTimeoutsPtrOutput { return v.Timeouts }).(RouteTableLinkTimeoutsPtrOutput)
}

type RouteTableLinkArrayOutput struct{ *pulumi.OutputState }

func (RouteTableLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTableLink)(nil)).Elem()
}

func (o RouteTableLinkArrayOutput) ToRouteTableLinkArrayOutput() RouteTableLinkArrayOutput {
	return o
}

func (o RouteTableLinkArrayOutput) ToRouteTableLinkArrayOutputWithContext(ctx context.Context) RouteTableLinkArrayOutput {
	return o
}

func (o RouteTableLinkArrayOutput) Index(i pulumi.IntInput) RouteTableLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteTableLink {
		return vs[0].([]*RouteTableLink)[vs[1].(int)]
	}).(RouteTableLinkOutput)
}

type RouteTableLinkMapOutput struct{ *pulumi.OutputState }

func (RouteTableLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTableLink)(nil)).Elem()
}

func (o RouteTableLinkMapOutput) ToRouteTableLinkMapOutput() RouteTableLinkMapOutput {
	return o
}

func (o RouteTableLinkMapOutput) ToRouteTableLinkMapOutputWithContext(ctx context.Context) RouteTableLinkMapOutput {
	return o
}

func (o RouteTableLinkMapOutput) MapIndex(k pulumi.StringInput) RouteTableLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteTableLink {
		return vs[0].(map[string]*RouteTableLink)[vs[1].(string)]
	}).(RouteTableLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableLinkInput)(nil)).Elem(), &RouteTableLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableLinkArrayInput)(nil)).Elem(), RouteTableLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableLinkMapInput)(nil)).Elem(), RouteTableLinkMap{})
	pulumi.RegisterOutputType(RouteTableLinkOutput{})
	pulumi.RegisterOutputType(RouteTableLinkArrayOutput{})
	pulumi.RegisterOutputType(RouteTableLinkMapOutput{})
}
