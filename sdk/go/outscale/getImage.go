// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information about an image.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-OMIs.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-image).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/outscale/pulumi-outscale/sdk/go/outscale"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := outscale.LookupImage(ctx, &outscale.LookupImageArgs{
//				Filters: []outscale.GetImageFilter{
//					{
//						Name: "image_ids",
//						Values: []string{
//							"ami-12345678",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupImage(ctx *pulumi.Context, args *LookupImageArgs, opts ...pulumi.InvokeOption) (*LookupImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupImageResult
	err := ctx.Invoke("outscale:index/getImage:getImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImage.
type LookupImageArgs struct {
	// One or more block device mappings.
	BlockDeviceMappings []GetImageBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters []GetImageFilter `pulumi:"filters"`
	// The ID of the OMI.
	ImageId     *string  `pulumi:"imageId"`
	Permissions []string `pulumi:"permissions"`
}

// A collection of values returned by getImage.
type LookupImageResult struct {
	// The account alias of the owner of the OMI.
	AccountAlias string `pulumi:"accountAlias"`
	// The account ID of the owner of the OMI.
	AccountId string `pulumi:"accountId"`
	// The architecture of the OMI (by default, `i386`).
	Architecture string `pulumi:"architecture"`
	// One or more block device mappings.
	BlockDeviceMappings []GetImageBlockDeviceMapping `pulumi:"blockDeviceMappings"`
	// The date and time of creation of the OMI, in ISO 8601 date-time format.
	CreationDate string `pulumi:"creationDate"`
	// The description of the OMI.
	Description string `pulumi:"description"`
	// The location of the bucket where the OMI files are stored.
	FileLocation string           `pulumi:"fileLocation"`
	Filters      []GetImageFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the OMI.
	ImageId *string `pulumi:"imageId"`
	// The name of the OMI.
	ImageName string `pulumi:"imageName"`
	// The type of the OMI.
	ImageType   string   `pulumi:"imageType"`
	IsPublic    bool     `pulumi:"isPublic"`
	Permissions []string `pulumi:"permissions"`
	// Permissions for the resource.
	PermissionsToLaunches []GetImagePermissionsToLaunch `pulumi:"permissionsToLaunches"`
	// The product codes associated with the OMI.
	ProductCodes []string `pulumi:"productCodes"`
	RequestId    string   `pulumi:"requestId"`
	// The name of the root device.
	RootDeviceName string `pulumi:"rootDeviceName"`
	// The type of root device used by the OMI (always `bsu`).
	RootDeviceType string `pulumi:"rootDeviceType"`
	// The state of the OMI (`pending` \| `available` \| `failed`).
	State string `pulumi:"state"`
	// Information about the change of state.
	StateComments []GetImageStateComment `pulumi:"stateComments"`
	// One or more tags associated with the OMI.
	Tags []GetImageTag `pulumi:"tags"`
}

func LookupImageOutput(ctx *pulumi.Context, args LookupImageOutputArgs, opts ...pulumi.InvokeOption) LookupImageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupImageResult, error) {
			args := v.(LookupImageArgs)
			r, err := LookupImage(ctx, &args, opts...)
			var s LookupImageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupImageResultOutput)
}

// A collection of arguments for invoking getImage.
type LookupImageOutputArgs struct {
	// One or more block device mappings.
	BlockDeviceMappings GetImageBlockDeviceMappingArrayInput `pulumi:"blockDeviceMappings"`
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters GetImageFilterArrayInput `pulumi:"filters"`
	// The ID of the OMI.
	ImageId     pulumi.StringPtrInput   `pulumi:"imageId"`
	Permissions pulumi.StringArrayInput `pulumi:"permissions"`
}

func (LookupImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageArgs)(nil)).Elem()
}

// A collection of values returned by getImage.
type LookupImageResultOutput struct{ *pulumi.OutputState }

func (LookupImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageResult)(nil)).Elem()
}

func (o LookupImageResultOutput) ToLookupImageResultOutput() LookupImageResultOutput {
	return o
}

func (o LookupImageResultOutput) ToLookupImageResultOutputWithContext(ctx context.Context) LookupImageResultOutput {
	return o
}

// The account alias of the owner of the OMI.
func (o LookupImageResultOutput) AccountAlias() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.AccountAlias }).(pulumi.StringOutput)
}

// The account ID of the owner of the OMI.
func (o LookupImageResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// The architecture of the OMI (by default, `i386`).
func (o LookupImageResultOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Architecture }).(pulumi.StringOutput)
}

// One or more block device mappings.
func (o LookupImageResultOutput) BlockDeviceMappings() GetImageBlockDeviceMappingArrayOutput {
	return o.ApplyT(func(v LookupImageResult) []GetImageBlockDeviceMapping { return v.BlockDeviceMappings }).(GetImageBlockDeviceMappingArrayOutput)
}

// The date and time of creation of the OMI, in ISO 8601 date-time format.
func (o LookupImageResultOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.CreationDate }).(pulumi.StringOutput)
}

// The description of the OMI.
func (o LookupImageResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Description }).(pulumi.StringOutput)
}

// The location of the bucket where the OMI files are stored.
func (o LookupImageResultOutput) FileLocation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.FileLocation }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) Filters() GetImageFilterArrayOutput {
	return o.ApplyT(func(v LookupImageResult) []GetImageFilter { return v.Filters }).(GetImageFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the OMI.
func (o LookupImageResultOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageResult) *string { return v.ImageId }).(pulumi.StringPtrOutput)
}

// The name of the OMI.
func (o LookupImageResultOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.ImageName }).(pulumi.StringOutput)
}

// The type of the OMI.
func (o LookupImageResultOutput) ImageType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.ImageType }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) IsPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupImageResult) bool { return v.IsPublic }).(pulumi.BoolOutput)
}

func (o LookupImageResultOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupImageResult) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// Permissions for the resource.
func (o LookupImageResultOutput) PermissionsToLaunches() GetImagePermissionsToLaunchArrayOutput {
	return o.ApplyT(func(v LookupImageResult) []GetImagePermissionsToLaunch { return v.PermissionsToLaunches }).(GetImagePermissionsToLaunchArrayOutput)
}

// The product codes associated with the OMI.
func (o LookupImageResultOutput) ProductCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupImageResult) []string { return v.ProductCodes }).(pulumi.StringArrayOutput)
}

func (o LookupImageResultOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.RequestId }).(pulumi.StringOutput)
}

// The name of the root device.
func (o LookupImageResultOutput) RootDeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.RootDeviceName }).(pulumi.StringOutput)
}

// The type of root device used by the OMI (always `bsu`).
func (o LookupImageResultOutput) RootDeviceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.RootDeviceType }).(pulumi.StringOutput)
}

// The state of the OMI (`pending` \| `available` \| `failed`).
func (o LookupImageResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.State }).(pulumi.StringOutput)
}

// Information about the change of state.
func (o LookupImageResultOutput) StateComments() GetImageStateCommentArrayOutput {
	return o.ApplyT(func(v LookupImageResult) []GetImageStateComment { return v.StateComments }).(GetImageStateCommentArrayOutput)
}

// One or more tags associated with the OMI.
func (o LookupImageResultOutput) Tags() GetImageTagArrayOutput {
	return o.ApplyT(func(v LookupImageResult) []GetImageTag { return v.Tags }).(GetImageTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupImageResultOutput{})
}
