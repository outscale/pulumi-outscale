// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"errors"
	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages load balancer attributes.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#updateloadbalancer).
//
// ## Example Usage
type LoadBalancerAttributes struct {
	pulumi.CustomResourceState

	// Information about access logs.
	AccessLog LoadBalancerAttributesAccessLogOutput `pulumi:"accessLog"`
	// The stickiness policies defined for the load balancer.
	ApplicationStickyCookiePolicies LoadBalancerAttributesApplicationStickyCookiePolicyArrayOutput `pulumi:"applicationStickyCookiePolicies"`
	// One or more IDs of back-end VMs for the load balancer.
	BackendVmIds pulumi.StringArrayOutput `pulumi:"backendVmIds"`
	// The DNS name of the load balancer.
	DnsName pulumi.StringOutput `pulumi:"dnsName"`
	// Information about the health check configuration.
	HealthCheck LoadBalancerAttributesHealthCheckOutput `pulumi:"healthCheck"`
	// The listeners for the load balancer.
	Listeners LoadBalancerAttributesListenerArrayOutput `pulumi:"listeners"`
	// The name of the load balancer.
	LoadBalancerName pulumi.StringOutput `pulumi:"loadBalancerName"`
	// The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
	LoadBalancerPort pulumi.IntPtrOutput `pulumi:"loadBalancerPort"`
	// The policies defined for the load balancer.
	LoadBalancerStickyCookiePolicies LoadBalancerAttributesLoadBalancerStickyCookiePolicyArrayOutput `pulumi:"loadBalancerStickyCookiePolicies"`
	// The type of load balancer. Valid only for load balancers in a Net.<br />
	// If `loadBalancerType` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
	// If `loadBalancerType` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
	LoadBalancerType pulumi.StringOutput `pulumi:"loadBalancerType"`
	// The name of the policy you want to enable for the listener.
	PolicyNames pulumi.StringArrayOutput `pulumi:"policyNames"`
	RequestId   pulumi.StringOutput      `pulumi:"requestId"`
	// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `loadBalancerPort` parameter.
	ServerCertificateId pulumi.StringPtrOutput `pulumi:"serverCertificateId"`
	// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
	// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
	SourceSecurityGroup LoadBalancerAttributesSourceSecurityGroupOutput `pulumi:"sourceSecurityGroup"`
	// The ID of the Subnet in which the load balancer was created.
	Subnets pulumi.StringArrayOutput `pulumi:"subnets"`
	// The ID of the Subregion in which the load balancer was created.
	SubregionNames pulumi.StringArrayOutput `pulumi:"subregionNames"`
	// One or more tags associated with the load balancer.
	Tags LoadBalancerAttributesTagArrayOutput `pulumi:"tags"`
}

// NewLoadBalancerAttributes registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancerAttributes(ctx *pulumi.Context,
	name string, args *LoadBalancerAttributesArgs, opts ...pulumi.ResourceOption) (*LoadBalancerAttributes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadBalancerName == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancerAttributes
	err := ctx.RegisterResource("outscale:index/loadBalancerAttributes:LoadBalancerAttributes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancerAttributes gets an existing LoadBalancerAttributes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancerAttributes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerAttributesState, opts ...pulumi.ResourceOption) (*LoadBalancerAttributes, error) {
	var resource LoadBalancerAttributes
	err := ctx.ReadResource("outscale:index/loadBalancerAttributes:LoadBalancerAttributes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancerAttributes resources.
type loadBalancerAttributesState struct {
	// Information about access logs.
	AccessLog *LoadBalancerAttributesAccessLog `pulumi:"accessLog"`
	// The stickiness policies defined for the load balancer.
	ApplicationStickyCookiePolicies []LoadBalancerAttributesApplicationStickyCookiePolicy `pulumi:"applicationStickyCookiePolicies"`
	// One or more IDs of back-end VMs for the load balancer.
	BackendVmIds []string `pulumi:"backendVmIds"`
	// The DNS name of the load balancer.
	DnsName *string `pulumi:"dnsName"`
	// Information about the health check configuration.
	HealthCheck *LoadBalancerAttributesHealthCheck `pulumi:"healthCheck"`
	// The listeners for the load balancer.
	Listeners []LoadBalancerAttributesListener `pulumi:"listeners"`
	// The name of the load balancer.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
	LoadBalancerPort *int `pulumi:"loadBalancerPort"`
	// The policies defined for the load balancer.
	LoadBalancerStickyCookiePolicies []LoadBalancerAttributesLoadBalancerStickyCookiePolicy `pulumi:"loadBalancerStickyCookiePolicies"`
	// The type of load balancer. Valid only for load balancers in a Net.<br />
	// If `loadBalancerType` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
	// If `loadBalancerType` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// The name of the policy you want to enable for the listener.
	PolicyNames []string `pulumi:"policyNames"`
	RequestId   *string  `pulumi:"requestId"`
	// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
	SecurityGroups []string `pulumi:"securityGroups"`
	// The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `loadBalancerPort` parameter.
	ServerCertificateId *string `pulumi:"serverCertificateId"`
	// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
	// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
	SourceSecurityGroup *LoadBalancerAttributesSourceSecurityGroup `pulumi:"sourceSecurityGroup"`
	// The ID of the Subnet in which the load balancer was created.
	Subnets []string `pulumi:"subnets"`
	// The ID of the Subregion in which the load balancer was created.
	SubregionNames []string `pulumi:"subregionNames"`
	// One or more tags associated with the load balancer.
	Tags []LoadBalancerAttributesTag `pulumi:"tags"`
}

type LoadBalancerAttributesState struct {
	// Information about access logs.
	AccessLog LoadBalancerAttributesAccessLogPtrInput
	// The stickiness policies defined for the load balancer.
	ApplicationStickyCookiePolicies LoadBalancerAttributesApplicationStickyCookiePolicyArrayInput
	// One or more IDs of back-end VMs for the load balancer.
	BackendVmIds pulumi.StringArrayInput
	// The DNS name of the load balancer.
	DnsName pulumi.StringPtrInput
	// Information about the health check configuration.
	HealthCheck LoadBalancerAttributesHealthCheckPtrInput
	// The listeners for the load balancer.
	Listeners LoadBalancerAttributesListenerArrayInput
	// The name of the load balancer.
	LoadBalancerName pulumi.StringPtrInput
	// The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
	LoadBalancerPort pulumi.IntPtrInput
	// The policies defined for the load balancer.
	LoadBalancerStickyCookiePolicies LoadBalancerAttributesLoadBalancerStickyCookiePolicyArrayInput
	// The type of load balancer. Valid only for load balancers in a Net.<br />
	// If `loadBalancerType` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
	// If `loadBalancerType` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
	LoadBalancerType pulumi.StringPtrInput
	// The name of the policy you want to enable for the listener.
	PolicyNames pulumi.StringArrayInput
	RequestId   pulumi.StringPtrInput
	// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
	SecurityGroups pulumi.StringArrayInput
	// The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `loadBalancerPort` parameter.
	ServerCertificateId pulumi.StringPtrInput
	// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
	// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
	SourceSecurityGroup LoadBalancerAttributesSourceSecurityGroupPtrInput
	// The ID of the Subnet in which the load balancer was created.
	Subnets pulumi.StringArrayInput
	// The ID of the Subregion in which the load balancer was created.
	SubregionNames pulumi.StringArrayInput
	// One or more tags associated with the load balancer.
	Tags LoadBalancerAttributesTagArrayInput
}

func (LoadBalancerAttributesState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerAttributesState)(nil)).Elem()
}

type loadBalancerAttributesArgs struct {
	// Information about access logs.
	AccessLog *LoadBalancerAttributesAccessLog `pulumi:"accessLog"`
	// Information about the health check configuration.
	HealthCheck *LoadBalancerAttributesHealthCheck `pulumi:"healthCheck"`
	// The name of the load balancer.
	LoadBalancerName string `pulumi:"loadBalancerName"`
	// The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
	LoadBalancerPort *int `pulumi:"loadBalancerPort"`
	// The name of the policy you want to enable for the listener.
	PolicyNames []string `pulumi:"policyNames"`
	// The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `loadBalancerPort` parameter.
	ServerCertificateId *string `pulumi:"serverCertificateId"`
	// One or more tags associated with the load balancer.
	Tags []LoadBalancerAttributesTag `pulumi:"tags"`
}

// The set of arguments for constructing a LoadBalancerAttributes resource.
type LoadBalancerAttributesArgs struct {
	// Information about access logs.
	AccessLog LoadBalancerAttributesAccessLogPtrInput
	// Information about the health check configuration.
	HealthCheck LoadBalancerAttributesHealthCheckPtrInput
	// The name of the load balancer.
	LoadBalancerName pulumi.StringInput
	// The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
	LoadBalancerPort pulumi.IntPtrInput
	// The name of the policy you want to enable for the listener.
	PolicyNames pulumi.StringArrayInput
	// The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `loadBalancerPort` parameter.
	ServerCertificateId pulumi.StringPtrInput
	// One or more tags associated with the load balancer.
	Tags LoadBalancerAttributesTagArrayInput
}

func (LoadBalancerAttributesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerAttributesArgs)(nil)).Elem()
}

type LoadBalancerAttributesInput interface {
	pulumi.Input

	ToLoadBalancerAttributesOutput() LoadBalancerAttributesOutput
	ToLoadBalancerAttributesOutputWithContext(ctx context.Context) LoadBalancerAttributesOutput
}

func (*LoadBalancerAttributes) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerAttributes)(nil)).Elem()
}

func (i *LoadBalancerAttributes) ToLoadBalancerAttributesOutput() LoadBalancerAttributesOutput {
	return i.ToLoadBalancerAttributesOutputWithContext(context.Background())
}

func (i *LoadBalancerAttributes) ToLoadBalancerAttributesOutputWithContext(ctx context.Context) LoadBalancerAttributesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAttributesOutput)
}

func (i *LoadBalancerAttributes) ToOutput(ctx context.Context) pulumix.Output[*LoadBalancerAttributes] {
	return pulumix.Output[*LoadBalancerAttributes]{
		OutputState: i.ToLoadBalancerAttributesOutputWithContext(ctx).OutputState,
	}
}

// LoadBalancerAttributesArrayInput is an input type that accepts LoadBalancerAttributesArray and LoadBalancerAttributesArrayOutput values.
// You can construct a concrete instance of `LoadBalancerAttributesArrayInput` via:
//
//	LoadBalancerAttributesArray{ LoadBalancerAttributesArgs{...} }
type LoadBalancerAttributesArrayInput interface {
	pulumi.Input

	ToLoadBalancerAttributesArrayOutput() LoadBalancerAttributesArrayOutput
	ToLoadBalancerAttributesArrayOutputWithContext(context.Context) LoadBalancerAttributesArrayOutput
}

type LoadBalancerAttributesArray []LoadBalancerAttributesInput

func (LoadBalancerAttributesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancerAttributes)(nil)).Elem()
}

func (i LoadBalancerAttributesArray) ToLoadBalancerAttributesArrayOutput() LoadBalancerAttributesArrayOutput {
	return i.ToLoadBalancerAttributesArrayOutputWithContext(context.Background())
}

func (i LoadBalancerAttributesArray) ToLoadBalancerAttributesArrayOutputWithContext(ctx context.Context) LoadBalancerAttributesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAttributesArrayOutput)
}

func (i LoadBalancerAttributesArray) ToOutput(ctx context.Context) pulumix.Output[[]*LoadBalancerAttributes] {
	return pulumix.Output[[]*LoadBalancerAttributes]{
		OutputState: i.ToLoadBalancerAttributesArrayOutputWithContext(ctx).OutputState,
	}
}

// LoadBalancerAttributesMapInput is an input type that accepts LoadBalancerAttributesMap and LoadBalancerAttributesMapOutput values.
// You can construct a concrete instance of `LoadBalancerAttributesMapInput` via:
//
//	LoadBalancerAttributesMap{ "key": LoadBalancerAttributesArgs{...} }
type LoadBalancerAttributesMapInput interface {
	pulumi.Input

	ToLoadBalancerAttributesMapOutput() LoadBalancerAttributesMapOutput
	ToLoadBalancerAttributesMapOutputWithContext(context.Context) LoadBalancerAttributesMapOutput
}

type LoadBalancerAttributesMap map[string]LoadBalancerAttributesInput

func (LoadBalancerAttributesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancerAttributes)(nil)).Elem()
}

func (i LoadBalancerAttributesMap) ToLoadBalancerAttributesMapOutput() LoadBalancerAttributesMapOutput {
	return i.ToLoadBalancerAttributesMapOutputWithContext(context.Background())
}

func (i LoadBalancerAttributesMap) ToLoadBalancerAttributesMapOutputWithContext(ctx context.Context) LoadBalancerAttributesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerAttributesMapOutput)
}

func (i LoadBalancerAttributesMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*LoadBalancerAttributes] {
	return pulumix.Output[map[string]*LoadBalancerAttributes]{
		OutputState: i.ToLoadBalancerAttributesMapOutputWithContext(ctx).OutputState,
	}
}

type LoadBalancerAttributesOutput struct{ *pulumi.OutputState }

func (LoadBalancerAttributesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerAttributes)(nil)).Elem()
}

func (o LoadBalancerAttributesOutput) ToLoadBalancerAttributesOutput() LoadBalancerAttributesOutput {
	return o
}

func (o LoadBalancerAttributesOutput) ToLoadBalancerAttributesOutputWithContext(ctx context.Context) LoadBalancerAttributesOutput {
	return o
}

func (o LoadBalancerAttributesOutput) ToOutput(ctx context.Context) pulumix.Output[*LoadBalancerAttributes] {
	return pulumix.Output[*LoadBalancerAttributes]{
		OutputState: o.OutputState,
	}
}

// Information about access logs.
func (o LoadBalancerAttributesOutput) AccessLog() LoadBalancerAttributesAccessLogOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) LoadBalancerAttributesAccessLogOutput { return v.AccessLog }).(LoadBalancerAttributesAccessLogOutput)
}

// The stickiness policies defined for the load balancer.
func (o LoadBalancerAttributesOutput) ApplicationStickyCookiePolicies() LoadBalancerAttributesApplicationStickyCookiePolicyArrayOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) LoadBalancerAttributesApplicationStickyCookiePolicyArrayOutput {
		return v.ApplicationStickyCookiePolicies
	}).(LoadBalancerAttributesApplicationStickyCookiePolicyArrayOutput)
}

// One or more IDs of back-end VMs for the load balancer.
func (o LoadBalancerAttributesOutput) BackendVmIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) pulumi.StringArrayOutput { return v.BackendVmIds }).(pulumi.StringArrayOutput)
}

// The DNS name of the load balancer.
func (o LoadBalancerAttributesOutput) DnsName() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) pulumi.StringOutput { return v.DnsName }).(pulumi.StringOutput)
}

// Information about the health check configuration.
func (o LoadBalancerAttributesOutput) HealthCheck() LoadBalancerAttributesHealthCheckOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) LoadBalancerAttributesHealthCheckOutput { return v.HealthCheck }).(LoadBalancerAttributesHealthCheckOutput)
}

// The listeners for the load balancer.
func (o LoadBalancerAttributesOutput) Listeners() LoadBalancerAttributesListenerArrayOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) LoadBalancerAttributesListenerArrayOutput { return v.Listeners }).(LoadBalancerAttributesListenerArrayOutput)
}

// The name of the load balancer.
func (o LoadBalancerAttributesOutput) LoadBalancerName() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) pulumi.StringOutput { return v.LoadBalancerName }).(pulumi.StringOutput)
}

// The port on which the load balancer is listening (between `1` and `65535`, both included). This parameter is required if you want to update the server certificate.
func (o LoadBalancerAttributesOutput) LoadBalancerPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) pulumi.IntPtrOutput { return v.LoadBalancerPort }).(pulumi.IntPtrOutput)
}

// The policies defined for the load balancer.
func (o LoadBalancerAttributesOutput) LoadBalancerStickyCookiePolicies() LoadBalancerAttributesLoadBalancerStickyCookiePolicyArrayOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) LoadBalancerAttributesLoadBalancerStickyCookiePolicyArrayOutput {
		return v.LoadBalancerStickyCookiePolicies
	}).(LoadBalancerAttributesLoadBalancerStickyCookiePolicyArrayOutput)
}

// The type of load balancer. Valid only for load balancers in a Net.<br />
// If `loadBalancerType` is `internet-facing`, the load balancer has a public DNS name that resolves to a public IP.<br />
// If `loadBalancerType` is `internal`, the load balancer has a public DNS name that resolves to a private IP.
func (o LoadBalancerAttributesOutput) LoadBalancerType() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) pulumi.StringOutput { return v.LoadBalancerType }).(pulumi.StringOutput)
}

// The name of the policy you want to enable for the listener.
func (o LoadBalancerAttributesOutput) PolicyNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) pulumi.StringArrayOutput { return v.PolicyNames }).(pulumi.StringArrayOutput)
}

func (o LoadBalancerAttributesOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) pulumi.StringOutput { return v.RequestId }).(pulumi.StringOutput)
}

// One or more IDs of security groups for the load balancers. Valid only for load balancers in a Net.
func (o LoadBalancerAttributesOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// The Outscale Resource Name (ORN) of the server certificate. For more information, see [Resource Identifiers > Outscale Resource Names (ORNs)](https://docs.outscale.com/en/userguide/Resource-Identifiers.html#_outscale_resource_names_orns). If this parameter is specified, you must also specify the `loadBalancerPort` parameter.
func (o LoadBalancerAttributesOutput) ServerCertificateId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) pulumi.StringPtrOutput { return v.ServerCertificateId }).(pulumi.StringPtrOutput)
}

// Information about the source security group of the load balancer, which you can use as part of your inbound rules for your registered VMs.<br />
// To only allow traffic from load balancers, add a security group rule that specifies this source security group as the inbound source.
func (o LoadBalancerAttributesOutput) SourceSecurityGroup() LoadBalancerAttributesSourceSecurityGroupOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) LoadBalancerAttributesSourceSecurityGroupOutput {
		return v.SourceSecurityGroup
	}).(LoadBalancerAttributesSourceSecurityGroupOutput)
}

// The ID of the Subnet in which the load balancer was created.
func (o LoadBalancerAttributesOutput) Subnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) pulumi.StringArrayOutput { return v.Subnets }).(pulumi.StringArrayOutput)
}

// The ID of the Subregion in which the load balancer was created.
func (o LoadBalancerAttributesOutput) SubregionNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) pulumi.StringArrayOutput { return v.SubregionNames }).(pulumi.StringArrayOutput)
}

// One or more tags associated with the load balancer.
func (o LoadBalancerAttributesOutput) Tags() LoadBalancerAttributesTagArrayOutput {
	return o.ApplyT(func(v *LoadBalancerAttributes) LoadBalancerAttributesTagArrayOutput { return v.Tags }).(LoadBalancerAttributesTagArrayOutput)
}

type LoadBalancerAttributesArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerAttributesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancerAttributes)(nil)).Elem()
}

func (o LoadBalancerAttributesArrayOutput) ToLoadBalancerAttributesArrayOutput() LoadBalancerAttributesArrayOutput {
	return o
}

func (o LoadBalancerAttributesArrayOutput) ToLoadBalancerAttributesArrayOutputWithContext(ctx context.Context) LoadBalancerAttributesArrayOutput {
	return o
}

func (o LoadBalancerAttributesArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*LoadBalancerAttributes] {
	return pulumix.Output[[]*LoadBalancerAttributes]{
		OutputState: o.OutputState,
	}
}

func (o LoadBalancerAttributesArrayOutput) Index(i pulumi.IntInput) LoadBalancerAttributesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadBalancerAttributes {
		return vs[0].([]*LoadBalancerAttributes)[vs[1].(int)]
	}).(LoadBalancerAttributesOutput)
}

type LoadBalancerAttributesMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerAttributesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancerAttributes)(nil)).Elem()
}

func (o LoadBalancerAttributesMapOutput) ToLoadBalancerAttributesMapOutput() LoadBalancerAttributesMapOutput {
	return o
}

func (o LoadBalancerAttributesMapOutput) ToLoadBalancerAttributesMapOutputWithContext(ctx context.Context) LoadBalancerAttributesMapOutput {
	return o
}

func (o LoadBalancerAttributesMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*LoadBalancerAttributes] {
	return pulumix.Output[map[string]*LoadBalancerAttributes]{
		OutputState: o.OutputState,
	}
}

func (o LoadBalancerAttributesMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerAttributesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadBalancerAttributes {
		return vs[0].(map[string]*LoadBalancerAttributes)[vs[1].(string)]
	}).(LoadBalancerAttributesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerAttributesInput)(nil)).Elem(), &LoadBalancerAttributes{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerAttributesArrayInput)(nil)).Elem(), LoadBalancerAttributesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerAttributesMapInput)(nil)).Elem(), LoadBalancerAttributesMap{})
	pulumi.RegisterOutputType(LoadBalancerAttributesOutput{})
	pulumi.RegisterOutputType(LoadBalancerAttributesArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerAttributesMapOutput{})
}
