// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a virtual machine (VM).
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Instances.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#3ds-outscale-api-vm).
func LookupVm(ctx *pulumi.Context, args *LookupVmArgs, opts ...pulumi.InvokeOption) (*LookupVmResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVmResult
	err := ctx.Invoke("outscale:index/getVm:getVm", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVm.
type LookupVmArgs struct {
	// The block device mapping of the VM.
	BlockDeviceMappingsCreateds []GetVmBlockDeviceMappingsCreated `pulumi:"blockDeviceMappingsCreateds"`
	BsuOptimized                *bool                             `pulumi:"bsuOptimized"`
	// If true, you cannot delete the VM unless you change this parameter back to false.
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters []GetVmFilter `pulumi:"filters"`
	// The ID of the OMI used to create the VM.
	ImageId *string `pulumi:"imageId"`
	// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
	IsSourceDestChecked *bool `pulumi:"isSourceDestChecked"`
	// The name of the keypair used when launching the VM.
	KeypairName *string `pulumi:"keypairName"`
	// (Net only) The network interface cards (NICs) the VMs are attached to.
	Nics                   []GetVmNic `pulumi:"nics"`
	PlacementSubregionName *string    `pulumi:"placementSubregionName"`
	PlacementTenancy       *string    `pulumi:"placementTenancy"`
	// The private IP or IPs of the NIC.
	PrivateIps         []string `pulumi:"privateIps"`
	SecurityGroupIds   []string `pulumi:"securityGroupIds"`
	SecurityGroupNames []string `pulumi:"securityGroupNames"`
	// The ID of the Subnet for the VM.
	SubnetId *string `pulumi:"subnetId"`
	// The Base64-encoded MIME user data.
	UserData *string `pulumi:"userData"`
	// The ID of the VM.
	VmId *string `pulumi:"vmId"`
	// The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.
	VmInitiatedShutdownBehavior *string `pulumi:"vmInitiatedShutdownBehavior"`
	// The type of VM. For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
	VmType *string `pulumi:"vmType"`
}

// A collection of values returned by getVm.
type LookupVmResult struct {
	// The architecture of the VM (`i386` \| `x8664`).
	Architecture string `pulumi:"architecture"`
	// The block device mapping of the VM.
	BlockDeviceMappingsCreateds []GetVmBlockDeviceMappingsCreated `pulumi:"blockDeviceMappingsCreateds"`
	BsuOptimized                bool                              `pulumi:"bsuOptimized"`
	// The idempotency token provided when launching the VM.
	ClientToken string `pulumi:"clientToken"`
	// The date and time of creation of the VM.
	CreationDate string `pulumi:"creationDate"`
	// If true, you cannot delete the VM unless you change this parameter back to false.
	DeletionProtection bool          `pulumi:"deletionProtection"`
	Filters            []GetVmFilter `pulumi:"filters"`
	// The hypervisor type of the VMs (`ovm` \| `xen`).
	Hypervisor string `pulumi:"hypervisor"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of the OMI used to create the VM.
	ImageId string `pulumi:"imageId"`
	// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
	IsSourceDestChecked bool `pulumi:"isSourceDestChecked"`
	// The name of the keypair used when launching the VM.
	KeypairName string `pulumi:"keypairName"`
	// The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
	LaunchNumber int `pulumi:"launchNumber"`
	// If true, nested virtualization is enabled. If false, it is disabled.
	NestedVirtualization bool `pulumi:"nestedVirtualization"`
	// The ID of the Net for the NIC.
	NetId string `pulumi:"netId"`
	// (Net only) The network interface cards (NICs) the VMs are attached to.
	Nics []GetVmNic `pulumi:"nics"`
	// Indicates the operating system (OS) of the VM.
	OsFamily string `pulumi:"osFamily"`
	// The performance of the VM (`medium` \| `high` \|  `highest`).
	Performance            string `pulumi:"performance"`
	PlacementSubregionName string `pulumi:"placementSubregionName"`
	PlacementTenancy       string `pulumi:"placementTenancy"`
	// The name of the private DNS.
	PrivateDnsName string `pulumi:"privateDnsName"`
	// The primary private IP of the VM.
	PrivateIp string `pulumi:"privateIp"`
	// The private IP or IPs of the NIC.
	PrivateIps []string `pulumi:"privateIps"`
	// The product code associated with the OMI used to create the VM (`0001` Linux/Unix \| `0002` Windows \| `0004` Linux/Oracle \| `0005` Windows 10).
	ProductCodes []string `pulumi:"productCodes"`
	// The name of the public DNS.
	PublicDnsName string `pulumi:"publicDnsName"`
	// The public IP of the VM.
	PublicIp  string `pulumi:"publicIp"`
	RequestId string `pulumi:"requestId"`
	// The reservation ID of the VM.
	ReservationId string `pulumi:"reservationId"`
	// The name of the root device for the VM (for example, `/dev/vda1`).
	RootDeviceName string `pulumi:"rootDeviceName"`
	// The type of root device used by the VM (always `bsu`).
	RootDeviceType     string   `pulumi:"rootDeviceType"`
	SecurityGroupIds   []string `pulumi:"securityGroupIds"`
	SecurityGroupNames []string `pulumi:"securityGroupNames"`
	// One or more security groups associated with the VM.
	SecurityGroups []GetVmSecurityGroup `pulumi:"securityGroups"`
	// The state of the VM (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
	State string `pulumi:"state"`
	// The reason explaining the current state of the VM.
	StateReason string `pulumi:"stateReason"`
	// The ID of the Subnet for the VM.
	SubnetId string `pulumi:"subnetId"`
	// One or more tags associated with the VM.
	Tags []GetVmTag `pulumi:"tags"`
	// The Base64-encoded MIME user data.
	UserData string `pulumi:"userData"`
	// The ID of the VM.
	VmId string `pulumi:"vmId"`
	// The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.
	VmInitiatedShutdownBehavior string `pulumi:"vmInitiatedShutdownBehavior"`
	// The type of VM. For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
	VmType string `pulumi:"vmType"`
}

func LookupVmOutput(ctx *pulumi.Context, args LookupVmOutputArgs, opts ...pulumi.InvokeOption) LookupVmResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVmResult, error) {
			args := v.(LookupVmArgs)
			r, err := LookupVm(ctx, &args, opts...)
			var s LookupVmResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVmResultOutput)
}

// A collection of arguments for invoking getVm.
type LookupVmOutputArgs struct {
	// The block device mapping of the VM.
	BlockDeviceMappingsCreateds GetVmBlockDeviceMappingsCreatedArrayInput `pulumi:"blockDeviceMappingsCreateds"`
	BsuOptimized                pulumi.BoolPtrInput                       `pulumi:"bsuOptimized"`
	// If true, you cannot delete the VM unless you change this parameter back to false.
	DeletionProtection pulumi.BoolPtrInput `pulumi:"deletionProtection"`
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters GetVmFilterArrayInput `pulumi:"filters"`
	// The ID of the OMI used to create the VM.
	ImageId pulumi.StringPtrInput `pulumi:"imageId"`
	// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
	IsSourceDestChecked pulumi.BoolPtrInput `pulumi:"isSourceDestChecked"`
	// The name of the keypair used when launching the VM.
	KeypairName pulumi.StringPtrInput `pulumi:"keypairName"`
	// (Net only) The network interface cards (NICs) the VMs are attached to.
	Nics                   GetVmNicArrayInput    `pulumi:"nics"`
	PlacementSubregionName pulumi.StringPtrInput `pulumi:"placementSubregionName"`
	PlacementTenancy       pulumi.StringPtrInput `pulumi:"placementTenancy"`
	// The private IP or IPs of the NIC.
	PrivateIps         pulumi.StringArrayInput `pulumi:"privateIps"`
	SecurityGroupIds   pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	SecurityGroupNames pulumi.StringArrayInput `pulumi:"securityGroupNames"`
	// The ID of the Subnet for the VM.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The Base64-encoded MIME user data.
	UserData pulumi.StringPtrInput `pulumi:"userData"`
	// The ID of the VM.
	VmId pulumi.StringPtrInput `pulumi:"vmId"`
	// The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.
	VmInitiatedShutdownBehavior pulumi.StringPtrInput `pulumi:"vmInitiatedShutdownBehavior"`
	// The type of VM. For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
	VmType pulumi.StringPtrInput `pulumi:"vmType"`
}

func (LookupVmOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVmArgs)(nil)).Elem()
}

// A collection of values returned by getVm.
type LookupVmResultOutput struct{ *pulumi.OutputState }

func (LookupVmResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVmResult)(nil)).Elem()
}

func (o LookupVmResultOutput) ToLookupVmResultOutput() LookupVmResultOutput {
	return o
}

func (o LookupVmResultOutput) ToLookupVmResultOutputWithContext(ctx context.Context) LookupVmResultOutput {
	return o
}

func (o LookupVmResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupVmResult] {
	return pulumix.Output[LookupVmResult]{
		OutputState: o.OutputState,
	}
}

// The architecture of the VM (`i386` \| `x8664`).
func (o LookupVmResultOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.Architecture }).(pulumi.StringOutput)
}

// The block device mapping of the VM.
func (o LookupVmResultOutput) BlockDeviceMappingsCreateds() GetVmBlockDeviceMappingsCreatedArrayOutput {
	return o.ApplyT(func(v LookupVmResult) []GetVmBlockDeviceMappingsCreated { return v.BlockDeviceMappingsCreateds }).(GetVmBlockDeviceMappingsCreatedArrayOutput)
}

func (o LookupVmResultOutput) BsuOptimized() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVmResult) bool { return v.BsuOptimized }).(pulumi.BoolOutput)
}

// The idempotency token provided when launching the VM.
func (o LookupVmResultOutput) ClientToken() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.ClientToken }).(pulumi.StringOutput)
}

// The date and time of creation of the VM.
func (o LookupVmResultOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.CreationDate }).(pulumi.StringOutput)
}

// If true, you cannot delete the VM unless you change this parameter back to false.
func (o LookupVmResultOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVmResult) bool { return v.DeletionProtection }).(pulumi.BoolOutput)
}

func (o LookupVmResultOutput) Filters() GetVmFilterArrayOutput {
	return o.ApplyT(func(v LookupVmResult) []GetVmFilter { return v.Filters }).(GetVmFilterArrayOutput)
}

// The hypervisor type of the VMs (`ovm` \| `xen`).
func (o LookupVmResultOutput) Hypervisor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.Hypervisor }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVmResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the OMI used to create the VM.
func (o LookupVmResultOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.ImageId }).(pulumi.StringOutput)
}

// (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
func (o LookupVmResultOutput) IsSourceDestChecked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVmResult) bool { return v.IsSourceDestChecked }).(pulumi.BoolOutput)
}

// The name of the keypair used when launching the VM.
func (o LookupVmResultOutput) KeypairName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.KeypairName }).(pulumi.StringOutput)
}

// The number for the VM when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
func (o LookupVmResultOutput) LaunchNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVmResult) int { return v.LaunchNumber }).(pulumi.IntOutput)
}

// If true, nested virtualization is enabled. If false, it is disabled.
func (o LookupVmResultOutput) NestedVirtualization() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVmResult) bool { return v.NestedVirtualization }).(pulumi.BoolOutput)
}

// The ID of the Net for the NIC.
func (o LookupVmResultOutput) NetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.NetId }).(pulumi.StringOutput)
}

// (Net only) The network interface cards (NICs) the VMs are attached to.
func (o LookupVmResultOutput) Nics() GetVmNicArrayOutput {
	return o.ApplyT(func(v LookupVmResult) []GetVmNic { return v.Nics }).(GetVmNicArrayOutput)
}

// Indicates the operating system (OS) of the VM.
func (o LookupVmResultOutput) OsFamily() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.OsFamily }).(pulumi.StringOutput)
}

// The performance of the VM (`medium` \| `high` \|  `highest`).
func (o LookupVmResultOutput) Performance() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.Performance }).(pulumi.StringOutput)
}

func (o LookupVmResultOutput) PlacementSubregionName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.PlacementSubregionName }).(pulumi.StringOutput)
}

func (o LookupVmResultOutput) PlacementTenancy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.PlacementTenancy }).(pulumi.StringOutput)
}

// The name of the private DNS.
func (o LookupVmResultOutput) PrivateDnsName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.PrivateDnsName }).(pulumi.StringOutput)
}

// The primary private IP of the VM.
func (o LookupVmResultOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.PrivateIp }).(pulumi.StringOutput)
}

// The private IP or IPs of the NIC.
func (o LookupVmResultOutput) PrivateIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVmResult) []string { return v.PrivateIps }).(pulumi.StringArrayOutput)
}

// The product code associated with the OMI used to create the VM (`0001` Linux/Unix \| `0002` Windows \| `0004` Linux/Oracle \| `0005` Windows 10).
func (o LookupVmResultOutput) ProductCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVmResult) []string { return v.ProductCodes }).(pulumi.StringArrayOutput)
}

// The name of the public DNS.
func (o LookupVmResultOutput) PublicDnsName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.PublicDnsName }).(pulumi.StringOutput)
}

// The public IP of the VM.
func (o LookupVmResultOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.PublicIp }).(pulumi.StringOutput)
}

func (o LookupVmResultOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.RequestId }).(pulumi.StringOutput)
}

// The reservation ID of the VM.
func (o LookupVmResultOutput) ReservationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.ReservationId }).(pulumi.StringOutput)
}

// The name of the root device for the VM (for example, `/dev/vda1`).
func (o LookupVmResultOutput) RootDeviceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.RootDeviceName }).(pulumi.StringOutput)
}

// The type of root device used by the VM (always `bsu`).
func (o LookupVmResultOutput) RootDeviceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.RootDeviceType }).(pulumi.StringOutput)
}

func (o LookupVmResultOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVmResult) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

func (o LookupVmResultOutput) SecurityGroupNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVmResult) []string { return v.SecurityGroupNames }).(pulumi.StringArrayOutput)
}

// One or more security groups associated with the VM.
func (o LookupVmResultOutput) SecurityGroups() GetVmSecurityGroupArrayOutput {
	return o.ApplyT(func(v LookupVmResult) []GetVmSecurityGroup { return v.SecurityGroups }).(GetVmSecurityGroupArrayOutput)
}

// The state of the VM (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
func (o LookupVmResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.State }).(pulumi.StringOutput)
}

// The reason explaining the current state of the VM.
func (o LookupVmResultOutput) StateReason() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.StateReason }).(pulumi.StringOutput)
}

// The ID of the Subnet for the VM.
func (o LookupVmResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// One or more tags associated with the VM.
func (o LookupVmResultOutput) Tags() GetVmTagArrayOutput {
	return o.ApplyT(func(v LookupVmResult) []GetVmTag { return v.Tags }).(GetVmTagArrayOutput)
}

// The Base64-encoded MIME user data.
func (o LookupVmResultOutput) UserData() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.UserData }).(pulumi.StringOutput)
}

// The ID of the VM.
func (o LookupVmResultOutput) VmId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.VmId }).(pulumi.StringOutput)
}

// The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.
func (o LookupVmResultOutput) VmInitiatedShutdownBehavior() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.VmInitiatedShutdownBehavior }).(pulumi.StringOutput)
}

// The type of VM. For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
func (o LookupVmResultOutput) VmType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVmResult) string { return v.VmType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVmResultOutput{})
}
