// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package outscale

import (
	"context"
	"reflect"

	"github.com/outscale/pulumi-outscale/sdk/go/outscale/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information about a VM state.
//
// For more information on this resource, see the [User Guide](https://docs.outscale.com/en/userguide/About-Instance-Lifecycle.html).\
// For more information on this resource actions, see the [API documentation](https://docs.outscale.com/api#readvmsstate).
func GetVmState(ctx *pulumi.Context, args *GetVmStateArgs, opts ...pulumi.InvokeOption) (*GetVmStateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVmStateResult
	err := ctx.Invoke("outscale:index/getVmState:getVmState", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVmState.
type GetVmStateArgs struct {
	// If true, includes the status of all VMs. By default or if set to false, only includes the status of running VMs.
	AllVms *bool `pulumi:"allVms"`
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters []GetVmStateFilter `pulumi:"filters"`
	// The ID of the VM.
	VmId *string `pulumi:"vmId"`
}

// A collection of values returned by getVmState.
type GetVmStateResult struct {
	AllVms  *bool              `pulumi:"allVms"`
	Filters []GetVmStateFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// One or more scheduled events associated with the VM.
	MaintenanceEvents []GetVmStateMaintenanceEvent `pulumi:"maintenanceEvents"`
	RequestId         string                       `pulumi:"requestId"`
	// The name of the Subregion of the VM.
	SubregionName string `pulumi:"subregionName"`
	// The ID of the VM.
	VmId *string `pulumi:"vmId"`
	// The state of the VM (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
	VmState string `pulumi:"vmState"`
}

func GetVmStateOutput(ctx *pulumi.Context, args GetVmStateOutputArgs, opts ...pulumi.InvokeOption) GetVmStateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVmStateResult, error) {
			args := v.(GetVmStateArgs)
			r, err := GetVmState(ctx, &args, opts...)
			var s GetVmStateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetVmStateResultOutput)
}

// A collection of arguments for invoking getVmState.
type GetVmStateOutputArgs struct {
	// If true, includes the status of all VMs. By default or if set to false, only includes the status of running VMs.
	AllVms pulumi.BoolPtrInput `pulumi:"allVms"`
	// A combination of a filter name and one or more filter values. You can specify this argument for as many filter names as you need. The filter name can be any of the following:
	Filters GetVmStateFilterArrayInput `pulumi:"filters"`
	// The ID of the VM.
	VmId pulumi.StringPtrInput `pulumi:"vmId"`
}

func (GetVmStateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVmStateArgs)(nil)).Elem()
}

// A collection of values returned by getVmState.
type GetVmStateResultOutput struct{ *pulumi.OutputState }

func (GetVmStateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVmStateResult)(nil)).Elem()
}

func (o GetVmStateResultOutput) ToGetVmStateResultOutput() GetVmStateResultOutput {
	return o
}

func (o GetVmStateResultOutput) ToGetVmStateResultOutputWithContext(ctx context.Context) GetVmStateResultOutput {
	return o
}

func (o GetVmStateResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetVmStateResult] {
	return pulumix.Output[GetVmStateResult]{
		OutputState: o.OutputState,
	}
}

func (o GetVmStateResultOutput) AllVms() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetVmStateResult) *bool { return v.AllVms }).(pulumi.BoolPtrOutput)
}

func (o GetVmStateResultOutput) Filters() GetVmStateFilterArrayOutput {
	return o.ApplyT(func(v GetVmStateResult) []GetVmStateFilter { return v.Filters }).(GetVmStateFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVmStateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVmStateResult) string { return v.Id }).(pulumi.StringOutput)
}

// One or more scheduled events associated with the VM.
func (o GetVmStateResultOutput) MaintenanceEvents() GetVmStateMaintenanceEventArrayOutput {
	return o.ApplyT(func(v GetVmStateResult) []GetVmStateMaintenanceEvent { return v.MaintenanceEvents }).(GetVmStateMaintenanceEventArrayOutput)
}

func (o GetVmStateResultOutput) RequestId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVmStateResult) string { return v.RequestId }).(pulumi.StringOutput)
}

// The name of the Subregion of the VM.
func (o GetVmStateResultOutput) SubregionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetVmStateResult) string { return v.SubregionName }).(pulumi.StringOutput)
}

// The ID of the VM.
func (o GetVmStateResultOutput) VmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVmStateResult) *string { return v.VmId }).(pulumi.StringPtrOutput)
}

// The state of the VM (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
func (o GetVmStateResultOutput) VmState() pulumi.StringOutput {
	return o.ApplyT(func(v GetVmStateResult) string { return v.VmState }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVmStateResultOutput{})
}
